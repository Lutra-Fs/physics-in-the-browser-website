(function(){"use strict";function _mergeNamespaces(n,e){return e.forEach(function(t){t&&typeof t!="string"&&!Array.isArray(t)&&Object.keys(t).forEach(function(r){if(r!=="default"&&!(r in n)){var s=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(n,r,s.get?s:{enumerable:!0,get:function(){return t[r]}})}})}),Object.freeze(n)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const EPSILON_FLOAT32$2=1e-7,EPSILON_FLOAT16$2=1e-4;let DataStorage$1=class{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}},KernelBackend$1=class{refCount(e){return notYetImplemented$1("refCount")}incRef(e){return notYetImplemented$1("incRef")}timerAvailable(){return!0}time(e){return notYetImplemented$1("time")}read(e){return notYetImplemented$1("read")}readSync(e){return notYetImplemented$1("readSync")}readToGPU(e,t){return notYetImplemented$1("readToGPU")}numDataIds(){return notYetImplemented$1("numDataIds")}disposeData(e,t){return notYetImplemented$1("disposeData")}write(e,t,r){return notYetImplemented$1("write")}move(e,t,r,s,a){return notYetImplemented$1("move")}createTensorFromGPUData(e,t,r){return notYetImplemented$1("createTensorFromGPUData")}memory(){return notYetImplemented$1("memory")}floatPrecision(){return notYetImplemented$1("floatPrecision")}epsilon(){return this.floatPrecision()===32?EPSILON_FLOAT32$2:EPSILON_FLOAT16$2}dispose(){return notYetImplemented$1("dispose")}};function notYetImplemented$1(n){throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function shuffle(n){let e=n.length,t=0;for(;e>0;)t=Math.random()*e|0,e--,swap$1(n,e,t)}function clamp(n,e,t){return Math.max(n,Math.min(e,t))}function nearestLargerEven(n){return n%2===0?n:n+1}function swap$1(n,e,t){const r=n[e];n[e]=n[t],n[t]=r}function sum$5(n){let e=0;for(let t=0;t<n.length;t++)e+=n[t];return e}function assert$2(n,e){if(!n)throw new Error(typeof e=="string"?e:e())}function assertShapesMatch$1(n,e,t=""){assert$2(arraysEqual$1(n,e),()=>t+` Shapes ${n} and ${e} must match`)}function assertNonNull(n){assert$2(n!=null,()=>"The input to the tensor constructor must be a non-null value.")}function sizeFromShape$1(n){if(n.length===0)return 1;let e=n[0];for(let t=1;t<n.length;t++)e*=n[t];return e}function arraysEqualWithNull(n,e){if(n===e)return!0;if(n==null||e==null||n.length!==e.length)return!1;for(let t=0;t<n.length;t++)if(n[t]!==null&&e[t]!==null&&n[t]!==e[t])return!1;return!0}function arraysEqual$1(n,e){if(n===e)return!0;if(n==null||e==null||n.length!==e.length)return!1;for(let t=0;t<n.length;t++)if(n[t]!==e[t])return!1;return!0}function isInt$1(n){return n%1===0}function sizeToSquarishShape(n){const e=Math.ceil(Math.sqrt(n));return[e,Math.ceil(n/e)]}function rightPad$1(n,e){return e<=n.length?n:n+" ".repeat(e-n.length)}function repeatedTry(n,e=s=>0,t,r){return new Promise((s,a)=>{let i=0;const l=()=>{if(n()){s();return}i++;const u=e(i);if(t!=null&&i>=t){a();return}r!=null?r(l,u):setTimeout(l,u)};l()})}function inferFromImplicitShape$1(n,e){let t=1,r=-1;for(let a=0;a<n.length;++a)if(n[a]>=0)t*=n[a];else if(n[a]===-1){if(r!==-1)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${a}`);r=a}else if(n[a]<0)throw Error(`Shapes can not be < 0. Found ${n[a]} at dim ${a}`);if(r===-1){if(e>0&&e!==t)throw Error(`Size(${e}) must match the product of shape ${n}`);return n}if(t===0)throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);if(e%t!==0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${t}`);const s=n.slice();return s[r]=e/t,s}function parseAxisParam$1(n,e){const t=e.length;return n=n==null?e.map((r,s)=>s):[].concat(n),assert$2(n.every(r=>r>=-t&&r<t),()=>`All values in axis param must be in range [-${t}, ${t}) but got axis ${n}`),assert$2(n.every(r=>isInt$1(r)),()=>`All values in axis param must be integers but got axis ${n}`),n.map(r=>r<0?t+r:r)}function squeezeShape(n,e){const t=[],r=[],s=e!=null&&Array.isArray(e)&&e.length===0,a=e==null||s?null:parseAxisParam$1(e,n).sort();let i=0;for(let l=0;l<n.length;++l){if(a!=null){if(a[i]===l&&n[l]!==1)throw new Error(`Can't squeeze axis ${l} since its dim '${n[l]}' is not 1`);(a[i]==null||a[i]>l)&&n[l]===1&&(t.push(n[l]),r.push(l)),a[i]<=l&&i++}n[l]!==1&&(t.push(n[l]),r.push(l))}return{newShape:t,keptDims:r}}function getTypedArrayFromDType$1(n,e){return getArrayFromDType$1(n,e)}function getArrayFromDType$1(n,e){let t=null;if(n==null||n==="float32")t=new Float32Array(e);else if(n==="int32")t=new Int32Array(e);else if(n==="bool")t=new Uint8Array(e);else if(n==="string")t=new Array(e);else throw new Error(`Unknown data type ${n}`);return t}function checkConversionForErrors$1(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}function isValidDtype$1(n){return n==="bool"||n==="complex64"||n==="float32"||n==="int32"||n==="string"}function hasEncodingLoss$1(n,e){return!(e==="complex64"||e==="float32"&&n!=="complex64"||e==="int32"&&n!=="float32"&&n!=="complex64"||e==="bool"&&n==="bool")}function bytesPerElement$1(n){if(n==="float32"||n==="int32")return 4;if(n==="complex64")return 8;if(n==="bool")return 1;throw new Error(`Unknown dtype ${n}`)}function bytesFromStringArray$1(n){if(n==null)return 0;let e=0;return n.forEach(t=>e+=t.length),e}function isString$1(n){return typeof n=="string"||n instanceof String}function isBoolean$1(n){return typeof n=="boolean"}function isNumber$1(n){return typeof n=="number"}function inferDtype$1(n){return Array.isArray(n)?inferDtype$1(n[0]):n instanceof Float32Array?"float32":n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray?"int32":isNumber$1(n)?"float32":isString$1(n)?"string":isBoolean$1(n)?"bool":"float32"}function isFunction$1(n){return!!(n&&n.constructor&&n.call&&n.apply)}function nearestDivisor(n,e){for(let t=e;t<n;++t)if(n%t===0)return t;return n}function computeStrides$1(n){const e=n.length;if(e<2)return[];const t=new Array(e-1);t[e-2]=n[e-1];for(let r=e-3;r>=0;--r)t[r]=t[r+1]*n[r+1];return t}function createNestedArray$1(n,e,t,r=!1){const s=new Array;if(e.length===1){const a=e[0]*(r?2:1);for(let i=0;i<a;i++)s[i]=t[n+i]}else{const a=e[0],i=e.slice(1),l=i.reduce((u,h)=>u*h)*(r?2:1);for(let u=0;u<a;u++)s[u]=createNestedArray$1(n+u*l,i,t,r)}return s}function toNestedArray$1(n,e,t=!1){if(n.length===0)return e[0];const r=n.reduce((s,a)=>s*a)*(t?2:1);if(r===0)return[];if(r!==e.length)throw new Error(`[${n}] does not match the input size ${e.length}${t?" for a complex tensor":""}.`);return createNestedArray$1(0,n,e,t)}function convertBackendValuesAndArrayBuffer$1(n,e){if(Array.isArray(n))return n;if(e==="float32")return n instanceof Float32Array?n:new Float32Array(n);if(e==="int32")return n instanceof Int32Array?n:new Int32Array(n);if(e==="bool"||e==="string")return Uint8Array.from(new Int32Array(n));throw new Error(`Unknown dtype ${e}`)}function makeOnesTypedArray$1(n,e){const t=makeZerosTypedArray$1(n,e);for(let r=0;r<t.length;r++)t[r]=1;return t}function makeZerosTypedArray$1(n,e){if(e==null||e==="float32"||e==="complex64")return new Float32Array(n);if(e==="int32")return new Int32Array(n);if(e==="bool")return new Uint8Array(n);throw new Error(`Unknown data type ${e}`)}function makeZerosNestedTypedArray(n,e){const t=n.reduce((r,s)=>r*s,1);if(e==null||e==="float32")return toNestedArray$1(n,new Float32Array(t));if(e==="int32")return toNestedArray$1(n,new Int32Array(t));if(e==="bool")return toNestedArray$1(n,new Uint8Array(t));throw new Error(`Unknown data type ${e}`)}function assertNonNegativeIntegerDimensions$1(n){n.forEach(e=>{assert$2(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${n}].`)})}function locToIndex$1(n,e,t){if(e===0)return 0;if(e===1)return n[0];let r=n[n.length-1];for(let s=0;s<n.length-1;++s)r+=t[s]*n[s];return r}function indexToLoc$1(n,e,t){if(e===0)return[];if(e===1)return[n];const r=new Array(e);for(let s=0;s<r.length-1;++s)r[s]=Math.floor(n/t[s]),n-=r[s]*t[s];return r[r.length-1]=n,r}function isPromise$1(n){return n&&n.then&&typeof n.then=="function"}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TENSORFLOWJS_FLAGS_PREFIX$1="tfjsflags";let Environment$1=class{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=getQueryParams$1,this.populateURLFlags()}setPlatform(e,t){this.platform!=null&&(env$1().getBool("IS_TEST")||env$1().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,r){if(this.flagRegistry[e]={evaluationFn:t,setHook:r},this.urlFlags[e]!=null){const s=this.urlFlags[e];env$1().getBool("IS_TEST")||env$1().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${s}.`),this.set(e,s)}}async getAsync(e){return e in this.flags?this.flags[e]:(this.flags[e]=await this.evaluateFlag(e),this.flags[e])}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(isPromise$1(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(this.flagRegistry[e]==null)throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,this.flagRegistry[e].setHook!=null&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(this.flagRegistry[e]==null)throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;const e=this.getQueryParams(this.global.location.search);TENSORFLOWJS_FLAGS_PREFIX$1 in e&&e[TENSORFLOWJS_FLAGS_PREFIX$1].split(",").forEach(r=>{const[s,a]=r.split(":");this.urlFlags[s]=parseValue$1(s,a)})}};function getQueryParams$1(n){const e={};return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...r)=>(decodeParam$1(e,r[0],r[1]),r.join("="))),e}function decodeParam$1(n,e,t){n[decodeURIComponent(e)]=decodeURIComponent(t||"")}function parseValue$1(n,e){const t=e.toLowerCase();return t==="true"||t==="false"?t==="true":`${+t}`===t?+t:e}function env$1(){return ENV$7}let ENV$7=null;function setEnvironmentGlobal$1(n){ENV$7=n}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let globalNameSpace$1;function getGlobalNamespace$1(){if(globalNameSpace$1==null){let n;if(typeof window<"u")n=window;else if(typeof global<"u")n=global;else if(typeof process<"u")n=process;else if(typeof self<"u")n=self;else throw new Error("Could not find a global object");globalNameSpace$1=n}return globalNameSpace$1}function getGlobalMap$1(){const n=getGlobalNamespace$1();return n._tfGlobals==null&&(n._tfGlobals=new Map),n._tfGlobals}function getGlobal$1(n,e){const t=getGlobalMap$1();if(t.has(n))return t.get(n);{const r=e();return t.set(n,r),t.get(n)}}const Abs$1="Abs",Acos$1="Acos",Acosh$1="Acosh",Add$2="Add",AddN$1="AddN",All$1="All",Any$1="Any",ArgMax$1="ArgMax",ArgMin$1="ArgMin",Asin$1="Asin",Asinh$1="Asinh",Atan$1="Atan",Atanh$1="Atanh",Atan2$1="Atan2",AvgPool$1="AvgPool",AvgPoolGrad$1="AvgPoolGrad",AvgPool3D$1="AvgPool3D",AvgPool3DGrad$1="AvgPool3DGrad",BatchMatMul$1="BatchMatMul",BatchToSpaceND$1="BatchToSpaceND",Bincount$1="Bincount",BitwiseAnd="BitwiseAnd",BroadcastTo="BroadcastTo",BroadcastArgs$1="BroadcastArgs",Cast$1="Cast",Ceil$1="Ceil",ClipByValue$1="ClipByValue",Complex$1="Complex",ComplexAbs$1="ComplexAbs",Concat$1="Concat",Conv2D$2="Conv2D",Conv2DBackpropFilter$1="Conv2DBackpropFilter",Conv2DBackpropInput$1="Conv2DBackpropInput",Conv3D$2="Conv3D",Conv3DBackpropFilterV2$1="Conv3DBackpropFilterV2",Conv3DBackpropInputV2$1="Conv3DBackpropInputV2",Cos$1="Cos",Cosh$1="Cosh",Cumprod$1="Cumprod",Cumsum$1="Cumsum",CropAndResize$1="CropAndResize",DenseBincount$1="DenseBincount",DepthToSpace$1="DepthToSpace",DepthwiseConv2dNative$1="DepthwiseConv2dNative",DepthwiseConv2dNativeBackpropFilter$1="DepthwiseConv2dNativeBackpropFilter",DepthwiseConv2dNativeBackpropInput$1="DepthwiseConv2dNativeBackpropInput",Diag$1="Diag",Dilation2D$1="Dilation2D",Dilation2DBackpropInput$1="Dilation2DBackpropInput",Dilation2DBackpropFilter$1="Dilation2DBackpropFilter",Draw$1="Draw",RealDiv$1="RealDiv",Einsum$1="Einsum",Elu$2="Elu",EluGrad$1="EluGrad",Erf$1="Erf",Equal$1="Equal",Exp$1="Exp",ExpandDims$1="ExpandDims",Expm1$1="Expm1",FFT$1="FFT",Fill$1="Fill",FlipLeftRight$1="FlipLeftRight",Floor$1="Floor",FloorDiv$1="FloorDiv",FusedBatchNorm$1="FusedBatchNorm",GatherV2$1="GatherV2",GatherNd$1="GatherNd",Greater$1="Greater",GreaterEqual$1="GreaterEqual",Identity$2="Identity",IFFT$1="IFFT",Imag$1="Imag",IsFinite$1="IsFinite",IsInf$1="IsInf",IsNan$1="IsNan",LeakyRelu$1="LeakyRelu",Less$1="Less",LessEqual$1="LessEqual",LinSpace$1="LinSpace",Log$1="Log",Log1p$1="Log1p",LogicalAnd$1="LogicalAnd",LogicalNot$1="LogicalNot",LogicalOr$1="LogicalOr",LogSoftmax$1="LogSoftmax",LRN$1="LRN",LRNGrad$1="LRNGrad",Max$1="Max",Maximum$2="Maximum",MaxPool$1="MaxPool",MaxPoolGrad$1="MaxPoolGrad",MaxPool3D$1="MaxPool3D",MaxPool3DGrad$1="MaxPool3DGrad",MaxPoolWithArgmax$1="MaxPoolWithArgmax",Mean$1="Mean",Min$1="Min",Minimum$2="Minimum",MirrorPad$1="MirrorPad",Mod$1="Mod",Multinomial$1="Multinomial",Multiply$2="Multiply",Neg$1="Neg",NotEqual$1="NotEqual",NonMaxSuppressionV3$1="NonMaxSuppressionV3",NonMaxSuppressionV4="NonMaxSuppressionV4",NonMaxSuppressionV5$1="NonMaxSuppressionV5",OnesLike$1="OnesLike",OneHot$1="OneHot",Pack$1="Pack",PadV2$1="PadV2",Pow$1="Pow",Prelu$1="Prelu",Prod$1="Prod",RaggedGather="RaggedGather",RaggedRange="RaggedRange",RaggedTensorToTensor="RaggedTensorToTensor",Range$1="Range",Real$1="Real",Reciprocal$1="Reciprocal",Relu$2="Relu",Reshape$2="Reshape",ResizeNearestNeighbor$1="ResizeNearestNeighbor",ResizeNearestNeighborGrad$1="ResizeNearestNeighborGrad",ResizeBilinear$1="ResizeBilinear",ResizeBilinearGrad$1="ResizeBilinearGrad",Relu6$2="Relu6",Reverse$1="Reverse",Round$1="Round",Rsqrt$1="Rsqrt",ScatterNd$1="ScatterNd",TensorScatterUpdate$1="TensorScatterUpdate",SearchSorted$1="SearchSorted",Select$1="Select",Selu$2="Selu",Slice$1="Slice",Sin$1="Sin",Sinh$1="Sinh",Sign$1="Sign",Sigmoid$2="Sigmoid",Softplus$2="Softplus",Sqrt$1="Sqrt",Sum$1="Sum",SpaceToBatchND$1="SpaceToBatchND",SplitV$1="SplitV",Softmax$3="Softmax",SparseFillEmptyRows="SparseFillEmptyRows",SparseReshape="SparseReshape",SparseSegmentMean$1="SparseSegmentMean",SparseSegmentSum$1="SparseSegmentSum",SparseToDense$1="SparseToDense",SquaredDifference$1="SquaredDifference",Square$1="Square",StaticRegexReplace="StaticRegexReplace",StridedSlice$1="StridedSlice",StringNGrams$1="StringNGrams",StringSplit="StringSplit",StringToHashBucketFast="StringToHashBucketFast",Sub$1="Sub",Tan$1="Tan",Tanh$2="Tanh",Tile$1="Tile",TopK$1="TopK",Transform$1="Transform",Transpose$1="Transpose",Unique="Unique",Unpack$1="Unpack",UnsortedSegmentSum$1="UnsortedSegmentSum",ZerosLike$1="ZerosLike",Step$1="Step",FromPixels$1="FromPixels",RotateWithOffset$1="RotateWithOffset",_FusedMatMul$1="_FusedMatMul",FusedConv2D$1="FusedConv2D",FusedDepthwiseConv2D$1="FusedDepthwiseConv2D";/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function warn$1(...n){env$1().getBool("IS_TEST")||env$1().getBool("PROD")||console.warn(...n)}function log$4(...n){env$1().getBool("IS_TEST")||env$1().getBool("PROD")||console.log(...n)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const kernelRegistry$1=getGlobal$1("kernelRegistry",()=>new Map),gradRegistry$1=getGlobal$1("gradRegistry",()=>new Map);function getKernel$1(n,e){const t=makeKey$1(n,e);return kernelRegistry$1.get(t)}function getGradient$1(n){return gradRegistry$1.get(n)}function getKernelsForBackend$1(n){const e=kernelRegistry$1.entries(),t=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[a,i]=s,[l]=a.split("_");l===n&&t.push(i)}return t}function registerKernel$1(n){const{kernelName:e,backendName:t}=n,r=makeKey$1(e,t);kernelRegistry$1.has(r)&&warn$1(`The kernel '${e}' for backend '${t}' is already registered`),kernelRegistry$1.set(r,n)}function registerGradient(n){const{kernelName:e}=n;gradRegistry$1.has(e)&&env$1().getBool("DEBUG")&&warn$1(`Overriding the gradient for '${e}'`),gradRegistry$1.set(e,n)}function makeKey$1(n,e){return`${e}_${n}`}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isTypedArrayBrowser$1(n){return n instanceof Float32Array||n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray}var commonjsGlobal=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function getDefaultExportFromCjs(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}function getAugmentedNamespace(n){if(n.__esModule)return n;var e=n.default;if(typeof e=="function"){var t=function r(){return this instanceof r?Reflect.construct(e,arguments,this.constructor):e.apply(this,arguments)};t.prototype=e.prototype}else t={};return Object.defineProperty(t,"__esModule",{value:!0}),Object.keys(n).forEach(function(r){var s=Object.getOwnPropertyDescriptor(n,r);Object.defineProperty(t,r,s.get?s:{enumerable:!0,get:function(){return n[r]}})}),t}var long=Long$2,wasm=null;try{wasm=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(n){}function Long$2(n,e,t){this.low=n|0,this.high=e|0,this.unsigned=!!t}Long$2.prototype.__isLong__,Object.defineProperty(Long$2.prototype,"__isLong__",{value:!0});function isLong(n){return(n&&n.__isLong__)===!0}Long$2.isLong=isLong;var INT_CACHE={},UINT_CACHE={};function fromInt(n,e){var t,r,s;return e?(n>>>=0,(s=0<=n&&n<256)&&(r=UINT_CACHE[n],r)?r:(t=fromBits(n,(n|0)<0?-1:0,!0),s&&(UINT_CACHE[n]=t),t)):(n|=0,(s=-128<=n&&n<128)&&(r=INT_CACHE[n],r)?r:(t=fromBits(n,n<0?-1:0,!1),s&&(INT_CACHE[n]=t),t))}Long$2.fromInt=fromInt;function fromNumber(n,e){if(isNaN(n))return e?UZERO:ZERO;if(e){if(n<0)return UZERO;if(n>=TWO_PWR_64_DBL)return MAX_UNSIGNED_VALUE}else{if(n<=-TWO_PWR_63_DBL)return MIN_VALUE;if(n+1>=TWO_PWR_63_DBL)return MAX_VALUE}return n<0?fromNumber(-n,e).neg():fromBits(n%TWO_PWR_32_DBL|0,n/TWO_PWR_32_DBL|0,e)}Long$2.fromNumber=fromNumber;function fromBits(n,e,t){return new Long$2(n,e,t)}Long$2.fromBits=fromBits;var pow_dbl=Math.pow;function fromString(n,e,t){if(n.length===0)throw Error("empty string");if(n==="NaN"||n==="Infinity"||n==="+Infinity"||n==="-Infinity")return ZERO;if(typeof e=="number"?(t=e,e=!1):e=!!e,t=t||10,t<2||36<t)throw RangeError("radix");var r;if((r=n.indexOf("-"))>0)throw Error("interior hyphen");if(r===0)return fromString(n.substring(1),e,t).neg();for(var s=fromNumber(pow_dbl(t,8)),a=ZERO,i=0;i<n.length;i+=8){var l=Math.min(8,n.length-i),u=parseInt(n.substring(i,i+l),t);if(l<8){var h=fromNumber(pow_dbl(t,l));a=a.mul(h).add(fromNumber(u))}else a=a.mul(s),a=a.add(fromNumber(u))}return a.unsigned=e,a}Long$2.fromString=fromString;function fromValue(n,e){return typeof n=="number"?fromNumber(n,e):typeof n=="string"?fromString(n,e):fromBits(n.low,n.high,typeof e=="boolean"?e:n.unsigned)}Long$2.fromValue=fromValue;var TWO_PWR_16_DBL=65536,TWO_PWR_24_DBL=1<<24,TWO_PWR_32_DBL=TWO_PWR_16_DBL*TWO_PWR_16_DBL,TWO_PWR_64_DBL=TWO_PWR_32_DBL*TWO_PWR_32_DBL,TWO_PWR_63_DBL=TWO_PWR_64_DBL/2,TWO_PWR_24=fromInt(TWO_PWR_24_DBL),ZERO=fromInt(0);Long$2.ZERO=ZERO;var UZERO=fromInt(0,!0);Long$2.UZERO=UZERO;var ONE=fromInt(1);Long$2.ONE=ONE;var UONE=fromInt(1,!0);Long$2.UONE=UONE;var NEG_ONE=fromInt(-1);Long$2.NEG_ONE=NEG_ONE;var MAX_VALUE=fromBits(-1,2147483647,!1);Long$2.MAX_VALUE=MAX_VALUE;var MAX_UNSIGNED_VALUE=fromBits(-1,-1,!0);Long$2.MAX_UNSIGNED_VALUE=MAX_UNSIGNED_VALUE;var MIN_VALUE=fromBits(0,-2147483648,!1);Long$2.MIN_VALUE=MIN_VALUE;var LongPrototype=Long$2.prototype;LongPrototype.toInt=function(){return this.unsigned?this.low>>>0:this.low},LongPrototype.toNumber=function(){return this.unsigned?(this.high>>>0)*TWO_PWR_32_DBL+(this.low>>>0):this.high*TWO_PWR_32_DBL+(this.low>>>0)},LongPrototype.toString=function(e){if(e=e||10,e<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(MIN_VALUE)){var t=fromNumber(e),r=this.div(t),s=r.mul(t).sub(this);return r.toString(e)+s.toInt().toString(e)}else return"-"+this.neg().toString(e);for(var a=fromNumber(pow_dbl(e,6),this.unsigned),i=this,l="";;){var u=i.div(a),h=i.sub(u.mul(a)).toInt()>>>0,f=h.toString(e);if(i=u,i.isZero())return f+l;for(;f.length<6;)f="0"+f;l=""+f+l}},LongPrototype.getHighBits=function(){return this.high},LongPrototype.getHighBitsUnsigned=function(){return this.high>>>0},LongPrototype.getLowBits=function(){return this.low},LongPrototype.getLowBitsUnsigned=function(){return this.low>>>0},LongPrototype.getNumBitsAbs=function(){if(this.isNegative())return this.eq(MIN_VALUE)?64:this.neg().getNumBitsAbs();for(var e=this.high!=0?this.high:this.low,t=31;t>0&&!(e&1<<t);t--);return this.high!=0?t+33:t+1},LongPrototype.isZero=function(){return this.high===0&&this.low===0},LongPrototype.eqz=LongPrototype.isZero,LongPrototype.isNegative=function(){return!this.unsigned&&this.high<0},LongPrototype.isPositive=function(){return this.unsigned||this.high>=0},LongPrototype.isOdd=function(){return(this.low&1)===1},LongPrototype.isEven=function(){return(this.low&1)===0},LongPrototype.equals=function(e){return isLong(e)||(e=fromValue(e)),this.unsigned!==e.unsigned&&this.high>>>31===1&&e.high>>>31===1?!1:this.high===e.high&&this.low===e.low},LongPrototype.eq=LongPrototype.equals,LongPrototype.notEquals=function(e){return!this.eq(e)},LongPrototype.neq=LongPrototype.notEquals,LongPrototype.ne=LongPrototype.notEquals,LongPrototype.lessThan=function(e){return this.comp(e)<0},LongPrototype.lt=LongPrototype.lessThan,LongPrototype.lessThanOrEqual=function(e){return this.comp(e)<=0},LongPrototype.lte=LongPrototype.lessThanOrEqual,LongPrototype.le=LongPrototype.lessThanOrEqual,LongPrototype.greaterThan=function(e){return this.comp(e)>0},LongPrototype.gt=LongPrototype.greaterThan,LongPrototype.greaterThanOrEqual=function(e){return this.comp(e)>=0},LongPrototype.gte=LongPrototype.greaterThanOrEqual,LongPrototype.ge=LongPrototype.greaterThanOrEqual,LongPrototype.compare=function(e){if(isLong(e)||(e=fromValue(e)),this.eq(e))return 0;var t=this.isNegative(),r=e.isNegative();return t&&!r?-1:!t&&r?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},LongPrototype.comp=LongPrototype.compare,LongPrototype.negate=function(){return!this.unsigned&&this.eq(MIN_VALUE)?MIN_VALUE:this.not().add(ONE)},LongPrototype.neg=LongPrototype.negate,LongPrototype.add=function(e){isLong(e)||(e=fromValue(e));var t=this.high>>>16,r=this.high&65535,s=this.low>>>16,a=this.low&65535,i=e.high>>>16,l=e.high&65535,u=e.low>>>16,h=e.low&65535,f=0,c=0,o=0,d=0;return d+=a+h,o+=d>>>16,d&=65535,o+=s+u,c+=o>>>16,o&=65535,c+=r+l,f+=c>>>16,c&=65535,f+=t+i,f&=65535,fromBits(o<<16|d,f<<16|c,this.unsigned)},LongPrototype.subtract=function(e){return isLong(e)||(e=fromValue(e)),this.add(e.neg())},LongPrototype.sub=LongPrototype.subtract,LongPrototype.multiply=function(e){if(this.isZero())return ZERO;if(isLong(e)||(e=fromValue(e)),wasm){var t=wasm.mul(this.low,this.high,e.low,e.high);return fromBits(t,wasm.get_high(),this.unsigned)}if(e.isZero())return ZERO;if(this.eq(MIN_VALUE))return e.isOdd()?MIN_VALUE:ZERO;if(e.eq(MIN_VALUE))return this.isOdd()?MIN_VALUE:ZERO;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(TWO_PWR_24)&&e.lt(TWO_PWR_24))return fromNumber(this.toNumber()*e.toNumber(),this.unsigned);var r=this.high>>>16,s=this.high&65535,a=this.low>>>16,i=this.low&65535,l=e.high>>>16,u=e.high&65535,h=e.low>>>16,f=e.low&65535,c=0,o=0,d=0,m=0;return m+=i*f,d+=m>>>16,m&=65535,d+=a*f,o+=d>>>16,d&=65535,d+=i*h,o+=d>>>16,d&=65535,o+=s*f,c+=o>>>16,o&=65535,o+=a*h,c+=o>>>16,o&=65535,o+=i*u,c+=o>>>16,o&=65535,c+=r*f+s*h+a*u+i*l,c&=65535,fromBits(d<<16|m,c<<16|o,this.unsigned)},LongPrototype.mul=LongPrototype.multiply,LongPrototype.divide=function(e){if(isLong(e)||(e=fromValue(e)),e.isZero())throw Error("division by zero");if(wasm){if(!this.unsigned&&this.high===-2147483648&&e.low===-1&&e.high===-1)return this;var t=(this.unsigned?wasm.div_u:wasm.div_s)(this.low,this.high,e.low,e.high);return fromBits(t,wasm.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?UZERO:ZERO;var r,s,a;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return UZERO;if(e.gt(this.shru(1)))return UONE;a=UZERO}else{if(this.eq(MIN_VALUE)){if(e.eq(ONE)||e.eq(NEG_ONE))return MIN_VALUE;if(e.eq(MIN_VALUE))return ONE;var i=this.shr(1);return r=i.div(e).shl(1),r.eq(ZERO)?e.isNegative()?ONE:NEG_ONE:(s=this.sub(e.mul(r)),a=r.add(s.div(e)),a)}else if(e.eq(MIN_VALUE))return this.unsigned?UZERO:ZERO;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();a=ZERO}for(s=this;s.gte(e);){r=Math.max(1,Math.floor(s.toNumber()/e.toNumber()));for(var l=Math.ceil(Math.log(r)/Math.LN2),u=l<=48?1:pow_dbl(2,l-48),h=fromNumber(r),f=h.mul(e);f.isNegative()||f.gt(s);)r-=u,h=fromNumber(r,this.unsigned),f=h.mul(e);h.isZero()&&(h=ONE),a=a.add(h),s=s.sub(f)}return a},LongPrototype.div=LongPrototype.divide,LongPrototype.modulo=function(e){if(isLong(e)||(e=fromValue(e)),wasm){var t=(this.unsigned?wasm.rem_u:wasm.rem_s)(this.low,this.high,e.low,e.high);return fromBits(t,wasm.get_high(),this.unsigned)}return this.sub(this.div(e).mul(e))},LongPrototype.mod=LongPrototype.modulo,LongPrototype.rem=LongPrototype.modulo,LongPrototype.not=function(){return fromBits(~this.low,~this.high,this.unsigned)},LongPrototype.and=function(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low&e.low,this.high&e.high,this.unsigned)},LongPrototype.or=function(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low|e.low,this.high|e.high,this.unsigned)},LongPrototype.xor=function(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low^e.low,this.high^e.high,this.unsigned)},LongPrototype.shiftLeft=function(e){return isLong(e)&&(e=e.toInt()),(e&=63)===0?this:e<32?fromBits(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):fromBits(0,this.low<<e-32,this.unsigned)},LongPrototype.shl=LongPrototype.shiftLeft,LongPrototype.shiftRight=function(e){return isLong(e)&&(e=e.toInt()),(e&=63)===0?this:e<32?fromBits(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):fromBits(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},LongPrototype.shr=LongPrototype.shiftRight,LongPrototype.shiftRightUnsigned=function(e){if(isLong(e)&&(e=e.toInt()),e&=63,e===0)return this;var t=this.high;if(e<32){var r=this.low;return fromBits(r>>>e|t<<32-e,t>>>e,this.unsigned)}else return e===32?fromBits(t,0,this.unsigned):fromBits(t>>>e-32,0,this.unsigned)},LongPrototype.shru=LongPrototype.shiftRightUnsigned,LongPrototype.shr_u=LongPrototype.shiftRightUnsigned,LongPrototype.toSigned=function(){return this.unsigned?fromBits(this.low,this.high,!1):this},LongPrototype.toUnsigned=function(){return this.unsigned?this:fromBits(this.low,this.high,!0)},LongPrototype.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},LongPrototype.toBytesLE=function(){var e=this.high,t=this.low;return[t&255,t>>>8&255,t>>>16&255,t>>>24,e&255,e>>>8&255,e>>>16&255,e>>>24]},LongPrototype.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,e&255,t>>>24,t>>>16&255,t>>>8&255,t&255]},Long$2.fromBytes=function(e,t,r){return r?Long$2.fromBytesLE(e,t):Long$2.fromBytesBE(e,t)},Long$2.fromBytesLE=function(e,t){return new Long$2(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},Long$2.fromBytesBE=function(e,t){return new Long$2(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};var long$1=getDefaultExportFromCjs(long),LongExports=_mergeNamespaces({__proto__:null,default:long$1},[long]);/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const Long$1=long$1||LongExports;function hexToLong$1(n){return Long$1.fromString(n,!0,16)}const k0$1=hexToLong$1("c3a5c85c97cb3127"),k1$1=hexToLong$1("b492b66fbe98f273"),k2$1=hexToLong$1("9ae16a3b2f90404f");function shiftMix$1(n){return n.xor(n.shru(47))}function fetch$2(n,e,t){const r=n.slice(e,e+t);return Long$1.fromBytes(Array.from(r),!0,!0)}function fetch64$1(n,e){return fetch$2(n,e,8)}function fetch32$1(n,e){return fetch$2(n,e,4)}function rotate64$1(n,e){return e===0?n:n.shru(e).or(n.shl(64-e))}function hashLen16$1(n,e,t=hexToLong$1("9ddfea08eb382d69")){let r=n.xor(e).mul(t);r=r.xor(r.shru(47));let s=e.xor(r).mul(t);return s=s.xor(s.shru(47)),s=s.mul(t),s}function weakHashLen32WithSeeds$1(n,e,t,r,s,a){s=s.add(n),a=rotate64$1(a.add(s).add(r),21);const i=s;return s=s.add(e),s=s.add(t),a=a.add(rotate64$1(s,44)),[s.add(r),a.add(i)]}function weakHashLen32WithSeedsStr$1(n,e,t,r){return weakHashLen32WithSeeds$1(fetch64$1(n,e),fetch64$1(n,e+8),fetch64$1(n,e+16),fetch64$1(n,e+24),t,r)}function hashLen0to16$1(n,e=n.length){if(e>=8){const t=k2$1.add(e*2),r=fetch64$1(n,0).add(k2$1),s=fetch64$1(n,e-8),a=rotate64$1(s,37).mul(t).add(r),i=rotate64$1(r,25).add(s).mul(t);return hashLen16$1(a,i,t)}if(e>=4){const t=k2$1.add(e*2),r=fetch32$1(n,0);return hashLen16$1(r.shl(3).add(e),fetch32$1(n,e-4),t)}if(e>0){const t=n[0],r=n[e>>1],s=n[e-1],a=t+(r<<8),i=e+(s<<2);return shiftMix$1(k2$1.mul(a).xor(k0$1.mul(i))).mul(k2$1)}return k2$1}function hashLen17to32$1(n,e=n.length){const t=k2$1.add(e*2),r=fetch64$1(n,0).mul(k1$1),s=fetch64$1(n,8),a=fetch64$1(n,e-8).mul(t),i=fetch64$1(n,e-16).mul(k2$1);return hashLen16$1(rotate64$1(r.add(s),43).add(rotate64$1(a,30)).add(i),r.add(rotate64$1(s.add(k2$1),18)).add(a),t)}function hashLen33to64$1(n,e=n.length){const t=k2$1.add(e*2),r=fetch64$1(n,0).mul(k2$1),s=fetch64$1(n,8),a=fetch64$1(n,e-8).mul(t),i=fetch64$1(n,e-16).mul(k2$1),l=rotate64$1(r.add(s),43).add(rotate64$1(a,30)).add(i),u=hashLen16$1(l,r.add(rotate64$1(s.add(k2$1),18)).add(a),t),h=fetch64$1(n,16).mul(t),f=fetch64$1(n,24),c=l.add(fetch64$1(n,e-32)).mul(t),o=u.add(fetch64$1(n,e-24)).mul(t);return hashLen16$1(rotate64$1(h.add(f),43).add(rotate64$1(c,30)).add(o),h.add(rotate64$1(f.add(r),18)).add(c),t)}function fingerPrint64$1(n,e=n.length){const t=Long$1.fromNumber(81,!0);if(e<=32)return e<=16?hashLen0to16$1(n,e):hashLen17to32$1(n,e);if(e<=64)return hashLen33to64$1(n,e);let r=t,s=t.mul(k1$1).add(113),a=shiftMix$1(s.mul(k2$1).add(113)).mul(k2$1),i=[Long$1.UZERO,Long$1.UZERO],l=[Long$1.UZERO,Long$1.UZERO];r=r.mul(k2$1).add(fetch64$1(n,0));let u=0;const h=(e-1>>6)*64,f=h+(e-1&63)-63;do r=rotate64$1(r.add(s).add(i[0]).add(fetch64$1(n,u+8)),37).mul(k1$1),s=rotate64$1(s.add(i[1]).add(fetch64$1(n,u+48)),42).mul(k1$1),r=r.xor(l[1]),s=s.add(i[0]).add(fetch64$1(n,u+40)),a=rotate64$1(a.add(l[0]),33).mul(k1$1),i=weakHashLen32WithSeedsStr$1(n,u,i[1].mul(k1$1),r.add(l[0])),l=weakHashLen32WithSeedsStr$1(n,u+32,a.add(l[1]),s.add(fetch64$1(n,u+16))),[a,r]=[r,a],u+=64;while(u!==h);const c=k1$1.add(a.and(255).shl(1));return u=f,l[0]=l[0].add(e-1&63),i[0]=i[0].add(l[0]),l[0]=l[0].add(i[0]),r=rotate64$1(r.add(s).add(i[0]).add(fetch64$1(n,u+8)),37).mul(c),s=rotate64$1(s.add(i[1]).add(fetch64$1(n,u+48)),42).mul(c),r=r.xor(l[1].mul(9)),s=s.add(i[0].mul(9).add(fetch64$1(n,u+40))),a=rotate64$1(a.add(l[0]),33).mul(c),i=weakHashLen32WithSeedsStr$1(n,u,i[1].mul(c),r.add(l[0])),l=weakHashLen32WithSeedsStr$1(n,u+32,a.add(l[1]),s.add(fetch64$1(n,u+16))),[a,r]=[r,a],hashLen16$1(hashLen16$1(i[0],l[0],c).add(shiftMix$1(s).mul(k0$1)).add(a),hashLen16$1(i[1],l[1],c).add(r),c)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createScalarValue$1(n,e){return e==="string"?encodeString$1(n):toTypedArray$1([n],e)}function noConversionNeeded$1(n,e){return n instanceof Float32Array&&e==="float32"||n instanceof Int32Array&&e==="int32"||n instanceof Uint8Array&&e==="bool"}function toTypedArray$1(n,e){if(e==="string")throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(n)&&(n=flatten$2(n)),env$1().getBool("DEBUG")&&checkConversionForErrors$1(n,e),noConversionNeeded$1(n,e))return n;if(e==null||e==="float32"||e==="complex64")return new Float32Array(n);if(e==="int32")return new Int32Array(n);if(e==="bool"){const t=new Uint8Array(n.length);for(let r=0;r<t.length;++r)Math.round(n[r])!==0&&(t[r]=1);return t}else throw new Error(`Unknown data type ${e}`)}function now$1(){return env$1().platform.now()}function encodeString$1(n,e="utf-8"){return e=e||"utf-8",env$1().platform.encode(n,e)}function decodeString$1(n,e="utf-8"){return e=e||"utf-8",env$1().platform.decode(n,e)}function isTypedArray$1(n){return env$1().platform.isTypedArray!=null?env$1().platform.isTypedArray(n):isTypedArrayBrowser$1(n)}function flatten$2(n,e=[],t=!1){if(e==null&&(e=[]),typeof n=="boolean"||typeof n=="number"||typeof n=="string"||isPromise$1(n)||n==null||isTypedArray$1(n)&&t)e.push(n);else if(Array.isArray(n)||isTypedArray$1(n))for(let r=0;r<n.length;++r)flatten$2(n[r],e,t);else{let r=-1;for(const s of Object.keys(n))/^([1-9]+[0-9]*|0)$/.test(s)&&(r=Math.max(r,Number(s)));for(let s=0;s<=r;s++)flatten$2(n[s],e,t)}return e}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let Profiler$1=class{constructor(e,t){this.backendTimer=e,this.logger=t,t==null&&(this.logger=new Logger$1)}profileKernel(e,t,r){let s;const a=()=>{s=r()};let i;const l=now$1();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(a);else{a();for(const h of s)h.dataSync();i=Promise.resolve({kernelMs:now$1()-l})}if(env$1().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let h=0;h<s.length;h++){const f=s[h];f.data().then(c=>{checkComputationForErrors$1(c,f.dtype,e)})}return{kernelName:e,outputs:s,inputs:t,timeMs:i.then(h=>h.kernelMs),extraInfo:i.then(h=>h.getExtraProfileInfo!=null?h.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:r,timeMs:s,inputs:a,extraInfo:i}=e;r.forEach(l=>{Promise.all([l.data(),s,i]).then(u=>{this.logger.logKernelProfile(t,l,u[0],u[1],a,u[2])})})}};function checkComputationForErrors$1(n,e,t){if(e!=="float32")return!1;for(let r=0;r<n.length;r++){const s=n[r];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${t}'`),!0}return!1}let Logger$1=class{logKernelProfile(e,t,r,s,a,i){const l=typeof s=="number"?rightPad$1(`${s}ms`,9):s.error,u=rightPad$1(e,25),h=t.rank,f=t.size,c=rightPad$1(t.shape.toString(),14);let o="";for(const d in a){const m=a[d];if(m!=null){const g=m.shape||t.shape,y=g.length;o+=`${d}: ${y}D ${y>0?g:""} `}}console.log(`%c${u}	%c${l}	%c${h}D ${c}	%c${f}	%c${o}	%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getFilteredNodesXToY$1(n,e,t){const r={},s={};for(let u=0;u<e.length;u++)r[e[u].id]=!0;for(let u=0;u<n.length;u++){const h=n[u],f=h.inputs;for(const c in f){const o=f[c];let d=!1;for(let m=0;m<e.length;m++)if(r[o.id]){h.outputs.forEach(g=>r[g.id]=!0),d=!0,s[h.id]=!0;break}if(d)break}}const a={};a[t.id]=!0;const i={};for(let u=n.length-1;u>=0;u--){const h=n[u],f=h.inputs;for(let c=0;c<h.outputs.length;c++)if(a[h.outputs[c].id]){for(const o in f)a[f[o].id]=!0,i[h.id]=!0;break}}const l=[];for(let u=0;u<n.length;u++){const h=n[u];if(s[h.id]&&i[h.id]){const f={};for(const o in h.inputs){const d=h.inputs[o];r[d.id]&&(f[o]=d)}const c=Object.assign({},h);c.inputs=f,c.outputs=h.outputs,l.push(c)}}return l}function backpropagateGradients$1(n,e,t,r){for(let s=e.length-1;s>=0;s--){const a=e[s],i=[];if(a.outputs.forEach(u=>{const h=n[u.id];h!=null?i.push(h):i.push(null)}),a.gradient==null)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const l=a.gradient(i);for(const u in a.inputs){if(!(u in l))throw new Error(`Cannot backprop through input ${u}. Available gradients found: ${Object.keys(l)}.`);const h=t(()=>l[u]());if(h.dtype!=="float32")throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${u} must have 'float32' dtype, but has '${h.dtype}'`);const f=a.inputs[u];if(!arraysEqual$1(h.shape,f.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${u}' has shape '${h.shape}', which does not match the shape of the input '${f.shape}'`);if(n[f.id]==null)n[f.id]=h;else{const c=n[f.id];n[f.id]=r(c,h),c.dispose()}}}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const FORMAT_LIMIT_NUM_VALS$1=20,FORMAT_NUM_FIRST_LAST_VALS$1=3,FORMAT_NUM_SIG_DIGITS$1=7;function tensorToString$1(n,e,t,r){const s=computeStrides$1(e),a=computeMaxSizePerColumn$1(n,e,t,s),i=e.length,l=subTensorToString$1(n,e,t,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${t}`),u.push(`  rank: ${i}`),u.push(`  shape: [${e}]`),u.push("  values:")),u.push(l.map(h=>"    "+h).join(`
`)),u.join(`
`)}function computeMaxSizePerColumn$1(n,e,t,r){const s=sizeFromShape$1(e),a=r[r.length-1],i=new Array(a).fill(0),l=e.length,u=t==="complex64"?createComplexTuples$1(n):n;if(l>1)for(let h=0;h<s/a;h++){const f=h*a;for(let c=0;c<a;c++)i[c]=Math.max(i[c],valToString$1(u[f+c],0,t).length)}return i}function valToString$1(n,e,t){let r;return Array.isArray(n)?r=`${parseFloat(n[0].toFixed(FORMAT_NUM_SIG_DIGITS$1))} + ${parseFloat(n[1].toFixed(FORMAT_NUM_SIG_DIGITS$1))}j`:isString$1(n)?r=`'${n}'`:t==="bool"?r=boolNumToString$1(n):r=parseFloat(n.toFixed(FORMAT_NUM_SIG_DIGITS$1)).toString(),rightPad$1(r,e)}function boolNumToString$1(n){return n===0?"false":"true"}function subTensorToString$1(n,e,t,r,s,a=!0){const i=t==="complex64"?2:1,l=e[0],u=e.length;if(u===0){if(t==="complex64"){const g=createComplexTuples$1(n);return[valToString$1(g[0],0,t)]}return t==="bool"?[boolNumToString$1(n[0])]:[n[0].toString()]}if(u===1){if(l>FORMAT_LIMIT_NUM_VALS$1){const y=FORMAT_NUM_FIRST_LAST_VALS$1*i;let $=Array.from(n.slice(0,y)),b=Array.from(n.slice((l-FORMAT_NUM_FIRST_LAST_VALS$1)*i,l*i));return t==="complex64"&&($=createComplexTuples$1($),b=createComplexTuples$1(b)),["["+$.map((x,w)=>valToString$1(x,s[w],t)).join(", ")+", ..., "+b.map((x,w)=>valToString$1(x,s[l-FORMAT_NUM_FIRST_LAST_VALS$1+w],t)).join(", ")+"]"]}return["["+(t==="complex64"?createComplexTuples$1(n):Array.from(n)).map((y,$)=>valToString$1(y,s[$],t)).join(", ")+"]"]}const h=e.slice(1),f=r.slice(1),c=r[0]*i,o=[];if(l>FORMAT_LIMIT_NUM_VALS$1){for(let g=0;g<FORMAT_NUM_FIRST_LAST_VALS$1;g++){const y=g*c,$=y+c;o.push(...subTensorToString$1(n.slice(y,$),h,t,f,s,!1))}o.push("...");for(let g=l-FORMAT_NUM_FIRST_LAST_VALS$1;g<l;g++){const y=g*c,$=y+c;o.push(...subTensorToString$1(n.slice(y,$),h,t,f,s,g===l-1))}}else for(let g=0;g<l;g++){const y=g*c,$=y+c;o.push(...subTensorToString$1(n.slice(y,$),h,t,f,s,g===l-1))}const d=u===2?",":"";o[0]="["+(l>0?o[0]+d:"");for(let g=1;g<o.length-1;g++)o[g]=" "+o[g]+d;let m=`,
`;for(let g=2;g<u;g++)m+=`
`;return o[o.length-1]=" "+o[o.length-1]+"]"+(a?"":m),o}function createComplexTuples$1(n){const e=[];for(let t=0;t<n.length;t+=2)e.push([n[t],n[t+1]]);return e}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let TensorBuffer$1=class{constructor(e,t,r){if(this.dtype=t,this.shape=e.slice(),this.size=sizeFromShape$1(e),r!=null){const s=r.length;assert$2(s===this.size,()=>`Length of values '${s}' does not match the size inferred by the shape '${this.size}'.`)}if(t==="complex64")throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=r||getArrayFromDType$1(t,this.size),this.strides=computeStrides$1(e)}set(e,...t){t.length===0&&(t=[0]),assert$2(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const r=this.locToIndex(t);this.values[r]=e}get(...e){e.length===0&&(e=[0]);let t=0;for(const s of e){if(s<0||s>=this.shape[t]){const a=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(a)}t++}let r=e[e.length-1];for(let s=0;s<e.length-1;++s)r+=this.strides[s]*e[s];return this.values[r]}locToIndex(e){if(this.rank===0)return 0;if(this.rank===1)return e[0];let t=e[e.length-1];for(let r=0;r<e.length-1;++r)t+=this.strides[r]*e[r];return t}indexToLoc(e){if(this.rank===0)return[];if(this.rank===1)return[e];const t=new Array(this.shape.length);for(let r=0;r<t.length-1;++r)t[r]=Math.floor(e/this.strides[r]),e-=t[r]*this.strides[r];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return trackerFn$1().makeTensor(this.values,this.shape,this.dtype)}},trackerFn$1=null,opHandler$3=null;function setTensorTracker$1(n){trackerFn$1=n}function setOpHandler$1(n){opHandler$3=n}let Tensor$1=class{constructor(e,t,r,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=sizeFromShape$1(e),this.strides=computeStrides$1(e),this.dataId=r,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return opHandler$3.buffer(this.shape,this.dtype,e)}bufferSync(){return opHandler$3.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return toNestedArray$1(this.shape,e,this.dtype==="complex64")}arraySync(){return toNestedArray$1(this.shape,this.dataSync(),this.dtype==="complex64")}async data(){this.throwIfDisposed();const e=trackerFn$1().read(this.dataId);if(this.dtype==="string"){const t=await e;try{return t.map(r=>decodeString$1(r))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),trackerFn$1().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=trackerFn$1().readSync(this.dataId);if(this.dtype==="string")try{return e.map(t=>decodeString$1(t))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await trackerFn$1().read(this.dataId);return this.dtype==="string"?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),trackerFn$1().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return opHandler$3.print(this,e)}clone(){return this.throwIfDisposed(),opHandler$3.clone(this)}toString(e=!1){const t=this.dataSync();return tensorToString$1(t,this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),opHandler$3.cast(this,e)}variable(e=!0,t,r){return this.throwIfDisposed(),trackerFn$1().makeVariable(this,e,t,r)}};Object.defineProperty(Tensor$1,Symbol.hasInstance,{value:n=>!!n&&n.data!=null&&n.dataSync!=null&&n.throwIfDisposed!=null});function getGlobalTensorClass$1(){return getGlobal$1("Tensor",()=>Tensor$1)}getGlobalTensorClass$1();let Variable$1=class extends Tensor$1{constructor(e,t,r,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=r}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!arraysEqual$1(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);trackerFn$1().disposeTensor(this),this.dataId=e.dataId,trackerFn$1().incRef(this,null)}dispose(){trackerFn$1().disposeVariable(this),this.isDisposedInternal=!0}};Object.defineProperty(Variable$1,Symbol.hasInstance,{value:n=>n instanceof Tensor$1&&n.assign!=null&&n.assign instanceof Function});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var Rank$1;(function(n){n.R0="R0",n.R1="R1",n.R2="R2",n.R3="R3",n.R4="R4",n.R5="R5",n.R6="R6"})(Rank$1||(Rank$1={}));var UpcastInt32AndMap$1;(function(n){n.float32="float32",n.int32="int32",n.bool="int32",n.complex64="complex64"})(UpcastInt32AndMap$1||(UpcastInt32AndMap$1={}));var UpcastBoolAndMap$1;(function(n){n.float32="float32",n.int32="int32",n.bool="bool",n.complex64="complex64"})(UpcastBoolAndMap$1||(UpcastBoolAndMap$1={}));var UpcastFloat32AndMap$1;(function(n){n.float32="float32",n.int32="float32",n.bool="float32",n.complex64="complex64"})(UpcastFloat32AndMap$1||(UpcastFloat32AndMap$1={}));var UpcastComplex64AndMap$1;(function(n){n.float32="complex64",n.int32="complex64",n.bool="complex64",n.complex64="complex64"})(UpcastComplex64AndMap$1||(UpcastComplex64AndMap$1={}));const upcastTypeMap$1={float32:UpcastFloat32AndMap$1,int32:UpcastInt32AndMap$1,bool:UpcastBoolAndMap$1,complex64:UpcastComplex64AndMap$1};function upcastType$1(n,e){if(n==="string"||e==="string"){if(n==="string"&&e==="string")return"string";throw new Error(`Can not upcast ${n} with ${e}`)}return upcastTypeMap$1[n][e]}function sumOutType$1(n){return upcastType$1(n,"int32")}function isWebGLData$1(n){return n!=null&&typeof n=="object"&&"texture"in n&&n.texture instanceof WebGLTexture}function isWebGPUData$1(n){return typeof GPUBuffer<"u"&&n!=null&&typeof n=="object"&&"buffer"in n&&n.buffer instanceof GPUBuffer}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeTypesMatch$1(n,e){if(n.dtype===e.dtype)return[n,e];const t=upcastType$1(n.dtype,e.dtype);return[n.cast(t),e.cast(t)]}function assertTypesMatch(n,e){assert$2(n.dtype===e.dtype,()=>`The dtypes of the first(${n.dtype}) and second(${e.dtype}) input must match`)}function getTensorsInContainer$1(n){const e=[];return walkTensorContainer$1(n,e,new Set),e}function walkTensorContainer$1(n,e,t){if(n==null)return;if(n instanceof Tensor$1){e.push(n);return}if(!isIterable$1(n))return;const r=n;for(const s in r){const a=r[s];t.has(a)||(t.add(a),walkTensorContainer$1(a,e,t))}}function isIterable$1(n){return Array.isArray(n)||typeof n=="object"}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isRegisteredKernelInvocation$1(n){return n.kernelName!=null}let EngineState$1=class{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}},Engine$1=class Mt{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new EngineState$1}async ready(){if(this.pendingBackendInit!=null)return this.pendingBackendInit.then(()=>{});if(this.backendInstance!=null)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const r=e[t];if(await this.initializeBackend(r).success){await this.setBackend(r);return}}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(this.pendingBackendInit!=null)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(this.backendInstance==null){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry))if(e in this.registryFactory){const{asyncInit:t}=this.initializeBackend(e);if(t)return null}else return null;return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,r=1){return e in this.registryFactory?(warn$1(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:r},!0)}async setBackend(e){if(this.registryFactory[e]==null)throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,this.registry[e]==null){this.backendInstance=null;const{success:t,asyncInit:r}=this.initializeBackend(e);if(!(r?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Profiler$1(this.backendInstance),!0}setupRegisteredKernels(){getKernelsForBackend$1(this.backendName).forEach(t=>{t.setupFunc!=null&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){getKernelsForBackend$1(e).forEach(r=>{r.disposeFunc!=null&&r.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(t==null)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const r=t.factory();if(r&&!(r instanceof KernelBackend$1)&&typeof r.then=="function"){const s=++this.pendingBackendInitId,a=r.then(i=>s<this.pendingBackendInitId?!1:(this.registry[e]=i,this.pendingBackendInit=null,!0)).catch(i=>(s<this.pendingBackendInitId||(this.pendingBackendInit=null,warn$1(`Initialization of backend ${e} failed`),warn$1(i.stack||i.message)),!1));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}else return this.registry[e]=r,{success:!0,asyncInit:!1}}catch(r){return warn$1(`Initialization of backend ${e} failed`),warn$1(r.stack||r.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&this.pendingBackendInit!=null&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(Object.keys(this.registryFactory).length===0)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const r=e[t],{success:s,asyncInit:a}=this.initializeBackend(r);if(a||s)return{name:r,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const r=this.state.tensorInfo.get(t),s=r.backend,a=this.readSync(t),i=s.refCount(t);s.disposeData(t,!0),r.backend=e,e.move(t,a,r.shape,r.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let r=null;if(t==null){if(typeof e!="function")throw new Error("Please provide a function to tidy()");t=e}else{if(typeof e!="string"&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if(typeof t!="function")throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}let s;return this.scopedRun(()=>this.startScope(r),()=>this.endScope(s),()=>(s=t(),s instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),s))}scopedRun(e,t,r){e();try{const s=r();return t(),s}catch(s){throw t(),s}}nextTensorId(){return Mt.nextTensorId++}nextVariableId(){return Mt.nextVariableId++}clone(e){const t=ENGINE$1.runKernel(Identity$2,{x:e}),r={x:e},s=i=>({x:()=>{const l="float32",u={x:i},h={dtype:l};return ENGINE$1.runKernel(Cast$1,u,h)}}),a=[];return this.addTapeNode(this.state.activeScope.name,r,[t],s,a,{}),t}runKernel(e,t,r){if(this.backendName==null&&this.backend,!(getKernel$1(e,this.backendName)!=null))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:r})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,r){const s=this.backend.numDataIds();let a=0;r.forEach(u=>{a+=u.dtype==="complex64"?3:1});const i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],l=s-t-a-i;if(l>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${l} data ids) after running '${e}'`)}runKernelFunc(e){let t,r=[];const s=this.isTapeOn(),a=this.state.numBytes,i=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);let l;this.backendName==null&&this.backend;let u;const h=isRegisteredKernelInvocation$1(e)?e.kernelName:this.state.activeScope!=null?this.state.activeScope.name:"";if(isRegisteredKernelInvocation$1(e)){const{kernelName:m,inputs:g,attrs:y}=e;this.backendName==null&&this.backend;const $=getKernel$1(m,this.backendName);assert$2($!=null,()=>`Cannot find registered kernel '${m}' for backend '${this.backendName}'`),l=()=>{const b=this.backend.numDataIds();u=$.kernelFunc({inputs:g,attrs:y,backend:this.backend});const x=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(m,b,x);const w=x.map(v=>v.rank!=null?v:this.makeTensorFromTensorInfo(v));if(s){const v=this.getTensorsForGradient(m,g,w);r=this.saveTensorsForBackwardMode(v)}return w}}else{const{forwardFunc:m}=e,g=y=>{s&&(r=y.map($=>this.keep(this.clone($))))};l=()=>{const y=this.backend.numDataIds();u=this.tidy(()=>m(this.backend,g));const $=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(h,y,$),$}}const{inputs:f,attrs:c}=e,o=isRegisteredKernelInvocation$1(e)?null:e.backwardsFunc;let d;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{!this.ENV.getBool("DEBUG")&&!this.state.profiling?t=l():(d=this.profiler.profileKernel(h,f,()=>l()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs)}),s&&this.addTapeNode(h,f,t,o,r,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:h,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(f).map(m=>f[m]!=null?f[m].shape:null),outputShapes:t.map(m=>m.shape),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(u)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(r=>this.keep(this.clone(r)))}getTensorsForGradient(e,t,r){const s=getGradient$1(e);if(s!=null){const a=s.inputsToSave||[],i=s.outputsToSave||[];let l;s.saveAllInputs?(assert$2(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),l=Object.keys(t).map(h=>t[h])):l=a.map(h=>t[h]);const u=r.filter((h,f)=>i[f]);return l.concat(u)}return[]}makeTensor(e,t,r,s){if(e==null)throw new Error("Values passed to engine.makeTensor() are null");r=r||"float32",s=s||this.backend;let a=e;r==="string"&&isString$1(e[0])&&(a=e.map(u=>encodeString$1(u)));const i=s.write(a,t,r),l=new Tensor$1(t,r,i,this.nextTensorId());if(this.trackTensor(l,s),r==="string"){const u=this.state.tensorInfo.get(i),h=bytesFromStringArray$1(a);this.state.numBytes+=h-u.bytes,u.bytes=h}return l}makeTensorFromDataId(e,t,r,s){r=r||"float32";const a={dataId:e,shape:t,dtype:r};return this.makeTensorFromTensorInfo(a,s)}makeTensorFromTensorInfo(e,t){const{dataId:r,shape:s,dtype:a}=e,i=new Tensor$1(s,a,r,this.nextTensorId());return this.trackTensor(i,t),i}makeVariable(e,t=!0,r,s){r=r||this.nextVariableId().toString(),s!=null&&s!==e.dtype&&(e=e.cast(s));const a=new Variable$1(e,t,r,this.nextTensorId());if(this.state.registeredVariables[a.name]!=null)throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,e.dtype==="string"&&this.state.numStringTensors++;let r=0;e.dtype!=="complex64"&&e.dtype!=="string"&&(r=e.size*bytesPerElement$1(e.dtype)),this.state.numBytes+=r,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:r})),e instanceof Variable$1||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,e.dtype==="string"&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),e.dtype!=="complex64"&&e.dtype!=="string"){const r=e.size*bytesPerElement$1(e.dtype);this.state.numBytes-=r}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),this.state.registeredVariables[e.name]!=null&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,e.reasons==null&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,r=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(s=>s.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-r;for(const s of this.state.activeProfile.kernels)s.kernelTimeMs=await s.kernelTimeMs,s.extraInfo=await s.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0}addTapeNode(e,t,r,s,a,i){const l={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:r,saved:a},u=getGradient$1(e);u!=null&&(s=u.gradFunc),s!=null&&(l.gradient=h=>(h=h.map((f,c)=>{if(f==null){const o=r[c],d=makeZerosTypedArray$1(o.size,o.dtype);return this.makeTensor(d,o.shape,o.dtype)}return f}),s(h.length>1?h:h[0],a,i))),this.state.activeTape.push(l)}keep(e){return e.kept=!0,e}startTape(){this.state.gradientDepth===0&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=getTensorsInContainer$1(e),r=new Set(t.map(a=>a.id));for(let a=0;a<this.state.activeScope.track.length;a++){const i=this.state.activeScope.track[a];!i.kept&&!r.has(i.id)&&i.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(a=>{!a.kept&&a.scopeId===s.id&&this.track(a)})}gradients(e,t,r,s=!1){if(assert$2(t.length>0,()=>"gradients() received an empty list of xs."),r!=null&&r.dtype!=="float32")throw new Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);const a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));assert$2(a instanceof Tensor$1,()=>"The result y returned by f() must be a tensor.");const i=getFilteredNodesXToY$1(this.state.activeTape,t,a);if(!s&&i.length===0&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const l={};l[a.id]=r??ones$2(a.shape),backpropagateGradients$1(l,i,h=>this.tidy(h),add$4);const u=t.map(h=>l[h.id]);return this.state.gradientDepth===0&&(this.state.activeTape.forEach(h=>{for(const f of h.saved)f.dispose()}),this.state.activeTape=null),{value:a,grads:u}})}customGrad(e){return assert$2(isFunction$1(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{assert$2(t.every(l=>l instanceof Tensor$1),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let r;const s={};t.forEach((l,u)=>{s[u]=l});const a=(l,u)=>(r=e(...t,u),assert$2(r.value instanceof Tensor$1,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),assert$2(isFunction$1(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),i=(l,u)=>{const h=r.gradFunc(l,u),f=Array.isArray(h)?h:[h];assert$2(f.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),assert$2(f.every(o=>o instanceof Tensor$1),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const c={};return f.forEach((o,d)=>{c[d]=()=>o}),c};return this.runKernelFunc({forwardFunc:a,backwardsFunc:i,inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=now$1(),r=await this.backend.time(e);return r.wallMs=now$1()-t,r}track(e){return this.state.activeScope!=null&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new EngineState$1;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}};Engine$1.nextTensorId=0,Engine$1.nextVariableId=0;function ones$2(n){const e=makeOnesTypedArray$1(sizeFromShape$1(n),"float32");return ENGINE$1.makeTensor(e,n,"float32")}function getOrMakeEngine$1(){const n=getGlobalNamespace$1();if(n._tfengine==null){const e=new Environment$1(n);n._tfengine=new Engine$1(e)}return setEnvironmentGlobal$1(n._tfengine.ENV),setTensorTracker$1(()=>n._tfengine),n._tfengine}const ENGINE$1=getOrMakeEngine$1();function add$4(n,e){const t={a:n,b:e};return ENGINE$1.runKernel(Add$2,t)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function _isNavigatorDefined(){return typeof navigator<"u"&&navigator!=null}function isMobile(n){if(n||_isNavigatorDefined()){if(n||(n=navigator),n.product==="ReactNative")return!0;const e=n.userAgent||n.vendor||(typeof window<"u"?window.opera:"");if(!e){const t=n;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function isBrowser$1(){return typeof window<"u"&&window.document!=null||typeof WorkerGlobalScope<"u"}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV$6=env$1();ENV$6.registerFlag("DEBUG",()=>!1,n=>{n&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),ENV$6.registerFlag("IS_BROWSER",()=>isBrowser$1()),ENV$6.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"),ENV$6.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),ENV$6.registerFlag("IS_SAFARI",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),ENV$6.registerFlag("PROD",()=>!1),ENV$6.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>ENV$6.getBool("DEBUG")),ENV$6.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),ENV$6.registerFlag("IS_TEST",()=>!1),ENV$6.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>ENV$6.getBool("DEBUG")),ENV$6.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),ENV$6.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),ENV$6.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function inferShape$1(n,e){let t=n;if(isTypedArray$1(n))return e==="string"?[]:[n.length];if(isWebGLData$1(n)){const s=n.channels||"RGBA";return[n.height,n.width*s.length]}else if(isWebGPUData$1(n))return[n.buffer.size/(e==null?4:bytesPerElement$1(e))];if(!Array.isArray(n))return[];const r=[];for(;Array.isArray(t)||isTypedArray$1(t)&&e!=="string";)r.push(t.length),t=t[0];return Array.isArray(n)&&env$1().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&deepAssertShapeConsistency$1(n,r,[]),r}function deepAssertShapeConsistency$1(n,e,t){if(t=t||[],!Array.isArray(n)&&!isTypedArray$1(n)){assert$2(e.length===0,()=>`Element arr[${t.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`);return}assert$2(e.length>0,()=>`Element arr[${t.join("][")}] should be a primitive, but is an array of ${n.length} elements`),assert$2(n.length===e[0],()=>`Element arr[${t.join("][")}] should have ${e[0]} elements, but has ${n.length} elements`);const r=e.slice(1);for(let s=0;s<n.length;++s)deepAssertShapeConsistency$1(n[s],r,t.concat(s))}function assertDtype$1(n,e,t,r){if(n!=="string_or_numeric"){if(n==null)throw new Error("Expected dtype cannot be null.");if(n!=="numeric"&&n!==e||n==="numeric"&&e==="string")throw new Error(`Argument '${t}' passed to '${r}' must be ${n} tensor, but got ${e} tensor`)}}function convertToTensor$1(n,e,t,r="numeric"){if(n instanceof Tensor$1)return assertDtype$1(r,n.dtype,e,t),n;let s=inferDtype$1(n);if(s!=="string"&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),assertDtype$1(r,s,e,t),n==null||!isTypedArray$1(n)&&!Array.isArray(n)&&typeof n!="number"&&typeof n!="boolean"&&typeof n!="string"){const u=n==null?"null":n.constructor.name;throw new Error(`Argument '${e}' passed to '${t}' must be a Tensor or TensorLike, but got '${u}'`)}const a=inferShape$1(n,s);!isTypedArray$1(n)&&!Array.isArray(n)&&(n=[n]);const l=s!=="string"?toTypedArray$1(n,s):flatten$2(n,[],!0);return ENGINE$1.makeTensor(l,a,s)}function convertToTensorArray(n,e,t,r="numeric"){if(!Array.isArray(n))throw new Error(`Argument ${e} passed to ${t} must be a \`Tensor[]\` or \`TensorLike[]\``);return n.map((a,i)=>convertToTensor$1(a,`${e}[${i}]`,t,r))}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const OP_SCOPE_SUFFIX$1="__op";function op$1(n){const e=Object.keys(n);if(e.length!==1)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);let t=e[0];const r=n[t];t.endsWith("_")&&(t=t.substring(0,t.length-1)),t=t+OP_SCOPE_SUFFIX$1;const s=(...a)=>{ENGINE$1.startScope(t);try{const i=r(...a);return isPromise$1(i)&&console.error("Cannot return a Promise inside of tidy."),ENGINE$1.endScope(i),i}catch(i){throw ENGINE$1.endScope(null),i}};return Object.defineProperty(s,"name",{value:t,configurable:!0}),s}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function complex_$1(n,e){const t=convertToTensor$1(n,"real","complex"),r=convertToTensor$1(e,"imag","complex");assertShapesMatch$1(t.shape,r.shape,`real and imag shapes, ${t.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:t,imag:r};return ENGINE$1.runKernel(Complex$1,s)}const complex$4=op$1({complex_:complex_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeTensor$1(n,e,t,r){if(r==null)r=inferDtype$1(n);else if(r==="complex64")throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(isWebGPUData$1(n)||isWebGLData$1(n)){if(r!=="float32"&&r!=="int32")throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${r}.`);return ENGINE$1.backend.createTensorFromGPUData(n,e||t,r)}if(!isTypedArray$1(n)&&!Array.isArray(n)&&typeof n!="number"&&typeof n!="boolean"&&typeof n!="string")throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(e!=null){assertNonNegativeIntegerDimensions$1(e);const s=sizeFromShape$1(e),a=sizeFromShape$1(t);assert$2(s===a,()=>`Based on the provided shape, [${e}], the tensor should have ${s} values but has ${a}`);for(let i=0;i<t.length;++i){const l=t[i],u=i===t.length-1?l!==sizeFromShape$1(e.slice(i)):!0;assert$2(t[i]===e[i]||!u,()=>`Error creating a new Tensor. Inferred shape (${t}) does not match the provided shape (${e}). `)}}return!isTypedArray$1(n)&&!Array.isArray(n)&&(n=[n]),e=e||t,n=r!=="string"?toTypedArray$1(n,r):flatten$2(n,[],!0),ENGINE$1.makeTensor(n,e,r)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor(n,e,t){const r=inferShape$1(n,t);return makeTensor$1(n,e,r,t)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const DTYPE_VALUE_SIZE_MAP={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};let CompositeArrayBuffer$1=class pn{static join(e){return new pn(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,e==null||(e instanceof Array||(e=[e]),e=e.map(r=>isTypedArray$1(r)?r.buffer:r),e.length===0))return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let r=0;r<e.length;r++){const s=e[r];r!==e.length-1&&s.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const a=t+s.byteLength;this.shards.push({buffer:s,start:t,end:a}),t=a}this.shards.length===0&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(this.shards.length===0)return new ArrayBuffer(0);if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),t=Math.min(this.byteLength,t),t<=e)return new ArrayBuffer(0);const r=this.findShardForByte(e);if(r===-1)throw new Error(`Could not find start shard for byte ${e}`);const s=t-e,a=new ArrayBuffer(s),i=new Uint8Array(a);let l=0;for(let u=r;u<this.shards.length;u++){const h=this.shards[u],c=e+l-h.start,o=l,m=Math.min(t,h.end)-h.start,g=new Uint8Array(h.buffer,c,m-c);if(i.set(g,o),l+=g.length,t<h.end)break}return a}findShardForByte(e){if(this.shards.length===0||e<0||e>=this.byteLength)return-1;if(this.bufferUniformSize!=null)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(s){return e<s.start?-1:e>=s.end?1:0}if(t(this.shards[this.previousShardIndex])===0)return this.previousShardIndex;const r=search$1(this.shards,t);return r===-1?-1:(this.previousShardIndex=r,this.previousShardIndex)}};function search$1(n,e){let t=0,r=n.length;for(;t<=r;){const s=Math.floor((r-t)/2)+t,a=e(n[s]);if(a===0)return s;a<0?r=s:t=s+1}return-1}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NUM_BYTES_STRING_LENGTH=4;async function encodeWeights(n,e){const t=[],r=[],s=Array.isArray(n)?n.map(i=>i.name):Object.keys(n);for(let i=0;i<s.length;++i){const l=s[i],u=Array.isArray(n)?n[i].tensor:n[l];if(u.dtype!=="float32"&&u.dtype!=="int32"&&u.dtype!=="bool"&&u.dtype!=="string"&&u.dtype!=="complex64")throw new Error(`Unsupported dtype in weight '${l}': ${u.dtype}`);const h={name:l,shape:u.shape,dtype:u.dtype};if(u.dtype==="string"){const f=new Promise(async c=>{const o=await u.bytes(),d=o.reduce((y,$)=>y+$.length,0)+NUM_BYTES_STRING_LENGTH*o.length,m=new Uint8Array(d);let g=0;for(let y=0;y<o.length;y++){const $=o[y],b=new Uint8Array(new Uint32Array([$.length]).buffer);m.set(b,g),g+=NUM_BYTES_STRING_LENGTH,m.set($,g),g+=$.length}c(m)});r.push(f)}else r.push(u.data());e!=null&&(h.group=e),t.push(h)}const a=await Promise.all(r);return{data:concatenateTypedArrays(a),specs:t}}function decodeWeights(n,e){const t=new CompositeArrayBuffer$1(n),r={};let s,a=0;for(const i of e){const l=i.name,u=i.dtype,h=i.shape,f=sizeFromShape$1(h);let c;if("quantization"in i){const o=i.quantization;if(o.dtype==="uint8"||o.dtype==="uint16"){if(!("min"in o&&"scale"in o))throw new Error(`Weight ${i.name} with quantization ${o.dtype} doesn't have corresponding metadata min and scale.`)}else if(o.dtype==="float16"){if(u!=="float32")throw new Error(`Weight ${i.name} is quantized with ${o.dtype} which only supports weights of type float32 not ${u}.`)}else throw new Error(`Weight ${i.name} has unknown quantization dtype ${o.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);const d=DTYPE_VALUE_SIZE_MAP[o.dtype],m=t.slice(a,a+f*d),g=o.dtype==="uint8"?new Uint8Array(m):new Uint16Array(m);if(u==="float32")if(o.dtype==="uint8"||o.dtype==="uint16"){c=new Float32Array(g.length);for(let y=0;y<g.length;y++){const $=g[y];c[y]=$*o.scale+o.min}}else if(o.dtype==="float16")s===void 0&&(s=getFloat16Decoder()),c=s(g);else throw new Error(`Unsupported quantization type ${o.dtype} for weight type float32.`);else if(u==="int32"){if(o.dtype!=="uint8"&&o.dtype!=="uint16")throw new Error(`Unsupported quantization type ${o.dtype} for weight type int32.`);c=new Int32Array(g.length);for(let y=0;y<g.length;y++){const $=g[y];c[y]=Math.round($*o.scale+o.min)}}else throw new Error(`Unsupported dtype in weight '${l}': ${u}`);a+=f*d}else if(u==="string"){const o=sizeFromShape$1(i.shape);c=[];for(let d=0;d<o;d++){const m=new Uint32Array(t.slice(a,a+NUM_BYTES_STRING_LENGTH))[0];a+=NUM_BYTES_STRING_LENGTH;const g=new Uint8Array(t.slice(a,a+m));c.push(g),a+=m}}else{const o=DTYPE_VALUE_SIZE_MAP[u],d=t.slice(a,a+f*o);if(u==="float32")c=new Float32Array(d);else if(u==="int32")c=new Int32Array(d);else if(u==="bool")c=new Uint8Array(d);else if(u==="complex64"){c=new Float32Array(d);const m=new Float32Array(c.length/2),g=new Float32Array(c.length/2);for(let b=0;b<m.length;b++)m[b]=c[b*2],g[b]=c[b*2+1];const y=tensor(m,h,"float32"),$=tensor(g,h,"float32");r[l]=complex$4(y,$),y.dispose(),$.dispose()}else throw new Error(`Unsupported dtype in weight '${l}': ${u}`);a+=f*o}u!=="complex64"&&(r[l]=tensor(c,h,u))}return r}function concatenateTypedArrays(n){if(n===null)throw new Error(`Invalid input value: ${JSON.stringify(n)}`);let e=0;const t=[];n.forEach(a=>{if(e+=a.byteLength,t.push(a.byteLength===a.buffer.byteLength?a:new a.constructor(a)),!(a instanceof Float32Array||a instanceof Int32Array||a instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${a.constructor.name}`)});const r=new Uint8Array(e);let s=0;return t.forEach(a=>{r.set(new Uint8Array(a.buffer),s),s+=a.byteLength}),r.buffer}const useNodeBuffer$1=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function stringByteLength$1(n){return useNodeBuffer$1?Buffer.byteLength(n,"utf8"):new Blob([n]).size}function arrayBufferToBase64String$1(n){if(useNodeBuffer$1)return Buffer.from(n).toString("base64");const e=new Uint8Array(n);let t="";for(let r=0,s=e.length;r<s;r++)t+=String.fromCharCode(e[r]);return btoa(t)}function base64StringToArrayBuffer$1(n){if(useNodeBuffer$1){const r=Buffer.from(n,"base64");return r.buffer.slice(r.byteOffset,r.byteOffset+r.byteLength)}const e=atob(n),t=new Uint8Array(e.length);for(let r=0;r<e.length;++r)t.set([e.charCodeAt(r)],r);return t.buffer}function concatenateArrayBuffers(n){return CompositeArrayBuffer$1.join(n)}function basename(n){const e="/";for(n=n.trim();n.endsWith(e);)n=n.slice(0,n.length-1);const t=n.split(e);return t[t.length-1]}function getModelJSONForModelArtifacts(n,e){const t={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy,weightsManifest:e};return n.signature!=null&&(t.signature=n.signature),n.userDefinedMetadata!=null&&(t.userDefinedMetadata=n.userDefinedMetadata),n.modelInitializer!=null&&(t.modelInitializer=n.modelInitializer),n.initializerSignature!=null&&(t.initializerSignature=n.initializerSignature),n.trainingConfig!=null&&(t.trainingConfig=n.trainingConfig),t}function getModelArtifactsForJSONSync(n,e,t){const r={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy};if(n.trainingConfig!=null&&(r.trainingConfig=n.trainingConfig),n.weightsManifest!=null){if(!e)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!t)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=e,r.weightData=t}return n.signature!=null&&(r.signature=n.signature),n.userDefinedMetadata!=null&&(r.userDefinedMetadata=n.userDefinedMetadata),n.modelInitializer!=null&&(r.modelInitializer=n.modelInitializer),n.initializerSignature!=null&&(r.initializerSignature=n.initializerSignature),r}async function getModelArtifactsForJSON(n,e){let t,r;return n.weightsManifest!=null&&([t,r]=await e(n.weightsManifest)),getModelArtifactsForJSONSync(n,t,r)}function getModelArtifactsInfoForJSON$1(n){if(n.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:n.modelTopology==null?0:stringByteLength$1(JSON.stringify(n.modelTopology)),weightSpecsBytes:n.weightSpecs==null?0:stringByteLength$1(JSON.stringify(n.weightSpecs)),weightDataBytes:n.weightData==null?0:new CompositeArrayBuffer$1(n.weightData).byteLength}}function getWeightSpecs(n){const e=[];for(const t of n)e.push(...t.weights);return e}function computeFloat16MantisaTable(){const n=t=>{let r=t<<13,s=0;for(;!(r&8388608);)s-=8388608,r<<=1;return r&=-8388609,s+=947912704,r|s},e=new Uint32Array(2048);e[0]=0;for(let t=1;t<1024;t++)e[t]=n(t);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}function computeFloat16ExponentTable(){const n=new Uint32Array(64);n[0]=0,n[31]=1199570944,n[32]=2147483648,n[63]=3347054592;for(let e=1;e<31;e++)n[e]=e<<23;for(let e=33;e<63;e++)n[e]=2147483648+(e-32<<23);return n}function computeFloat16OffsetTable(){const n=new Uint32Array(64);for(let e=0;e<64;e++)n[e]=1024;return n[0]=n[32]=0,n}function getFloat16Decoder(){const n=computeFloat16MantisaTable(),e=computeFloat16ExponentTable(),t=computeFloat16OffsetTable();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let i=0;i<r.length;i++){const l=r[i],u=n[t[l>>10]+(l&1023)]+e[l>>10];a[i]=u}return new Float32Array(s)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let IORouterRegistry$1=class Ke{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return Ke.instance==null&&(Ke.instance=new Ke),Ke.instance}static registerSaveRouter(e){Ke.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Ke.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Ke.getHandlers(e,"save")}static getLoadHandlers(e,t){return Ke.getHandlers(e,"load",t)}static getHandlers(e,t,r){const s=[];return(t==="load"?Ke.getInstance().loadRouters:Ke.getInstance().saveRouters).forEach(i=>{const l=i(e,r);l!==null&&s.push(l)}),s}};const registerSaveRouter=n=>IORouterRegistry$1.registerSaveRouter(n),registerLoadRouter=n=>IORouterRegistry$1.registerLoadRouter(n),getSaveHandlers=n=>IORouterRegistry$1.getSaveHandlers(n),getLoadHandlers=(n,e)=>IORouterRegistry$1.getLoadHandlers(n,e);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const DATABASE_NAME$1="tensorflowjs",DATABASE_VERSION$1=1,MODEL_STORE_NAME$1="models_store",INFO_STORE_NAME$1="model_info_store";function getIndexedDBFactory$1(){if(!env$1().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const n=typeof window>"u"?self:window,e=n.indexedDB||n.mozIndexedDB||n.webkitIndexedDB||n.msIndexedDB||n.shimIndexedDB;if(e==null)throw new Error("The current browser does not appear to support IndexedDB.");return e}function setUpDatabase$1(n){const e=n.result;e.createObjectStore(MODEL_STORE_NAME$1,{keyPath:"modelPath"}),e.createObjectStore(INFO_STORE_NAME$1,{keyPath:"modelPath"})}let BrowserIndexedDB$1=class{constructor(e){if(this.indexedDB=getIndexedDBFactory$1(),e==null||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((r,s)=>{const a=this.indexedDB.open(DATABASE_NAME$1,DATABASE_VERSION$1);a.onupgradeneeded=()=>setUpDatabase$1(a),a.onsuccess=()=>{const i=a.result;if(t==null){const l=i.transaction(MODEL_STORE_NAME$1,"readonly"),h=l.objectStore(MODEL_STORE_NAME$1).get(this.modelPath);h.onsuccess=()=>{if(h.result==null)return i.close(),s(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));r(h.result.modelArtifacts)},h.onerror=f=>(i.close(),s(h.error)),l.oncomplete=()=>i.close()}else{t.weightData=CompositeArrayBuffer$1.join(t.weightData);const l=getModelArtifactsInfoForJSON$1(t),u=i.transaction(INFO_STORE_NAME$1,"readwrite");let h=u.objectStore(INFO_STORE_NAME$1),f;try{f=h.put({modelPath:this.modelPath,modelArtifactsInfo:l})}catch(o){return s(o)}let c;f.onsuccess=()=>{c=i.transaction(MODEL_STORE_NAME$1,"readwrite");const o=c.objectStore(MODEL_STORE_NAME$1);let d;try{d=o.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:l})}catch(m){return s(m)}d.onsuccess=()=>r({modelArtifactsInfo:l}),d.onerror=m=>{h=u.objectStore(INFO_STORE_NAME$1);const g=h.delete(this.modelPath);g.onsuccess=()=>(i.close(),s(d.error)),g.onerror=y=>(i.close(),s(d.error))}},f.onerror=o=>(i.close(),s(f.error)),u.oncomplete=()=>{c==null?i.close():c.oncomplete=()=>i.close()}}},a.onerror=i=>s(a.error)})}};BrowserIndexedDB$1.URL_SCHEME="indexeddb://";const indexedDBRouter$1=n=>env$1().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(BrowserIndexedDB$1.URL_SCHEME)?browserIndexedDB$1(n.slice(BrowserIndexedDB$1.URL_SCHEME.length)):null;IORouterRegistry$1.registerSaveRouter(indexedDBRouter$1),IORouterRegistry$1.registerLoadRouter(indexedDBRouter$1);function browserIndexedDB$1(n){return new BrowserIndexedDB$1(n)}function maybeStripScheme$3(n){return n.startsWith(BrowserIndexedDB$1.URL_SCHEME)?n.slice(BrowserIndexedDB$1.URL_SCHEME.length):n}let BrowserIndexedDBManager$1=class{constructor(){this.indexedDB=getIndexedDBFactory$1()}async listModels(){return new Promise((e,t)=>{const r=this.indexedDB.open(DATABASE_NAME$1,DATABASE_VERSION$1);r.onupgradeneeded=()=>setUpDatabase$1(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(INFO_STORE_NAME$1,"readonly"),l=a.objectStore(INFO_STORE_NAME$1).getAll();l.onsuccess=()=>{const u={};for(const h of l.result)u[h.modelPath]=h.modelArtifactsInfo;e(u)},l.onerror=u=>(s.close(),t(l.error)),a.oncomplete=()=>s.close()},r.onerror=s=>t(r.error)})}async removeModel(e){return e=maybeStripScheme$3(e),new Promise((t,r)=>{const s=this.indexedDB.open(DATABASE_NAME$1,DATABASE_VERSION$1);s.onupgradeneeded=()=>setUpDatabase$1(s),s.onsuccess=()=>{const a=s.result,i=a.transaction(INFO_STORE_NAME$1,"readwrite"),l=i.objectStore(INFO_STORE_NAME$1),u=l.get(e);let h;u.onsuccess=()=>{if(u.result==null)return a.close(),r(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const f=l.delete(e),c=()=>{h=a.transaction(MODEL_STORE_NAME$1,"readwrite");const d=h.objectStore(MODEL_STORE_NAME$1).delete(e);d.onsuccess=()=>t(u.result.modelArtifactsInfo),d.onerror=m=>r(u.error)};f.onsuccess=c,f.onerror=o=>(c(),a.close(),r(u.error))}},u.onerror=f=>(a.close(),r(u.error)),i.oncomplete=()=>{h==null?a.close():h.oncomplete=()=>a.close()}},s.onerror=a=>r(s.error)})}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PATH_SEPARATOR$1="/",PATH_PREFIX$1="tensorflowjs_models",INFO_SUFFIX$1="info",MODEL_TOPOLOGY_SUFFIX$1="model_topology",WEIGHT_SPECS_SUFFIX$1="weight_specs",WEIGHT_DATA_SUFFIX$1="weight_data",MODEL_METADATA_SUFFIX$1="model_metadata";function getModelKeys$1(n){return{info:[PATH_PREFIX$1,n,INFO_SUFFIX$1].join(PATH_SEPARATOR$1),topology:[PATH_PREFIX$1,n,MODEL_TOPOLOGY_SUFFIX$1].join(PATH_SEPARATOR$1),weightSpecs:[PATH_PREFIX$1,n,WEIGHT_SPECS_SUFFIX$1].join(PATH_SEPARATOR$1),weightData:[PATH_PREFIX$1,n,WEIGHT_DATA_SUFFIX$1].join(PATH_SEPARATOR$1),modelMetadata:[PATH_PREFIX$1,n,MODEL_METADATA_SUFFIX$1].join(PATH_SEPARATOR$1)}}function removeItems$1(n){for(const e of Object.values(n))window.localStorage.removeItem(e)}function getModelPathFromKey$1(n){const e=n.split(PATH_SEPARATOR$1);if(e.length<3)throw new Error(`Invalid key format: ${n}`);return e.slice(1,e.length-1).join(PATH_SEPARATOR$1)}function maybeStripScheme$2(n){return n.startsWith(BrowserLocalStorage$1.URL_SCHEME)?n.slice(BrowserLocalStorage$1.URL_SCHEME.length):n}let BrowserLocalStorage$1=class{constructor(e){if(!env$1().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,e==null||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=getModelKeys$1(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),r=JSON.stringify(e.weightSpecs),s=getModelArtifactsInfoForJSON$1(e),a=CompositeArrayBuffer$1.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,r),this.LS.setItem(this.keys.weightData,arrayBufferToBase64String$1(a));const i={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:e.signature!=null?e.signature:void 0,userDefinedMetadata:e.userDefinedMetadata!=null?e.userDefinedMetadata:void 0,modelInitializer:e.modelInitializer!=null?e.modelInitializer:void 0,initializerSignature:e.initializerSignature!=null?e.initializerSignature:void 0,trainingConfig:e.trainingConfig!=null?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(i)),{modelArtifactsInfo:s}}catch{throw removeItems$1(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(e==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(e.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},r=JSON.parse(this.LS.getItem(this.keys.topology));if(r==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=r;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(s==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const a=this.LS.getItem(this.keys.modelMetadata);if(a!=null){const l=JSON.parse(a);t.format=l.format,t.generatedBy=l.generatedBy,t.convertedBy=l.convertedBy,l.signature!=null&&(t.signature=l.signature),l.userDefinedMetadata!=null&&(t.userDefinedMetadata=l.userDefinedMetadata),l.modelInitializer!=null&&(t.modelInitializer=l.modelInitializer),l.initializerSignature!=null&&(t.initializerSignature=l.initializerSignature),l.trainingConfig!=null&&(t.trainingConfig=l.trainingConfig)}const i=this.LS.getItem(this.keys.weightData);if(i==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=base64StringToArrayBuffer$1(i),t}};BrowserLocalStorage$1.URL_SCHEME="localstorage://";const localStorageRouter$1=n=>env$1().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(BrowserLocalStorage$1.URL_SCHEME)?browserLocalStorage$1(n.slice(BrowserLocalStorage$1.URL_SCHEME.length)):null;IORouterRegistry$1.registerSaveRouter(localStorageRouter$1),IORouterRegistry$1.registerLoadRouter(localStorageRouter$1);function browserLocalStorage$1(n){return new BrowserLocalStorage$1(n)}let BrowserLocalStorageManager$1=class{constructor(){assert$2(env$1().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),assert$2(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=PATH_PREFIX$1+PATH_SEPARATOR$1,r=PATH_SEPARATOR$1+INFO_SUFFIX$1;for(let s=0;s<this.LS.length;++s){const a=this.LS.key(s);if(a.startsWith(t)&&a.endsWith(r)){const i=getModelPathFromKey$1(a);e[i]=JSON.parse(this.LS.getItem(a))}}return e}async removeModel(e){e=maybeStripScheme$2(e);const t=getModelKeys$1(e);if(this.LS.getItem(t.info)==null)throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(t.info));return removeItems$1(t),r}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const URL_SCHEME_SUFFIX$1="://";let ModelStoreManagerRegistry$1=class st{constructor(){this.managers={}}static getInstance(){return st.instance==null&&(st.instance=new st),st.instance}static registerManager(e,t){assert$2(e!=null,()=>"scheme must not be undefined or null."),e.endsWith(URL_SCHEME_SUFFIX$1)&&(e=e.slice(0,e.indexOf(URL_SCHEME_SUFFIX$1))),assert$2(e.length>0,()=>"scheme must not be an empty string.");const r=st.getInstance();assert$2(r.managers[e]==null,()=>`A model store manager is already registered for scheme '${e}'.`),r.managers[e]=t}static getManager(e){const t=st.getInstance().managers[e];if(t==null)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(st.getInstance().managers)}};function parseURL(n){if(n.indexOf(URL_SCHEME_SUFFIX$1)===-1)throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ModelStoreManagerRegistry$1.getSchemes().join(",")}`);return{scheme:n.split(URL_SCHEME_SUFFIX$1)[0],path:n.split(URL_SCHEME_SUFFIX$1)[1]}}async function cloneModelInternal(n,e,t=!1){assert$2(n!==e,()=>`Old path and new path are the same: '${n}'`);const r=IORouterRegistry$1.getLoadHandlers(n);assert$2(r.length>0,()=>`Copying failed because no load handler is found for source URL ${n}.`),assert$2(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${n}.`);const s=r[0],a=IORouterRegistry$1.getSaveHandlers(e);assert$2(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${e}.`),assert$2(a.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${e}.`);const i=a[0],l=parseURL(n).scheme,u=parseURL(n).path,h=l===parseURL(n).scheme,f=await s.load();t&&h&&await ModelStoreManagerRegistry$1.getManager(l).removeModel(u);const c=await i.save(f);return t&&!h&&await ModelStoreManagerRegistry$1.getManager(l).removeModel(u),c.modelArtifactsInfo}async function listModels(){const n=ModelStoreManagerRegistry$1.getSchemes(),e={};for(const t of n){const r=await ModelStoreManagerRegistry$1.getManager(t).listModels();for(const s in r){const a=t+URL_SCHEME_SUFFIX$1+s;e[a]=r[s]}}return e}async function removeModel(n){const e=parseURL(n);return ModelStoreManagerRegistry$1.getManager(e.scheme).removeModel(e.path)}async function copyModel(n,e){return cloneModelInternal(n,e,!1)}async function moveModel(n,e){return cloneModelInternal(n,e,!0)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let PlatformBrowser$1=class{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if(t!=="utf-8"&&t!=="utf8")throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return this.textEncoder==null&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){if(typeof window>"u"||!env$1().getBool("USE_SETTIMEOUTCUSTOM")){setTimeout(e,t);return}this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",r=>{if(r.source===window&&r.data.name===this.messageName){r.stopPropagation();const s=this.functionRefs[r.data.index];s(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}},!0))}isTypedArray(e){return isTypedArrayBrowser$1(e)}};if(env$1().get("IS_BROWSER")){env$1().setPlatform("browser",new PlatformBrowser$1);try{ModelStoreManagerRegistry$1.registerManager(BrowserLocalStorage$1.URL_SCHEME,new BrowserLocalStorageManager$1)}catch{}try{ModelStoreManagerRegistry$1.registerManager(BrowserIndexedDB$1.URL_SCHEME,new BrowserIndexedDBManager$1)}catch{}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const getNodeFetch$1={importFetch:()=>require("node-fetch")};let systemFetch$1,PlatformNode$1=class{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return env$1().global.fetch!=null?env$1().global.fetch(e,t):(systemFetch$1==null&&(systemFetch$1=getNodeFetch$1.importFetch()),systemFetch$1(e,t))}now(){const e=process.hrtime();return e[0]*1e3+e[1]/1e6}encode(e,t){if(t!=="utf-8"&&t!=="utf8")throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return e.length===0?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}};env$1().get("IS_NODE")&&!env$1().get("IS_BROWSER")&&env$1().setPlatform("node",new PlatformNode$1);/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function buffer$1(n,e="float32",t){return e=e||"float32",assertNonNegativeIntegerDimensions$1(n),new TensorBuffer$1(n,e,t)}/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cast_$1(n,e){const t=convertToTensor$1(n,"x","cast");if(!isValidDtype$1(e))throw new Error(`Failed to cast to unknown dtype ${e}`);if(e==="string"&&t.dtype!=="string"||e!=="string"&&t.dtype==="string")throw new Error("Only strings can be casted to strings");const r={x:t},s={dtype:e};return ENGINE$1.runKernel(Cast$1,r,s)}const cast$5=op$1({cast_:cast_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function clone_$1(n){const t={x:convertToTensor$1(n,"x","clone","string_or_numeric")};return ENGINE$1.runKernel(Identity$2,t)}const clone$1=op$1({clone_:clone_$1});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function print$1(n,e=!1){console.log(n.toString(e))}/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getOrMakeEngine$1();const opHandler$2={buffer:buffer$1,cast:cast$5,clone:clone$1,print:print$1};setOpHandler$1(opHandler$2);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function engine$1(){return ENGINE$1}function memory(){return ENGINE$1.memory()}function tidy$1(n,e){return ENGINE$1.tidy(n,e)}function dispose$1(n){getTensorsInContainer$1(n).forEach(t=>t.dispose())}function keep$1(n){return ENGINE$1.keep(n)}function setBackend(n){return ENGINE$1.setBackend(n)}function registerBackend$1(n,e,t=1){return ENGINE$1.registerBackend(n,e,t)}function backend(){return ENGINE$1.backend}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function add_$1(n,e){let t=convertToTensor$1(n,"a","add"),r=convertToTensor$1(e,"b","add");[t,r]=makeTypesMatch$1(t,r);const s={a:t,b:r};return ENGINE$1.runKernel(Add$2,s)}const add$3=op$1({add_:add_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function floorDiv_$1(n,e){let t=convertToTensor$1(n,"a","floorDiv"),r=convertToTensor$1(e,"b","floorDiv");[t,r]=makeTypesMatch$1(t,r);const s={a:t,b:r};return ENGINE$1.runKernel(FloorDiv$1,s)}const floorDiv$4=op$1({floorDiv_:floorDiv_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function div_$1(n,e){let t=convertToTensor$1(n,"a","div"),r=convertToTensor$1(e,"b","div");if([t,r]=makeTypesMatch$1(t,r),t.dtype==="int32"&&r.dtype==="int32")return floorDiv$4(t,r);const s={a:t,b:r},a={};return ENGINE$1.runKernel(RealDiv$1,s,a)}const div$2=op$1({div_:div_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mul_$1(n,e){let t=convertToTensor$1(n,"a","mul"),r=convertToTensor$1(e,"b","mul");[t,r]=makeTypesMatch$1(t,r);const s={a:t,b:r};return ENGINE$1.runKernel(Multiply$2,s)}const mul$1=op$1({mul_:mul_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function abs_$1(n){const e=convertToTensor$1(n,"x","abs");if(e.dtype==="complex64"){const t={x:e};return ENGINE$1.runKernel(ComplexAbs$1,t)}else{const t={x:e};return ENGINE$1.runKernel(Abs$1,t)}}const abs$4=op$1({abs_:abs_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function acos_(n){const t={x:convertToTensor$1(n,"x","acos")};return ENGINE$1.runKernel(Acos$1,t)}const acos$3=op$1({acos_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function acosh_(n){const t={x:convertToTensor$1(n,"x","acosh")};return ENGINE$1.runKernel(Acosh$1,t)}const acosh$3=op$1({acosh_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function addN_(n){assert$2(Array.isArray(n),()=>"The argument passed to tf.addN() must be a list of tensors"),assert$2(n.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${n.length}`);const e=n.map((s,a)=>convertToTensor$1(s,`tensors${a}`,"addN")),t=e[0];e.forEach(s=>{if(s.dtype!==t.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(s=>{if(!arraysEqual$1(s.shape,t.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const r=e;return ENGINE$1.runKernel(AddN$1,r)}const addN$3=op$1({addN_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function all_(n,e=null,t=!1){const s={x:convertToTensor$1(n,"x","all","bool")},a={axis:e,keepDims:t};return ENGINE$1.runKernel(All$1,s,a)}const all$3=op$1({all_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function any_(n,e=null,t=!1){const s={x:convertToTensor$1(n,"x","any","bool")},a={axis:e,keepDims:t};return ENGINE$1.runKernel(Any$1,s,a)}const any$3=op$1({any_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMax_(n,e=0){const r={x:convertToTensor$1(n,"x","argMax")},s={axis:e};return ENGINE$1.runKernel(ArgMax$1,r,s)}const argMax$3=op$1({argMax_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMin_(n,e=0){const r={x:convertToTensor$1(n,"x","argMin")},s={axis:e};return ENGINE$1.runKernel(ArgMin$1,r,s)}const argMin$3=op$1({argMin_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function asin_(n){const t={x:convertToTensor$1(n,"x","asin")};return ENGINE$1.runKernel(Asin$1,t)}const asin$3=op$1({asin_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function asinh_(n){const t={x:convertToTensor$1(n,"x","asinh")};return ENGINE$1.runKernel(Asinh$1,t)}const asinh$3=op$1({asinh_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function atan_(n){const t={x:convertToTensor$1(n,"x","atan")};return ENGINE$1.runKernel(Atan$1,t)}const atan$3=op$1({atan_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function atan2_(n,e){let t=convertToTensor$1(n,"a","atan2"),r=convertToTensor$1(e,"b","atan2");[t,r]=makeTypesMatch$1(t,r);const s={a:t,b:r};return ENGINE$1.runKernel(Atan2$1,s)}const atan2$3=op$1({atan2_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function atanh_(n){const t={x:convertToTensor$1(n,"x","atanh")};return ENGINE$1.runKernel(Atanh$1,t)}const atanh$3=op$1({atanh_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function computeDilation2DInfo$1(n,e,t,r,s="NHWC",a){const i=n[3],l=[...e,i],u=convertConv2DDataFormat$1(s);return computeConv2DInfo$1(n,l,t,a,r,null,null,u)}function computePool2DInfo$1(n,e,t,r,s,a,i="channelsLast"){const[l,u]=parseTupleParam$1(e);let h;if(i==="channelsLast")h=[l,u,n[3],n[3]];else if(i==="channelsFirst")h=[l,u,n[1],n[1]];else throw new Error(`Unknown dataFormat ${i}`);return computeConv2DInfo$1(n,h,t,r,s,a,!1,i)}function computePool3DInfo$1(n,e,t,r,s,a,i="NDHWC"){const[l,u,h]=parse3TupleParam$1(e);let f,c;if(i==="NDHWC")c="channelsLast",f=[l,u,h,n[4],n[4]];else if(i==="NCDHW")c="channelsFirst",f=[l,u,h,n[1],n[1]];else throw new Error(`Unknown dataFormat ${i}`);return computeConv3DInfo$1(n,f,t,r,s,!1,c,a)}function computeConv2DInfo$1(n,e,t,r,s,a,i=!1,l="channelsLast"){let[u,h,f,c]=[-1,-1,-1,-1];if(l==="channelsLast")[u,h,f,c]=n;else if(l==="channelsFirst")[u,c,h,f]=n;else throw new Error(`Unknown dataFormat ${l}`);const[o,d,,m]=e,[g,y]=parseTupleParam$1(t),[$,b]=parseTupleParam$1(r),x=getEffectiveFilterSize$1(o,$),w=getEffectiveFilterSize$1(d,b),{padInfo:v,outHeight:S,outWidth:T}=getPadAndOutInfo$1(s,h,f,g,y,x,w,a,l),C=i?m*c:m;let I;return l==="channelsFirst"?I=[u,C,S,T]:l==="channelsLast"&&(I=[u,S,T,C]),{batchSize:u,dataFormat:l,inHeight:h,inWidth:f,inChannels:c,outHeight:S,outWidth:T,outChannels:C,padInfo:v,strideHeight:g,strideWidth:y,filterHeight:o,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:$,dilationWidth:b,inShape:n,outShape:I,filterShape:e}}function computeConv3DInfo$1(n,e,t,r,s,a=!1,i="channelsLast",l){let[u,h,f,c,o]=[-1,-1,-1,-1,-1];if(i==="channelsLast")[u,h,f,c,o]=n;else if(i==="channelsFirst")[u,o,h,f,c]=n;else throw new Error(`Unknown dataFormat ${i}`);const[d,m,g,,y]=e,[$,b,x]=parse3TupleParam$1(t),[w,v,S]=parse3TupleParam$1(r),T=getEffectiveFilterSize$1(d,w),C=getEffectiveFilterSize$1(m,v),I=getEffectiveFilterSize$1(g,S),{padInfo:N,outDepth:P,outHeight:F,outWidth:_}=get3DPadAndOutInfo$1(s,h,f,c,$,b,x,T,C,I,l),D=a?y*o:y;let E;return i==="channelsFirst"?E=[u,D,P,F,_]:i==="channelsLast"&&(E=[u,P,F,_,D]),{batchSize:u,dataFormat:i,inDepth:h,inHeight:f,inWidth:c,inChannels:o,outDepth:P,outHeight:F,outWidth:_,outChannels:D,padInfo:N,strideDepth:$,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:m,filterWidth:g,effectiveFilterDepth:T,effectiveFilterHeight:C,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:v,dilationWidth:S,inShape:n,outShape:E,filterShape:e}}function computeOutputShape2D$1(n,e,t,r,s){r==null&&(r=computeDefaultPad$1(n,e,t));const a=n[0],i=n[1],l=round$5((a-e+2*r)/t+1,s),u=round$5((i-e+2*r)/t+1,s);return[l,u]}function computeOutputShape4D$1(n,e,t,r,s,a){s==null&&(s=computeDefaultPad$1(n,e[0],r[0]));const i=[0,0,0,t];for(let l=0;l<3;l++)n[l]+2*s>=e[l]&&(i[l]=round$5((n[l]-e[l]+2*s)/r[l]+1,a));return i}function computeDefaultPad$1(n,e,t,r=1){const s=getEffectiveFilterSize$1(e,r);return Math.floor((n[0]*(t-1)-t+s)/2)}function parseTupleParam$1(n){return typeof n=="number"?[n,n,n]:n.length===2?[n[0],n[1],1]:n}function parse3TupleParam$1(n){return typeof n=="number"?[n,n,n]:n}function getEffectiveFilterSize$1(n,e){return e<=1?n:n+(n-1)*(e-1)}function getPadAndOutInfo$1(n,e,t,r,s,a,i,l,u){let h,f,c;if(typeof n=="number"){h={top:n,bottom:n,left:n,right:n,type:n===0?"VALID":"NUMBER"};const d=computeOutputShape2D$1([e,t],a,r,n,l);f=d[0],c=d[1]}else if(n==="same"){f=Math.ceil(e/r),c=Math.ceil(t/s);const o=Math.max(0,(f-1)*r+a-e),d=Math.max(0,(c-1)*s+i-t),m=Math.floor(o/2),g=o-m,y=Math.floor(d/2),$=d-y;h={top:m,bottom:g,left:y,right:$,type:"SAME"}}else if(n==="valid")h={top:0,bottom:0,left:0,right:0,type:"VALID"},f=Math.ceil((e-a+1)/r),c=Math.ceil((t-i+1)/s);else if(typeof n=="object"){const o=u==="channelsLast"?n[1][0]:n[2][0],d=u==="channelsLast"?n[1][1]:n[2][1],m=u==="channelsLast"?n[2][0]:n[3][0],g=u==="channelsLast"?n[2][1]:n[3][1];h={top:o,bottom:d,left:m,right:g,type:o===0&&d===0&&m===0&&g===0?"VALID":"EXPLICIT"},f=round$5((e-a+o+d)/r+1,l),c=round$5((t-i+m+g)/s+1,l)}else throw Error(`Unknown padding parameter: ${n}`);return{padInfo:h,outHeight:f,outWidth:c}}function get3DPadAndOutInfo$1(n,e,t,r,s,a,i,l,u,h,f){let c,o,d,m;if(n==="valid"&&(n=0),typeof n=="number"){c={top:n,bottom:n,left:n,right:n,front:n,back:n,type:n===0?"VALID":"NUMBER"};const y=computeOutputShape4D$1([e,t,r,1],[l,u,h],1,[s,a,i],n,f);o=y[0],d=y[1],m=y[2]}else if(n==="same"){o=Math.ceil(e/s),d=Math.ceil(t/a),m=Math.ceil(r/i);const g=(o-1)*s+l-e,y=(d-1)*a+u-t,$=(m-1)*i+h-r,b=Math.floor(g/2),x=g-b,w=Math.floor(y/2),v=y-w,S=Math.floor($/2),T=$-S;c={top:w,bottom:v,left:S,right:T,front:b,back:x,type:"SAME"}}else throw Error(`Unknown padding parameter: ${n}`);return{padInfo:c,outDepth:o,outHeight:d,outWidth:m}}function round$5(n,e){if(!e)return Math.trunc(n);switch(e){case"round":return Math.round(n);case"ceil":return Math.ceil(n);case"floor":return Math.floor(n);default:throw new Error(`Unknown roundingMode ${e}`)}}function tupleValuesAreOne$1(n){const[e,t,r]=parseTupleParam$1(n);return e===1&&t===1&&r===1}function eitherStridesOrDilationsAreOne$1(n,e){return tupleValuesAreOne$1(n)||tupleValuesAreOne$1(e)}function stridesOrDilationsArePositive(n){return parseTupleParam$1(n).every(e=>e>0)}function convertConv2DDataFormat$1(n){if(n==="NHWC")return"channelsLast";if(n==="NCHW")return"channelsFirst";throw new Error(`Unknown dataFormat ${n}`)}function checkPadOnDimRoundingMode(n,e,t){if(t!=null){if(typeof e=="string")throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${t} but got pad ${e}.`);if(typeof e=="number")assert$2(isInt$1(e),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${t} but got pad ${e}.`);else if(typeof e=="object")e.forEach(r=>{r.forEach(s=>{assert$2(isInt$1(s),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${t} but got pad ${s}.`)})});else throw Error(`Error in ${n}: Unknown padding parameter: ${e}`)}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reshape_$1(n,e){const r={x:convertToTensor$1(n,"x","reshape","string_or_numeric")},s={shape:e};return ENGINE$1.runKernel(Reshape$2,r,s)}const reshape$5=op$1({reshape_:reshape_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool_(n,e,t,r,s){const a=convertToTensor$1(n,"x","avgPool","float32"),i=1;assert$2(eitherStridesOrDilationsAreOne$1(t,i),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${i}'`);let l=a,u=!1;a.rank===3&&(u=!0,l=reshape$5(a,[1,a.shape[0],a.shape[1],a.shape[2]])),assert$2(l.rank===4,()=>`Error in avgPool: x must be rank 4 but got rank ${l.rank}.`),checkPadOnDimRoundingMode("avgPool",r,s);const h={x:l},f={filterSize:e,strides:t,pad:r,dimRoundingMode:s};let c=ENGINE$1.runKernel(AvgPool$1,h,f);return c=cast$5(c,a.dtype),u?reshape$5(c,[c.shape[1],c.shape[2],c.shape[3]]):c}const avgPool$3=op$1({avgPool_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3d_(n,e,t,r,s,a="NDHWC"){const i=convertToTensor$1(n,"x","avgPool3d","float32");let l=i,u=!1;i.rank===4&&(u=!0,l=reshape$5(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),assert$2(l.rank===5,()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`),assert$2(a==="NDHWC",()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`),assert$2(typeof t=="number"&&t>0||Array.isArray(t)&&t[0]>0&&t[1]>0&&t[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${t}'`),checkPadOnDimRoundingMode("avgPool3d",r,s);const h={x:l},f={filterSize:e,strides:t,pad:r,dimRoundingMode:s,dataFormat:a};let c=ENGINE$1.runKernel(AvgPool3D$1,h,f);return c=cast$5(c,l.dtype),u?reshape$5(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}const avgPool3d=op$1({avgPool3d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concat_(n,e=0){assert$2(n.length>=1,()=>"Pass at least one tensor to concat");const t=convertToTensorArray(n,"tensors","concat","string_or_numeric");if(t[0].dtype==="complex64"&&t.forEach(a=>{if(a.dtype!=="complex64")throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${a.dtype}. `)}),t.length===1)return clone$1(t[0]);const r=t,s={axis:e};return ENGINE$1.runKernel(Concat$1,r,s)}const concat$3=op$1({concat_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function matMul_(n,e,t=!1,r=!1){let s=convertToTensor$1(n,"a","matMul"),a=convertToTensor$1(e,"b","matMul");[s,a]=makeTypesMatch$1(s,a);const i={a:s,b:a},l={transposeA:t,transposeB:r};return ENGINE$1.runKernel(BatchMatMul$1,i,l)}const matMul$1=op$1({matMul_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sigmoid_(n){const t={x:convertToTensor$1(n,"x","sigmoid","float32")};return ENGINE$1.runKernel(Sigmoid$2,t)}const sigmoid$3=op$1({sigmoid_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice_(n,e,t){const r=convertToTensor$1(n,"x","slice","string_or_numeric");if(r.rank===0)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:e,size:t};return ENGINE$1.runKernel(Slice$1,s,a)}const slice$3=op$1({slice_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tanh_(n){const t={x:convertToTensor$1(n,"x","tanh","float32")};return ENGINE$1.runKernel(Tanh$2,t)}const tanh$3=op$1({tanh_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function basicLSTMCell_(n,e,t,r,s,a){const i=convertToTensor$1(n,"forgetBias","basicLSTMCell"),l=convertToTensor$1(e,"lstmKernel","basicLSTMCell"),u=convertToTensor$1(t,"lstmBias","basicLSTMCell"),h=convertToTensor$1(r,"data","basicLSTMCell"),f=convertToTensor$1(s,"c","basicLSTMCell"),c=convertToTensor$1(a,"h","basicLSTMCell"),o=concat$3([h,c],1),d=matMul$1(o,l),m=add$3(d,u),g=m.shape[0],y=m.shape[1]/4,$=[g,y],b=slice$3(m,[0,0],$),x=slice$3(m,[0,y],$),w=slice$3(m,[0,y*2],$),v=slice$3(m,[0,y*3],$),S=add$3(mul$1(sigmoid$3(b),tanh$3(x)),mul$1(f,sigmoid$3(add$3(i,w)))),T=mul$1(tanh$3(S),sigmoid$3(v));return[S,T]}const basicLSTMCell=op$1({basicLSTMCell_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchToSpaceND_(n,e,t){const r=convertToTensor$1(n,"x","batchToSpaceND"),s=e.reduce((l,u)=>l*u);assert$2(r.rank>=1+e.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`),assert$2(t.length===e.length,()=>`crops.length is ${t.length} but should be equal to blockShape.length  ${e.length}`),assert$2(r.shape[0]%s===0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`);const a={x:r},i={blockShape:e,crops:t};return ENGINE$1.runKernel(BatchToSpaceND$1,a,i)}const batchToSpaceND$3=op$1({batchToSpaceND_});function xAs4D(n){let e;return n.rank===0||n.rank===1?e=reshape$5(n,[1,1,1,n.size]):n.rank===2?e=reshape$5(n,[1,1,n.shape[0],n.shape[1]]):n.rank===3?e=reshape$5(n,[1,n.shape[0],n.shape[1],n.shape[2]]):e=n,e}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchNorm_(n,e,t,r,s,a){a==null&&(a=.001);const i=convertToTensor$1(n,"x","batchNorm"),l=convertToTensor$1(e,"mean","batchNorm"),u=convertToTensor$1(t,"variance","batchNorm");let h;s!=null&&(h=convertToTensor$1(s,"scale","batchNorm"));let f;r!=null&&(f=convertToTensor$1(r,"offset","batchNorm")),assert$2(l.rank===u.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),assert$2(f==null||l.rank===f.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),assert$2(h==null||l.rank===h.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const o={x:xAs4D(i),scale:h,offset:f,mean:l,variance:u},d={varianceEpsilon:a},m=ENGINE$1.runKernel(FusedBatchNorm$1,o,d);return reshape$5(m,i.shape)}const batchNorm$2=op$1({batchNorm_});function batchNorm2d_(n,e,t,r,s,a){const i=convertToTensor$1(n,"x","batchNorm"),l=convertToTensor$1(e,"mean","batchNorm"),u=convertToTensor$1(t,"variance","batchNorm");let h;s!=null&&(h=convertToTensor$1(s,"scale","batchNorm"));let f;return r!=null&&(f=convertToTensor$1(r,"offset","batchNorm")),assert$2(i.rank===2,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`),assert$2(l.rank===2||l.rank===1,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${l.rank}.`),assert$2(u.rank===2||u.rank===1,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`),h!=null&&assert$2(h.rank===2||h.rank===1,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${h.rank}.`),f!=null&&assert$2(f.rank===2||f.rank===1,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${f.rank}.`),batchNorm$2(i,l,u,f,h,a)}const batchNorm2d=op$1({batchNorm2d_});function batchNorm3d_(n,e,t,r,s,a){const i=convertToTensor$1(n,"x","batchNorm"),l=convertToTensor$1(e,"mean","batchNorm"),u=convertToTensor$1(t,"variance","batchNorm");let h;s!=null&&(h=convertToTensor$1(s,"scale","batchNorm"));let f;return r!=null&&(f=convertToTensor$1(r,"offset","batchNorm")),assert$2(i.rank===3,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`),assert$2(l.rank===3||l.rank===1,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${l.rank}.`),assert$2(u.rank===3||u.rank===1,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`),h!=null&&assert$2(h.rank===3||h.rank===1,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${h.rank}.`),f!=null&&assert$2(f.rank===3||f.rank===1,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${f.rank}.`),batchNorm$2(i,l,u,f,h,a)}const batchNorm3d=op$1({batchNorm3d_});function batchNorm4d_(n,e,t,r,s,a){const i=convertToTensor$1(n,"x","batchNorm"),l=convertToTensor$1(e,"mean","batchNorm"),u=convertToTensor$1(t,"variance","batchNorm");let h;s!=null&&(h=convertToTensor$1(s,"scale","batchNorm"));let f;return r!=null&&(f=convertToTensor$1(r,"offset","batchNorm")),assert$2(i.rank===4,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`),assert$2(l.rank===4||l.rank===1,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${l.rank}.`),assert$2(u.rank===4||u.rank===1,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`),h!=null&&assert$2(h.rank===4||h.rank===1,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${h.rank}.`),f!=null&&assert$2(f.rank===4||f.rank===1,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${f.rank}.`),batchNorm$2(i,l,u,f,h,a)}const batchNorm4d=op$1({batchNorm4d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincount_(n,e,t){const r=convertToTensor$1(n,"x","bincount"),s=convertToTensor$1(e,"weights","bincount");assert$2(r.dtype==="int32",()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`),assert$2(t>=0,()=>`size must be non-negative, but got ${t}.`),assert$2(s.size===r.size||s.size===0,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`);const a={x:r,weights:s},i={size:t};return ENGINE$1.runKernel(Bincount$1,a,i)}const bincount$3=op$1({bincount_});/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bitwiseAnd_(n,e){const t=convertToTensor$1(n,"x","bitwiseAnd"),r=convertToTensor$1(e,"y","bitwiseAnd");if(!arraysEqual$1(t.shape,r.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${t.shape}, y: ${r.shape}`);if(t.dtype!=="int32"||r.dtype!=="int32")throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${t.dtype} and type of y: ${r.dtype}`);const s={a:t,b:r};return ENGINE$1.runKernel(BitwiseAnd,s)}const bitwiseAnd$2=op$1({bitwiseAnd_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastArgs_(n,e){const t=convertToTensor$1(n,"s0","broadcastArgs","int32"),r=convertToTensor$1(e,"s1","broadcastArgs","int32");if(t.rank!==1)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${t.rank}`);if(r.rank!==1)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:t,s1:r};return ENGINE$1.runKernel(BroadcastArgs$1,s)}const broadcastArgs$3=op$1({broadcastArgs_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastTo_$1(n,e){let t=convertToTensor$1(n,"broadcastTo","x");const r=t.shape;if(assertNonNegativeIntegerDimensions$1(e),e.length<t.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${t.rank}.`);if(e.length>t.rank){const h=t.shape.slice();for(;h.length<e.length;)h.unshift(1);t=reshape$5(t,h)}const s=t.shape,a=Array.from(e);for(let h=e.length-1;h>=0;h--)if(s[h]===e[h])a[h]=1;else if(t.shape[h]!==1)throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(a.map((h,f)=>h>1?f:-1).filter(h=>h>=0).length===0)return clone$1(t);const l={x:t},u={reps:a};return ENGINE$1.runKernel(Tile$1,l,u)}const broadcastTo$1=op$1({broadcastTo_:broadcastTo_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ceil_(n){const t={x:convertToTensor$1(n,"x","ceil","float32")};return ENGINE$1.runKernel(Ceil$1,t)}const ceil$3=op$1({ceil_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fill$4(n,e,t){assertNonNegativeIntegerDimensions$1(n),t=t||inferDtype$1(e);const r={shape:n,value:e,dtype:t};return ENGINE$1.runKernel(Fill$1,{},r)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function clipByValue_(n,e,t){const r=convertToTensor$1(n,"x","clipByValue");if(assert$2(e<=t,()=>`Error in clip: min (${e}) must be less than or equal to max (${t}).`),e===t)return fill$4(r.shape,e,r.dtype);const s={x:r},a={clipValueMin:e,clipValueMax:t};return ENGINE$1.runKernel(ClipByValue$1,s,a)}const clipByValue$3=op$1({clipByValue_});function concat1d_(n){return concat$3(n,0)}const concat1d=op$1({concat1d_});function concat2d_(n,e){return concat$3(n,e)}const concat2d=op$1({concat2d_});function concat3d_(n,e){return concat$3(n,e)}const concat3d=op$1({concat3d_});function concat4d_(n,e){return concat$3(n,e)}const concat4d=op$1({concat4d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2d_(n,e,t,r,s="NHWC",a=[1,1],i){const l=convertToTensor$1(n,"x","conv2d","float32"),u=convertToTensor$1(e,"filter","conv2d","float32");let h=l,f=!1;l.rank===3&&(f=!0,h=reshape$5(l,[1,l.shape[0],l.shape[1],l.shape[2]])),assert$2(h.rank===4,()=>`Error in conv2d: input must be rank 4, but got rank ${h.rank}.`),assert$2(u.rank===4,()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`),checkPadOnDimRoundingMode("conv2d",r,i);const c=s==="NHWC"?h.shape[3]:h.shape[1];assert$2(c===u.shape[2],()=>`Error in conv2d: depth of input (${c}) must match input depth for filter ${u.shape[2]}.`),assert$2(eitherStridesOrDilationsAreOne$1(t,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`),assert$2(stridesOrDilationsArePositive(a),()=>"Error in conv2D: Dilated rates should be larger than 0."),assert$2(stridesOrDilationsArePositive(t),()=>"Error in conv2D: Strides should be larger than 0.");const o={x:h,filter:u},d={strides:t,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},m=ENGINE$1.runKernel(Conv2D$2,o,d);return f?reshape$5(m,[m.shape[1],m.shape[2],m.shape[3]]):m}const conv2d$3=op$1({conv2d_});function conv1d_(n,e,t,r,s="NWC",a=1,i){const l=convertToTensor$1(n,"x","conv1d"),u=convertToTensor$1(e,"filter","conv1d");let h=l,f=!1;l.rank===2&&(f=!0,h=reshape$5(l,[1,l.shape[0],l.shape[1]])),assert$2(h.rank===3,()=>`Error in conv1d: input must be rank 3, but got rank ${h.rank}.`),assert$2(u.rank===3,()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`),checkPadOnDimRoundingMode("conv1d",r,i),assert$2(h.shape[2]===u.shape[1],()=>`Error in conv1d: depth of input (${h.shape[2]}) must match input depth for filter ${u.shape[1]}.`),assert$2(eitherStridesOrDilationsAreOne$1(t,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${t} and dilation '${a}'`),assert$2(stridesOrDilationsArePositive(a),()=>"Error in conv1D: Dilated rates should be larger than 0."),assert$2(stridesOrDilationsArePositive(t),()=>"Error in conv1D: Stride should be larger than 0."),assert$2(s==="NWC",()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const c=reshape$5(u,[1,u.shape[0],u.shape[1],u.shape[2]]),o=reshape$5(h,[h.shape[0],1,h.shape[1],h.shape[2]]),y=conv2d$3(o,c,[1,t],r,"NHWC",[1,a],i);return f?reshape$5(y,[y.shape[2],y.shape[3]]):reshape$5(y,[y.shape[0],y.shape[2],y.shape[3]])}const conv1d=op$1({conv1d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropInput_(n,e,t,r,s,a="NHWC",i){assert$2(n.length===e.rank,()=>`Length of inShape (${n.length}) and rank of dy (${e.rank}) must match`);let l=n,u=e,h=!1;e.rank===3&&(h=!0,u=reshape$5(e,[1,e.shape[0],e.shape[1],e.shape[2]]),l=[1,n[0],n[1],n[2]]),assert$2(l.length===4,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${l.length}.`),assert$2(u.rank===4,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`),assert$2(t.rank===4,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${t.rank}`);const f=a==="NHWC"?l[3]:l[1],c=a==="NHWC"?u.shape[3]:u.shape[1];assert$2(f===t.shape[2],()=>`Error in conv2dDerInput: depth of input (${f}) must match input depth for filter ${t.shape[2]}.`),assert$2(c===t.shape[3],()=>`Error in conv2dDerInput: depth of output (${c}) must match output depth for filter ${t.shape[3]}.`),checkPadOnDimRoundingMode("conv2dDerInput",s,i);const o={dy:u,filter:t},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:l},m=ENGINE$1.runKernel(Conv2DBackpropInput$1,o,d);return h?reshape$5(m,[m.shape[1],m.shape[2],m.shape[3]]):m}const conv2DBackpropInput$3=op$1({conv2DBackpropInput_});function conv2dTranspose_(n,e,t,r,s,a){const i=convertToTensor$1(n,"x","conv2dTranspose"),l=convertToTensor$1(e,"filter","conv2dTranspose");return conv2DBackpropInput$3(t,i,l,r,s,"NHWC",a)}const conv2dTranspose=op$1({conv2dTranspose_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3d_(n,e,t,r,s="NDHWC",a=[1,1,1]){const i=convertToTensor$1(n,"x","conv3d"),l=convertToTensor$1(e,"filter","conv3d");let u=i,h=!1;i.rank===4&&(h=!0,u=reshape$5(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),assert$2(u.rank===5,()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`),assert$2(l.rank===5,()=>`Error in conv3d: filter must be rank 5, but got rank ${l.rank}.`),assert$2(u.shape[4]===l.shape[3],()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${l.shape[3]}.`),assert$2(eitherStridesOrDilationsAreOne$1(t,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`),assert$2(s==="NDHWC",()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`),assert$2(stridesOrDilationsArePositive(a),()=>"Error in conv3D: Dilated rates should be larger than 0."),assert$2(stridesOrDilationsArePositive(t),()=>"Error in conv3D: Strides should be larger than 0.");const f={x:u,filter:l},c={strides:t,pad:r,dataFormat:s,dilations:a},o=ENGINE$1.runKernel(Conv3D$2,f,c);return h?reshape$5(o,[o.shape[1],o.shape[2],o.shape[3],o.shape[4]]):o}const conv3d=op$1({conv3d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropInput_(n,e,t,r,s){assert$2(n.length===e.rank,()=>`Length of inShape (${n.length}) and rank of dy (${e.rank}) must match`);let a=n,i=e,l=!1;e.rank===4&&(l=!0,i=reshape$5(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),a=[1,n[0],n[1],n[2],n[3]]);const u=a[4],h=i.shape[4];assert$2(a.length===5,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`),assert$2(i.rank===5,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`),assert$2(t.rank===5,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${t.rank}`),assert$2(u===t.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${t.shape[3]}.`),assert$2(h===t.shape[4],()=>`Error in conv3dDerInput: depth of output (${h}) must match output depth for filter ${t.shape[4]}.`);const f={dy:i,filter:t},c={pad:s,strides:r,inputShape:a},o=ENGINE$1.runKernel(Conv3DBackpropInputV2$1,f,c);return l?reshape$5(o,[o.shape[1],o.shape[2],o.shape[3],o.shape[4]]):o}const conv3DBackpropInput$1=op$1({conv3DBackpropInput_});function conv3dTranspose_(n,e,t,r,s){const a=convertToTensor$1(n,"x","conv3dTranspose"),i=convertToTensor$1(e,"filter","conv3dTranspose");return conv3DBackpropInput$1(t,a,i,r,s)}const conv3dTranspose=op$1({conv3dTranspose_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cos_(n){const t={x:convertToTensor$1(n,"x","cos","float32")};return ENGINE$1.runKernel(Cos$1,t)}const cos$3=op$1({cos_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cosh_(n){const t={x:convertToTensor$1(n,"x","cosh","float32")};return ENGINE$1.runKernel(Cosh$1,t)}const cosh$3=op$1({cosh_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumprod_(n,e=0,t=!1,r=!1){const a={x:convertToTensor$1(n,"x","cumprod")},i={axis:e,exclusive:t,reverse:r};return ENGINE$1.runKernel(Cumprod$1,a,i)}const cumprod$3=op$1({cumprod_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumsum_(n,e=0,t=!1,r=!1){const a={x:convertToTensor$1(n,"x","cumsum")},i={axis:e,exclusive:t,reverse:r};return ENGINE$1.runKernel(Cumsum$1,a,i)}const cumsum$3=op$1({cumsum_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function denseBincount_(n,e,t,r=!1){const s=convertToTensor$1(n,"x","denseBincount"),a=convertToTensor$1(e,"weights","denseBincount");assert$2(s.dtype==="int32",()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`),assert$2(s.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`),assert$2(t>=0,()=>`size must be non-negative, but got ${t}.`),assert$2(a.size===s.size||a.size===0,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`);const i={x:s,weights:a},l={size:t,binaryOutput:r};return ENGINE$1.runKernel(DenseBincount$1,i,l)}const denseBincount$3=op$1({denseBincount_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthToSpace_(n,e,t="NHWC"){const r=convertToTensor$1(n,"x","depthToSpace","float32"),s=t==="NHWC"?r.shape[1]:r.shape[2],a=t==="NHWC"?r.shape[2]:r.shape[3],i=t==="NHWC"?r.shape[3]:r.shape[1];assert$2(e>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${e}`),assert$2(s*e>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${s} and ${e}  for depthToSpace with input shape
    ${r.shape}`),assert$2(a*e>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${a} and ${e} for depthToSpace with input shape
        ${r.shape}`),assert$2(i%(e*e)===0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${i} for depthToSpace with input shape ${r.shape}`);const l={x:r},u={blockSize:e,dataFormat:t};return ENGINE$1.runKernel(DepthToSpace$1,l,u)}const depthToSpace$3=op$1({depthToSpace_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2d_(n,e,t,r,s="NHWC",a=[1,1],i){const l=convertToTensor$1(n,"x","depthwiseConv2d","float32"),u=convertToTensor$1(e,"filter","depthwiseConv2d","float32");let h=l,f=!1;l.rank===3&&(f=!0,h=reshape$5(l,[1,l.shape[0],l.shape[1],l.shape[2]])),assert$2(h.rank===4,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${h.rank}.`),assert$2(u.rank===4,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`);const c=s==="NHWC"?h.shape[3]:h.shape[1];assert$2(c===u.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${c}) must match the inChannels dimension in filter ${u.shape[2]}.`),checkPadOnDimRoundingMode("depthwiseConv2d",r,i);const o={x:h,filter:u},d={strides:t,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},m=ENGINE$1.runKernel(DepthwiseConv2dNative$1,o,d);return f?reshape$5(m,[m.shape[1],m.shape[2],m.shape[3]]):m}const depthwiseConv2d$2=op$1({depthwiseConv2d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function diag_(n){const t={x:convertToTensor$1(n,"x","diag")};return ENGINE$1.runKernel(Diag$1,t)}const diag$3=op$1({diag_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dilation2d_(n,e,t,r,s=[1,1],a="NHWC"){const i=convertToTensor$1(n,"x","dilation2d"),l=convertToTensor$1(e,"filter","dilation2d");assert$2(i.rank===3||i.rank===4,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`),assert$2(l.rank===3,()=>`Error in dilation2d: filter must be rank 3, but got rank ${l.rank}.`),assert$2(a==="NHWC",()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`);let u=i,h=!1;i.rank===3&&(u=reshape$5(i,[1,i.shape[0],i.shape[1],i.shape[2]]),h=!0),assert$2(u.shape[3]===l.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${u.shape[3]} vs ${l.shape[2]}`);const f={x:u,filter:l},c={strides:t,pad:r,dilations:s},o=ENGINE$1.runKernel(Dilation2D$1,f,c);return h?reshape$5(o,[o.shape[1],o.shape[2],o.shape[3]]):o}const dilation2d=op$1({dilation2d_});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getBroadcastDims$2(n,e){const t=n.length,r=[];for(let s=0;s<t;s++){const a=t-1-s,i=n[a]||1;(e[e.length-1-s]||1)>1&&i===1&&r.unshift(a)}return r}function getReductionAxes(n,e){const t=[];for(let r=0;r<e.length;r++){const s=n[n.length-r-1],a=e.length-r-1,i=e[a];(s==null||s===1&&i>1)&&t.unshift(a)}return t}function assertAndGetBroadcastShape$1(n,e){const t=Math.max(n.length,e.length),r=new Array(t);for(let s=0;s<t;s++){let a=n[n.length-s-1];a==null&&(a=1);let i=e[e.length-s-1];if(i==null&&(i=1),a===1)r[t-s-1]=i;else if(i===1)r[t-s-1]=a;else if(a!==i){const l=`Operands could not be broadcast together with shapes ${n} and ${e}.`;throw Error(l)}else r[t-s-1]=a}return r}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function equal_(n,e){let t=convertToTensor$1(n,"a","equal","string_or_numeric"),r=convertToTensor$1(e,"b","equal","string_or_numeric");[t,r]=makeTypesMatch$1(t,r),assertAndGetBroadcastShape$1(t.shape,r.shape);const s={a:t,b:r};return ENGINE$1.runKernel(Equal$1,s)}const equal$3=op$1({equal_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function where_(n,e,t){const r=convertToTensor$1(e,"a","where"),s=convertToTensor$1(t,"b","where"),a=convertToTensor$1(n,"condition","where","bool"),i=assertAndGetBroadcastShape$1(assertAndGetBroadcastShape$1(a.shape,r.shape),s.shape),l=broadcastTo$1(a,i),u=broadcastTo$1(r,i),h=broadcastTo$1(s,i),f={condition:l,t:u,e:h};return ENGINE$1.runKernel(Select$1,f)}const where=op$1({where_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zerosLike_$1(n){const t={x:convertToTensor$1(n,"x","zerosLike")};return ENGINE$1.runKernel(ZerosLike$1,t)}const zerosLike$4=op$1({zerosLike_:zerosLike_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function divNoNan_(n,e){let t=convertToTensor$1(n,"a","div"),r=convertToTensor$1(e,"b","div");[t,r]=makeTypesMatch$1(t,r);const s=div$2(t,r),a=zerosLike$4(s),i=equal$3(r,a);return where(i,a,s)}const divNoNan=op$1({divNoNan_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dot_(n,e){const t=convertToTensor$1(n,"t1","dot"),r=convertToTensor$1(e,"t2","dot");assert$2((t.rank===1||t.rank===2)&&(r.rank===1||r.rank===2),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${t.rank} and ${r.rank}.`);const s=t.rank===1?t.size:t.shape[1],a=r.rank===1?r.size:r.shape[0];if(assert$2(s===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`),t.rank===1&&r.rank===1){const i=reshape$5(t,[1,-1]),l=reshape$5(r,[-1,1]),u=matMul$1(i,l);return reshape$5(u,[])}else if(t.rank===1&&r.rank===2){const i=reshape$5(t,[1,-1]),l=reshape$5(r,[r.shape[0],r.shape[1]]),u=matMul$1(i,l);return reshape$5(u,[u.size])}else if(t.rank===2&&r.rank===1){const i=reshape$5(r,[-1,1]),l=matMul$1(t,i);return reshape$5(l,[l.size])}else{const i=reshape$5(r,[r.shape[0],r.shape[1]]);return matMul$1(t,i)}}const dot$1=op$1({dot_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function einsum_(n,...e){const t=e.map((s,a)=>convertToTensor$1(s,`tensors${a}`,"einsum")),r={equation:n};return ENGINE$1.runKernel(Einsum$1,t,r)}const einsum$3=op$1({einsum_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function elu_(n){const t={x:convertToTensor$1(n,"x","elu","float32")};return ENGINE$1.runKernel(Elu$2,t)}const elu$4=op$1({elu_});/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ensureShape_(n,e){const t=convertToTensor$1(n,"x","ensureShape","string_or_numeric");if(!arraysEqualWithNull(t.shape,e))throw new Error(`EnsureShape: Shape of tensor ${t.shape} is not compatible with expected shape ${e}`);return n}const ensureShape=op$1({ensureShape_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function erf_(n){let e=convertToTensor$1(n,"x","erf");assert$2(e.dtype==="int32"||e.dtype==="float32",()=>"Input dtype must be `int32` or `float32`."),e.dtype==="int32"&&(e=cast$5(e,"float32"));const t={x:e};return ENGINE$1.runKernel(Erf$1,t)}const erf$3=op$1({erf_});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function axesAreInnerMostDims$1(n,e){for(let t=0;t<n.length;++t)if(n[n.length-t-1]!==e-1-t)return!1;return!0}function combineLocations$1(n,e,t){const r=n.length+e.length,s=[];let a=0,i=0;for(let l=0;l<r;l++)t.indexOf(l)===-1?s.push(n[a++]):s.push(e[i++]);return s}function computeOutAndReduceShapes$1(n,e){const t=[],r=n.length;for(let a=0;a<r;a++)e.indexOf(a)===-1&&t.push(n[a]);const s=e.map(a=>n[a]);return[t,s]}function expandShapeToKeepDim$1(n,e){const t=e.map(r=>1);return combineLocations$1(n,t,e)}function assertAxesAreInnerMostDims$1(n,e,t){assert$2(axesAreInnerMostDims$1(e,t),()=>`${n} supports only inner-most axes for now. Got axes ${e} and rank-${t} input.`)}function getAxesPermutation$1(n,e){if(axesAreInnerMostDims$1(n,e))return null;const t=[];for(let r=0;r<e;++r)n.indexOf(r)===-1&&t.push(r);return n.forEach(r=>t.push(r)),t}function getUndoAxesPermutation$1(n){return n.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function getInnerMostAxes$1(n,e){const t=[];for(let r=e-n;r<e;++r)t.push(r);return t}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function max_(n,e=null,t=!1){const s={x:convertToTensor$1(n,"x","max")},a={reductionIndices:e,keepDims:t};return ENGINE$1.runKernel(Max$1,s,a)}const max$4=op$1({max_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function min_(n,e=null,t=!1){const s={x:convertToTensor$1(n,"x","min")},a={axis:e,keepDims:t};return ENGINE$1.runKernel(Min$1,s,a)}const min$4=op$1({min_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pow_$1(n,e){let t=convertToTensor$1(n,"base","pow"),r=convertToTensor$1(e,"exp","pow");[t,r]=makeTypesMatch$1(t,r);const s={a:t,b:r};return ENGINE$1.runKernel(Pow$1,s)}const pow$4=op$1({pow_:pow_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scalar$1(n,e){if((isTypedArray$1(n)&&e!=="string"||Array.isArray(n))&&e!=="complex64")throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if(e==="string"&&isTypedArray$1(n)&&!(n instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return makeTensor$1(n,[],[],e)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sqrt_$1(n){const t={x:convertToTensor$1(n,"x","sqrt","float32")};return ENGINE$1.runKernel(Sqrt$1,t)}const sqrt$4=op$1({sqrt_:sqrt_$1});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function square_$1(n){const e=convertToTensor$1(n,"x","square"),t={};return ENGINE$1.runKernel("Square",{x:e},t)}const square$3=op$1({square_:square_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sum_(n,e=null,t=!1){let r=convertToTensor$1(n,"x","sum");r.dtype==="bool"&&(r=cast$5(r,"int32"));const s={x:r},a={axis:e,keepDims:t};return ENGINE$1.runKernel(Sum$1,s,a)}const sum$4=op$1({sum_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function norm_(n,e="euclidean",t=null,r=!1){n=convertToTensor$1(n,"x","norm");const s=normImpl(n,e,t);let a=s.shape;if(r){const i=parseAxisParam$1(t,n.shape);a=expandShapeToKeepDim$1(s.shape,i)}return reshape$5(s,a)}function normImpl(n,e,t=null){if(n.rank===0)return abs$4(n);if(n.rank!==1&&t===null)return normImpl(reshape$5(n,[-1]),e,t);if(n.rank===1||typeof t=="number"||Array.isArray(t)&&t.length===1){if(e===1)return sum$4(abs$4(n),t);if(e===1/0)return max$4(abs$4(n),t);if(e===-1/0)return min$4(abs$4(n),t);if(e==="euclidean"||e===2)return sqrt$4(sum$4(pow$4(abs$4(n),scalar$1(2,"int32")),t));throw new Error(`Error in norm: invalid ord value: ${e}`)}if(Array.isArray(t)&&t.length===2){if(e===1)return max$4(sum$4(abs$4(n),t[0]),t[1]-1);if(e===1/0)return max$4(sum$4(abs$4(n),t[1]),t[0]);if(e===-1/0)return min$4(sum$4(abs$4(n),t[1]),t[0]);if(e==="fro"||e==="euclidean")return sqrt$4(sum$4(square$3(n),t));throw new Error(`Error in norm: invalid ord value: ${e}`)}throw new Error(`Error in norm: invalid axis: ${t}`)}const norm=op$1({norm_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function euclideanNorm_(n,e=null,t=!1){return norm(n,"euclidean",e,t)}const euclideanNorm=op$1({euclideanNorm_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function exp_(n){const t={x:convertToTensor$1(n,"x","exp")};return ENGINE$1.runKernel(Exp$1,t)}const exp$3=op$1({exp_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function expandDims_(n,e=0){const t=convertToTensor$1(n,"x","expandDims","string_or_numeric");assert$2(e<=t.rank,()=>"Axis must be <= rank of the tensor");const r={input:t},s={dim:e};return ENGINE$1.runKernel(ExpandDims$1,r,s)}const expandDims$4=op$1({expandDims_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function expm1_(n){const t={x:convertToTensor$1(n,"x","expm1")};return ENGINE$1.runKernel(Expm1$1,t)}const expm1$3=op$1({expm1_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tile_(n,e){const t=convertToTensor$1(n,"x","tile","string_or_numeric");assert$2(t.rank===e.length,()=>`Error in transpose: rank of input ${t.rank} must match length of reps ${e}.`);const r={x:t},s={reps:e};return ENGINE$1.runKernel(Tile$1,r,s)}const tile$4=op$1({tile_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function eye_(n,e,t,r="float32"){e==null&&(e=n);const s=buffer$1([n,e],r),a=n<=e?n:e;for(let l=0;l<a;++l)s.set(1,l,l);const i=reshape$5(s.toTensor(),[n,e]);if(t==null)return i;if(t.length===1)return tile$4(expandDims$4(i,0),[t[0],1,1]);if(t.length===2)return tile$4(expandDims$4(expandDims$4(i,0),0),[t[0],t[1],1,1]);if(t.length===3)return tile$4(expandDims$4(expandDims$4(expandDims$4(i,0),0),0),[t[0],t[1],t[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${t.length}D.`)}const eye=op$1({eye_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function floor_(n){const t={x:convertToTensor$1(n,"x","floor","float32")};return ENGINE$1.runKernel(Floor$1,t)}const floor$3=op$1({floor_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gather_(n,e,t=0,r=0){const s=convertToTensor$1(n,"x","gather"),a=convertToTensor$1(e,"indices","gather","int32"),i={x:s,indices:a},l={axis:t,batchDims:r};return ENGINE$1.runKernel(GatherV2$1,i,l)}const gather$1=op$1({gather_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function greater_(n,e){let t=convertToTensor$1(n,"a","greater","string_or_numeric"),r=convertToTensor$1(e,"b","greater","string_or_numeric");[t,r]=makeTypesMatch$1(t,r),assertAndGetBroadcastShape$1(t.shape,r.shape);const s={a:t,b:r};return ENGINE$1.runKernel(Greater$1,s)}const greater$3=op$1({greater_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function greaterEqual_(n,e){let t=convertToTensor$1(n,"a","greaterEqual","string_or_numeric"),r=convertToTensor$1(e,"b","greaterEqual","string_or_numeric");[t,r]=makeTypesMatch$1(t,r),assertAndGetBroadcastShape$1(t.shape,r.shape);const s={a:t,b:r};return ENGINE$1.runKernel(GreaterEqual$1,s)}const greaterEqual$3=op$1({greaterEqual_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function imag_(n){const t={input:convertToTensor$1(n,"input","imag")};return ENGINE$1.runKernel(Imag$1,t)}const imag$3=op$1({imag_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isFinite_(n){const t={x:convertToTensor$1(n,"x","isFinite")};return ENGINE$1.runKernel(IsFinite$1,t)}const isFinite$4=op$1({isFinite_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isInf_(n){const t={x:convertToTensor$1(n,"x","isInf")};return ENGINE$1.runKernel(IsInf$1,t)}const isInf$3=op$1({isInf_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isNaN_(n){const t={x:convertToTensor$1(n,"x","isNaN")};return ENGINE$1.runKernel(IsNan$1,t)}const isNaN$4=op$1({isNaN_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function leakyRelu_(n,e=.2){const r={x:convertToTensor$1(n,"x","leakyRelu")},s={alpha:e};return ENGINE$1.runKernel(LeakyRelu$1,r,s)}const leakyRelu$3=op$1({leakyRelu_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function less_(n,e){let t=convertToTensor$1(n,"a","less","string_or_numeric"),r=convertToTensor$1(e,"b","less","string_or_numeric");[t,r]=makeTypesMatch$1(t,r),assertAndGetBroadcastShape$1(t.shape,r.shape);const s={a:t,b:r};return ENGINE$1.runKernel(Less$1,s)}const less$3=op$1({less_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lessEqual_(n,e){let t=convertToTensor$1(n,"a","lessEqual","string_or_numeric"),r=convertToTensor$1(e,"b","lessEqual","string_or_numeric");[t,r]=makeTypesMatch$1(t,r),assertAndGetBroadcastShape$1(t.shape,r.shape);const s={a:t,b:r};return ENGINE$1.runKernel(LessEqual$1,s)}const lessEqual$3=op$1({lessEqual_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linspace(n,e,t){if(t<=0)throw new Error("The number of values should be positive.");const r={start:n,stop:e,num:t};return ENGINE$1.runKernel(LinSpace$1,{},r)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function localResponseNormalization_(n,e=5,t=1,r=1,s=.5){const a=convertToTensor$1(n,"x","localResponseNormalization");assert$2(a.rank===4||a.rank===3,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${a.rank}.`),assert$2(isInt$1(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let i=a,l=!1;a.rank===3&&(l=!0,i=reshape$5(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:i},h={depthRadius:e,bias:t,alpha:r,beta:s},f=ENGINE$1.runKernel(LRN$1,u,h);return l?reshape$5(f,[f.shape[1],f.shape[2],f.shape[3]]):f}const localResponseNormalization=op$1({localResponseNormalization_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function log_(n){const t={x:convertToTensor$1(n,"x","log","float32")};return ENGINE$1.runKernel(Log$1,t)}const log$3=op$1({log_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function log1p_(n){const t={x:convertToTensor$1(n,"x","log1p")};return ENGINE$1.runKernel(Log1p$1,t)}const log1p$3=op$1({log1p_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function variableGrads$1(n,e){assert$2(isFunction$1(n),()=>"The f passed in variableGrads(f) must be a function"),assert$2(e==null||Array.isArray(e)&&e.every(h=>h instanceof Variable$1),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const t=e!=null;if(!t){e=[];for(const h in ENGINE$1.registeredVariables)e.push(ENGINE$1.registeredVariables[h])}const r=t?e.filter(h=>!h.trainable):null,s=e.length;e=e.filter(h=>h.trainable),assert$2(e.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const a=!0,{value:i,grads:l}=ENGINE$1.gradients(n,e,null,a);assert$2(l.some(h=>h!=null),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),assert$2(i.rank===0,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);const u={};return e.forEach((h,f)=>{l[f]!=null&&(u[h.name]=l[f])}),r?.forEach(h=>u[h.name]=null),{value:i,grads:u}}function customGrad(n){return ENGINE$1.customGrad(n)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function neg_(n){const t={x:convertToTensor$1(n,"x","neg")};return ENGINE$1.runKernel(Neg$1,t)}const neg$3=op$1({neg_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softplus_(n){const t={x:convertToTensor$1(n,"x","softplus")};return ENGINE$1.runKernel(Softplus$2,t)}const softplus$3=op$1({softplus_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logSigmoid_(n){const e=convertToTensor$1(n,"x","logSigmoid");return customGrad(r=>({value:neg$3(softplus$3(neg$3(r))),gradFunc:i=>mul$1(i,sigmoid$3(neg$3(r)))}))(e)}const logSigmoid=op$1({logSigmoid_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sub_$1(n,e){let t=convertToTensor$1(n,"a","sub"),r=convertToTensor$1(e,"b","sub");[t,r]=makeTypesMatch$1(t,r);const s={a:t,b:r};return ENGINE$1.runKernel(Sub$1,s)}const sub$4=op$1({sub_:sub_$1});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logSoftmax_(n,e=-1){const t=convertToTensor$1(n,"logits","logSoftmax");if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and axis was ${e}`);return customGrad((s,a)=>{const l=max$4(s,e,!0),u=sub$4(s,l),h=sub$4(cast$5(u,"float32"),log$3(sum$4(exp$3(u),e,!0)));return a([h]),{value:h,gradFunc:(c,o)=>{const[d]=o,m=!0,g=exp$3(d);return sub$4(c,mul$1(sum$4(c,e,m),g))}}})(t)}const logSoftmax=op$1({logSoftmax_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logSumExp_(n,e=null,t=!1){const r=convertToTensor$1(n,"x","logSumExp"),s=parseAxisParam$1(e,r.shape),a=max$4(r,s,!0),i=sub$4(r,a),l=exp$3(i),u=sum$4(l,s),h=log$3(u),f=add$3(reshape$5(a,h.shape),h);if(t){const c=expandShapeToKeepDim$1(f.shape,s);return reshape$5(f,c)}return f}const logSumExp=op$1({logSumExp_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logicalAnd_(n,e){const t=convertToTensor$1(n,"a","logicalAnd","bool"),r=convertToTensor$1(e,"b","logicalAnd","bool");assertAndGetBroadcastShape$1(t.shape,r.shape);const s={a:t,b:r};return ENGINE$1.runKernel(LogicalAnd$1,s)}const logicalAnd$3=op$1({logicalAnd_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logicalNot_(n){const t={x:convertToTensor$1(n,"x","logicalNot","bool")};return ENGINE$1.runKernel(LogicalNot$1,t)}const logicalNot$3=op$1({logicalNot_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logicalOr_(n,e){const t=convertToTensor$1(n,"a","logicalOr","bool"),r=convertToTensor$1(e,"b","logicalOr","bool");assertAndGetBroadcastShape$1(t.shape,r.shape);const s={a:t,b:r};return ENGINE$1.runKernel(LogicalOr$1,s)}const logicalOr$3=op$1({logicalOr_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logicalXor_(n,e){const t=convertToTensor$1(n,"a","logicalXor","bool"),r=convertToTensor$1(e,"b","logicalXor","bool");return assertAndGetBroadcastShape$1(t.shape,r.shape),logicalAnd$3(logicalOr$3(n,e),logicalNot$3(logicalAnd$3(n,e)))}const logicalXor=op$1({logicalXor_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const INT32_MAX$2=2147483648;function searchSorted_(n,e,t="left"){const r=convertToTensor$1(n,"sortedSequence","searchSorted"),s=convertToTensor$1(e,"values","searchSorted"),a=r.shape[r.shape.length-1],i=s.shape[s.shape.length-1],l=reshape$5(r,[-1,a]),u=reshape$5(s,[-1,i]);if(l.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(l.shape[0]!==u.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(sizeFromShape$1(u.shape)>=INT32_MAX$2)throw new Error(`values tensor size must less than ${INT32_MAX$2}`);if(l.shape[1]>=INT32_MAX$2)throw new Error(`trailing dim_size must less than ${INT32_MAX$2} for int32 output type, was ${l.shape[1]}`);const h={sortedSequence:l,values:u},f={side:t};return ENGINE$1.runKernel(SearchSorted$1,h,f)}const searchSorted$3=op$1({searchSorted_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lowerBound$1(n,e){return searchSorted$3(n,e,"left")}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool_(n,e,t,r,s){const a=convertToTensor$1(n,"x","maxPool"),i=1;let l=a,u=!1;a.rank===3&&(u=!0,l=reshape$5(a,[1,a.shape[0],a.shape[1],a.shape[2]])),assert$2(l.rank===4,()=>`Error in maxPool: input must be rank 4 but got rank ${l.rank}.`),assert$2(eitherStridesOrDilationsAreOne$1(t,i),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${i}'`),checkPadOnDimRoundingMode("maxPool",r,s);const h={x:l},f={filterSize:e,strides:t,pad:r,dimRoundingMode:s},c=ENGINE$1.runKernel(MaxPool$1,h,f);return u?reshape$5(c,[c.shape[1],c.shape[2],c.shape[3]]):c}const maxPool$3=op$1({maxPool_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3d_(n,e=[1,1,1],t,r,s,a="NDHWC"){const i=convertToTensor$1(n,"x","maxPool3d");let l=i,u=!1;i.rank===4&&(u=!0,l=reshape$5(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),assert$2(l.rank===5,()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`),assert$2(a==="NDHWC",()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`),checkPadOnDimRoundingMode("maxPool3d",r,s);const h={x:l},f={filterSize:e,strides:t,pad:r,dimRoundingMode:s,dataFormat:a},c=ENGINE$1.runKernel(MaxPool3D$1,h,f);return u?reshape$5(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}const maxPool3d$2=op$1({maxPool3d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolWithArgmax_(n,e,t,r,s=!1){const i={x:convertToTensor$1(n,"x","maxPoolWithArgmax")},l={filterSize:e,strides:t,pad:r,includeBatchInIndex:s},u=ENGINE$1.runKernel(MaxPoolWithArgmax$1,i,l);return{result:u[0],indexes:u[1]}}const maxPoolWithArgmax$1=op$1({maxPoolWithArgmax_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maximum_$1(n,e){let t=convertToTensor$1(n,"a","maximum"),r=convertToTensor$1(e,"b","maximum");[t,r]=makeTypesMatch$1(t,r),t.dtype==="bool"&&(t=cast$5(t,"int32"),r=cast$5(r,"int32")),assertAndGetBroadcastShape$1(t.shape,r.shape);const s={a:t,b:r};return ENGINE$1.runKernel(Maximum$2,s)}const maximum$4=op$1({maximum_:maximum_$1});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mean_(n,e=null,t=!1){const s={x:convertToTensor$1(n,"x","mean")},a={axis:e,keepDims:t};return ENGINE$1.runKernel(Mean$1,s,a)}const mean$2=op$1({mean_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zeros$2(n,e="float32"){if(assertNonNegativeIntegerDimensions$1(n),e==="complex64"){const r=zeros$2(n,"float32"),s=zeros$2(n,"float32");return complex$4(r,s)}const t=makeZerosTypedArray$1(sizeFromShape$1(n),e);return ENGINE$1.makeTensor(t,n,e)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ones$1(n,e="float32"){if(assertNonNegativeIntegerDimensions$1(n),e==="complex64"){const r=ones$1(n,"float32"),s=zeros$2(n,"float32");return complex$4(r,s)}const t=makeOnesTypedArray$1(sizeFromShape$1(n),e);return ENGINE$1.makeTensor(t,n,e)}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function meshgrid(n,e,{indexing:t="xy"}={}){if(t!=="xy"&&t!=="ij")throw new TypeError(`${t} is not a valid third argument to meshgrid`);if(n===void 0)return[];let r=convertToTensor$1(n,"x","meshgrid",n instanceof Tensor$1?n.dtype:"float32");if(e===void 0)return[r];let s=convertToTensor$1(e,"y","meshgrid",e instanceof Tensor$1?e.dtype:"float32");const a=sizeFromShape$1(r.shape),i=sizeFromShape$1(s.shape);return t==="xy"?(r=reshape$5(r,[1,-1]),s=reshape$5(s,[-1,1]),[matMul$1(ones$1([i,1],r.dtype),r),matMul$1(s,ones$1([1,a],s.dtype))]):(r=reshape$5(r,[-1,1]),s=reshape$5(s,[1,-1]),[matMul$1(r,ones$1([1,i],r.dtype)),matMul$1(ones$1([a,1],s.dtype),s)])}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function minimum_(n,e){let t=convertToTensor$1(n,"a","minimum"),r=convertToTensor$1(e,"b","minimum");[t,r]=makeTypesMatch$1(t,r),t.dtype==="bool"&&(t=cast$5(t,"int32"),r=cast$5(r,"int32")),assertAndGetBroadcastShape$1(t.shape,r.shape);const s={a:t,b:r};return ENGINE$1.runKernel(Minimum$2,s)}const minimum$3=op$1({minimum_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mirrorPad_(n,e,t){assert$2(t==="reflect"||t==="symmetric",()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${t}.`);const r=convertToTensor$1(n,"x","mirrorPad");if(r.rank===0)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");assert$2(e.length===r.rank,()=>`Padding doesn't match input. Must be ${r.rank}. Got ${e.length}.`);const s=t==="reflect"?1:0;for(let l=0;l<r.rank;l++)assert$2(e[l].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),assert$2(e[l][0]>=0&&e[l][0]<=r.shape[l]-s&&e[l][1]>=0&&e[l][1]<=r.shape[l]-s,()=>`Padding in dimension ${l} cannot be greater than or equal to ${r.shape[l]-s} or less than 0 for input of shape ${r.shape}`);const a={paddings:e,mode:t},i={x:r};return ENGINE$1.runKernel(MirrorPad$1,i,a)}const mirrorPad$1=op$1({mirrorPad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mod_(n,e){let t=convertToTensor$1(n,"a","mod"),r=convertToTensor$1(e,"b","mod");[t,r]=makeTypesMatch$1(t,r);const s={a:t,b:r};return ENGINE$1.runKernel(Mod$1,s)}const mod$3=op$1({mod_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function moments_(n,e=null,t=!1){n=convertToTensor$1(n,"x","moments");const r=parseAxisParam$1(e,n.shape),s=mean$2(n,r,t);let a=s.shape;t||(a=expandShapeToKeepDim$1(s.shape,r));const i=square$3(sub$4(cast$5(n,"float32"),reshape$5(s,a))),l=mean$2(i,r,t);return{mean:s,variance:l}}const moments=op$1({moments_});function multiRNNCell_(n,e,t,r){const s=convertToTensor$1(e,"data","multiRNNCell"),a=convertToTensorArray(t,"c","multiRNNCell"),i=convertToTensorArray(r,"h","multiRNNCell");let l=s;const u=[];for(let c=0;c<n.length;c++){const o=n[c](l,a[c],i[c]);u.push(o[0]),u.push(o[1]),l=o[1]}const h=[],f=[];for(let c=0;c<u.length;c+=2)h.push(u[c]),f.push(u[c+1]);return[h,f]}const multiRNNCell=op$1({multiRNNCell_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function multinomial_(n,e,t,r=!1){const s=convertToTensor$1(n,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);t=t||Math.random();const u={logits:i===1?reshape$5(s,[1,-1]):s},h={numSamples:e,seed:t,normalized:r},f=ENGINE$1.runKernel(Multinomial$1,u,h);return i===1?reshape$5(f,[f.size]):f}const multinomial$3=op$1({multinomial_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function notEqual_(n,e){let t=convertToTensor$1(n,"a","notEqual","string_or_numeric"),r=convertToTensor$1(e,"b","notEqual","string_or_numeric");[t,r]=makeTypesMatch$1(t,r),assertAndGetBroadcastShape$1(t.shape,r.shape);const s={a:t,b:r};return ENGINE$1.runKernel(NotEqual$1,s)}const notEqual$3=op$1({notEqual_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function oneHot_(n,e,t=1,r=0,s="int32"){if(e<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);const i={indices:convertToTensor$1(n,"indices","oneHot","int32")},l={dtype:s,depth:e,onValue:t,offValue:r};return ENGINE$1.runKernel(OneHot$1,i,l)}const oneHot$3=op$1({oneHot_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function onesLike_(n){const t={x:convertToTensor$1(n,"x","onesLike")};return ENGINE$1.runKernel(OnesLike$1,t)}const onesLike$3=op$1({onesLike_});function outerProduct_(n,e){const t=convertToTensor$1(n,"v1","outerProduct"),r=convertToTensor$1(e,"v2","outerProduct");assert$2(t.rank===1&&r.rank===1,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${t.rank} and ${r.rank}.`);const s=reshape$5(t,[-1,1]),a=reshape$5(r,[1,-1]);return matMul$1(s,a)}const outerProduct=op$1({outerProduct_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pad_(n,e,t=0){const r=convertToTensor$1(n,"x","pad");if(r.rank===0)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:t},a={x:r};return ENGINE$1.runKernel(PadV2$1,a,s)}const pad=op$1({pad_});function pad1d_(n,e,t=0){return assert$2(e.length===2,()=>"Invalid number of paddings. Must be length of 2."),pad(n,[e],t)}const pad1d=op$1({pad1d_});function pad2d_(n,e,t=0){return assert$2(e.length===2&&e[0].length===2&&e[1].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),pad(n,e,t)}const pad2d=op$1({pad2d_});function pad3d_(n,e,t=0){return assert$2(e.length===3&&e[0].length===2&&e[1].length===2&&e[2].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),pad(n,e,t)}const pad3d=op$1({pad3d_});function pad4d_(n,e,t=0){return assert$2(e.length===4&&e[0].length===2&&e[1].length===2&&e[2].length===2&&e[3].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),pad(n,e,t)}const pad4d=op$1({pad4d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function spaceToBatchND_(n,e,t){const r=convertToTensor$1(n,"x","spaceToBatchND");assert$2(r.rank>=1+e.length,()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`),assert$2(t.length===e.length,()=>`paddings.shape[0] ${t.length} must be equal to [blockShape] ${e.length}`),assert$2(r.shape.reduce((i,l,u)=>u>0&&u<=e.length?i&&(l+t[u-1][0]+t[u-1][1])%e[u-1]===0:i,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${t.toString()} must be divisible by blockShapes ${e.toString()}`);const s={x:r},a={blockShape:e,paddings:t};return ENGINE$1.runKernel(SpaceToBatchND$1,s,a)}const spaceToBatchND$3=op$1({spaceToBatchND_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pool_(n,e,t,r,s,a,i){s==null&&(s=[1,1]),a==null&&(a=1),r===0&&(r="valid");const l=convertToTensor$1(n,"x","maxPool");let u=l,h=!1;l.rank===3&&(h=!0,u=reshape$5(l,[1,l.shape[0],l.shape[1],l.shape[2]])),assert$2(eitherStridesOrDilationsAreOne$1(a,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`);const f=computePool2DInfo$1(u.shape,e,a,s,r),c=[f.dilationHeight,f.dilationWidth];let o;r==="same"?o=withSpaceToBatchBasePaddings([f.filterHeight,f.filterWidth],c):o=[[0,0],[0,0]];const d=c[0]===1&&c[1]===1,[m,g]=requiredSpaceToBatchPaddings([f.inHeight,f.inWidth],c,o),y=d?r:"valid",$=d?u:spaceToBatchND$3(u,c,m),x=(t==="avg"?()=>avgPool$3($,e,a,y,i):()=>maxPool$3($,e,a,y,i))(),w=d?x:batchToSpaceND$3(x,c,g);return h?reshape$5(w,[w.shape[1],w.shape[2],w.shape[3]]):w}function requiredSpaceToBatchPaddings(n,e,t){const r=t.map(f=>f[0]),s=t.map(f=>f[1]),a=n.concat(r,s),i=e.map((f,c)=>(f-a[c]%f)%f),l=s.map((f,c)=>f+i[c]),u=e.map((f,c)=>[r[c],l[c]]),h=e.map((f,c)=>[0,i[c]]);return[u,h]}function withSpaceToBatchBasePaddings(n,e){const r=n.map((i,l)=>i+(i-1)*(e[l]-1)).map(i=>i-1),s=r.map(i=>Math.floor(i/2)),a=r.map((i,l)=>i-s[l]);return r.map((i,l)=>[s[l],a[l]])}const pool$1=op$1({pool_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prelu_(n,e){const t=convertToTensor$1(n,"x","prelu"),r=convertToTensor$1(e,"alpha","prelu"),s={x:t,alpha:r};return ENGINE$1.runKernel(Prelu$1,s)}const prelu$3=op$1({prelu_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prod_(n,e=null,t=!1){let r=convertToTensor$1(n,"x","prod");r.dtype==="bool"&&(r=cast$5(r,"int32"));const s={x:r},a={axis:e,keepDims:t};return ENGINE$1.runKernel(Prod$1,s,a)}const prod$3=op$1({prod_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedGather_(n,e,t,r){const s=n.map((f,c)=>convertToTensor$1(f,`tensors${c}`,"raggedGather","int32")),a=convertToTensor$1(e,"paramsDenseValues","raggedGather"),i=convertToTensor$1(t,"indices","raggedGather","int32"),l={paramsNestedSplits:s,paramsDenseValues:a,indices:i},u={outputRaggedRank:r},h=ENGINE$1.runKernel(RaggedGather,l,u);return{outputNestedSplits:h.slice(0,h.length-1),outputDenseValues:h[h.length-1]}}const raggedGather$2=op$1({raggedGather_});/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedRange_(n,e,t){const r=convertToTensor$1(n,"starts","raggedRange"),s=convertToTensor$1(e,"limits","raggedRange",r.dtype),a=convertToTensor$1(t,"deltas","raggedRange",r.dtype),i={starts:r,limits:s,deltas:a},l=ENGINE$1.runKernel(RaggedRange,i);return{rtNestedSplits:l[0],rtDenseValues:l[1]}}const raggedRange$2=op$1({raggedRange_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedTensorToTensor_(n,e,t,r,s){const a=convertToTensor$1(n,"shape","raggedTensorToTensor","int32"),i=convertToTensor$1(e,"values","raggedTensorToTensor"),l=convertToTensor$1(t,"defaultValue","raggedTensorToTensor",i.dtype),u=r.map((c,o)=>convertToTensor$1(c,`tensors${o}`,"raggedTensorToTensor","int32")),h={shape:a,values:i,defaultValue:l,rowPartitionTensors:u},f={rowPartitionTypes:s};return ENGINE$1.runKernel(RaggedTensorToTensor,h,f)}const raggedTensorToTensor$2=op$1({raggedTensorToTensor_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rand_(n,e,t){assertNonNegativeIntegerDimensions$1(n);const r=sizeFromShape$1(n);let s=null;if(t==null||t==="float32")s=new Float32Array(r);else if(t==="int32")s=new Int32Array(r);else if(t==="bool")s=new Uint8Array(r);else throw new Error(`Unknown data type ${t}`);for(let a=0;a<r;a++)s[a]=e();return ENGINE$1.makeTensor(s,n,t)}const rand=op$1({rand_});var alea$1={exports:{}};alea$1.exports,function(n){(function(e,t,r){function s(u){var h=this,f=l();h.next=function(){var c=2091639*h.s0+h.c*23283064365386963e-26;return h.s0=h.s1,h.s1=h.s2,h.s2=c-(h.c=c|0)},h.c=1,h.s0=f(" "),h.s1=f(" "),h.s2=f(" "),h.s0-=f(u),h.s0<0&&(h.s0+=1),h.s1-=f(u),h.s1<0&&(h.s1+=1),h.s2-=f(u),h.s2<0&&(h.s2+=1),f=null}function a(u,h){return h.c=u.c,h.s0=u.s0,h.s1=u.s1,h.s2=u.s2,h}function i(u,h){var f=new s(u),c=h&&h.state,o=f.next;return o.int32=function(){return f.next()*4294967296|0},o.double=function(){return o()+(o()*2097152|0)*11102230246251565e-32},o.quick=o,c&&(typeof c=="object"&&a(c,f),o.state=function(){return a(f,{})}),o}function l(){var u=4022871197,h=function(f){f=String(f);for(var c=0;c<f.length;c++){u+=f.charCodeAt(c);var o=.02519603282416938*u;u=o>>>0,o-=u,o*=u,u=o>>>0,o-=u,u+=o*4294967296}return(u>>>0)*23283064365386963e-26};return h}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.alea=i})(commonjsGlobal,n,!1)}(alea$1);var aleaExports=alea$1.exports,xor128$1={exports:{}};xor128$1.exports,function(n){(function(e,t,r){function s(l){var u=this,h="";u.x=0,u.y=0,u.z=0,u.w=0,u.next=function(){var c=u.x^u.x<<11;return u.x=u.y,u.y=u.z,u.z=u.w,u.w^=u.w>>>19^c^c>>>8},l===(l|0)?u.x=l:h+=l;for(var f=0;f<h.length+64;f++)u.x^=h.charCodeAt(f)|0,u.next()}function a(l,u){return u.x=l.x,u.y=l.y,u.z=l.z,u.w=l.w,u}function i(l,u){var h=new s(l),f=u&&u.state,c=function(){return(h.next()>>>0)/4294967296};return c.double=function(){do var o=h.next()>>>11,d=(h.next()>>>0)/4294967296,m=(o+d)/(1<<21);while(m===0);return m},c.int32=h.next,c.quick=c,f&&(typeof f=="object"&&a(f,h),c.state=function(){return a(h,{})}),c}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.xor128=i})(commonjsGlobal,n,!1)}(xor128$1);var xor128Exports=xor128$1.exports,xorwow$1={exports:{}};xorwow$1.exports,function(n){(function(e,t,r){function s(l){var u=this,h="";u.next=function(){var c=u.x^u.x>>>2;return u.x=u.y,u.y=u.z,u.z=u.w,u.w=u.v,(u.d=u.d+362437|0)+(u.v=u.v^u.v<<4^(c^c<<1))|0},u.x=0,u.y=0,u.z=0,u.w=0,u.v=0,l===(l|0)?u.x=l:h+=l;for(var f=0;f<h.length+64;f++)u.x^=h.charCodeAt(f)|0,f==h.length&&(u.d=u.x<<10^u.x>>>4),u.next()}function a(l,u){return u.x=l.x,u.y=l.y,u.z=l.z,u.w=l.w,u.v=l.v,u.d=l.d,u}function i(l,u){var h=new s(l),f=u&&u.state,c=function(){return(h.next()>>>0)/4294967296};return c.double=function(){do var o=h.next()>>>11,d=(h.next()>>>0)/4294967296,m=(o+d)/(1<<21);while(m===0);return m},c.int32=h.next,c.quick=c,f&&(typeof f=="object"&&a(f,h),c.state=function(){return a(h,{})}),c}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.xorwow=i})(commonjsGlobal,n,!1)}(xorwow$1);var xorwowExports=xorwow$1.exports,xorshift7$1={exports:{}};xorshift7$1.exports,function(n){(function(e,t,r){function s(l){var u=this;u.next=function(){var f=u.x,c=u.i,o,d;return o=f[c],o^=o>>>7,d=o^o<<24,o=f[c+1&7],d^=o^o>>>10,o=f[c+3&7],d^=o^o>>>3,o=f[c+4&7],d^=o^o<<7,o=f[c+7&7],o=o^o<<13,d^=o^o<<9,f[c]=d,u.i=c+1&7,d};function h(f,c){var o,d=[];if(c===(c|0))d[0]=c;else for(c=""+c,o=0;o<c.length;++o)d[o&7]=d[o&7]<<15^c.charCodeAt(o)+d[o+1&7]<<13;for(;d.length<8;)d.push(0);for(o=0;o<8&&d[o]===0;++o);for(o==8?d[7]=-1:d[o],f.x=d,f.i=0,o=256;o>0;--o)f.next()}h(u,l)}function a(l,u){return u.x=l.x.slice(),u.i=l.i,u}function i(l,u){l==null&&(l=+new Date);var h=new s(l),f=u&&u.state,c=function(){return(h.next()>>>0)/4294967296};return c.double=function(){do var o=h.next()>>>11,d=(h.next()>>>0)/4294967296,m=(o+d)/(1<<21);while(m===0);return m},c.int32=h.next,c.quick=c,f&&(f.x&&a(f,h),c.state=function(){return a(h,{})}),c}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.xorshift7=i})(commonjsGlobal,n,!1)}(xorshift7$1);var xorshift7Exports=xorshift7$1.exports,xor4096$1={exports:{}};xor4096$1.exports,function(n){(function(e,t,r){function s(l){var u=this;u.next=function(){var f=u.w,c=u.X,o=u.i,d,m;return u.w=f=f+1640531527|0,m=c[o+34&127],d=c[o=o+1&127],m^=m<<13,d^=d<<17,m^=m>>>15,d^=d>>>12,m=c[o]=m^d,u.i=o,m+(f^f>>>16)|0};function h(f,c){var o,d,m,g,y,$=[],b=128;for(c===(c|0)?(d=c,c=null):(c=c+"\0",d=0,b=Math.max(b,c.length)),m=0,g=-32;g<b;++g)c&&(d^=c.charCodeAt((g+32)%c.length)),g===0&&(y=d),d^=d<<10,d^=d>>>15,d^=d<<4,d^=d>>>13,g>=0&&(y=y+1640531527|0,o=$[g&127]^=d+y,m=o==0?m+1:0);for(m>=128&&($[(c&&c.length||0)&127]=-1),m=127,g=4*128;g>0;--g)d=$[m+34&127],o=$[m=m+1&127],d^=d<<13,o^=o<<17,d^=d>>>15,o^=o>>>12,$[m]=d^o;f.w=y,f.X=$,f.i=m}h(u,l)}function a(l,u){return u.i=l.i,u.w=l.w,u.X=l.X.slice(),u}function i(l,u){l==null&&(l=+new Date);var h=new s(l),f=u&&u.state,c=function(){return(h.next()>>>0)/4294967296};return c.double=function(){do var o=h.next()>>>11,d=(h.next()>>>0)/4294967296,m=(o+d)/(1<<21);while(m===0);return m},c.int32=h.next,c.quick=c,f&&(f.X&&a(f,h),c.state=function(){return a(h,{})}),c}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.xor4096=i})(commonjsGlobal,n,!1)}(xor4096$1);var xor4096Exports=xor4096$1.exports,tychei$1={exports:{}};tychei$1.exports,function(n){(function(e,t,r){function s(l){var u=this,h="";u.next=function(){var c=u.b,o=u.c,d=u.d,m=u.a;return c=c<<25^c>>>7^o,o=o-d|0,d=d<<24^d>>>8^m,m=m-c|0,u.b=c=c<<20^c>>>12^o,u.c=o=o-d|0,u.d=d<<16^o>>>16^m,u.a=m-c|0},u.a=0,u.b=0,u.c=-1640531527,u.d=1367130551,l===Math.floor(l)?(u.a=l/4294967296|0,u.b=l|0):h+=l;for(var f=0;f<h.length+20;f++)u.b^=h.charCodeAt(f)|0,u.next()}function a(l,u){return u.a=l.a,u.b=l.b,u.c=l.c,u.d=l.d,u}function i(l,u){var h=new s(l),f=u&&u.state,c=function(){return(h.next()>>>0)/4294967296};return c.double=function(){do var o=h.next()>>>11,d=(h.next()>>>0)/4294967296,m=(o+d)/(1<<21);while(m===0);return m},c.int32=h.next,c.quick=c,f&&(typeof f=="object"&&a(f,h),c.state=function(){return a(h,{})}),c}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.tychei=i})(commonjsGlobal,n,!1)}(tychei$1);var tycheiExports=tychei$1.exports,seedrandom$1={exports:{}},__viteBrowserExternal={},__viteBrowserExternal$1=Object.freeze({__proto__:null,default:__viteBrowserExternal}),require$$0=getAugmentedNamespace(__viteBrowserExternal$1);(function(n){(function(e,t,r){var s=256,a=6,i=52,l="random",u=r.pow(s,a),h=r.pow(2,i),f=h*2,c=s-1,o;function d(w,v,S){var T=[];v=v==!0?{entropy:!0}:v||{};var C=$(y(v.entropy?[w,x(t)]:w??b(),3),T),I=new m(T),N=function(){for(var P=I.g(a),F=u,_=0;P<h;)P=(P+_)*s,F*=s,_=I.g(1);for(;P>=f;)P/=2,F/=2,_>>>=1;return(P+_)/F};return N.int32=function(){return I.g(4)|0},N.quick=function(){return I.g(4)/4294967296},N.double=N,$(x(I.S),t),(v.pass||S||function(P,F,_,D){return D&&(D.S&&g(D,I),P.state=function(){return g(I,{})}),_?(r[l]=P,F):P})(N,C,"global"in v?v.global:this==r,v.state)}function m(w){var v,S=w.length,T=this,C=0,I=T.i=T.j=0,N=T.S=[];for(S||(w=[S++]);C<s;)N[C]=C++;for(C=0;C<s;C++)N[C]=N[I=c&I+w[C%S]+(v=N[C])],N[I]=v;(T.g=function(P){for(var F,_=0,D=T.i,E=T.j,k=T.S;P--;)F=k[D=c&D+1],_=_*s+k[c&(k[D]=k[E=c&E+F])+(k[E]=F)];return T.i=D,T.j=E,_})(s)}function g(w,v){return v.i=w.i,v.j=w.j,v.S=w.S.slice(),v}function y(w,v){var S=[],T=typeof w,C;if(v&&T=="object")for(C in w)try{S.push(y(w[C],v-1))}catch{}return S.length?S:T=="string"?w:w+"\0"}function $(w,v){for(var S=w+"",T,C=0;C<S.length;)v[c&C]=c&(T^=v[c&C]*19)+S.charCodeAt(C++);return x(v)}function b(){try{var w;return o&&(w=o.randomBytes)?w=w(s):(w=new Uint8Array(s),(e.crypto||e.msCrypto).getRandomValues(w)),x(w)}catch{var v=e.navigator,S=v&&v.plugins;return[+new Date,e,S,e.screen,x(t)]}}function x(w){return String.fromCharCode.apply(0,w)}if($(r.random(),t),n.exports){n.exports=d;try{o=require$$0}catch{}}else r["seed"+l]=d})(typeof self<"u"?self:commonjsGlobal,[],Math)})(seedrandom$1);var seedrandomExports=seedrandom$1.exports,alea=aleaExports,xor128=xor128Exports,xorwow=xorwowExports,xorshift7=xorshift7Exports,xor4096=xor4096Exports,tychei=tycheiExports,sr=seedrandomExports;sr.alea=alea,sr.xor128=xor128,sr.xorwow=xorwow,sr.xorshift7=xorshift7,sr.xor4096=xor4096,sr.tychei=tychei;var seedrandom=sr;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MPRandGauss{constructor(e,t,r,s,a){this.mean=e,this.stdDev=t,this.dtype=r,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+this.stdDev*2,this.lower=this.mean-this.stdDev*2);const i=a||Math.random();this.random=seedrandom.alea(i.toString())}nextValue(){if(!isNaN(this.nextVal)){const s=this.nextVal;return this.nextVal=NaN,s}let e,t,r=!1;for(;!r;){let s,a,i;do s=2*this.random()-1,a=2*this.random()-1,i=s*s+a*a;while(i>=1||i===0);const l=Math.sqrt(-2*Math.log(i)/i);e=this.mean+this.stdDev*s*l,t=this.mean+this.stdDev*a*l,(!this.truncated||this.isValidTruncated(e))&&(r=!0)}return(!this.truncated||this.isValidTruncated(t))&&(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return this.dtype==null||this.dtype==="float32"?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class RandGamma{constructor(e,t,r,s){this.alpha=e,this.beta=1/t,this.dtype=r;const a=s||Math.random();this.randu=seedrandom.alea(a.toString()),this.randn=new MPRandGauss(0,1,r,!1,this.randu()),e<1?this.d=e+2/3:this.d=e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,r,s,a,i;for(;;){do s=this.randn.nextValue(),i=1+this.c*s;while(i<=0);if(i*=i*i,e=s*s,t=1-.331*e*e,r=.5*e+this.d*(1-i+Math.log(i)),a=this.randu(),a<t||Math.log(a)<r)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)}convertValue(e){return this.dtype==="float32"?e:Math.round(e)}}class UniformRandom{constructor(e=0,t=1,r,s){if(this.canReturnFloat=()=>this.dtype==null||this.dtype==="float32",this.min=e,this.range=t-e,this.dtype=r,s==null&&(s=Math.random()),typeof s=="number"&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=seedrandom.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function randomGamma_(n,e,t=1,r="float32",s){if(assertNonNegativeIntegerDimensions$1(n),t==null&&(t=1),r==null&&(r="float32"),r!=="float32"&&r!=="int32")throw new Error(`Unsupported data type ${r}`);const a=new RandGamma(e,t,r,s),i=buffer$1(n,r);for(let l=0;l<i.values.length;l++)i.values[l]=a.nextValue();return i.toTensor()}const randomGamma=op$1({randomGamma_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function randomNormal_(n,e=0,t=1,r,s){if(assertNonNegativeIntegerDimensions$1(n),r!=null&&r==="bool")throw new Error(`Unsupported data type ${r}`);const a=new MPRandGauss(e,t,r,!1,s),i=buffer$1(n,r);for(let l=0;l<i.values.length;l++)i.values[l]=a.nextValue();return i.toTensor()}const randomNormal$1=op$1({randomNormal_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function randomStandardNormal_(n,e,t){if(e!=null&&e==="bool")throw new Error(`Unsupported data type ${e}`);return randomNormal$1(n,0,1,e,t)}const randomStandardNormal=op$1({randomStandardNormal_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function randomUniform_(n,e=0,t=1,r="float32",s){assertNonNegativeIntegerDimensions$1(n);const a=buffer$1(n,r),i=new UniformRandom(e,t,null,s);for(let l=0;l<a.values.length;l++)a.values[l]=i.nextValue();return a.toTensor()}const randomUniform=op$1({randomUniform_});/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function randomUniformInt_(n,e,t,r){return randomUniform(n,e,t,"int32",r)}const randomUniformInt=op$1({randomUniformInt_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function range$4(n,e,t=1,r="float32"){if(t===0)throw new Error("Cannot have a step of zero");const s={start:n,stop:e,step:t,dtype:r};return ENGINE$1.runKernel(Range$1,{},s)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function real_(n){const t={input:convertToTensor$1(n,"input","real")};return ENGINE$1.runKernel(Real$1,t)}const real$3=op$1({real_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reciprocal_(n){const t={x:convertToTensor$1(n,"x","reciprocal")};return ENGINE$1.runKernel(Reciprocal$1,t)}const reciprocal$3=op$1({reciprocal_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function relu_(n){const t={x:convertToTensor$1(n,"x","relu")};return ENGINE$1.runKernel(Relu$2,t)}const relu$3=op$1({relu_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function relu6_(n){const t={x:convertToTensor$1(n,"x","relu6")};return ENGINE$1.runKernel(Relu6$2,t)}const relu6$3=op$1({relu6_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse_(n,e){const r={x:convertToTensor$1(n,"x","reverse")},s={dims:e};return ENGINE$1.runKernel(Reverse$1,r,s)}const reverse$3=op$1({reverse_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse1d_(n){const e=convertToTensor$1(n,"x","reverse");return assert$2(e.rank===1,()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`),reverse$3(e,0)}const reverse1d=op$1({reverse1d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse2d_(n,e){const t=convertToTensor$1(n,"x","reverse");return assert$2(t.rank===2,()=>`Error in reverse2D: x must be rank 2 but got rank ${t.rank}.`),reverse$3(t,e)}const reverse2d=op$1({reverse2d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse3d_(n,e){const t=convertToTensor$1(n,"x","reverse");return assert$2(t.rank===3,()=>`Error in reverse3D: x must be rank 3 but got rank ${t.rank}.`),reverse$3(t,e)}const reverse3d=op$1({reverse3d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse4d_(n,e){const t=convertToTensor$1(n,"x","reverse");return assert$2(t.rank===4,()=>`Error in reverse4D: x must be rank 4 but got rank ${t.rank}.`),reverse$3(t,e)}const reverse4d=op$1({reverse4d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function round_(n){const t={x:convertToTensor$1(n,"x","round")};return ENGINE$1.runKernel(Round$1,t)}const round$4=op$1({round_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rsqrt_(n){const t={x:convertToTensor$1(n,"x","rsqrt","float32")};return ENGINE$1.runKernel(Rsqrt$1,t)}const rsqrt$3=op$1({rsqrt_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function selu_(n){const t={x:convertToTensor$1(n,"x","selu")};return ENGINE$1.runKernel(Selu$2,t)}const selu$3=op$1({selu_});function separableConv2d_(n,e,t,r,s,a=[1,1],i="NHWC"){const l=convertToTensor$1(n,"x","separableConv2d"),u=convertToTensor$1(e,"depthwiseFilter","separableConv2d"),h=convertToTensor$1(t,"pointwiseFilter","separableConv2d");let f=l,c=!1;if(l.rank===3&&(c=!0,f=reshape$5(l,[1,l.shape[0],l.shape[1],l.shape[2]])),i==="NCHW")throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");assert$2(f.rank===4,()=>`Error in separableConv2d: input must be rank 4, but got rank ${f.rank}.`),assert$2(u.rank===4,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`),assert$2(h.rank===4,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`),assert$2(h.shape[0]===1,()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${h.shape[0]}.`),assert$2(h.shape[1]===1,()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${h.shape[1]}.`);const o=u.shape[2],d=u.shape[3];assert$2(h.shape[2]===o*d,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${o*d}, but got ${h.shape[2]}.`);const m=depthwiseConv2d$2(f,u,r,s,i,a),y=conv2d$3(m,h,1,"valid",i);return c?reshape$5(y,[y.shape[1],y.shape[2],y.shape[3]]):y}const separableConv2d=op$1({separableConv2d_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function setdiff1dAsync_(n,e){const t=convertToTensor$1(n,"x","setdiff1d"),r=convertToTensor$1(e,"y","setdiff1d");assert$2(t.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${t.dtype}) and y (${r.dtype}).`),assert$2(t.rank===1,()=>`x should be 1D tensor, but got x (${t.shape}).`),assert$2(r.rank===1,()=>`y should be 1D tensor, but got y (${r.shape}).`);const s=await t.data(),a=await r.data(),i=new Set(a);let l=0;for(let f=0;f<s.length;f++)i.has(s[f])||l++;const u=new TensorBuffer$1([l],t.dtype),h=new TensorBuffer$1([l],"int32");for(let f=0,c=0;f<s.length;f++)i.has(s[f])||(u.values[c]=s[f],h.values[c]=f,c++);return[u.toTensor(),h.toTensor()]}const setdiff1dAsync=setdiff1dAsync_;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sign_(n){const t={x:convertToTensor$1(n,"x","sign")};return ENGINE$1.runKernel(Sign$1,t)}const sign$3=op$1({sign_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sin_(n){const t={x:convertToTensor$1(n,"x","sin","float32")};return ENGINE$1.runKernel(Sin$1,t)}const sin$3=op$1({sin_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sinh_(n){const t={x:convertToTensor$1(n,"x","sinh")};return ENGINE$1.runKernel(Sinh$1,t)}const sinh$3=op$1({sinh_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice1d_(n,e,t){const r=convertToTensor$1(n,"x","slice1d");return assert$2(r.rank===1,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),slice$3(r,[e],[t])}const slice1d=op$1({slice1d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice2d_(n,e,t){const r=convertToTensor$1(n,"x","slice2d");return assert$2(r.rank===2,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),slice$3(r,e,t)}const slice2d=op$1({slice2d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice3d_(n,e,t){const r=convertToTensor$1(n,"x","slice3d");return assert$2(r.rank===3,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),slice$3(r,e,t)}const slice3d=op$1({slice3d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice4d_(n,e,t){const r=convertToTensor$1(n,"x","slice4d");return assert$2(r.rank===4,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),slice$3(r,e,t)}const slice4d=op$1({slice4d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softmax_(n,e=-1){const t=convertToTensor$1(n,"logits","softmax","float32");if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and dim was ${e}`);const r={logits:t},s={dim:e};return ENGINE$1.runKernel(Softmax$3,r,s)}const softmax$3=op$1({softmax_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fft_(n){assert$2(n.dtype==="complex64",()=>`The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`);const e={input:n};return ENGINE$1.runKernel(FFT$1,e)}const fft$3=op$1({fft_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ifft_(n){assert$2(n.dtype==="complex64",()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`);const e={input:n};return ENGINE$1.runKernel(IFFT$1,e)}const ifft$3=op$1({ifft_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function irfft_(n){const e=n.shape[n.shape.length-1],t=n.size/e;let r;if(e<=2){const s=reshape$5(n,[t,e]);r=ifft$3(s)}else{const s=[t,2*(e-1)],a=reshape$5(real$3(n),[t,e]),i=reshape$5(imag$3(n),[t,e]),l=reverse$3(slice$3(a,[0,1],[t,e-2]),1),u=mul$1(reverse$3(slice$3(i,[0,1],[t,e-2]),1),scalar$1(-1)),h=concat$3([a,l],1),f=concat$3([i,u],1),c=reshape$5(complex$4(h,f),[s[0],s[1]]);r=ifft$3(c)}if(r=real$3(r),n.rank===3&&n.shape[0]!==0){const s=r,a=n.shape[0];r=reshape$5(r,[a,r.shape[0]/a,r.shape[1]]),s.dispose()}return r}const irfft=op$1({irfft_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function split_(n,e,t=0){const s={x:convertToTensor$1(n,"x","split")},a={numOrSizeSplits:e,axis:t};return ENGINE$1.runKernel(SplitV$1,s,a)}const split$3=op$1({split_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rfft_(n,e){assert$2(n.dtype==="float32",()=>`The dtype for rfft() must be real value but got ${n.dtype}`);let t=n.shape[n.shape.length-1];const r=n.size/t;let s;if(e!=null&&e<t){const m=n.shape.map(y=>0),g=n.shape.map(y=>y);g[n.shape.length-1]=e,s=slice$3(n,m,g),t=e}else if(e!=null&&e>t){const m=n.shape.map(g=>g);m[n.shape.length-1]=e-t,s=concat$3([n,zeros$2(m)],n.shape.length-1),t=e}else s=n;const a=zerosLike$4(s),i=reshape$5(complex$4(s,a),[r,t]),l=fft$3(i),u=Math.floor(t/2)+1,h=real$3(l),f=imag$3(l),c=split$3(h,[u,t-u],h.shape.length-1),o=split$3(f,[u,t-u],f.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,reshape$5(complex$4(c[0],o[0]),d)}const rfft=op$1({rfft_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function squaredDifference_(n,e){let t=convertToTensor$1(n,"a","squaredDifference"),r=convertToTensor$1(e,"b","squaredDifference");[t,r]=makeTypesMatch$1(t,r),assertAndGetBroadcastShape$1(t.shape,r.shape);const s={a:t,b:r},a={};return ENGINE$1.runKernel(SquaredDifference$1,s,a)}const squaredDifference$3=op$1({squaredDifference_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function squeeze_(n,e){const t=convertToTensor$1(n,"x","squeeze","string_or_numeric");return reshape$5(t,squeezeShape(t.shape,e).newShape)}const squeeze=op$1({squeeze_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stack_(n,e=0){const t=convertToTensorArray(n,"tensors","stack","string_or_numeric");assert$2(t.length>=1,()=>"Pass at least one tensor to tf.stack"),t.length>0&&assert$2(e<=t[0].rank,()=>"Axis must be <= rank of the tensor");const r=t,s={axis:e};return ENGINE$1.runKernel(Pack$1,r,s)}const stack=op$1({stack_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function step_(n,e=0){const r={x:convertToTensor$1(n,"x","step")},s={alpha:e};return ENGINE$1.runKernel(Step$1,r,s)}const step$3=op$1({step_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSlice_(n,e,t,r,s=0,a=0,i=0,l=0,u=0){const f={x:convertToTensor$1(n,"x","stridedSlice","string_or_numeric")},c={begin:e,end:t,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:l,shrinkAxisMask:u};return ENGINE$1.runKernel(StridedSlice$1,f,c)}const stridedSlice$3=op$1({stridedSlice_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tan_(n){const t={x:convertToTensor$1(n,"x","tan","float32")};return ENGINE$1.runKernel(Tan$1,t)}const tan$3=op$1({tan_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor1d(n,e){assertNonNull(n);const t=inferShape$1(n,e);if(t.length!==1)throw new Error("tensor1d() requires values to be a flat/TypedArray");return makeTensor$1(n,null,t,e)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor2d(n,e,t){if(assertNonNull(n),e!=null&&e.length!==2)throw new Error("tensor2d() requires shape to have two numbers");const r=inferShape$1(n,t);if(r.length!==2&&r.length!==1)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(r.length===1&&e==null)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return makeTensor$1(n,e,r,t)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor3d(n,e,t){if(assertNonNull(n),e!=null&&e.length!==3)throw new Error("tensor3d() requires shape to have three numbers");const r=inferShape$1(n,t);if(r.length!==3&&r.length!==1)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(r.length===1&&e==null)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return makeTensor$1(n,e,r,t)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor4d(n,e,t){if(assertNonNull(n),e!=null&&e.length!==4)throw new Error("tensor4d() requires shape to have four numbers");const r=inferShape$1(n,t);if(r.length!==4&&r.length!==1)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(r.length===1&&e==null)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return makeTensor$1(n,e,r,t)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor5d(n,e,t){if(assertNonNull(n),e!=null&&e.length!==5)throw new Error("tensor5d() requires shape to have five numbers");const r=inferShape$1(n,t);if(r.length!==5&&r.length!==1)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(r.length===1&&e==null)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return makeTensor$1(n,e,r,t)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor6d(n,e,t){if(assertNonNull(n),e!=null&&e.length!==6)throw new Error("tensor6d() requires shape to have six numbers");const r=inferShape$1(n,t);if(r.length!==6&&r.length!==1)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(r.length===1&&e==null)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return e=e||r,makeTensor$1(n,e,r,t)}function validateUpdateShape(n,e,t){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${t.shape}, indices.shape: ${e.shape}, shape: ${n}, sliceDim: ${r}, and batchDim: ${s}.`;if(t.rank<s)throw new Error(a+` update.rank < ${s}. `);if(n.length<r+(t.rank-s))throw new Error(a+` Output shape length < ${r+(t.rank-s)}`);if(t.rank!==s+n.length-r)throw new Error(a+` update.rank != ${s+n.length-r}`);for(let i=0;i<s;++i)if(t.shape[i]!==e.shape[i])throw new Error(a+` updates.shape[${i}] (${t.shape[i]}) != indices.shape[${i}] (${e.shape[i]}).`);for(let i=0;i<t.rank-s;++i)if(t.shape[i+s]!==n[i+r])throw new Error(a+` updates.shape[${i+s}] (${t.shape[i+s]}) != shape[${i+s}] (${n[i+s]})`)}function validateInput$1(n,e,t){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(n.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);if(e.dtype!=="int32")throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);if(t.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${t}`);if(t.length===0){if(e.size===0)throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);if(n.size===0)throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`)}validateUpdateShape(t,e,n)}function calculateShapes$1(n,e,t){const r=e.shape.length,s=r>1?e.shape[r-1]:1,a=t.length;let i=1;for(let c=s;c<a;++c)i*=t[c];const l=s<1?1:s,u=sizeFromShape$1(e.shape)/l,h=[...computeStrides$1(t.slice(0,s)),1],f=sizeFromShape$1(t);return{sliceRank:s,numUpdates:u,sliceSize:i,strides:h,outputSize:f}}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensorScatterUpdate_(n,e,t){const r=convertToTensor$1(n,"tensor","tensorScatterupdate"),s=convertToTensor$1(e,"indices","tensorScatterupdate","int32"),a=convertToTensor$1(t,"updates","tensorScatterupdate");if(validateInput$1(a,s,r.shape),r.dtype!==a.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${r.dtype} and ${a.dtype}.`);const i={tensor:r,indices:s,updates:a},l={};return ENGINE$1.runKernel(TensorScatterUpdate$1,i,l)}const tensorScatterUpdate$3=op$1({tensorScatterUpdate_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function topk_(n,e=1,t=!0){const r=convertToTensor$1(n,"x","topk");if(r.rank===0)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${e}`);const a={x:r},i={k:e,sorted:t},[l,u]=ENGINE$1.runKernel(TopK$1,a,i);return{values:l,indices:u}}const topk=op$1({topk_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function truncatedNormal_(n,e=0,t=1,r,s){if(assertNonNegativeIntegerDimensions$1(n),r!=null&&r==="bool")throw new Error("Unsupported data type $ { dtype }");const a=new MPRandGauss(e,t,r,!0,s),i=buffer$1(n,r);for(let l=0;l<i.values.length;l++)i.values[l]=a.nextValue();return i.toTensor()}const truncatedNormal=op$1({truncatedNormal_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unique_(n,e=0){const t=convertToTensor$1(n,"x","unique","string_or_numeric");assert$2(t.rank>0,()=>"The input tensor must be at least 1D");const r={x:t},s={axis:e},[a,i]=ENGINE$1.runKernel(Unique,r,s);return{values:a,indices:i}}const unique$3=op$1({unique_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unsortedSegmentSum_(n,e,t){const r=convertToTensor$1(n,"x","unsortedSegmentSum"),s=convertToTensor$1(e,"segmentIds","unsortedSegmentSum","int32");assert$2(isInt$1(t),()=>"numSegments must be of dtype int");const a={x:r,segmentIds:s},i={numSegments:t};return ENGINE$1.runKernel(UnsortedSegmentSum$1,a,i)}const unsortedSegmentSum$3=op$1({unsortedSegmentSum_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unstack_(n,e=0){const t=convertToTensor$1(n,"x","unstack","string_or_numeric");assert$2(e>=-t.shape.length&&e<t.shape.length,()=>`Axis = ${e} is not in [-${t.shape.length}, ${t.shape.length})`);const r={value:t},s={axis:e};return ENGINE$1.runKernel(Unpack$1,r,s)}const unstack=op$1({unstack_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function upperBound$1(n,e){return searchSorted$3(n,e,"right")}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function variable(n,e=!0,t,r){return ENGINE$1.makeVariable(n,e,t,r)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function whereImpl$2(n,e){const t=[];for(let a=0;a<e.length;a++)e[a]&&t.push(a);const r=buffer$1(n,"int32"),s=buffer$1([t.length,n.length],"int32");for(let a=0;a<t.length;a++){const i=r.indexToLoc(t[a]),l=a*n.length;s.values.set(i,l)}return s.toTensor()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function whereAsync_(n){const e=convertToTensor$1(n,"condition","whereAsync","bool"),t=await e.data(),r=whereImpl$2(e.shape,t);return n!==e&&e.dispose(),r}const whereAsync=whereAsync_;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function booleanMaskAsync_(n,e,t){const r=convertToTensor$1(n,"tensor","boolMask"),s=convertToTensor$1(e,"mask","boolMask","bool"),a=t??0,i=s.rank,l=r.shape;assert$2(i>0,()=>"mask cannot be scalar"),assertShapesMatch$1(l.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let g=a;g<a+i;g++)u*=l[g];const h=l.slice(0,a).concat([u],l.slice(a+i)),f=reshape$5(r,h),c=reshape$5(s,[-1]),o=await whereAsync(c),d=squeeze(o,[1]),m=gather$1(f,d,a);return n!==r&&r.dispose(),e!==s&&s.dispose(),d.dispose(),f.dispose(),c.dispose(),o.dispose(),m}const booleanMaskAsync=booleanMaskAsync_;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transpose_(n,e,t){const r=convertToTensor$1(n,"x","transpose");if(e==null&&(e=r.shape.map((i,l)=>l).reverse()),assert$2(r.rank===e.length,()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${e}.`),e.forEach(i=>{assert$2(i>=0&&i<r.rank,()=>`All entries in 'perm' must be between 0 and ${r.rank-1} but got ${e}`)}),r.rank<=1)return r.clone();const s={x:r},a={perm:e};return r.dtype==="complex64"?tidy$1(()=>{let i=real$3(r),l=imag$3(r);return i=ENGINE$1.runKernel(Transpose$1,{x:i},a),l=ENGINE$1.runKernel(Transpose$1,{x:l},a),t&&(l=neg$3(l)),complex$4(i,l)}):ENGINE$1.runKernel(Transpose$1,s,a)}const transpose$3=op$1({transpose_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function movingAverage_(n,e,t,r,s=!0){const a=convertToTensor$1(n,"v","movingAverage"),i=convertToTensor$1(e,"x","movingAverage"),l=convertToTensor$1(t,"decay","movingAverage");assertTypesMatch(a,i),assert$2(arraysEqual$1(a.shape,i.shape),()=>"Shape mismatch in v and x");const u=scalar$1(1),h=sub$4(u,l);let f=mul$1(sub$4(i,a),h);if(s){assert$2(r!=null,()=>"When using zeroDebias: true, step is required.");const c=convertToTensor$1(r,"step","movingAverage");f=div$2(f,sub$4(u,pow$4(l,c)))}return add$3(a,f)}const movingAverage=op$1({movingAverage_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterND_(n,e,t){assertNonNegativeIntegerDimensions$1(t);const r=convertToTensor$1(n,"indices","scatterND","int32"),s=convertToTensor$1(e,"updates","scatterND");validateInput$1(s,r,t);const a={indices:r,updates:s},i={shape:t};return ENGINE$1.runKernel(ScatterNd$1,a,i)}const scatterND=op$1({scatterND_});function validateInput(n,e,t,r){if(n.dtype!=="int32")throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${n.dtype}.`);if(n.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${n.shape}.`);const s=n.rank>0?n.shape[0]:1,a=n.rank>1?n.shape[1]:1;if(t.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${t.length}, should be: ${a}.`);const i=e.size;if(!(e.rank===0||e.rank===1&&i===s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseToDense_(n,e,t,r=0){assertNonNegativeIntegerDimensions$1(t);const s=convertToTensor$1(n,"sparseIndices","sparseToDense","int32"),a=convertToTensor$1(e,"sparseValues","sparseToDense","string_or_numeric"),i=convertToTensor$1(r,"defaultValue","sparseToDense",a.dtype);validateInput(s,a,t,i);const l={sparseIndices:s,sparseValues:a,defaultValue:i},u={outputShape:t};return ENGINE$1.runKernel(SparseToDense$1,l,u)}const sparseToDense$3=op$1({sparseToDense_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherND_(n,e){const t=convertToTensor$1(e,"indices","gatherND","int32"),s={params:convertToTensor$1(n,"x","gatherND","string_or_numeric"),indices:t};return ENGINE$1.runKernel(GatherNd$1,s)}const gatherND=op$1({gatherND_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getNoiseShape(n,e){if(e==null)return n.shape.slice();if(arraysEqual$1(n.shape,e))return e;if(n.shape.length===e.length){const t=[];for(let r=0;r<n.shape.length;r++)e[r]==null&&n.shape[r]!=null?t.push(n.shape[r]):t.push(e[r]);return t}return e}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dropout_(n,e,t,r){const s=convertToTensor$1(n,"x","dropout");if(assert$2(s.dtype==="float32",()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),assert$2(e>=0&&e<1,()=>`rate must be a float in the range [0, 1), but got ${e}.`),e===0)return n instanceof Tensor$1?s.clone():s;const a=getNoiseShape(s,t),i=1-e,l=div$2(floor$3(add$3(randomUniform(a,0,1,"float32",r),i)),i);return mul$1(s,l)}const dropout$1=op$1({dropout_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function enclosingPowerOfTwo(n){return Math.floor(Math.pow(2,Math.ceil(Math.log(n)/Math.log(2))))}function cosineWindow(n,e,t){const r=1-n%2,s=new Float32Array(n);for(let a=0;a<n;++a){const i=2*Math.PI*a/(n+r-1);s[a]=e-t*Math.cos(i)}return tensor1d(s,"float32")}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function inTopKAsync_(n,e,t=1){const r=convertToTensor$1(n,"predictions","inTopK"),s=convertToTensor$1(e,"targets","inTopK");assert$2(r.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`),assert$2(r.rank-1===s.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`),assertShapesMatch$1(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];assert$2(t>0&&t<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${t}`);const i=await r.data(),l=await s.data(),[u,h]=[i.length/a,a],f=getTypedArrayFromDType$1("bool",u);for(let c=0;c<u;c++){const o=c*h,d=i.subarray(o,o+h),m=[];for(let g=0;g<d.length;g++)m.push({value:d[g],index:g});m.sort((g,y)=>y.value-g.value),f[c]=0;for(let g=0;g<t;g++)if(m[g].index===l[c]){f[c]=1;break}}return n!==r&&r.dispose(),e!==s&&s.dispose(),tensor(f,s.shape,"bool")}const inTopKAsync=inTopKAsync_;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropFilter_(n,e,t,r,s,a="NHWC",i){let l=n;n.rank===3&&(l=reshape$5(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let u=e;u.rank===3&&(u=reshape$5(e,[1,e.shape[0],e.shape[1],e.shape[2]])),assert$2(l.rank===4,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${l.shape}.`),assert$2(u.rank===4,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`),assert$2(t.length===4,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${t}.`);const h=a==="NHWC"?l.shape[3]:l.shape[1],f=a==="NHWC"?u.shape[3]:u.shape[1];assert$2(h===t[2],()=>`Error in conv2dDerFilter: depth of input ${h}) must match input depth in filter (${t[2]}.`),assert$2(f===t[3],()=>`Error in conv2dDerFilter: depth of dy (${f}) must match output depth for filter (${t[3]}).`),checkPadOnDimRoundingMode("conv2dDerFilter",s,i);const c={x:l,dy:u},o={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,filterShape:t};return ENGINE$1.runKernel(Conv2DBackpropFilter$1,c,o)}const conv2DBackpropFilter$3=op$1({conv2DBackpropFilter_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getFusedDyActivation(n,e,t){if(t==null||t==="linear")return n;if(t==="relu")return mul$1(n,step$3(e));throw new Error(`Cannot compute gradient for fused activation ${t}.`)}function getFusedBiasGradient(n,e){let t=e;const r=getReductionAxes(n.shape,e.shape);return r.length>0&&(t=sum$4(t,r)),reshape$5(t,n.shape)}function applyActivation$1(n,e,t,r){if(e==="linear")return n;if(e==="relu")return relu$3(n);if(e==="elu")return elu$4(n);if(e==="relu6")return relu6$3(n);if(e==="prelu")return prelu$3(n,t);if(e==="leakyrelu")return leakyRelu$3(n,r);if(e==="sigmoid")return sigmoid$3(n);throw new Error(`Unknown fused activation ${e}.`)}const shouldFuse=(n,e)=>!(n>0)||e==="linear";/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedConv2d_({x:n,filter:e,strides:t,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:l,activation:u="linear",preluActivationWeights:h,leakyreluAlpha:f}){if(u=u||"linear",shouldFuse(ENGINE$1.state.gradientDepth,u)===!1){assert$2(s==="NHWC",()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let S=conv2d$3(n,e,t,r,s,a,i);return l!=null&&(S=add$3(S,l)),applyActivation$1(S,u,h,f)}const c=convertToTensor$1(n,"x","conv2d","float32"),o=convertToTensor$1(e,"filter","conv2d","float32");let d=c,m=!1;c.rank===3&&(m=!0,d=reshape$5(c,[1,c.shape[0],c.shape[1],c.shape[2]])),assert$2(d.rank===4,()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`),assert$2(o.rank===4,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${o.rank}.`),checkPadOnDimRoundingMode("fused conv2d",r,i);const g=s==="NHWC"?d.shape[3]:d.shape[1];assert$2(o.shape[2]===g,()=>`Error in conv2d: depth of input (${g}) must match input depth for filter ${o.shape[2]}.`),assert$2(eitherStridesOrDilationsAreOne$1(t,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`);const y=computeConv2DInfo$1(d.shape,o.shape,t,a,r,i);let $;l!=null&&($=convertToTensor$1(l,"bias","fused conv2d"),[$]=makeTypesMatch$1($,c),s==="NHWC"?assertAndGetBroadcastShape$1(y.outShape,$.shape):(assert$2($.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${$.shape.length}.`),assert$2($.shape.length===0||$.shape[0]===y.outChannels||$.shape[0]===1,()=>`Error in fused conv2d: bias shape (${$.shape}) is not compatible with the number of output channels (${y.outChannels})`)));let b;if(h!=null){const S=h.shape;if(assert$2(S.length<=1||S.length===3,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${S.length}.`),S.length===1)assert$2(S[0]===1||S[0]===y.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${S}) is not compatible with the number of output channels (${y.outChannels}).`);else if(S.length===3)try{assertAndGetBroadcastShape$1(S,y.outShape)}catch{const C=`Error in fused conv2d: PReLU activation weights (${S}) is not compatible with the output shape of the conv2d (${y.outShape}).`;throw Error(C)}b=convertToTensor$1(h,"prelu weights","fused conv2d")}const x=(S,T)=>{assert$2(s==="NHWC",()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`);const[C,I,N,P]=T,F=getFusedDyActivation(S,N,u);assert$2(tupleValuesAreOne$1(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const _=conv2DBackpropInput$3(I.shape,F,C,t,r),D=conv2DBackpropFilter$3(I,F,C.shape,t,r),E=[_,D];if(P!=null){const k=getFusedBiasGradient(P,F);E.push(k)}return E},w={x:d,filter:o,bias:$,preluActivationWeights:b},v={strides:t,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:f};return l==null?customGrad((T,C,I)=>{let N=ENGINE$1.runKernel(FusedConv2D$1,w,v);return I([C,T,N]),m&&(N=reshape$5(N,[N.shape[1],N.shape[2],N.shape[3]])),{value:N,gradFunc:x}})(d,o):customGrad((T,C,I,N)=>{let P=ENGINE$1.runKernel(FusedConv2D$1,w,v);return N([C,T,P,I]),m&&(P=reshape$5(P,[P.shape[1],P.shape[2],P.shape[3]])),{value:P,gradFunc:x}})(d,o,$)}const conv2d$2=op$1({fusedConv2d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropFilter_(n,e,t,r,s,a=[1,1],i){let l=n;n.rank===3&&(l=reshape$5(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let u=e;u.rank===3&&(u=reshape$5(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const h={x:l,dy:u},f={strides:r,pad:s,dimRoundingMode:i,dilations:a,filterShape:t};return ENGINE$1.runKernel(DepthwiseConv2dNativeBackpropFilter$1,h,f)}const depthwiseConv2dNativeBackpropFilter$3=op$1({depthwiseConv2dNativeBackpropFilter_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropInput_(n,e,t,r,s,a=[1,1],i){let l=e,u=!1;e.rank===3&&(u=!0,l=reshape$5(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const h={dy:l,filter:t},f={strides:r,pad:s,dimRoundingMode:i,dilations:a,inputShape:n},c=ENGINE$1.runKernel(DepthwiseConv2dNativeBackpropInput$1,h,f);return u?reshape$5(c,[c.shape[1],c.shape[2],c.shape[3]]):c}const depthwiseConv2dNativeBackpropInput$3=op$1({depthwiseConv2dNativeBackpropInput_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedDepthwiseConv2d_({x:n,filter:e,strides:t,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:l,activation:u="linear",preluActivationWeights:h,leakyreluAlpha:f}){if(shouldFuse(ENGINE$1.state.gradientDepth,u)===!1){let v=depthwiseConv2d$2(n,e,t,r,s,a,i);return l!=null&&(v=add$3(v,l)),applyActivation$1(v,u,h,f)}const c=convertToTensor$1(n,"x","depthwiseConv2d","float32"),o=convertToTensor$1(e,"filter","depthwiseConv2d","float32");let d=c,m=!1;c.rank===3&&(m=!0,d=reshape$5(c,[1,c.shape[0],c.shape[1],c.shape[2]])),assert$2(d.rank===4,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`),assert$2(o.rank===4,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${o.rank}.`),assert$2(d.shape[3]===o.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${o.shape[2]}.`),a==null&&(a=[1,1]),assert$2(eitherStridesOrDilationsAreOne$1(t,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`),checkPadOnDimRoundingMode("fused depthwiseConv2d",r,i);const g=computeConv2DInfo$1(d.shape,o.shape,t,a,r,i,!0);let y;l!=null&&(y=convertToTensor$1(l,"bias","fused conv2d"),[y]=makeTypesMatch$1(y,c),assertAndGetBroadcastShape$1(g.outShape,y.shape));let $;h!=null&&($=convertToTensor$1(h,"prelu weights","fused depthwiseConv2d"));const b=(v,S)=>{assert$2(tupleValuesAreOne$1(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[T,C,I,N]=S,P=getFusedDyActivation(v,I,u),F=depthwiseConv2dNativeBackpropInput$3(C.shape,P,T,t,r,a,i),_=depthwiseConv2dNativeBackpropFilter$3(C,P,T.shape,t,r,a,i);if(N!=null){const D=getFusedBiasGradient(y,P);return[F,_,D]}return[F,_]},x={x:d,filter:o,bias:y,preluActivationWeights:$},w={strides:t,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:f};return l==null?customGrad((S,T,C)=>{let I=ENGINE$1.runKernel(FusedDepthwiseConv2D$1,x,w);return C([T,S,I]),m&&(I=reshape$5(I,[I.shape[1],I.shape[2],I.shape[3]])),{value:I,gradFunc:b}})(d,o):customGrad((S,T,C,I)=>{let N=ENGINE$1.runKernel(FusedDepthwiseConv2D$1,x,w);return I([T,S,N,C]),m&&(N=reshape$5(N,[N.shape[1],N.shape[2],N.shape[3]])),{value:N,gradFunc:b}})(d,o,y)}const depthwiseConv2d$1=op$1({fusedDepthwiseConv2d_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedMatMul_({a:n,b:e,transposeA:t=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:l=.2}){if(shouldFuse(ENGINE$1.state.gradientDepth,a)===!1){let P=matMul$1(n,e,t,r);return s!=null&&(P=add$3(P,s)),applyActivation$1(P,a,i,l)}let u=convertToTensor$1(n,"a","fused matMul"),h=convertToTensor$1(e,"b","fused matMul");[u,h]=makeTypesMatch$1(u,h);const f=t?u.shape[u.rank-2]:u.shape[u.rank-1],c=r?h.shape[h.rank-1]:h.shape[h.rank-2],o=t?u.shape[u.rank-1]:u.shape[u.rank-2],d=r?h.shape[h.rank-2]:h.shape[h.rank-1],m=u.shape.slice(0,-2),g=h.shape.slice(0,-2),y=sizeFromShape$1(m),$=sizeFromShape$1(g);assert$2(f===c,()=>`Error in fused matMul: inner shapes (${f}) and (${c}) of Tensors with shapes ${u.shape} and ${h.shape} and transposeA=${t} and transposeB=${r} must match.`);const x=assertAndGetBroadcastShape$1(u.shape.slice(0,-2),h.shape.slice(0,-2)).concat([o,d]),w=t?reshape$5(u,[y,f,o]):reshape$5(u,[y,o,f]),v=r?reshape$5(h,[$,d,c]):reshape$5(h,[$,c,d]);let S;s!=null&&(S=convertToTensor$1(s,"bias","fused matMul"),[S]=makeTypesMatch$1(S,u),assertAndGetBroadcastShape$1(x,S.shape));let T;i!=null&&(T=convertToTensor$1(i,"prelu weights","fused matMul"));const C=(P,F)=>{const[_,D,E,k]=F,O=getFusedDyActivation(reshape$5(P,E.shape),E,a);let M,z;if(!t&&!r?(M=matMul$1(O,D,!1,!0),z=matMul$1(_,O,!0,!1)):!t&&r?(M=matMul$1(O,D,!1,!1),z=matMul$1(O,_,!0,!1)):t&&!r?(M=matMul$1(D,O,!1,!0),z=matMul$1(_,O,!1,!1)):(M=matMul$1(D,O,!0,!0),z=matMul$1(O,_,!0,!0)),s!=null){const G=getFusedBiasGradient(k,O);return[M,z,G]}else return[M,z]},I={a:w,b:v,bias:S,preluActivationWeights:T},N={transposeA:t,transposeB:r,activation:a,leakyreluAlpha:l};return s==null?customGrad((F,_,D)=>{const E=ENGINE$1.runKernel(_FusedMatMul$1,I,N);return D([F,_,E]),{value:reshape$5(E,x),gradFunc:C}})(w,v):customGrad((F,_,D,E)=>{const k=ENGINE$1.runKernel(_FusedMatMul$1,I,N);return E([F,_,k,D]),{value:reshape$5(k,x),gradFunc:C}})(w,v,S)}const matMul=op$1({fusedMatMul_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var fused_ops=Object.freeze({__proto__:null,conv2d:conv2d$2,depthwiseConv2d:depthwiseConv2d$1,matMul});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function hammingWindow_(n){return cosineWindow(n,.54,.46)}const hammingWindow=op$1({hammingWindow_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function hannWindow_(n){return cosineWindow(n,.5,.5)}const hannWindow=op$1({hannWindow_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function frame_(n,e,t,r=!1,s=0){let a=0;const i=[];for(;a+e<=n.size;)i.push(slice$3(n,a,e)),a+=t;if(r)for(;a<n.size;){const l=a+e-n.size,u=concat$3([slice$3(n,a,e-l),fill$4([l],s)]);i.push(u),a+=t}return i.length===0?tensor2d([],[0,e]):reshape$5(concat$3(i),[i.length,e])}const frame=op$1({frame_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stft_(n,e,t,r,s=hannWindow){r==null&&(r=enclosingPowerOfTwo(e));const a=frame(n,e,t),i=mul$1(a,s(e));return rfft(i,r)}const stft=op$1({stft_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cropAndResize_(n,e,t,r,s="bilinear",a=0){const i=convertToTensor$1(n,"image","cropAndResize"),l=convertToTensor$1(e,"boxes","cropAndResize","float32"),u=convertToTensor$1(t,"boxInd","cropAndResize","int32"),h=l.shape[0];assert$2(i.rank===4,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),assert$2(l.rank===2&&l.shape[1]===4,()=>`Error in cropAndResize: boxes must be have size [${h},4] but had shape ${l.shape}.`),assert$2(u.rank===1&&u.shape[0]===h,()=>`Error in cropAndResize: boxInd must be have size [${h}] but had shape ${l.shape}.`),assert$2(r.length===2,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),assert$2(r[0]>=1&&r[1]>=1,()=>`cropSize must be atleast [1,1], but was ${r}`),assert$2(s==="bilinear"||s==="nearest",()=>`method must be bilinear or nearest, but was ${s}`);const f={image:i,boxes:l,boxInd:u},c={method:s,extrapolationValue:a,cropSize:r};return ENGINE$1.runKernel(CropAndResize$1,f,c)}const cropAndResize$4=op$1({cropAndResize_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function flipLeftRight_(n){const e=convertToTensor$1(n,"image","flipLeftRight","float32");assert$2(e.rank===4,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);const t={image:e};return ENGINE$1.runKernel(FlipLeftRight$1,t,{})}const flipLeftRight=op$1({flipLeftRight_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function grayscaleToRGB_(n){const e=convertToTensor$1(n,"image","grayscaleToRGB"),t=e.rank-1,r=e.shape[t];assert$2(e.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`),assert$2(r===1,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`);const s=new Array(e.rank);return s.fill(1,0,t),s[t]=3,tile$4(e,s)}const grayscaleToRGB=op$1({grayscaleToRGB_});/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rgbToGrayscale_(n){const e=convertToTensor$1(n,"image","RGBToGrayscale"),t=e.rank-1,r=e.shape[t];assert$2(e.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${e.rank}.`),assert$2(r===3,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${r}.`);const s=e.dtype,a=cast$5(e,"float32"),i=tensor1d([.2989,.587,.114]);let l;switch(e.rank){case 2:l=einsum$3("ij,j->i",a,i);break;case 3:l=einsum$3("ijk,k->ij",a,i);break;case 4:l=einsum$3("ijkl,l->ijk",a,i);break;case 5:l=einsum$3("ijklm,m->ijkl",a,i);break;case 6:l=einsum$3("ijklmn,n->ijklm",a,i);break;default:throw new Error("Not a valid tensor rank.")}return l=expandDims$4(l,-1),cast$5(l,s)}const rgbToGrayscale=op$1({rgbToGrayscale_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rotateWithOffset_(n,e,t=0,r=.5){const s=convertToTensor$1(n,"image","rotateWithOffset","float32");assert$2(s.rank===4,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`);const a={image:s},i={radians:e,fillValue:t,center:r};return ENGINE$1.runKernel(RotateWithOffset$1,a,i)}const rotateWithOffset=op$1({rotateWithOffset_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppSanityCheck(n,e,t,r,s,a){r==null&&(r=.5),s==null&&(s=Number.NEGATIVE_INFINITY),a==null&&(a=0);const i=n.shape[0];return t=Math.min(t,i),assert$2(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),assert$2(n.rank===2,()=>`boxes must be a 2D tensor, but was of rank '${n.rank}'`),assert$2(n.shape[1]===4,()=>`boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`),assert$2(e.rank===1,()=>"scores must be a 1D tensor"),assert$2(e.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${e.shape[0]}`),assert$2(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:t,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppression_(n,e,t,r=.5,s=Number.NEGATIVE_INFINITY){const a=convertToTensor$1(n,"boxes","nonMaxSuppression","float32"),i=convertToTensor$1(e,"scores","nonMaxSuppression","float32"),l=nonMaxSuppSanityCheck(a,i,t,r,s);t=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold;const u={maxOutputSize:t,iouThreshold:r,scoreThreshold:s};return ENGINE$1.runKernel(NonMaxSuppressionV3$1,{boxes:a,scores:i},u)}const nonMaxSuppression=op$1({nonMaxSuppression_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function binaryInsert$1(n,e,t){const r=binarySearch$1(n,e,t),s=r<0?-(r+1):r;n.splice(s,0,e)}function binarySearch$1(n,e,t){return binarySearch_$1(n,e,t||defaultComparator$1)}function defaultComparator$1(n,e){return n>e?1:n<e?-1:0}function binarySearch_$1(n,e,t){let r=0,s=n.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const l=t(e,n[a]);l>0?r=a+1:(s=a,i=!l)}return i?r:-r-1}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppressionV3Impl$3(n,e,t,r,s){return nonMaxSuppressionImpl_$1(n,e,t,r,s,0)}function nonMaxSuppressionV4Impl$2(n,e,t,r,s,a){return nonMaxSuppressionImpl_$1(n,e,t,r,s,0,!1,a,!0)}function nonMaxSuppressionV5Impl$3(n,e,t,r,s,a){return nonMaxSuppressionImpl_$1(n,e,t,r,s,a,!0)}function nonMaxSuppressionImpl_$1(n,e,t,r,s,a,i=!1,l=!1,u=!1){const h=[];for(let y=0;y<e.length;y++)e[y]>s&&h.push({score:e[y],boxIndex:y,suppressBeginIndex:0});h.sort(ascendingComparator$1);const f=a>0?-.5/a:0,c=[],o=[];for(;c.length<t&&h.length>0;){const y=h.pop(),{score:$,boxIndex:b,suppressBeginIndex:x}=y;if($<s)break;let w=!1;for(let v=c.length-1;v>=x;--v){const S=intersectionOverUnion$1(n,b,c[v]);if(S>=r){w=!0;break}if(y.score=y.score*suppressWeight$1(r,f,S),y.score<=s)break}y.suppressBeginIndex=c.length,w||(y.score===$?(c.push(b),o.push(y.score)):y.score>s&&binaryInsert$1(h,y,ascendingComparator$1))}const d=c.length,m=t-d;l&&m>0&&(c.push(...new Array(m).fill(0)),o.push(...new Array(m).fill(0)));const g={selectedIndices:c};return i&&(g.selectedScores=o),u&&(g.validOutputs=d),g}function intersectionOverUnion$1(n,e,t){const r=n.subarray(e*4,e*4+4),s=n.subarray(t*4,t*4+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),l=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),h=Math.min(s[0],s[2]),f=Math.min(s[1],s[3]),c=Math.max(s[0],s[2]),o=Math.max(s[1],s[3]),d=(l-a)*(u-i),m=(c-h)*(o-f);if(d<=0||m<=0)return 0;const g=Math.max(a,h),y=Math.max(i,f),$=Math.min(l,c),b=Math.min(u,o),x=Math.max($-g,0)*Math.max(b-y,0);return x/(d+m-x)}function suppressWeight$1(n,e,t){const r=Math.exp(e*t*t);return t<=n?r:0}function ascendingComparator$1(n,e){return n.score-e.score||n.score===e.score&&e.boxIndex-n.boxIndex}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function nonMaxSuppressionAsync_(n,e,t,r=.5,s=Number.NEGATIVE_INFINITY){const a=convertToTensor$1(n,"boxes","nonMaxSuppressionAsync"),i=convertToTensor$1(e,"scores","nonMaxSuppressionAsync"),l=nonMaxSuppSanityCheck(a,i,t,r,s);t=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),h=u[0],f=u[1],{selectedIndices:c}=nonMaxSuppressionV3Impl$3(h,f,t,r,s);return a!==n&&a.dispose(),i!==e&&i.dispose(),tensor1d(c,"int32")}const nonMaxSuppressionAsync=nonMaxSuppressionAsync_;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppressionWithScore_(n,e,t,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=convertToTensor$1(n,"boxes","nonMaxSuppression"),l=convertToTensor$1(e,"scores","nonMaxSuppression"),u=nonMaxSuppSanityCheck(i,l,t,r,s,a);t=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const h={boxes:i,scores:l},f={maxOutputSize:t,iouThreshold:r,scoreThreshold:s,softNmsSigma:a},c=ENGINE$1.runKernel(NonMaxSuppressionV5$1,h,f);return{selectedIndices:c[0],selectedScores:c[1]}}const nonMaxSuppressionWithScore=op$1({nonMaxSuppressionWithScore_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function nonMaxSuppressionWithScoreAsync_(n,e,t,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=convertToTensor$1(n,"boxes","nonMaxSuppressionAsync"),l=convertToTensor$1(e,"scores","nonMaxSuppressionAsync"),u=nonMaxSuppSanityCheck(i,l,t,r,s,a);t=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const h=await Promise.all([i.data(),l.data()]),f=h[0],c=h[1],{selectedIndices:o,selectedScores:d}=nonMaxSuppressionV5Impl$3(f,c,t,r,s,a);return i!==n&&i.dispose(),l!==e&&l.dispose(),{selectedIndices:tensor1d(o,"int32"),selectedScores:tensor1d(d)}}const nonMaxSuppressionWithScoreAsync=nonMaxSuppressionWithScoreAsync_;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppressionPadded_(n,e,t,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=convertToTensor$1(n,"boxes","nonMaxSuppression"),l=convertToTensor$1(e,"scores","nonMaxSuppression"),u=nonMaxSuppSanityCheck(i,l,t,r,s,null),h=u.maxOutputSize,f=u.iouThreshold,c=u.scoreThreshold,o={boxes:i,scores:l},d={maxOutputSize:h,iouThreshold:f,scoreThreshold:c,padToMaxOutputSize:a},m=ENGINE$1.runKernel(NonMaxSuppressionV4,o,d);return{selectedIndices:m[0],validOutputs:m[1]}}const nonMaxSuppressionPadded=op$1({nonMaxSuppressionPadded_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function nonMaxSuppressionPaddedAsync_(n,e,t,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=convertToTensor$1(n,"boxes","nonMaxSuppressionAsync"),l=convertToTensor$1(e,"scores","nonMaxSuppressionAsync"),u=nonMaxSuppSanityCheck(i,l,t,r,s,null),h=u.maxOutputSize,f=u.iouThreshold,c=u.scoreThreshold,[o,d]=await Promise.all([i.data(),l.data()]),{selectedIndices:m,validOutputs:g}=nonMaxSuppressionV4Impl$2(o,d,h,f,c,a);return i!==n&&i.dispose(),l!==e&&l.dispose(),{selectedIndices:tensor1d(m,"int32"),validOutputs:scalar$1(g,"int32")}}const nonMaxSuppressionPaddedAsync=nonMaxSuppressionPaddedAsync_;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinear_(n,e,t=!1,r=!1){const s=convertToTensor$1(n,"images","resizeBilinear");assert$2(s.rank===3||s.rank===4,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`),assert$2(e.length===2,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${e}.`),assert$2(r===!1||t===!1,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let a=s,i=!1;s.rank===3&&(i=!0,a=reshape$5(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const l={images:a},u={alignCorners:t,halfPixelCenters:r,size:e},h=ENGINE$1.runKernel(ResizeBilinear$1,l,u);return i?reshape$5(h,[h.shape[1],h.shape[2],h.shape[3]]):h}const resizeBilinear$4=op$1({resizeBilinear_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighbor_(n,e,t=!1,r=!1){const s=convertToTensor$1(n,"images","resizeNearestNeighbor");assert$2(s.rank===3||s.rank===4,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`),assert$2(e.length===2,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`),assert$2(s.dtype==="float32"||s.dtype==="int32",()=>"`images` must have `int32` or `float32` as dtype"),assert$2(r===!1||t===!1,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let a=s,i=!1;s.rank===3&&(i=!0,a=reshape$5(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const l={images:a},u={alignCorners:t,halfPixelCenters:r,size:e},h=ENGINE$1.runKernel(ResizeNearestNeighbor$1,l,u);return i?reshape$5(h,[h.shape[1],h.shape[2],h.shape[3]]):h}const resizeNearestNeighbor$3=op$1({resizeNearestNeighbor_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function threshold_(n,e="binary",t=!1,r=.5){const s=convertToTensor$1(n,"image","threshold"),a=.2989,i=.587,l=.114,u=s.shape[0]*s.shape[1];let h=mul$1(tensor1d([r]),255),f,c,o,d;if(assert$2(s.rank===3,()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`),assert$2(s.shape[2]===3||s.shape[2]===1,()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`),assert$2(s.dtype==="int32"||s.dtype==="float32",()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`),assert$2(e==="otsu"||e==="binary",()=>`Method must be binary or otsu, but was ${e}`),s.shape[2]===3){[f,c,o]=split$3(s,[1,1,1],-1);const y=mul$1(f,a),$=mul$1(c,i),b=mul$1(o,l);d=add$3(add$3(y,$),b)}else d=n;if(e==="otsu"){const y=bincount$3(cast$5(round$4(d),"int32"),tensor([]),256);h=otsu(y,u)}const m=t?lessEqual$3(d,h):greater$3(d,h);return cast$5(mul$1(m,255),"int32")}function otsu(n,e){let t=tensor1d([-1]),r=tensor1d([0]),s=tensor1d([0]),a,i,l,u,h,f;for(let c=0;c<n.size-1;c++){a=slice$3(n,0,c+1),i=slice$3(n,c+1),h=div$2(sum$4(a),e),f=div$2(sum$4(i),e);const o=sum$4(mul$1(a,range$4(0,a.size)));l=div$2(o,sum$4(a));const d=fill$4(i.shape,a.size),m=add$3(range$4(0,i.size),d),g=mul$1(i,m);u=div$2(sum$4(g),sum$4(i));const y=sub$4(l,u),$=sub$4(l,u),b=mul$1(h,f);s=mul$1(mul$1(b,y),$);const x=greater$3(s,r);r=where(x,s,r),t=where(x,tensor1d([c]),t)}return t}const threshold$1=op$1({threshold_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transform_(n,e,t="nearest",r="constant",s=0,a){const i=convertToTensor$1(n,"image","transform","float32"),l=convertToTensor$1(e,"transforms","transform","float32");assert$2(i.rank===4,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),assert$2(l.rank===2&&(l.shape[0]===i.shape[0]||l.shape[0]===1)&&l.shape[1]===8,()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),assert$2(a==null||a.length===2,()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`);const u={image:i,transforms:l},h={interpolation:t,fillMode:r,fillValue:s,outputShape:a};return ENGINE$1.runKernel(Transform$1,u,h)}const transform$3=op$1({transform_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bandPart_(n,e,t){const r=convertToTensor$1(n,"a","bandPart");assert$2(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[a,i]=r.shape.slice(-2);let l,u;typeof e=="number"?(assert$2(e%1===0,()=>`bandPart(): numLower must be an integer, got ${e}.`),assert$2(e<=a,()=>`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`),l=convertToTensor$1(e<0?a:e,"numLower","bandPart")):(assert$2(e.dtype==="int32",()=>"bandPart(): numLower's dtype must be an int32."),l=where(less$3(e,0),a,minimum$3(e,a))),typeof t=="number"?(assert$2(t%1===0,()=>`bandPart(): numUpper must be an integer, got ${t}.`),assert$2(t<=i,()=>`bandPart(): numUpper (${t}) must not be greater than the number of columns (${i}).`),u=convertToTensor$1(t<0?i:t,"numUpper","bandPart")):(assert$2(t.dtype==="int32",()=>"bandPart(): numUpper's dtype must be an int32."),u=where(less$3(t,0),i,minimum$3(t,i)));const h=reshape$5(range$4(0,a,1,"int32"),[-1,1]),f=range$4(0,i,1,"int32"),c=sub$4(h,f),o=logicalAnd$3(lessEqual$3(c,l),greaterEqual$3(c,neg$3(u))),d=zeros$2([a,i],r.dtype);return reshape$5(stack(unstack(reshape$5(r,[-1,a,i])).map(m=>where(o,m,d))),s)}const bandPart=op$1({bandPart_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gramSchmidt_(n){let e;if(Array.isArray(n)){e=!1,assert$2(n!=null&&n.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const s=n[0].shape[0];for(let a=1;a<n.length;++a)assert$2(n[a].shape[0]===s,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[a].shape[0]} vs. ${s})`)}else e=!0,n=split$3(n,n.shape[0],0).map(s=>squeeze(s,[0]));assert$2(n.length<=n[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);const t=[],r=n;for(let s=0;s<n.length;++s)t.push(ENGINE$1.tidy(()=>{let a=r[s];if(s>0)for(let i=0;i<s;++i){const l=mul$1(sum$4(mul$1(t[i],a)),t[i]);a=sub$4(a,l)}return div$2(a,norm(a,"euclidean"))}));return e?stack(t,0):t}const gramSchmidt=op$1({gramSchmidt_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function qr_(n,e=!1){if(assert$2(n.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`),n.rank===2)return qr2d(n,e);{const t=n.shape.slice(0,n.shape.length-2).reduce((u,h)=>u*h),r=unstack(reshape$5(n,[t,n.shape[n.shape.length-2],n.shape[n.shape.length-1]]),0),s=[],a=[];r.forEach(u=>{const[h,f]=qr2d(u,e);s.push(h),a.push(f)});const i=reshape$5(stack(s,0),n.shape),l=reshape$5(stack(a,0),n.shape);return[i,l]}}function qr2d(n,e=!1){return ENGINE$1.tidy(()=>{assert$2(n.shape.length===2,()=>`qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);const t=n.shape[0],r=n.shape[1];let s=eye(t),a=clone$1(n);const i=tensor2d([[1]],[1,1]);let l=clone$1(i);const u=t>=r?r:t;for(let h=0;h<u;++h){const f=a,c=l,o=s;[l,a,s]=ENGINE$1.tidy(()=>{const d=slice$3(a,[h,h],[t-h,1]),m=norm(d),g=slice$3(a,[h,h],[1,1]),y=where(greater$3(g,0),tensor2d([[-1]]),tensor2d([[1]])),$=sub$4(g,mul$1(y,m)),b=div$2(d,$);b.shape[0]===1?l=clone$1(i):l=concat$3([i,slice$3(b,[1,0],[b.shape[0]-1,b.shape[1]])],0);const x=neg$3(div$2(matMul$1(y,$),m)),w=slice$3(a,[h,0],[t-h,r]),v=mul$1(x,l),S=transpose$3(l);if(h===0)a=sub$4(w,matMul$1(v,matMul$1(S,w)));else{const I=sub$4(w,matMul$1(v,matMul$1(S,w)));a=concat$3([slice$3(a,[0,0],[h,r]),I],0)}const T=transpose$3(v),C=slice$3(s,[0,h],[t,s.shape[1]-h]);if(h===0)s=sub$4(C,matMul$1(matMul$1(C,l),T));else{const I=sub$4(C,matMul$1(matMul$1(C,l),T));s=concat$3([slice$3(s,[0,0],[t,h]),I],1)}return[l,a,s]}),dispose$1([f,c,o])}return!e&&t>r&&(s=slice$3(s,[0,0],[t,r]),a=slice$3(a,[0,0],[r,r])),[s,a]})}const qr=op$1({qr_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var Reduction;(function(n){n[n.NONE=0]="NONE",n[n.MEAN=1]="MEAN",n[n.SUM=2]="SUM",n[n.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"})(Reduction||(Reduction={}));function computeWeightedLoss_(n,e,t=Reduction.SUM_BY_NONZERO_WEIGHTS){const r=convertToTensor$1(n,"losses","computeWeightedLoss");let s=null;e!=null&&(s=convertToTensor$1(e,"weights","computeWeightedLoss"));const a=s==null?r:mul$1(r,s);if(t===Reduction.NONE)return a;if(t===Reduction.SUM)return sum$4(a);if(t===Reduction.MEAN){if(s==null)return mean$2(a);{const i=r.size/s.size,l=div$2(sum$4(a),sum$4(s));return i>1?div$2(l,scalar$1(i)):l}}if(t===Reduction.SUM_BY_NONZERO_WEIGHTS){if(s==null)return div$2(sum$4(a),scalar$1(r.size));{const i=mul$1(s,ones$1(r.shape)),l=cast$5(sum$4(notEqual$3(i,scalar$1(0))),"float32");return div$2(sum$4(a),l)}}throw Error(`Unknown reduction: ${t}`)}const computeWeightedLoss$1=op$1({computeWeightedLoss_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function absoluteDifference_(n,e,t,r=Reduction.SUM_BY_NONZERO_WEIGHTS){const s=convertToTensor$1(n,"labels","absoluteDifference"),a=convertToTensor$1(e,"predictions","absoluteDifference");let i=null;t!=null&&(i=convertToTensor$1(t,"weights","absoluteDifference")),assertShapesMatch$1(s.shape,a.shape,"Error in absoluteDifference: ");const l=abs$4(sub$4(s,a));return computeWeightedLoss$1(l,i,r)}const absoluteDifference=op$1({absoluteDifference_});function cosineDistance_(n,e,t,r,s=Reduction.SUM_BY_NONZERO_WEIGHTS){const a=convertToTensor$1(n,"labels","cosineDistance"),i=convertToTensor$1(e,"predictions","cosineDistance");let l=null;r!=null&&(l=convertToTensor$1(r,"weights","cosineDistance")),assertShapesMatch$1(a.shape,i.shape,"Error in cosineDistance: ");const u=scalar$1(1),h=sub$4(u,sum$4(mul$1(a,i),t,!0));return computeWeightedLoss$1(h,l,s)}const cosineDistance=op$1({cosineDistance_});function hingeLoss_(n,e,t,r=Reduction.SUM_BY_NONZERO_WEIGHTS){let s=convertToTensor$1(n,"labels","hingeLoss");const a=convertToTensor$1(e,"predictions","hingeLoss");let i=null;t!=null&&(i=convertToTensor$1(t,"weights","hingeLoss")),assertShapesMatch$1(s.shape,a.shape,"Error in hingeLoss: ");const l=scalar$1(1);s=sub$4(mul$1(scalar$1(2),s),l);const u=relu$3(sub$4(l,mul$1(s,a)));return computeWeightedLoss$1(u,i,r)}const hingeLoss=op$1({hingeLoss_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function huberLoss_(n,e,t,r=1,s=Reduction.SUM_BY_NONZERO_WEIGHTS){const a=convertToTensor$1(n,"labels","huberLoss"),i=convertToTensor$1(e,"predictions","huberLoss");let l=null;t!=null&&(l=convertToTensor$1(t,"weights","huberLoss")),assertShapesMatch$1(a.shape,i.shape,"Error in huberLoss: ");const u=scalar$1(r),h=abs$4(sub$4(i,a)),f=minimum$3(h,u),c=sub$4(h,f),o=add$3(mul$1(scalar$1(.5),square$3(f)),mul$1(u,c));return computeWeightedLoss$1(o,l,s)}const huberLoss=op$1({huberLoss_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logLoss_(n,e,t,r=1e-7,s=Reduction.SUM_BY_NONZERO_WEIGHTS){const a=convertToTensor$1(n,"labels","logLoss"),i=convertToTensor$1(e,"predictions","logLoss");let l=null;t!=null&&(l=convertToTensor$1(t,"weights","logLoss")),assertShapesMatch$1(a.shape,i.shape,"Error in logLoss: ");const u=scalar$1(1),h=scalar$1(r),f=neg$3(mul$1(a,log$3(add$3(i,h)))),c=mul$1(sub$4(u,a),log$3(add$3(sub$4(u,i),h))),o=sub$4(f,c);return computeWeightedLoss$1(o,l,s)}const logLoss=op$1({logLoss_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function meanSquaredError_(n,e,t,r=Reduction.SUM_BY_NONZERO_WEIGHTS){const s=convertToTensor$1(n,"labels","meanSquaredError"),a=convertToTensor$1(e,"predictions","meanSquaredError");let i=null;t!=null&&(i=convertToTensor$1(t,"weights","meanSquaredError")),assertShapesMatch$1(s.shape,a.shape,"Error in meanSquaredError: ");const l=squaredDifference$3(s,a);return computeWeightedLoss$1(l,i,r)}const meanSquaredError$1=op$1({meanSquaredError_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sigmoidCrossEntropyWithLogits_(n,e){const t=convertToTensor$1(n,"labels","sigmoidCrossEntropyWithLogits"),r=convertToTensor$1(e,"logits","sigmoidCrossEntropyWithLogits");assertShapesMatch$1(t.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=relu$3(r),a=mul$1(r,t),i=log1p$3(exp$3(neg$3(abs$4(r))));return add$3(sub$4(s,a),i)}function sigmoidCrossEntropy_(n,e,t,r=0,s=Reduction.SUM_BY_NONZERO_WEIGHTS){let a=convertToTensor$1(n,"multiClassLabels","sigmoidCrossEntropy");const i=convertToTensor$1(e,"logits","sigmoidCrossEntropy");let l=null;if(t!=null&&(l=convertToTensor$1(t,"weights","sigmoidCrossEntropy")),assertShapesMatch$1(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const h=scalar$1(r),f=scalar$1(1),c=scalar$1(.5);a=add$3(mul$1(a,sub$4(f,h)),mul$1(c,h))}const u=sigmoidCrossEntropyWithLogits_(a,i);return computeWeightedLoss$1(u,l,s)}const sigmoidCrossEntropy=op$1({sigmoidCrossEntropy_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softmaxCrossEntropyWithLogits_(n,e,t=-1){if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${t}`);return customGrad((s,a,i)=>{const u=logSumExp(a,[t],!0),h=sub$4(cast$5(a,"float32"),u);i([s,h]);const f=neg$3(mul$1(h,s));return{value:sum$4(f,[t]),gradFunc:(d,m)=>{const[g,y]=m,$=expandShapeToKeepDim$1(d.shape,[t]);return[mul$1(reshape$5(d,$),sub$4(cast$5(g,"float32"),exp$3(y))),mul$1(reshape$5(d,$),sub$4(exp$3(y),cast$5(g,"float32")))]}}})(n,e)}function softmaxCrossEntropy_(n,e,t,r=0,s=Reduction.SUM_BY_NONZERO_WEIGHTS){let a=convertToTensor$1(n,"onehotLabels","softmaxCrossEntropy");const i=convertToTensor$1(e,"logits","softmaxCrossEntropy");let l=null;if(t!=null&&(l=convertToTensor$1(t,"weights","softmaxCrossEntropy")),assertShapesMatch$1(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const h=scalar$1(r),f=scalar$1(1),c=scalar$1(a.shape[1]);a=add$3(mul$1(a,sub$4(f,h)),div$2(h,c))}const u=softmaxCrossEntropyWithLogits_(a,i);return computeWeightedLoss$1(u,l,s)}const softmaxCrossEntropy=op$1({softmaxCrossEntropy_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseFillEmptyRows_(n,e,t,r){const s=convertToTensor$1(n,"indices","sparseFillEmptyRows","int32"),a=convertToTensor$1(e,"values","sparseFillEmptyRows"),i=convertToTensor$1(t,"denseShape","sparseFillEmptyRows","int32"),l=convertToTensor$1(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(s.rank!==2)throw new Error(`Indices should be Tensor2D but received shape
        ${s.shape}`);if(a.rank!==1)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(i.rank!==1)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(l.rank!==0)throw new Error(`Default value should be a scalar but received shape ${l.shape}`);const u={indices:s,values:a,denseShape:i,defaultValue:l},h=ENGINE$1.runKernel(SparseFillEmptyRows,u);return{outputIndices:h[0],outputValues:h[1],emptyRowIndicator:h[2],reverseIndexMap:h[3]}}const sparseFillEmptyRows$2=op$1({sparseFillEmptyRows_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseReshape_(n,e,t){const r=convertToTensor$1(n,"inputIndices","sparseReshape","int32"),s=convertToTensor$1(e,"inputShape","sparseReshape","int32"),a=convertToTensor$1(t,"newShape","sparseReshape","int32");if(r.rank!==2)throw new Error(`Input indices should be Tensor2D but received shape
        ${r.shape}`);if(s.rank!==1)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(a.rank!==1)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const i={inputIndices:r,inputShape:s,newShape:a},l=ENGINE$1.runKernel(SparseReshape,i);return{outputIndices:l[0],outputShape:l[1]}}const sparseReshape$2=op$1({sparseReshape_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentMean_(n,e,t){const r=convertToTensor$1(n,"data","sparseSegmentMean"),s=convertToTensor$1(e,"indices","sparseSegmentMean","int32"),a=convertToTensor$1(t,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(s.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
          ${s.shape}`);if(a.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
          ${a.shape}`);const i={data:r,indices:s,segmentIds:a};return ENGINE$1.runKernel(SparseSegmentMean$1,i)}const sparseSegmentMean$3=op$1({sparseSegmentMean_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentSum_(n,e,t){const r=convertToTensor$1(n,"data","sparseSegmentSum"),s=convertToTensor$1(e,"indices","sparseSegmentSum","int32"),a=convertToTensor$1(t,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(s.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
         ${s.shape}`);if(a.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
         ${a.shape}`);const i={data:r,indices:s,segmentIds:a};return ENGINE$1.runKernel(SparseSegmentSum$1,i)}const sparseSegmentSum$3=op$1({sparseSegmentSum_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringNGrams_(n,e,t,r,s,a,i,l){const u=convertToTensor$1(n,"data","stringNGrams","string");if(u.dtype!=="string")throw new Error("Data must be of datatype string");if(u.shape.length!==1)throw new Error(`Data must be a vector, saw: ${u.shape}`);const h=convertToTensor$1(e,"dataSplits","stringNGrams");if(h.dtype!=="int32")throw new Error("Data splits must be of datatype int32");const f={separator:t,nGramWidths:r,leftPad:s,rightPad:a,padWidth:i,preserveShortSequences:l},c={data:u,dataSplits:h},o=ENGINE$1.runKernel(StringNGrams$1,c,f);return{nGrams:o[0],nGramsSplits:o[1]}}const stringNGrams$3=op$1({stringNGrams_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringSplit_(n,e,t=!0){const r=convertToTensor$1(n,"input","stringSplit","string"),s=convertToTensor$1(e,"delimiter","stringSplit","string");if(r.rank!==1)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(s.rank!==0)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:t},i={input:r,delimiter:s},l=ENGINE$1.runKernel(StringSplit,i,a);return{indices:l[0],values:l[1],shape:l[2]}}const stringSplit$2=op$1({stringSplit_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringToHashBucketFast_(n,e){const t=convertToTensor$1(n,"input","stringToHashBucketFast","string"),r={numBuckets:e};if(e<=0)throw new Error("Number of buckets must be at least 1");const s={input:t};return ENGINE$1.runKernel(StringToHashBucketFast,s,r)}const stringToHashBucketFast$2=op$1({stringToHashBucketFast_});/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function staticRegexReplace_(n,e,t,r=!0){const s=convertToTensor$1(n,"input","staticRegexReplace","string"),a={pattern:e,rewrite:t,replaceGlobal:r};return ENGINE$1.runKernel(StaticRegexReplace,{x:s},a)}const staticRegexReplace$2=op$1({staticRegexReplace_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const spectral$1={fft:fft$3,ifft:ifft$3,rfft,irfft},signal={hammingWindow,hannWindow,frame,stft},image$1={flipLeftRight,grayscaleToRGB,resizeNearestNeighbor:resizeNearestNeighbor$3,resizeBilinear:resizeBilinear$4,rgbToGrayscale,rotateWithOffset,cropAndResize:cropAndResize$4,nonMaxSuppression,nonMaxSuppressionAsync,nonMaxSuppressionWithScore,nonMaxSuppressionWithScoreAsync,nonMaxSuppressionPadded,nonMaxSuppressionPaddedAsync,threshold:threshold$1,transform:transform$3},linalg={bandPart,gramSchmidt,qr},losses={absoluteDifference,computeWeightedLoss:computeWeightedLoss$1,cosineDistance,hingeLoss,huberLoss,logLoss,meanSquaredError:meanSquaredError$1,sigmoidCrossEntropy,softmaxCrossEntropy},sparse$1={sparseFillEmptyRows:sparseFillEmptyRows$2,sparseReshape:sparseReshape$2,sparseSegmentMean:sparseSegmentMean$3,sparseSegmentSum:sparseSegmentSum$3},string$1={stringNGrams:stringNGrams$3,stringSplit:stringSplit$2,stringToHashBucketFast:stringToHashBucketFast$2,staticRegexReplace:staticRegexReplace$2};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const GLOBAL_CUSTOM_OBJECT$1=new Map,GLOBAL_CUSTOM_NAMES$1=new Map;let Serializable$1=class{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}},SerializationMap$1=class ct{constructor(){this.classNameMap={}}static getMap(){return ct.instance==null&&(ct.instance=new ct),ct.instance}static register(e){ct.getMap().classNameMap[e.className]=[e,e.fromConfig]}};function registerClass$1(n,e,t){assert$2(n.className!=null,()=>"Class being registered does not have the static className property defined."),assert$2(typeof n.className=="string",()=>"className is required to be a string, but got type "+typeof n.className),assert$2(n.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),typeof e>"u"&&(e="Custom"),typeof t>"u"&&(t=n.className);const r=t,s=e+">"+r;return SerializationMap$1.register(n),GLOBAL_CUSTOM_OBJECT$1.set(s,n),GLOBAL_CUSTOM_NAMES$1.set(n,s),n}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let Optimizer$1=class extends Serializable$1{minimize(e,t=!1,r){const{value:s,grads:a}=this.computeGradients(e,r);if(r!=null){const i=r.map(l=>({name:l.name,tensor:a[l.name]}));this.applyGradients(i)}else this.applyGradients(a);return dispose$1(a),t?s:(s.dispose(),null)}get iterations(){return this.iterations_==null&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return variableGrads$1(e,t)}dispose(){this.iterations_!=null&&dispose$1(this.iterations_)}async saveIterations(){return this.iterations_==null&&(this.iterations_=0),{name:"iter",tensor:scalar$1(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}};Object.defineProperty(Optimizer$1,Symbol.hasInstance,{value:n=>n.minimize!=null&&n.computeGradients!=null&&n.applyGradients!=null});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let AdadeltaOptimizer$1=class extends Optimizer$1{static get className(){return"Adadelta"}constructor(e,t,r=null){super(),this.learningRate=e,this.rho=t,this.epsilon=r,this.accumulatedGrads=[],this.accumulatedUpdates=[],r==null&&(this.epsilon=ENGINE$1.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const a=ENGINE$1.registeredVariables[r],i=!1;this.accumulatedGrads[s]==null&&(this.accumulatedGrads[s]={originalName:`${r}/accum_grad`,variable:tidy$1(()=>zerosLike$4(a).variable(i))}),this.accumulatedUpdates[s]==null&&(this.accumulatedUpdates[s]={originalName:`${r}/accum_var`,variable:tidy$1(()=>zerosLike$4(a).variable(i))});const l=Array.isArray(e)?e[s].tensor:e[r];if(l==null)return;const u=this.accumulatedGrads[s].variable,h=this.accumulatedUpdates[s].variable;tidy$1(()=>{const f=add$3(mul$1(u,this.rho),mul$1(square$3(l),1-this.rho)),c=mul$1(div$2(sqrt$4(add$3(h,this.epsilon)),sqrt$4(add$3(u,this.epsilon))),l),o=add$3(mul$1(h,this.rho),mul$1(square$3(c),1-this.rho));u.assign(f),h.assign(o);const d=add$3(mul$1(c,-this.learningRate),a);a.assign(d)})}),this.incrementIterations()}dispose(){this.accumulatedUpdates!=null&&(dispose$1(this.accumulatedGrads.map(e=>e.variable)),dispose$1(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=e.length/2,r=!1;this.accumulatedGrads=e.slice(0,t).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})),this.accumulatedUpdates=e.slice(t,t*2).map(s=>({originalName:s.name,variable:s.tensor.variable(r)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let AdagradOptimizer$1=class extends Optimizer$1{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const a=ENGINE$1.registeredVariables[r];this.accumulatedGrads[s]==null&&(this.accumulatedGrads[s]={originalName:`${r}/accumulator`,variable:tidy$1(()=>fill$4(a.shape,this.initialAccumulatorValue).variable(!1))});const i=Array.isArray(e)?e[s].tensor:e[r];if(i==null)return;const l=this.accumulatedGrads[s].variable;tidy$1(()=>{const u=add$3(l,square$3(i));l.assign(u);const h=add$3(mul$1(div$2(i,sqrt$4(add$3(u,ENGINE$1.backend.epsilon()))),-this.learningRate),a);a.assign(h)})}),this.incrementIterations()}dispose(){this.accumulatedGrads!=null&&dispose$1(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=!1;this.accumulatedGrads=e.map(r=>({originalName:r.name,variable:r.tensor.variable(t)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let AdamOptimizer$1=class extends Optimizer$1{static get className(){return"Adam"}constructor(e,t,r,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=r,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],tidy$1(()=>{this.accBeta1=scalar$1(t).variable(),this.accBeta2=scalar$1(r).variable()}),s==null&&(this.epsilon=ENGINE$1.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(r=>r.name):Object.keys(e);tidy$1(()=>{const r=sub$4(1,this.accBeta1),s=sub$4(1,this.accBeta2);t.forEach((a,i)=>{const l=ENGINE$1.registeredVariables[a],u=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${a}/m`,variable:tidy$1(()=>zerosLike$4(l).variable(u))}),this.accumulatedSecondMoment[i]==null&&(this.accumulatedSecondMoment[i]={originalName:`${a}/v`,variable:tidy$1(()=>zerosLike$4(l).variable(u))});const h=Array.isArray(e)?e[i].tensor:e[a];if(h==null)return;const f=this.accumulatedFirstMoment[i].variable,c=this.accumulatedSecondMoment[i].variable,o=add$3(mul$1(f,this.beta1),mul$1(h,1-this.beta1)),d=add$3(mul$1(c,this.beta2),mul$1(square$3(h),1-this.beta2)),m=div$2(o,r),g=div$2(d,s);f.assign(o),c.assign(d);const y=add$3(mul$1(div$2(m,add$3(sqrt$4(g),this.epsilon)),-this.learningRate),l);l.assign(y)}),this.accBeta1.assign(mul$1(this.accBeta1,this.beta1)),this.accBeta2.assign(mul$1(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),this.accumulatedFirstMoment!=null&&dispose$1(this.accumulatedFirstMoment.map(e=>e.variable)),this.accumulatedSecondMoment!=null&&dispose$1(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e),tidy$1(()=>{this.accBeta1.assign(pow$4(this.beta1,this.iterations_+1)),this.accBeta2.assign(pow$4(this.beta2,this.iterations_+1))});const t=e.length/2,r=!1;this.accumulatedFirstMoment=e.slice(0,t).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})),this.accumulatedSecondMoment=e.slice(t,t*2).map(s=>({originalName:s.name,variable:s.tensor.variable(r)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let AdamaxOptimizer$1=class extends Optimizer$1{static get className(){return"Adamax"}constructor(e,t,r,s=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=r,this.epsilon=s,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],tidy$1(()=>{this.iteration=scalar$1(0).variable(),this.accBeta1=scalar$1(t).variable()}),s==null&&(this.epsilon=ENGINE$1.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(r=>r.name):Object.keys(e);tidy$1(()=>{const r=sub$4(1,this.accBeta1),s=div$2(-this.learningRate,add$3(mul$1(this.iteration,this.decay),1));t.forEach((a,i)=>{const l=ENGINE$1.registeredVariables[a],u=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${a}/m`,variable:zerosLike$4(l).variable(u)}),this.accumulatedWeightedInfNorm[i]==null&&(this.accumulatedWeightedInfNorm[i]={originalName:`${a}/v`,variable:zerosLike$4(l).variable(u)});const h=Array.isArray(e)?e[i].tensor:e[a];if(h==null)return;const f=this.accumulatedFirstMoment[i].variable,c=this.accumulatedWeightedInfNorm[i].variable,o=add$3(mul$1(f,this.beta1),mul$1(h,1-this.beta1)),d=mul$1(c,this.beta2),m=abs$4(h),g=maximum$4(d,m);f.assign(o),c.assign(g);const y=add$3(mul$1(div$2(s,r),div$2(o,add$3(g,this.epsilon))),l);l.assign(y)}),this.iteration.assign(add$3(this.iteration,1)),this.accBeta1.assign(mul$1(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),this.accumulatedFirstMoment!=null&&dispose$1(this.accumulatedFirstMoment.map(e=>e.variable)),this.accumulatedWeightedInfNorm!=null&&dispose$1(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let SGDOptimizer$1=class extends Optimizer$1{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const a=Array.isArray(e)?e[s].tensor:e[r];if(a==null)return;const i=ENGINE$1.registeredVariables[r];tidy$1(()=>{const l=add$3(mul$1(this.c,a),i);i.assign(l)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,this.c!=null&&this.c.dispose(),this.c=keep$1(scalar$1(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(e=await this.extractIterations(e),e.length!==0)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let MomentumOptimizer$1=class extends SGDOptimizer$1{static get className(){return"Momentum"}constructor(e,t,r=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=r,this.accumulations=[],this.m=scalar$1(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const a=ENGINE$1.registeredVariables[r];this.accumulations[s]==null&&(this.accumulations[s]={originalName:`${r}/momentum`,variable:tidy$1(()=>zerosLike$4(a).variable(!1))});const i=this.accumulations[s].variable,l=Array.isArray(e)?e[s].tensor:e[r];l!=null&&tidy$1(()=>{let u;const h=add$3(mul$1(this.m,i),l);this.useNesterov?u=add$3(mul$1(this.c,add$3(l,mul$1(h,this.m))),a):u=add$3(mul$1(this.c,h),a),i.assign(h),a.assign(u)})}),this.incrementIterations()}dispose(){this.m.dispose(),this.accumulations!=null&&dispose$1(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=!1;this.accumulations=e.map(r=>({originalName:r.name,variable:r.tensor.variable(t)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let RMSPropOptimizer$1=class extends Optimizer$1{static get className(){return"RMSProp"}constructor(e,t=.9,r=0,s=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=r,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,s==null&&(this.epsilon=ENGINE$1.backend.epsilon()),e==null)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const a=ENGINE$1.registeredVariables[r],i=!1;this.accumulatedMeanSquares[s]==null&&(this.accumulatedMeanSquares[s]={originalName:`${r}/rms`,variable:tidy$1(()=>zerosLike$4(a).variable(i))}),this.accumulatedMoments[s]==null&&(this.accumulatedMoments[s]={originalName:`${r}/momentum`,variable:tidy$1(()=>zerosLike$4(a).variable(i))}),this.accumulatedMeanGrads[s]==null&&this.centered&&(this.accumulatedMeanGrads[s]={originalName:`${r}/mg`,variable:tidy$1(()=>zerosLike$4(a).variable(i))});const l=Array.isArray(e)?e[s].tensor:e[r];if(l==null)return;const u=this.accumulatedMeanSquares[s].variable,h=this.accumulatedMoments[s].variable;tidy$1(()=>{const f=add$3(mul$1(u,this.decay),mul$1(square$3(l),1-this.decay));if(this.centered){const c=this.accumulatedMeanGrads[s].variable,o=add$3(mul$1(c,this.decay),mul$1(l,1-this.decay)),d=div$2(mul$1(l,this.learningRate),sqrt$4(sub$4(f,add$3(square$3(o),this.epsilon)))),m=add$3(mul$1(h,this.momentum),d);u.assign(f),c.assign(o),h.assign(m);const g=sub$4(a,m);a.assign(g)}else{const c=add$3(mul$1(u,this.decay),mul$1(square$3(l),1-this.decay)),o=add$3(mul$1(h,this.momentum),div$2(mul$1(l,this.learningRate),sqrt$4(add$3(c,this.epsilon))));u.assign(c),h.assign(o);const d=sub$4(a,o);a.assign(d)}})}),this.incrementIterations()}dispose(){this.accumulatedMeanSquares!=null&&dispose$1(this.accumulatedMeanSquares.map(e=>e.variable)),this.accumulatedMeanGrads!=null&&this.centered&&dispose$1(this.accumulatedMeanGrads.map(e=>e.variable)),this.accumulatedMoments!=null&&dispose$1(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,r=!1;this.accumulatedMeanSquares=e.slice(0,t).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})),this.accumulatedMoments=e.slice(t,t*2).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})),this.centered&&(this.accumulatedMeanGrads=e.slice(t*2,t*3).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const OPTIMIZERS$1=[AdadeltaOptimizer$1,AdagradOptimizer$1,AdamOptimizer$1,AdamaxOptimizer$1,MomentumOptimizer$1,RMSPropOptimizer$1,SGDOptimizer$1];function registerOptimizers$1(){for(const n of OPTIMIZERS$1)registerClass$1(n)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const DEFAULT_FILE_NAME_PREFIX="model",DEFAULT_JSON_EXTENSION_NAME=".json",DEFAULT_WEIGHT_DATA_EXTENSION_NAME=".weights.bin";function defer(n){return new Promise(e=>setTimeout(e)).then(n)}class BrowserDownloads{constructor(e){if(!env$1().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(BrowserDownloads.URL_SCHEME)&&(e=e.slice(BrowserDownloads.URL_SCHEME.length)),(e==null||e.length===0)&&(e=DEFAULT_FILE_NAME_PREFIX),this.modelJsonFileName=e+DEFAULT_JSON_EXTENSION_NAME,this.weightDataFileName=e+DEFAULT_WEIGHT_DATA_EXTENSION_NAME}async save(e){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=CompositeArrayBuffer$1.join(e.weightData),r=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const s=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],a=getModelJSONForModelArtifacts(e,s),i=window.URL.createObjectURL(new Blob([JSON.stringify(a)],{type:"application/json"})),l=this.modelJsonAnchor==null?document.createElement("a"):this.modelJsonAnchor;if(l.download=this.modelJsonFileName,l.href=i,await defer(()=>l.dispatchEvent(new MouseEvent("click"))),e.weightData!=null){const u=this.weightDataAnchor==null?document.createElement("a"):this.weightDataAnchor;u.download=this.weightDataFileName,u.href=r,await defer(()=>u.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:getModelArtifactsInfoForJSON$1(e)}}}}BrowserDownloads.URL_SCHEME="downloads://";class BrowserFiles{constructor(e){if(e==null||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{const r=new FileReader;r.onload=s=>{const a=JSON.parse(s.target.result),i=a.modelTopology;if(i==null){t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));return}if(a.weightsManifest==null){t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));return}if(this.weightsFiles.length===0){e({modelTopology:i});return}const u=getModelArtifactsForJSON(a,h=>this.loadWeights(h));e(u)},r.onerror=s=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(this.jsonFile)})}loadWeights(e){const t=[],r=[];for(const i of e)t.push(...i.weights),r.push(...i.paths);const s=this.checkManifestAndWeightFiles(e),a=r.map(i=>this.loadWeightsFile(i,s[i]));return Promise.all(a).then(i=>[t,i])}loadWeightsFile(e,t){return new Promise((r,s)=>{const a=new FileReader;a.onload=i=>{const l=i.target.result;r(l)},a.onerror=i=>s(`Failed to weights data from file of path '${e}'.`),a.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){const t=[],r=this.weightsFiles.map(a=>basename(a.name)),s={};for(const a of e)a.paths.forEach(i=>{const l=basename(i);if(t.indexOf(l)!==-1)throw new Error(`Duplicate file basename found in weights manifest: '${l}'`);if(t.push(l),r.indexOf(l)===-1)throw new Error(`Weight file with basename '${l}' is not provided.`);s[i]=this.weightsFiles[r.indexOf(l)]});if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return s}}const browserDownloadsRouter=n=>env$1().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(BrowserDownloads.URL_SCHEME)?browserDownloads(n.slice(BrowserDownloads.URL_SCHEME.length)):null;IORouterRegistry$1.registerSaveRouter(browserDownloadsRouter);function browserDownloads(n="model"){return new BrowserDownloads(n)}function browserFiles(n){return new BrowserFiles(n)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function monitorPromisesProgress(n,e,t,r){i(n),t=t??0,r=r??1,l(t,r);let s=0;const a=u=>(u.then(h=>{const f=t+ ++s/n.length*(r-t);return e(f),h}),u);function i(u){assert$2(u!=null&&Array.isArray(u)&&u.length>0,()=>"promises must be a none empty array")}function l(u,h){assert$2(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${u}`),assert$2(h>=0&&h<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${h}`),assert$2(h>=u,()=>`startFraction must be no more than endFraction, but got startFraction ${u} and endFraction ${h}`)}return Promise.all(n.map(a))}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function loadWeightsAsArrayBuffer(n,e){e==null&&(e={});const t=e.fetchFunc==null?env$1().platform.fetch:e.fetchFunc,r=n.map(c=>t(c,e.requestInit,{isBinary:!0})),s=0,a=.5,l=(e.onProgress==null?await Promise.all(r):await monitorPromisesProgress(r,e.onProgress,s,a)).map(c=>c.arrayBuffer()),u=.5,h=1;return e.onProgress==null?await Promise.all(l):await monitorPromisesProgress(l,e.onProgress,u,h)}async function loadWeights(n,e="",t,r){return weightsLoaderFactory(i=>loadWeightsAsArrayBuffer(i,{requestInit:r}))(n,e,t)}function weightsLoaderFactory(n){return async(e,t="",r)=>{const s=e.map(()=>!1),a={},i=r!=null?r.map(()=>!1):[],l=[];if(e.forEach((d,m)=>{let g=0;d.weights.forEach(y=>{const $="quantization"in y?y.quantization.dtype:y.dtype,b=DTYPE_VALUE_SIZE_MAP[$]*sizeFromShape$1(y.shape),x=()=>{s[m]=!0,a[m]==null&&(a[m]=[]),a[m].push({manifestEntry:y,groupOffset:g,sizeBytes:b})};r!=null?r.forEach((w,v)=>{w===y.name&&(x(),i[v]=!0)}):x(),l.push(y.name),g+=b})}),!i.every(d=>d)){const d=r.filter((m,g)=>!i[g]);throw new Error(`Could not find weights in manifest with names: ${d.join(", ")}. 
Manifest JSON has weights with names: ${l.join(", ")}.`)}const u=s.reduce((d,m,g)=>(m&&d.push(g),d),[]),h=[];u.forEach(d=>{e[d].paths.forEach(m=>{const g=t+(t.endsWith("/")?"":"/")+m;h.push(g)})});const f=await n(h),c={};let o=0;return u.forEach(d=>{const m=e[d].paths.length,g=new CompositeArrayBuffer$1(f.slice(o,o+m));a[d].forEach($=>{const b=g.slice($.groupOffset,$.groupOffset+$.sizeBytes),x=decodeWeights(b,[$.manifestEntry]);for(const w in x)c[w]=x[w]}),o+=m}),c}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const OCTET_STREAM_MIME_TYPE="application/octet-stream",JSON_TYPE="application/json";class HTTPRequest{constructor(e,t){if(this.DEFAULT_METHOD="POST",t==null&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,t.fetchFunc!=null?(assert$2(typeof t.fetchFunc=="function",()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=env$1().platform.fetch,assert$2(e!=null&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&assert$2(e.length===2,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,t.requestInit!=null&&t.requestInit.body!=null)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const r=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],s=getModelJSONForModelArtifacts(e,r);if(t.body.append("model.json",new Blob([JSON.stringify(s)],{type:JSON_TYPE}),"model.json"),e.weightData!=null){const i=CompositeArrayBuffer$1.join(e.weightData);t.body.append("model.weights.bin",new Blob([i],{type:OCTET_STREAM_MIME_TYPE}),"model.weights.bin")}const a=await this.fetch(this.path,t);if(a.ok)return{modelArtifactsInfo:getModelArtifactsInfoForJSON$1(e),responses:[a]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch{let i=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?i+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":i+=" Please make sure the server is serving valid JSON for this request.",new Error(i)}const r=t.modelTopology,s=t.weightsManifest;if(r==null&&s==null)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return getModelArtifactsForJSON(t,a=>this.loadWeights(a))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[r,s]=parseUrl(t),a=this.weightPathPrefix||r,i=getWeightSpecs(e),l=[],u=[];for(const f of e)for(const c of f.paths)this.weightUrlConverter!=null?u.push(this.weightUrlConverter(c)):l.push(a+c+s);this.weightUrlConverter&&l.push(...await Promise.all(u));const h=await loadWeightsAsArrayBuffer(l,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[i,h]}}HTTPRequest.URL_SCHEME_REGEX=/^https?:\/\//;function parseUrl(n){const e=n.lastIndexOf("/"),t=n.lastIndexOf("?"),r=n.substring(0,e),s=t>e?n.substring(t):"";return[r+"/",s]}function isHTTPScheme(n){return n.match(HTTPRequest.URL_SCHEME_REGEX)!=null}const httpRouter=(n,e)=>{if(typeof fetch>"u"&&(e==null||e.fetchFunc==null))return null;{let t=!0;if(Array.isArray(n)?t=n.every(r=>isHTTPScheme(r)):t=isHTTPScheme(n),t)return http(n,e)}return null};IORouterRegistry$1.registerSaveRouter(httpRouter),IORouterRegistry$1.registerLoadRouter(httpRouter);function http(n,e){return new HTTPRequest(n,e)}function browserHTTPRequest(n,e){return http(n,e)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class PassthroughLoader{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class PassthroughSaver{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class PassthroughAsync{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function fromMemory(n,e,t,r){const s=arguments;return new PassthroughAsync(fromMemorySync(...s))}function fromMemorySync(n,e,t,r){return arguments.length===1?n.modelTopology!=null||n.weightSpecs!=null?new PassthroughLoader(n):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new PassthroughLoader({modelTopology:n})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new PassthroughLoader({modelTopology:n,weightSpecs:e,weightData:t,trainingConfig:r}))}function withSaveHandler(n){return new PassthroughSaver(n)}function withSaveHandlerSync(n){return new PassthroughSaver(n)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var io=Object.freeze({__proto__:null,CompositeArrayBuffer:CompositeArrayBuffer$1,browserFiles,browserHTTPRequest,concatenateArrayBuffers,copyModel,decodeWeights,encodeWeights,fromMemory,fromMemorySync,getLoadHandlers,getModelArtifactsForJSON,getModelArtifactsForJSONSync,getModelArtifactsInfoForJSON:getModelArtifactsInfoForJSON$1,getSaveHandlers,getWeightSpecs,http,isHTTPScheme,listModels,loadWeights,moveModel,registerLoadRouter,registerSaveRouter,removeModel,weightsLoaderFactory,withSaveHandler,withSaveHandlerSync});function prepareAndValidate$1(n,e){const t=n.shape.length,r=e.shape.length;if(t<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if(e.dtype!=="int32")throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[r-1]>t)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[r-1]} vs. ${t}`);if(sizeFromShape$1(n.shape)===0)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);const s=e.shape,a=s[s.length-1];let i=1;for(let c=0;c<s.length-1;++c)i*=s[c];const l=n.shape,u=s.slice();u.pop();let h=1;for(let c=a;c<t;++c)h*=l[c],u.push(l[c]);const f=[...computeStrides$1(n.shape).map(c=>c/h),1].slice(0,a);return[u,i,h,f]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NEW_AXIS$1=-2,SHRINK_AXIS$1=-1;function assertParamsValid$1(n,e,t){const r=n.shape.length;assert$2(r===e.length,()=>`Error in slice${r}D: Length of begin ${e} must match the rank of the array (${r}).`),assert$2(r===t.length,()=>`Error in slice${r}D: Length of size ${t} must match the rank of the array (${r}).`);for(let s=0;s<r;++s)assert$2(e[s]+t[s]<=n.shape[s],()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${e[s]+t[s]}) would overflow input.shape[${s}] (${n.shape[s]})`)}function maskToAxes(n){const e=[];let t=0;for(;n>0;)n&1&&e.push(t),n/=2,t++;return e}function computeOutShape$5(n,e,t){const r=[];for(let s=0;s<n.length;s++)r[s]=Math.ceil((e[s]-n[s])/t[s]);return r}function stridesWithElidedDims(n,e,t,r){const s=[...n];for(let a=s.length;a<r.length;a++)s.push(1);for(let a=0;a<t;a++)a===0?s[e]=1:(s.splice(e,0,1),s.pop());return s}function unnormalizeAxis(n,e,t){return t<=n?t:t-(e-1)}function getElidedAxes(n,e){const t=[];for(let r=0;r<n;r++)t.push(e+r);return t}function getNormalizedAxes(n,e,t,r,s,a,i,l,u){const h=n.length;let f=new Array(h),c=new Array(h),o=new Array(h);if(e.length&&t>0){const d=e[0],m=t+1;f=startIndicesWithElidedDims(i,d,m,r,n),c=stopIndicesWithElidedDims(l,d,m,s,n),o=stridesWithElidedDims(a,d,m,n)}else for(let d=0;d<h;d++)f[d]=startForAxis(i,r,a,n,d,u),c[d]=stopForAxis(l,s,a,n,d,u),o[d]=stridesForAxis(a,d,u);return{begin:f,end:c,strides:o}}function startIndicesWithElidedDims(n,e,t,r,s){const a=[...s],i=getElidedAxes(t,e);for(let l=0;l<a.length;l++)if(i.indexOf(l)>-1)a[l]=0;else{const u=unnormalizeAxis(e,t,l);let h=r[u];n&1<<u&&(h=0),a[l]=h}return a}function stopIndicesWithElidedDims(n,e,t,r,s){const a=[...s],i=getElidedAxes(t,e);for(let l=0;l<a.length;l++)if(i.indexOf(l)>-1)a[l]=Number.MAX_SAFE_INTEGER;else{const u=unnormalizeAxis(e,t,l);let h=r[u];n&1<<u&&(h=Number.MAX_SAFE_INTEGER),a[l]=h}for(let l=0;l<a.length;l++){const u=s[l];a[l]<0&&(a[l]+=u),a[l]=clamp(0,a[l],s[l])}return a}function stridesForAxis(n,e,t){let r=n[e];return(t&1<<e||r==null)&&(r=1),r}function startForAxis(n,e,t,r,s,a){let i=e[s];const l=t[s]||1;(n&1<<s||a&1<<s||i==null)&&(l>0?i=Number.MIN_SAFE_INTEGER:i=Number.MAX_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=clamp(0,i,u-1),i}function stopForAxis(n,e,t,r,s,a){let i=e[s];const l=t[s]||1;(n&1<<s||a&1<<s||i==null)&&(l>0?i=Number.MAX_SAFE_INTEGER:i=Number.MIN_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),l>0?i=clamp(0,i,u):i=clamp(-1,i,u-1),i}function isSliceContinous$1(n,e,t){let r=t.length;for(let s=0;s<t.length;s++)if(t[s]>1){r=s;break}for(let s=r+1;s<t.length;s++)if(e[s]>0||t[s]!==n[s])return!1;return!0}function computeFlatOffset$1(n,e){let t=n.length>0?n[n.length-1]:1;for(let r=0;r<n.length-1;r++)t+=n[r]*e[r];return t}function parseSliceParams$1(n,e,t){let r;const s=n.shape.length;typeof e=="number"?r=[e,...new Array(s-1).fill(0)]:e.length<s?r=e.concat(new Array(s-e.length).fill(0)):r=e.slice(),r.forEach(i=>{assert$2(i!==-1,()=>"slice() does not support negative begin indexing.")});let a;return t==null?a=new Array(s).fill(-1):typeof t=="number"?a=[t,...new Array(s-1).fill(-1)]:t.length<s?a=t.concat(new Array(s-t.length).fill(-1)):a=t,a=a.map((i,l)=>i>=0?i:(assert$2(i===-1,()=>`Negative size values should be exactly -1 but got ${i} for the slice() size at index ${l}.`),n.shape[l]-r[l])),[r,a]}function sliceInfo$1(n,e,t,r,s,a,i,l,u){let h;if(r==null?(h=new Array(e.length),h.fill(1)):h=r,i!=null&&i&i-1)throw new Error("Multiple ellipses in slice is not allowed.");let f=!1;const c={dims:h.length,numAddAxisAfterEllipsis:0,begin:e.slice(),end:t.slice(),strides:h.slice(),beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:l,shrinkAxisMask:u};for(let x=0;x<c.dims;x++)f&&1<<x&l&&c.numAddAxisAfterEllipsis++,1<<x&i&&(f=!0);f||(c.ellipsisMask|=1<<c.dims,c.dims++);const o={dims:n.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};buildDenseSpec$1(c,o);let d=!0,m=!0,g=!0;const y=[],$=[];for(let x=0;x<n.length;++x){if(o.strides[x]===0)throw Error(`strides[${x}] must be non-zero`);const w=!!(o.shrinkAxisMask&1<<x),v=n[x];if(v===-1){y.push(w?1:-1);continue}const S=[o.beginMask&1<<x,o.endMask&1<<x],T=[o.strides[x]>0?0:-1,o.strides[x]>0?v:v-1];if(w&&o.strides[x]<=0)throw Error("only stride 1 allowed on non-range indexing.");g=g&&o.strides[x]===1;const C=!!(o.beginMask&1<<x&&o.endMask&1<<x);if(o.beginValid&&o.endValid){if(w){const F=o.begin[x]<0?v+o.begin[x]:o.begin[x];if(o.begin[x]=F,o.end[x]=o.begin[x]+1,F<0||F>=v)throw Error(`slice index ${o.begin[x]} of dimension ${x} out of bounds.`)}else o.begin[x]=canonical$1(o.begin[x],0,o.strides[x],v,S,T),o.end[x]=canonical$1(o.end[x],1,o.strides[x],v,S,T);const P=o.strides[x]===1&&o.begin[x]===0&&o.end[x]===v;d=d&&P,m=m&&(x===0&&o.strides[x]===1||P)}else d=d&&o.strides[x]===1&&C,m=m&&(x===0&&o.strides[x]===1||C);let I,N=!1;if(o.beginValid&&o.endValid?(I=o.end[x]-o.begin[x],N=!0):w?(I=1,N=!0):C&&v>=0&&(o.strides[x]<0?I=-v:I=v,N=!0),N){let P;I===0||I<0!=o.strides[x]<0?P=0:P=Math.trunc(I/o.strides[x])+(I%o.strides[x]!==0?1:0),y.push(P)}else y.push(-1)}for(let x=0;x<o.finalShapeGatherIndices.length;++x){const w=o.finalShapeGatherIndices[x];w>=0?$.push(y[w]):w===NEW_AXIS$1&&$.push(1)}return{finalShapeSparse:$.filter((x,w)=>o.finalShapeGatherIndices[w]!==NEW_AXIS$1),finalShape:$,isIdentity:d,sliceDim0:m,isSimpleSlice:g,begin:o.begin,end:o.end,strides:o.strides}}function buildDenseSpec$1(n,e){e.beginMask=0,e.endMask=0,e.shrinkAxisMask=0;let t=0;e.beginValid=n.begin!=null,e.endValid=n.end!=null,e.begin=new Array(e.dims),e.end=new Array(e.dims),e.strides=new Array(e.dims),e.finalShapeGatherIndices=[],e.finalShapeGatherIndicesSparse=[],e.inputShapeGatherIndicesSparse=new Array(e.dims);for(let r=0;r<n.dims;r++)if(1<<r&n.ellipsisMask){const s=Math.min(e.dims-(n.dims-r)+1+n.numAddAxisAfterEllipsis,e.dims);for(;t<s;t++)e.begin[t]=0,e.end[t]=0,e.strides[t]=1,e.beginMask|=1<<t,e.endMask|=1<<t,e.finalShapeGatherIndices.push(t),e.finalShapeGatherIndicesSparse.push(-1),e.inputShapeGatherIndicesSparse[t]=r}else if(1<<r&n.newAxisMask)e.finalShapeGatherIndices.push(NEW_AXIS$1),e.finalShapeGatherIndicesSparse.push(-1);else{if(t===e.begin.length)throw Error(`Index out of range using input dim ${t}; input has only ${e.dims} dims, ${e.begin.length}.`);n.begin!=null&&(e.begin[t]=n.begin[r]),n.end!=null&&(e.end[t]=n.end[r]),e.strides[t]=n.strides[r],n.beginMask&1<<r&&(e.beginMask|=1<<t),n.endMask&1<<r&&(e.endMask|=1<<t),n.shrinkAxisMask&1<<r?(e.finalShapeGatherIndices.push(SHRINK_AXIS$1),e.finalShapeGatherIndicesSparse.push(-1),e.shrinkAxisMask|=1<<t):(e.finalShapeGatherIndices.push(t),e.finalShapeGatherIndicesSparse.push(r)),e.inputShapeGatherIndicesSparse[t]=r,t++}}function canonical$1(n,e,t,r,s,a){if(s[e])return t>0?a[e]:a[e+1&1];{const i=n<0?r+n:n;return i<a[0]?a[0]:i>a[1]?a[1]:i}}var slice_util=Object.freeze({__proto__:null,assertParamsValid:assertParamsValid$1,computeFlatOffset:computeFlatOffset$1,computeOutShape:computeOutShape$5,getNormalizedAxes,isSliceContinous:isSliceContinous$1,maskToAxes,parseSliceParams:parseSliceParams$1,sliceInfo:sliceInfo$1,startForAxis,startIndicesWithElidedDims,stopForAxis,stopIndicesWithElidedDims,stridesForAxis,stridesWithElidedDims});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class OptimizerConstructors{static sgd(e){return new SGDOptimizer$1(e)}static momentum(e,t,r=!1){return new MomentumOptimizer$1(e,t,r)}static rmsprop(e,t=.9,r=0,s=null,a=!1){return new RMSPropOptimizer$1(e,t,r,s,a)}static adam(e=.001,t=.9,r=.999,s=null){return new AdamOptimizer$1(e,t,r,s)}static adadelta(e=.001,t=.95,r=null){return new AdadeltaOptimizer$1(e,t,r)}static adamax(e=.002,t=.9,r=.999,s=null,a=0){return new AdamaxOptimizer$1(e,t,r,s,a)}static adagrad(e,t=.1){return new AdagradOptimizer$1(e,t)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const train=OptimizerConstructors;/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const delayCallback=(()=>typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:n=>n())();function nextFrame(){return new Promise(n=>delayCallback(()=>n()))}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function assertParamsConsistent$1(n,e){const t=n[0].length;n.forEach((s,a)=>{assert$2(s.length===t,()=>`Error in concat${t}D: rank of tensors[${a}] must be the same as the rank of the rest (${t})`)}),assert$2(e>=0&&e<t,()=>`Error in concat${t}D: axis must be between 0 and ${t-1}.`);const r=n[0];n.forEach((s,a)=>{for(let i=0;i<t;i++)assert$2(i===e||s[i]===r[i],()=>`Error in concat${t}D: Shape of tensors[${a}] (${s}) does not match the shape of the rest (${r}) along the non-concatenated axis ${a}.`)})}function computeOutShape$4(n,e){const t=n[0].slice();for(let r=1;r<n.length;r++)t[e]+=n[r][e];return t}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var RowPartitionType$3;(function(n){n[n.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",n[n.VALUE_ROWIDS=1]="VALUE_ROWIDS",n[n.ROW_LENGTHS=2]="ROW_LENGTHS",n[n.ROW_SPLITS=3]="ROW_SPLITS",n[n.ROW_LIMITS=4]="ROW_LIMITS",n[n.ROW_STARTS=5]="ROW_STARTS"})(RowPartitionType$3||(RowPartitionType$3={}));function combineRaggedTensorToTensorShapes$1(n,e,t){let r=new Array;if(t==null&&e==null)return r;if(e==null)for(;r.length<n+t.length;)r.push(-1);else r=e.slice();if(t==null)return r;if(n+t.length!==r.length)throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.rank = ${n+t.length}, but shape.rank = ${r.length}`);for(let s=1;s<t.length;++s){const a=t[s],i=r[r.length-t.length+s],l=r[i];if(a>=0)if(l>=0){if(l!==a)throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.shape[${s+n}] = ${a} but shape[${s+n}] = ${l}`)}else r[i]=a}return r}function getRowPartitionTypesHelper$1(n){const e={FIRST_DIM_SIZE:RowPartitionType$3.FIRST_DIM_SIZE,VALUE_ROWIDS:RowPartitionType$3.VALUE_ROWIDS,ROW_LENGTHS:RowPartitionType$3.ROW_LENGTHS,ROW_SPLITS:RowPartitionType$3.ROW_SPLITS,ROW_LIMITS:RowPartitionType$3.ROW_LIMITS,ROW_STARTS:RowPartitionType$3.ROW_STARTS},t=[];for(const r of n)if(r in e)t.push(e[r]);else break;return t}function getRaggedRank$1(n){return n.length===0?0:n[0]===RowPartitionType$3.FIRST_DIM_SIZE?n.length-1:n.length}function validateDefaultValueShape$1(n,e){if(n==null||e==null)return;const t=n.length,r=e.length;if(t>=r)throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${e}, are incompatible: defaultValue.rank = ${t} must be less than ragged tensor input flatValues.rank = ${r})`);for(let s=0;s<Math.min(t,r-1);++s){const a=n[s],i=e[s+1];if(a>=0&&i>=0&&a!==1&&a!==i)throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${e} are incompatible: defaultValue.shape[${s-n.length}] = ${a} but ragged tensor input.flatValues.shape[${s-n.length}] = ${i}`)}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PARALLELIZE_THRESHOLD=30;function computeOptimalWindowSize(n){return n<=PARALLELIZE_THRESHOLD?n:nearestDivisor(n,Math.floor(Math.sqrt(n)))}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getImageCenter$1(n,e,t){const r=t*(typeof n=="number"?n:n[0]),s=e*(typeof n=="number"?n:n[1]);return[r,s]}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getReshaped$1(n,e,t,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(n[0]/t),s=s.concat(n.slice(1));else{s=s.concat(n[0]);const a=e.length;for(let i=0;i<a;++i)s=s.concat([n[i+1]/e[i],e[i]]);s=s.concat(n.slice(a+1))}return s}function getPermuted$1(n,e,t=!0){const r=[];if(t){r.push(e);for(let s=e+1;s<n;++s)s<=2*e?(r.push(s),r.push(s-(e+1))):r.push(s)}else{const s=[],a=[];for(let i=1;i<n;++i)i>=e*2+1||i%2===1?a.push(i):s.push(i);r.push(...s),r.push(0),r.push(...a)}return r}function getReshapedPermuted$1(n,e,t,r=!0){const s=[];r?s.push(n[0]/t):s.push(n[0]*t);for(let a=1;a<n.length;++a)a<=e.length?r?s.push(e[a-1]*n[a]):s.push(n[a]/e[a-1]):s.push(n[a]);return s}function getSliceBeginCoords$1(n,e){const t=[0];for(let r=0;r<e;++r)t.push(n[r][0]);return t}function getSliceSize$1(n,e,t){const r=n.slice(0,1);for(let s=0;s<t;++s)r.push(n[s+1]-e[s][0]-e[s][1]);return r}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SELU_SCALEALPHA$1=1.7580993408473768,SELU_SCALE$1=1.0507009873554805;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ERF_P$1=.3275911,ERF_A1$1=.254829592,ERF_A2$1=-.284496736,ERF_A3$1=1.421413741,ERF_A4$1=-1.453152027,ERF_A5$1=1.061405429;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mergeRealAndImagArrays$1(n,e){if(n.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${e.length}.`);const t=new Float32Array(n.length*2);for(let r=0;r<t.length;r+=2)t[r]=n[r/2],t[r+1]=e[r/2];return t}function splitRealAndImagArrays(n){const e=new Float32Array(n.length/2),t=new Float32Array(n.length/2);for(let r=0;r<n.length;r+=2)e[r/2]=n[r],t[r/2]=n[r+1];return{real:e,imag:t}}function complexWithEvenIndex(n){const e=Math.ceil(n.length/4),t=new Float32Array(e),r=new Float32Array(e);for(let s=0;s<n.length;s+=4)t[Math.floor(s/4)]=n[s],r[Math.floor(s/4)]=n[s+1];return{real:t,imag:r}}function complexWithOddIndex(n){const e=Math.floor(n.length/4),t=new Float32Array(e),r=new Float32Array(e);for(let s=2;s<n.length;s+=4)t[Math.floor(s/4)]=n[s],r[Math.floor(s/4)]=n[s+1];return{real:t,imag:r}}function getComplexWithIndex(n,e){const t=n[e*2],r=n[e*2+1];return{real:t,imag:r}}function assignToTypedArray(n,e,t,r){n[r*2]=e,n[r*2+1]=t}function exponents(n,e){const t=new Float32Array(n/2),r=new Float32Array(n/2);for(let s=0;s<Math.ceil(n/2);s++){const a=(e?2:-2)*Math.PI*(s/n);t[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:t,imag:r}}function exponent(n,e,t){const r=(t?2:-2)*Math.PI*(n/e),s=Math.cos(r),a=Math.sin(r);return{real:s,imag:a}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ARROW$1="->",ARROW_REGEX$1=/->/g,COMMA$1=",",ELLIPSIS$1="...";function decodeEinsumEquation$1(n,e){n=n.replace(/\s/g,"");const t=(n.length-n.replace(ARROW_REGEX$1,"").length)/ARROW$1.length;if(t<1)throw new Error("Equations without an arrow are not supported.");if(t>1)throw new Error(`Equation must contain exactly one arrow ("${ARROW$1}").`);const[r,s]=n.split(ARROW$1);assert$2(r.indexOf(ELLIPSIS$1)===-1,()=>`The ellipsis notation ("${ELLIPSIS$1}") is not supported yet.`);const a=r.split(COMMA$1),i=a.length;if(e!==i)throw new Error(`Expected ${i} input tensors, received ${e}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const l=[];for(let o=0;o<s.length;++o){const d=s[o];if(!a.some(m=>m.indexOf(d)!==-1))throw new Error(`Output subscripts contain the label ${d} not present in the input subscripts.`);l.indexOf(d)===-1&&l.push(d)}for(let o=0;o<r.length;++o){const d=r[o];l.indexOf(d)===-1&&d!==COMMA$1&&l.push(d)}const u=new Array(a.length);for(let o=0;o<i;++o){if(new Set(a[o].split("")).size!==a[o].length)throw new Error(`Found duplicate axes in input component ${a[o]}. Support for duplicate axes in input is not implemented yet.`);u[o]=[];for(let d=0;d<a[o].length;++d)u[o].push(l.indexOf(a[o][d]))}const h=l.length,f=s.length,c=[];for(let o=f;o<h;++o)c.push(o);return{allDims:l,summedDims:c,idDims:u}}function getEinsumPermutation$1(n,e){let t=new Array(n);t.fill(-1);for(let s=0;s<e.length;++s)t[e[s]]=s;const r=[];for(let s=0;s<n;++s)t[s]===-1&&r.push(s);return t=t.filter(s=>s!==-1),{permutationIndices:t,expandDims:r}}function checkEinsumDimSizes$1(n,e,t){const r=new Array(n);for(let s=0;s<t.length;++s){const a=t[s].shape;for(let i=0;i<e[s].length;++i)r[e[s][i]]===void 0?r[e[s][i]]=a[i]:assert$2(r[e[s][i]]===a[i],()=>`Expected dimension ${r[e[s][i]]} at axis ${i} of input shaped ${JSON.stringify(a)}, but got dimension ${a[i]}`)}}function getEinsumComputePath$1(n,e){const t=n,r=[];let s=0;n.length===0&&t.push(-1),s=n.length+1;for(let i=0;i<s;++i)r.push([]);const a=[];for(let i=0;i<t.length;++i){const l=t[i],u=findTermsWithDim$1(e,l);for(const h of u)a.indexOf(h)===-1&&(r[i].push(h),a.push(h))}return{path:t,steps:r}}function isIdentityPermutation$1(n){return n.every((e,t)=>e===t)}function findTermsWithDim$1(n,e){const t=[];for(let r=0;r<n.length;++r)(n[r].length===0||n[r].indexOf(e)!==-1||e===-1)&&t.push(r);return t}function prepareSplitSize$1(n,e,t=0){let r=[];if(typeof e=="number")assert$2(n.shape[t]%e===0,()=>"Number of splits must evenly divide the axis."),r=new Array(e).fill(n.shape[t]/e);else{const s=e.reduce((i,l)=>(l===-1&&(i+=1),i),0);assert$2(s<=1,()=>"There should be only one negative value in split array.");const a=e.indexOf(-1);if(a!==-1){const i=e.reduce((l,u)=>u>0?l+u:l);e[a]=n.shape[t]-i}assert$2(n.shape[t]===e.reduce((i,l)=>i+l),()=>"The sum of sizes must match the size of the axis dimension."),r=e}return r}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseFillEmptyRowsIndicesDenseShapeMismatch$1(n){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${n}`}function getSparseFillEmptyRowsNegativeIndexErrorMessage$1(n,e){return`indices(${n}, 0) is invalid: ${e} < 0`}function getSparseFillEmptyRowsOutOfRangeIndexErrorMessage$1(n,e,t){return`indices(${n}, 0) is invalid: ${e} >= ${t}`}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage$1(n,e){return`only one output dimension may be -1, not both ${n} and ${e}`}function getSparseReshapeNegativeOutputDimErrorMessage$1(n,e){return`size ${n} must be non-negative, not ${e}`}function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage$1(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function getSparseReshapeInputOutputMultipleErrorMessage$1(n,e){const t=sizeFromShape$1(n),r=sizeFromShape$1(e);return`Input to reshape is a SparseTensor with ${t}
  dense values, but the requested shape requires a multiple of ${r}. inputShape=${n} outputShape= ${e}`}function getSparseReshapeInputOutputMismatchErrorMessage$1(n,e){const t=sizeFromShape$1(n),r=sizeFromShape$1(e);return`Input to reshape is a tensor with ${t} dense values, but the requested shape has ${r}. inputShape=${n} outputShape=${e}`}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseSegmentReductionNegativeSegmentIdsErrorMessage$1(){return"segment ids must be >= 0"}function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage$1(){return"segment ids are not increasing"}function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage$1(n,e){return`Segment id ${n} out of range [0, ${e}), possibly because segmentIds input is not sorted.`}function getSparseSegmentReductionIndicesOutOfRangeErrorMessage$1(n,e,t){return`Bad: indices[${n}] == ${e} out of range [0, ${t})`}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function segOpComputeOptimalWindowSize(n,e){let t=!1,r;for(n<=PARALLELIZE_THRESHOLD?(r=n,t=!0):r=nearestDivisor(n,Math.floor(Math.sqrt(n)));!t;)r>e||r===n?t=!0:r=nearestDivisor(n,r+1);return r}function computeOutShape$3(n,e,t){const r=[],s=n.length;for(let a=0;a<s;a++)a!==e?r.push(n[a]):r.push(t);return r}function collectGatherOpShapeInfo$1(n,e,t,r){const s=e.shape.length,a=n.shape.length;if(r!==0&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (
    ${a}).`);if(t<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${t}).`);for(let c=0;c<r;++c)if(n.shape[c]!==e.shape[c])throw new Error(`x.shape[${c}]: ${n.shape[c]} should be equal to indices.shape[${c}]: ${e.shape[c]}.`);const i=n.shape[t],l=[];let u=1,h=1,f=1;for(let c=0;c<r;++c)l.push(n.shape[c]),u*=n.shape[c];for(let c=r;c<t;c++)l.push(n.shape[c]),h*=n.shape[c];for(let c=r;c<s;c++)l.push(e.shape[c]);for(let c=t+1;c<a;c++)l.push(n.shape[c]),f*=n.shape[c];return{batchSize:u,sliceSize:f,outerSize:h,dimSize:i,outputShape:l}}var segment_util=Object.freeze({__proto__:null,collectGatherOpShapeInfo:collectGatherOpShapeInfo$1,computeOutShape:computeOutShape$3,segOpComputeOptimalWindowSize});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fromUint8ToStringArray$1(n){try{return n.map(e=>decodeString$1(e))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function fromStringArrayToUint8$1(n){return n.map(e=>encodeString$1(e))}var backend_util=Object.freeze({__proto__:null,ERF_A1:ERF_A1$1,ERF_A2:ERF_A2$1,ERF_A3:ERF_A3$1,ERF_A4:ERF_A4$1,ERF_A5:ERF_A5$1,ERF_P:ERF_P$1,PARALLELIZE_THRESHOLD,get RowPartitionType(){return RowPartitionType$3},SELU_SCALE:SELU_SCALE$1,SELU_SCALEALPHA:SELU_SCALEALPHA$1,applyActivation:applyActivation$1,assertAndGetBroadcastShape:assertAndGetBroadcastShape$1,assertAxesAreInnerMostDims:assertAxesAreInnerMostDims$1,assertParamsConsistent:assertParamsConsistent$1,assignToTypedArray,axesAreInnerMostDims:axesAreInnerMostDims$1,calculateShapes:calculateShapes$1,checkEinsumDimSizes:checkEinsumDimSizes$1,checkPadOnDimRoundingMode,combineLocations:combineLocations$1,combineRaggedTensorToTensorShapes:combineRaggedTensorToTensorShapes$1,complexWithEvenIndex,complexWithOddIndex,computeConv2DInfo:computeConv2DInfo$1,computeConv3DInfo:computeConv3DInfo$1,computeDefaultPad:computeDefaultPad$1,computeDilation2DInfo:computeDilation2DInfo$1,computeOptimalWindowSize,computeOutAndReduceShapes:computeOutAndReduceShapes$1,computeOutShape:computeOutShape$4,computePool2DInfo:computePool2DInfo$1,computePool3DInfo:computePool3DInfo$1,convertConv2DDataFormat:convertConv2DDataFormat$1,decodeEinsumEquation:decodeEinsumEquation$1,eitherStridesOrDilationsAreOne:eitherStridesOrDilationsAreOne$1,expandShapeToKeepDim:expandShapeToKeepDim$1,exponent,exponents,fromStringArrayToUint8:fromStringArrayToUint8$1,fromUint8ToStringArray:fromUint8ToStringArray$1,getAxesPermutation:getAxesPermutation$1,getBroadcastDims:getBroadcastDims$2,getComplexWithIndex,getEinsumComputePath:getEinsumComputePath$1,getEinsumPermutation:getEinsumPermutation$1,getFusedBiasGradient,getFusedDyActivation,getImageCenter:getImageCenter$1,getInnerMostAxes:getInnerMostAxes$1,getPermuted:getPermuted$1,getRaggedRank:getRaggedRank$1,getReductionAxes,getReshaped:getReshaped$1,getReshapedPermuted:getReshapedPermuted$1,getRowPartitionTypesHelper:getRowPartitionTypesHelper$1,getSliceBeginCoords:getSliceBeginCoords$1,getSliceSize:getSliceSize$1,getSparseFillEmptyRowsIndicesDenseShapeMismatch:getSparseFillEmptyRowsIndicesDenseShapeMismatch$1,getSparseFillEmptyRowsNegativeIndexErrorMessage:getSparseFillEmptyRowsNegativeIndexErrorMessage$1,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:getSparseFillEmptyRowsOutOfRangeIndexErrorMessage$1,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:getSparseReshapeEmptyTensorZeroOutputDimErrorMessage$1,getSparseReshapeInputOutputMismatchErrorMessage:getSparseReshapeInputOutputMismatchErrorMessage$1,getSparseReshapeInputOutputMultipleErrorMessage:getSparseReshapeInputOutputMultipleErrorMessage$1,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:getSparseReshapeMultipleNegativeOneOutputDimErrorMessage$1,getSparseReshapeNegativeOutputDimErrorMessage:getSparseReshapeNegativeOutputDimErrorMessage$1,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:getSparseSegmentReductionIndicesOutOfRangeErrorMessage$1,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:getSparseSegmentReductionNegativeSegmentIdsErrorMessage$1,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage$1,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage$1,getUndoAxesPermutation:getUndoAxesPermutation$1,isIdentityPermutation:isIdentityPermutation$1,log:log$4,mergeRealAndImagArrays:mergeRealAndImagArrays$1,prepareAndValidate:prepareAndValidate$1,prepareSplitSize:prepareSplitSize$1,segment_util,shouldFuse,slice_util,splitRealAndImagArrays,stridesOrDilationsArePositive,tupleValuesAreOne:tupleValuesAreOne$1,upcastType:upcastType$1,validateDefaultValueShape:validateDefaultValueShape$1,validateInput:validateInput$1,validateUpdateShape,warn:warn$1});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */registerOptimizers$1();/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const absGradConfig={kernelName:Abs$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul$1(n,step$3(cast$5(t,"float32"),-1))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const acosGradConfig={kernelName:Acos$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>{const r=square$3(cast$5(t,"float32")),s=sqrt$4(sub$4(scalar$1(1),r));return neg$3(div$2(n,s))}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const acoshGradConfig={kernelName:Acosh$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>{const r=sqrt$4(sub$4(square$3(cast$5(t,"float32")),1));return div$2(n,r)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const addGradConfig={kernelName:Add$2,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=assertAndGetBroadcastShape$1(t.shape,r.shape);return{a:()=>{let l=n;const u=getReductionAxes(t.shape,s);return u.length>0&&(l=sum$4(l,u)),reshape$5(l,t.shape)},b:()=>{let l=n;const u=getReductionAxes(r.shape,s);return u.length>0&&(l=sum$4(l,u)),reshape$5(l,r.shape)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const addNGradConfig={kernelName:AddN$1,saveAllInputs:!0,gradFunc:(n,e)=>{const t={};return e.forEach((r,s)=>{t[s]=()=>n.clone()}),t}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const argMaxGradConfig={kernelName:ArgMax$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>zerosLike$4(t)}}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const argMinGradConfig={kernelName:ArgMin$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>zerosLike$4(t)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const asinGradConfig={kernelName:Asin$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$2(n,sqrt$4(sub$4(scalar$1(1),square$3(cast$5(t,"float32")))))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const asinhGradConfig={kernelName:Asinh$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>{const r=sqrt$4(add$3(scalar$1(1),square$3(cast$5(t,"float32"))));return div$2(n,r)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atan2GradConfig={kernelName:Atan2$1,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=assertAndGetBroadcastShape$1(t.shape,r.shape);return{a:()=>{const l=add$3(square$3(t),square$3(r));let u=mul$1(n,div$2(r,l));const h=getReductionAxes(t.shape,s);return h.length>0&&(u=sum$4(u,h)),reshape$5(u,t.shape)},b:()=>{const l=add$3(square$3(t),square$3(r));let u=neg$3(mul$1(n,div$2(t,l)));const h=getReductionAxes(r.shape,s);return h.length>0&&(u=sum$4(u,h)),reshape$5(u,r.shape)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atanGradConfig={kernelName:Atan$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$2(n,add$3(square$3(cast$5(t,"float32")),1))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atanhGradConfig={kernelName:Atanh$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$2(n,sub$4(scalar$1(1),square$3(cast$5(t,"float32"))))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3dGrad_(n,e,t,r,s,a){const i=convertToTensor$1(n,"dy","avgPool3dGrad"),l=convertToTensor$1(e,"input","avgPool3dGrad");let u=i,h=l,f=!1;l.rank===4&&(f=!0,u=reshape$5(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),h=reshape$5(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),assert$2(u.rank===5,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`),assert$2(h.rank===5,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${h.rank}.`),checkPadOnDimRoundingMode("avgPool3dGrad",s,a);const c={dy:u,input:h},o={filterSize:t,strides:r,pad:s,dimRoundingMode:a},d=ENGINE$1.runKernel(AvgPool3DGrad$1,c,o);return f?reshape$5(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}const avgPool3dGrad=op$1({avgPool3dGrad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const avgPool3DGradConfig$3={kernelName:AvgPool3D$1,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{filterSize:s,strides:a,pad:i,dimRoundingMode:l}=t;return{x:()=>avgPool3dGrad(n,r,s,a,i,l)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPoolGrad_(n,e,t,r,s){const a=convertToTensor$1(n,"dy","avgPoolGrad"),i=convertToTensor$1(e,"input","avgPoolGrad");assert$2(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let l=i,u=a,h=!1;i.rank===3&&(h=!0,l=reshape$5(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=reshape$5(a,[1,a.shape[0],a.shape[1],a.shape[2]])),assert$2(u.rank===4,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`),assert$2(l.rank===4,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${l.rank}.`);const f={dy:u,input:l},c={filterSize:t,strides:r,pad:s},o=ENGINE$1.runKernel(AvgPoolGrad$1,f,c);return h?reshape$5(o,[o.shape[1],o.shape[2],o.shape[3]]):o}const avgPoolGrad$3=op$1({avgPoolGrad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const avgPoolGradConfig$3={kernelName:AvgPool$1,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{filterSize:s,strides:a,pad:i}=t;return{x:()=>avgPoolGrad$3(n,r,s,a,i)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchMatMulGradConfig={kernelName:BatchMatMul$1,inputsToSave:["a","b"],gradFunc:(n,e,t)=>{const[r,s]=e,{transposeA:a,transposeB:i}=t;return!a&&!i?{a:()=>matMul$1(n,s,!1,!0),b:()=>matMul$1(r,n,!0,!1)}:!a&&i?{a:()=>matMul$1(n,s,!1,!1),b:()=>matMul$1(n,r,!0,!1)}:a&&!i?{a:()=>matMul$1(s,n,!1,!0),b:()=>matMul$1(r,n,!1,!1)}:{a:()=>matMul$1(s,n,!0,!0),b:()=>matMul$1(n,r,!0,!0)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchToSpaceNDGradConfig={kernelName:BatchToSpaceND$1,gradFunc:(n,e,t)=>{const{blockShape:r,crops:s}=t;return{x:()=>spaceToBatchND$3(n,r,s)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const broadcastToGradConfig={kernelName:BroadcastTo,gradFunc:(n,e,t)=>{const r=t,s=r.inputShape,a=r.shape,i=Array.from(a);for(let u=s.length-1;u>=0;u--)if(s[u]===a[u])i[u]=1;else if(s[u]!==1)throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const l=[];for(let u=0;u<i.length;u++)i[u]>1&&l.push(u);return{x:()=>sum$4(n,l,!0)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const castGradConfig={kernelName:Cast$1,gradFunc:n=>({x:()=>n.clone()})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ceilGradConfig={kernelName:Ceil$1,gradFunc:n=>({x:()=>zerosLike$4(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const clipByValueGradConfig={kernelName:ClipByValue$1,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{clipValueMin:s,clipValueMax:a}=t;return{x:()=>where(logicalAnd$3(greaterEqual$3(r,s),lessEqual$3(r,a)),n,zerosLike$4(n))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const complexAbsGradConfig={kernelName:ComplexAbs$1,inputsToSave:["x"],gradFunc:absGradConfig.gradFunc};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const concatGradConfig={kernelName:Concat$1,saveAllInputs:!0,gradFunc:(n,e,t)=>{const r=e.map(u=>u.shape),{axis:s}=t,a=parseAxisParam$1(s,e[0].shape)[0],i=r.map(u=>u[a]);return split$3(n,i,a).map(u=>()=>u)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const conv2DGradConfig={kernelName:Conv2D$2,inputsToSave:["x","filter"],gradFunc:(n,e,t)=>{const[r,s]=e,{dilations:a,strides:i,pad:l,dataFormat:u}=t;return assert$2(tupleValuesAreOne$1(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>conv2DBackpropInput$3(r.shape,n,s,i,l,u),filter:()=>conv2DBackpropFilter$3(r,n,s.shape,i,l,u)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const conv2DBackpropInputGradConfig={kernelName:Conv2DBackpropInput$1,inputsToSave:["dy","filter"],gradFunc:(n,e,t)=>{const[r,s]=e,{strides:a,pad:i,dataFormat:l,dimRoundingMode:u}=t;return{dy:()=>conv2d$3(n,s,a,i,l,1,u),filter:()=>conv2DBackpropFilter$3(n,r,s.shape,a,i,l,u)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropFilter_(n,e,t,r,s){let a=n;n.rank===4&&(a=reshape$5(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]]));let i=e;i.rank===4&&(i=reshape$5(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),assert$2(a.rank===5,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`),assert$2(i.rank===5,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),assert$2(t.length===5,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${t}.`),assert$2(a.shape[4]===t[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${t[3]}.`),assert$2(i.shape[4]===t[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${t[4]}).`);const l={x:a,dy:i},u={strides:r,pad:s,filterShape:t};return ENGINE$1.runKernel(Conv3DBackpropFilterV2$1,l,u)}const conv3DBackpropFilter=op$1({conv3DBackpropFilter_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const conv3DGradConfig={kernelName:Conv3D$2,inputsToSave:["x","filter"],gradFunc:(n,e,t)=>{const{dilations:r,strides:s,pad:a}=t;assert$2(tupleValuesAreOne$1(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);const[i,l]=e;return{x:()=>conv3DBackpropInput$1(i.shape,n,l,s,a),filter:()=>conv3DBackpropFilter(i,n,l.shape,s,a)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cosGradConfig={kernelName:Cos$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul$1(neg$3(sin$3(cast$5(t,"float32"))),n)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const coshGradConfig={kernelName:Cosh$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul$1(sinh$3(cast$5(t,"float32")),n)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cumsumGradConfig={kernelName:Cumsum$1,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{axis:s,exclusive:a,reverse:i}=t;return{x:()=>{const l=getAxesPermutation$1([s],r.rank);let u=cumsum$3(n,s,a,!i);return l!=null&&(u=transpose$3(u,l)),u}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const depthwiseConv2dNativeGradConfig={kernelName:DepthwiseConv2dNative$1,inputsToSave:["x","filter"],gradFunc:(n,e,t)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=t,l=r??[1,1];assert$2(tupleValuesAreOne$1(l),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${l}'`);const[u,h]=e;return assert$2(u.rank===4,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`),assert$2(h.rank===4,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${h.rank}.`),assert$2(u.shape[3]===h.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),assert$2(eitherStridesOrDilationsAreOne$1(s,l),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${l}'.`),checkPadOnDimRoundingMode("depthwiseConv2d",a,i),{x:()=>depthwiseConv2dNativeBackpropInput$3(u.shape,n,h,s,a,l,i),filter:()=>depthwiseConv2dNativeBackpropFilter$3(u,n,h.shape,s,a,l,i)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const dilation2dGradConfig={kernelName:Dilation2D$1,inputsToSave:["x","filter"],gradFunc:(n,e,t)=>{const[r,s]=e,a={x:r,filter:s,dy:n},i={x:r,filter:s,dy:n};return{x:()=>ENGINE$1.runKernel(Dilation2DBackpropInput$1,a,t),filter:()=>ENGINE$1.runKernel(Dilation2DBackpropFilter$1,i,t)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const eluGradConfig$3={kernelName:Elu$2,outputsToSave:[!0],gradFunc:(n,e)=>{const[t]=e,r={dy:n,y:t};return{x:()=>ENGINE$1.runKernel(EluGrad$1,r)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const erfGradConfig={kernelName:Erf$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e,r=mul$1(exp$3(neg$3(square$3(t))),2/Math.sqrt(Math.PI));return{x:()=>mul$1(n,r)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expGradConfig={kernelName:Exp$1,outputsToSave:[!0],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul$1(n,t)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expandDimsGradConfig={kernelName:ExpandDims$1,inputsToSave:["input"],gradFunc:(n,e)=>{const[t]=e;return{input:()=>reshape$5(n,t.shape)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expm1GradConfig={kernelName:Expm1$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul$1(n,exp$3(t))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorGradConfig={kernelName:Floor$1,gradFunc:n=>({x:()=>zerosLike$4(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorDivGradConfig={kernelName:FloorDiv$1,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=assertAndGetBroadcastShape$1(t.shape,r.shape);return{a:()=>{const l=div$2(n,cast$5(r,"float32")),u=getReductionAxes(t.shape,s);return u.length>0?reshape$5(sum$4(l,u),t.shape):l},b:()=>{let l=mul$1(n,cast$5(t,"float32"));const u=getReductionAxes(r.shape,s);u.length>0&&(l=reshape$5(sum$4(l,u),r.shape));const h=square$3(r);return neg$3(div$2(l,cast$5(h,"float32")))}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const fusedBatchNormGradConfig={kernelName:FusedBatchNorm$1,inputsToSave:["x","mean","variance","scale"],gradFunc:(n,e,t)=>{const{varianceEpsilon:r}=t,[s,a,i,l]=e,u=l??scalar$1(1),h=getReductionAxes(a.shape,s.shape),f=[];if(a.rank===1){for(let w=0;w<s.shape.length-1;++w)f.push(s.shape[w]);f.push(1)}const c=sub$4(s,a),o=mul$1(n,u),d=rsqrt$3(add$3(i,scalar$1(r))),m=mul$1(mul$1(mul$1(d,d),d),scalar$1(-.5));return{x:()=>a.rank===1?reshape$5(mul$1(mul$1(n,tile$4(reshape$5(d,[1,1,1,a.shape[0]]),f)),u),s.shape):reshape$5(mul$1(mul$1(n,d),u),s.shape),mean:()=>{let w=mul$1(mul$1(d,scalar$1(-1)),o);return a.rank===1&&(w=sum$4(w,h)),reshape$5(w,a.shape)},variance:()=>{let w=mul$1(mul$1(m,c),o);return a.rank===1&&(w=sum$4(w,h)),reshape$5(w,a.shape)},scale:()=>{const w=mul$1(c,d);let v=mul$1(n,w);return a.rank===1&&(v=sum$4(v,h)),reshape$5(v,a.shape)},offset:()=>{let w=n;return a.rank===1&&(w=sum$4(w,h)),reshape$5(w,a.shape)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const gatherGradConfig={kernelName:GatherV2$1,inputsToSave:["x","indices"],gradFunc:(n,e,t)=>{const[r,s]=e,{axis:a,batchDims:i}=t,l=parseAxisParam$1(a,r.shape)[0],u=(h,f,c)=>()=>{const o=h.shape,d=f.size,m=o.slice(0,l),g=m.length,y=o.slice(a,o.length).slice(1),$=y.length,b=arrayRange(0,g),x=arrayRange(g+1,g+1+$),w=arrayConcat([m,[d],y]),v=reshape$5(c,w),S=reshape$5(f,[d]),T=arrayConcat([[g],b,x]),C=transpose$3(v,T);let I=unsortedSegmentSum$3(C,S,h.shape[l]);const N=getUndoAxesPermutation$1(T);return I=transpose$3(I,N),I};if(i===1){const h=r.shape[0],f=r.split(h,0);return{x:()=>stack(f.map((d,m)=>u(d,s.slice(m,1),n.slice(m,1))())).reshape(r.shape),indices:()=>s}}else return{x:u(r,s,n),indices:()=>s}}};function arrayRange(n,e){const t=[];for(let r=n;r<e;++r)t.push(r);return t}function arrayConcat(n){const e=[];for(let t=0;t<n.length;++t)for(let r=0;r<n[t].length;++r)e.push(n[t][r]);return e}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greaterEqualGradConfig={kernelName:GreaterEqual$1,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e;return{a:()=>zerosLike$4(t),b:()=>zerosLike$4(r)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const identityGradConfig={kernelName:Identity$2,gradFunc:n=>({x:()=>cast$5(n,"float32")})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isFiniteGradConfig={kernelName:IsFinite$1,gradFunc:n=>({x:()=>zerosLike$4(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isInfGradConfig={kernelName:IsInf$1,gradFunc:n=>({x:()=>zerosLike$4(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isNanGradConfig={kernelName:IsNan$1,gradFunc:n=>({x:()=>zerosLike$4(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const leakyReluGradConfig={kernelName:LeakyRelu$1,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{alpha:s}=t,a=greater$3(r,0);return{x:()=>where(a,n,mul$1(n,s))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const log1pGradConfig={kernelName:Log1p$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$2(n,add$3(t,1))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logGradConfig={kernelName:Log$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$2(n,cast$5(t,"float32"))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logSoftmaxGradConfig={kernelName:LogSoftmax$1,inputsToSave:[],outputsToSave:[!0],gradFunc:(n,e,t)=>{const[r]=e,{axis:s}=t;return{logits:()=>{const i=exp$3(r);return sub$4(n,mul$1(sum$4(n,s,!0),i))}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function localResponseNormalizationBackprop_(n,e,t,r=5,s=1,a=1,i=.5){const l={x:n,y:e,dy:t},u={depthRadius:r,bias:s,alpha:a,beta:i};return ENGINE$1.runKernel(LRNGrad$1,l,u)}const localResponseNormalizationBackprop=op$1({localResponseNormalizationBackprop_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lrnGradConfig$1={kernelName:LRN$1,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,e,t)=>{const[r,s]=e,{depthRadius:a,bias:i,alpha:l,beta:u}=t;return{x:()=>localResponseNormalizationBackprop(r,s,n,a,i,l,u)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gradForMinAndMax(n,e,t,r){return e.rank<t.rank&&(e=reshape$5(e,expandShapeToKeepDim$1(e.shape,r))),n.rank<t.rank&&(n=reshape$5(n,expandShapeToKeepDim$1(n.shape,r))),{x:()=>mul$1(n,cast$5(equal$3(t,e),n.dtype))}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxGradConfig={kernelName:Max$1,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,e,t)=>{const r=t,{reductionIndices:s}=r,a=e[0],i=e[1],l=parseAxisParam$1(s,a.shape),u=gradForMinAndMax(n,i,a,l);return{x:()=>u.x()}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maximumGradConfig={kernelName:Maximum$2,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e;return{a:()=>mul$1(n,cast$5(greaterEqual$3(t,r),"float32")),b:()=>mul$1(n,cast$5(less$3(t,r),"float32"))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3dGrad_(n,e,t,r,s,a,i){const l=convertToTensor$1(n,"dy","maxPool3dGrad"),u=convertToTensor$1(e,"input","maxPool3dGrad"),h=convertToTensor$1(t,"output","maxPool3dGrad");let f=l,c=u,o=h,d=!1;u.rank===4&&(d=!0,f=reshape$5(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),c=reshape$5(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),o=reshape$5(h,[1,h.shape[0],h.shape[1],h.shape[2],h.shape[3]])),assert$2(f.rank===5,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${f.rank}.`),assert$2(c.rank===5,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${c.rank}.`),assert$2(o.rank===5,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${o.rank}.`),checkPadOnDimRoundingMode("maxPool3dGrad",a,i);const m={dy:f,input:c,output:o},g={filterSize:r,strides:s,pad:a,dimRoundingMode:i},y=ENGINE$1.runKernel(MaxPool3DGrad$1,m,g);return d?reshape$5(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}const maxPool3dGrad=op$1({maxPool3dGrad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxPool3DGradConfig$3={kernelName:MaxPool3D$1,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,e,t)=>{const[r,s]=e,{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=t;return{x:()=>maxPool3dGrad(n,r,s,a,i,l,u)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolGrad_(n,e,t,r,s,a,i){const l=convertToTensor$1(n,"dy","maxPoolGrad"),u=convertToTensor$1(e,"input","maxPoolGrad"),h=convertToTensor$1(t,"output","maxPoolGrad");assert$2(u.rank===l.rank,()=>`Rank of input (${u.rank}) does not match rank of dy (${l.rank})`),assert$2(l.rank===4,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),assert$2(u.rank===4,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`),checkPadOnDimRoundingMode("maxPoolGrad",a,i);const f={dy:l,input:u,output:h},c={filterSize:r,strides:s,pad:a,dimRoundingMode:i};return ENGINE$1.runKernel(MaxPoolGrad$1,f,c)}const maxPoolGrad$3=op$1({maxPoolGrad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxPoolGradConfig$3={kernelName:MaxPool$1,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,e,t)=>{const[r,s]=e,{filterSize:a,strides:i,pad:l}=t;return{x:()=>maxPoolGrad$3(n,r,s,a,i,l)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const meanGradConfig={kernelName:Mean$1,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{axis:s}=t,a=parseAxisParam$1(s,r.shape),l=computeOutAndReduceShapes$1(r.shape,a)[1],u=sizeFromShape$1(l);return{x:()=>{const f=r.shape.slice();a.forEach(d=>{f[d]=1});const c=reshape$5(n,f);return div$2(mul$1(c,ones$1(r.shape,"float32")),u)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const minGradConfig={kernelName:Min$1,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,e,t)=>{const r=t,{axis:s}=r,[a,i]=e,l=parseAxisParam$1(s,a.shape),u=gradForMinAndMax(n,i,a,l);return{x:()=>u.x()}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const minimumGradConfig={kernelName:Minimum$2,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e;return{a:()=>mul$1(n,cast$5(lessEqual$3(t,r),"float32")),b:()=>mul$1(n,cast$5(greater$3(t,r),"float32"))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const mirrorPadGradConfig={kernelName:MirrorPad$1,inputsToSave:["x"],gradFunc:(n,e,t)=>{const r=e[0],{paddings:s}=t,a=s.map(i=>i[0]);return{x:()=>slice$3(n,a,r.shape)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const modGradConfig={kernelName:Mod$1,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=assertAndGetBroadcastShape$1(t.shape,r.shape);return{a:()=>{const l=getReductionAxes(t.shape,s);return l.length>0?reshape$5(sum$4(n,l),t.shape):n},b:()=>{const l=mul$1(n,neg$3(floor$3(div$2(t,r)))),u=getReductionAxes(r.shape,s);return u.length>0?reshape$5(sum$4(l,u),r.shape):l}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const multiplyGradConfig={kernelName:Multiply$2,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=assertAndGetBroadcastShape$1(t.shape,r.shape);return{a:()=>{const l=mul$1(n,cast$5(r,"float32")),u=getReductionAxes(t.shape,s);return u.length>0?reshape$5(sum$4(l,u),t.shape):l},b:()=>{const l=mul$1(n,cast$5(t,"float32")),u=getReductionAxes(r.shape,s);return u.length>0?reshape$5(sum$4(l,u),r.shape):l}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const negGradConfig={kernelName:Neg$1,gradFunc:n=>({x:()=>neg$3(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const oneHotGradConfig={kernelName:OneHot$1,inputsToSave:["indices"],gradFunc:(n,e)=>{const t=e[0];return{indices:()=>zeros$2(t.shape,"float32")}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const onesLikeGradConfig={kernelName:OnesLike$1,gradFunc:n=>({x:()=>zerosLike$4(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const packGradConfig={kernelName:Pack$1,saveAllInputs:!0,gradFunc:(n,e,t)=>{const{axis:r}=t;return unstack(n,r).map(a=>()=>a)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const padV2GradConfig={kernelName:PadV2$1,inputsToSave:["x"],gradFunc:(n,e,t)=>{const r=e[0],{paddings:s}=t,a=s.map(i=>i[0]);return{x:()=>slice$3(n,a,r.shape)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const powGradConfig={kernelName:Pow$1,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(n,e)=>{const[t,r,s]=e,a=t,i=r,l=assertAndGetBroadcastShape$1(a.shape,i.shape);return{a:()=>{const f=cast$5(i,"float32");let c=mul$1(n,mul$1(f,pow$4(a,sub$4(f,scalar$1(1)))));const o=getReductionAxes(a.shape,l);return o.length>0&&(c=sum$4(c,o)),reshape$5(c,a.shape)},b:()=>{const f=greater$3(a,0),c=where(f,log$3(a),zerosLike$4(a));let o=mul$1(n,mul$1(s,c));const d=getReductionAxes(i.shape,l);return d.length>0&&(o=sum$4(o,d)),reshape$5(o,i.shape)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const preluGradConfig={kernelName:Prelu$1,inputsToSave:["x","alpha"],gradFunc:(n,e)=>{const[t,r]=e,s=greater$3(t,0);return{x:()=>where(s,n,mul$1(n,r)),alpha:()=>{let a=where(s,zerosLike$4(n),mul$1(n,t));const i=getReductionAxes(r.shape,n.shape);return i.length>0&&(a=sum$4(a,i)),reshape$5(a,r.shape)}}}};/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prodGradFn_(n,e,t){const r=n.shape.slice();r[t]=1;const s=reshape$5(e,r),a=cumprod$3(n,t,!0,!1),i=cumprod$3(n,t,!0,!0),l=mul$1(a,i);return mul$1(s,l)}function prodsGradFn_(n,e,t){const r=n.shape.length,s=r-t.length,a=getAxesPermutation$1(t,r);let i=n;a!=null&&(i=transpose$3(n,a));const l=i.shape.slice(),h=l.splice(r-t.length,t.length).reduce((o,d)=>o*d,1);l.push(h);const f=i.reshape(l);let c=prodGradFn_(f,e,s);if(c=c.reshape(i.shape),a!=null){const o=getUndoAxesPermutation$1(a);c=transpose$3(c,o)}return c}const prodGradConfig={kernelName:Prod$1,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{axis:s}=t;let a=[];return s==null?a=r.shape.map((i,l)=>l):typeof s=="number"?a=[s]:a=s,{x:()=>prodsGradFn_(r,n,a)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const divGradConfig={kernelName:RealDiv$1,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=assertAndGetBroadcastShape$1(t.shape,r.shape);return{a:()=>{const l=div$2(n,cast$5(r,"float32")),u=getReductionAxes(t.shape,s);return u.length>0?reshape$5(sum$4(l,u),t.shape):l},b:()=>{let l=mul$1(n,cast$5(t,"float32"));const u=getReductionAxes(r.shape,s);u.length>0&&(l=reshape$5(sum$4(l,u),r.shape));const h=square$3(r);return neg$3(div$2(l,cast$5(h,"float32")))}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reciprocalGradConfig={kernelName:Reciprocal$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$2(n,neg$3(square$3(t)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const relu6GradConfig={kernelName:Relu6$2,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e,r=mul$1(lessEqual$3(t,6),step$3(t));return{x:()=>mul$1(n,cast$5(r,"float32"))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reluGradConfig={kernelName:Relu$2,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul$1(n,cast$5(step$3(t),"float32"))}}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reshapeGradConfig={kernelName:Reshape$2,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>reshape$5(n,t.shape)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const resizeBilinearGradConfig$3={kernelName:ResizeBilinear$1,inputsToSave:["images"],gradFunc:(n,e,t)=>{const[r]=e,s={dy:n,images:r};return{images:()=>ENGINE$1.runKernel(ResizeBilinearGrad$1,s,t)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const resizeNearestNeighborGradConfig$3={kernelName:ResizeNearestNeighbor$1,inputsToSave:["images"],gradFunc:(n,e,t)=>{const[r]=e,s={dy:n,images:r};return{images:()=>ENGINE$1.runKernel(ResizeNearestNeighborGrad$1,s,t)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reverseGradConfig={kernelName:Reverse$1,gradFunc:(n,e,t)=>{const{dims:r}=t,s=parseAxisParam$1(r,n.shape);return{x:()=>reverse$3(n,s)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const roundGradConfig={kernelName:Round$1,gradFunc:n=>({x:()=>zerosLike$4(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rsqrtGradConfig={kernelName:Rsqrt$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>neg$3(div$2(n,mul$1(pow$4(t,1.5),2)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const selectGradConfig={kernelName:Select$1,inputsToSave:["condition"],gradFunc:(n,e)=>{const[t]=e;return{condition:()=>cast$5(zerosLike$4(t),"float32"),t:()=>mul$1(n,cast$5(t,n.dtype)),e:()=>mul$1(n,cast$5(logicalNot$3(t),n.dtype))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const seluGradConfig={kernelName:Selu$2,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>{const r=greater$3(t,scalar$1(0)),s=scalar$1(SELU_SCALEALPHA$1),a=scalar$1(SELU_SCALE$1),i=mul$1(n,a),l=mul$1(mul$1(n,s),exp$3(cast$5(t,"float32")));return where(r,i,l)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sigmoidGradConfig={kernelName:Sigmoid$2,outputsToSave:[!0],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul$1(n,mul$1(t,sub$4(scalar$1(1),t)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const signGradConfig={kernelName:Sign$1,gradFunc:n=>({x:()=>zerosLike$4(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sinGradConfig={kernelName:Sin$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul$1(cos$3(cast$5(t,"float32")),n)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sinhGradConfig={kernelName:Sinh$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul$1(cosh$3(cast$5(t,"float32")),n)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sliceGradConfig={kernelName:Slice$1,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{begin:s,size:a}=t,i=r.shape,[l,u]=parseSliceParams$1(r,s,a),h=[];for(let f=0;f<n.rank;f++)h.push([l[f],i[f]-l[f]-u[f]]);return{x:()=>pad(n,h)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const softmaxGradConfig={kernelName:Softmax$3,outputsToSave:[!0],gradFunc:(n,e,t)=>{const[r]=e,{dim:s}=t,a=!0,i=mul$1(n,r);return{logits:()=>sub$4(i,mul$1(sum$4(i,[s],a),r))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const softplusGradConfig={kernelName:Softplus$2,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul$1(n,sigmoid$3(t))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const spaceToBatchNDGradConfig={kernelName:SpaceToBatchND$1,gradFunc:(n,e,t)=>{const{blockShape:r,paddings:s}=t;return{x:()=>batchToSpaceND$3(n,r,s)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const splitVGradConfig={kernelName:SplitV$1,gradFunc:(n,e,t)=>{const{axis:r}=t;return{x:()=>concat$3(n,r)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sqrtGradConfig={kernelName:Sqrt$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$2(n,mul$1(sqrt$4(cast$5(t,"float32")),2))}}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squareGradConfig={kernelName:Square$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul$1(n,mul$1(cast$5(t,"float32"),2))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squaredDifferenceGradConfig={kernelName:SquaredDifference$1,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=scalar$1(2);return{a:()=>mul$1(n,mul$1(s,sub$4(t,r))),b:()=>mul$1(n,mul$1(s,sub$4(r,t)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const stepGradConfig={kernelName:Step$1,gradFunc:n=>({x:()=>zerosLike$4(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const subGradConfig={kernelName:Sub$1,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=assertAndGetBroadcastShape$1(t.shape,r.shape);return{a:()=>{let l=n;const u=getReductionAxes(t.shape,s);return u.length>0&&(l=sum$4(l,u)),reshape$5(l,t.shape)},b:()=>{let l=n;const u=getReductionAxes(r.shape,s);return u.length>0&&(l=sum$4(l,u)),reshape$5(neg$3(l),r.shape)}}}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sumGradConfig={kernelName:Sum$1,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,s=r.shape.slice(),{axis:a}=t;parseAxisParam$1(a,r.shape).forEach(h=>{s[h]=1});const l=reshape$5(n,s),u=mul$1(l,ones$1(r.shape,"float32"));return{x:()=>u}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tanGradConfig={kernelName:Tan$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$2(n,square$3(cos$3(t)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tanhGradConfig={kernelName:Tanh$2,outputsToSave:[!0],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul$1(sub$4(scalar$1(1),square$3(t)),n)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tileGradConfig={kernelName:Tile$1,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{reps:s}=t;return{x:()=>{let i=zerosLike$4(r);if(r.rank===1)for(let l=0;l<s[0];++l)i=add$3(i,slice$3(n,[l*r.shape[0]],[r.shape[0]]));else if(r.rank===2)for(let l=0;l<s[0];++l)for(let u=0;u<s[1];++u)i=add$3(i,slice$3(n,[l*r.shape[0],u*r.shape[1]],[r.shape[0],r.shape[1]]));else if(r.rank===3)for(let l=0;l<s[0];++l)for(let u=0;u<s[1];++u)for(let h=0;h<s[2];++h)i=add$3(i,slice$3(n,[l*r.shape[0],u*r.shape[1],h*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else if(r.rank===4)for(let l=0;l<s[0];++l)for(let u=0;u<s[1];++u)for(let h=0;h<s[2];++h)for(let f=0;f<s[3];++f)i=add$3(i,slice$3(n,[l*r.shape[0],u*r.shape[1],h*r.shape[2],f*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]));else throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);return i}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const transposeGradConfig={kernelName:Transpose$1,gradFunc:(n,e,t)=>{const r=t,{perm:s}=r,a=getUndoAxesPermutation$1(s);return{x:()=>transpose$3(n,a)}}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const unpackGradConfig={kernelName:Unpack$1,gradFunc:(n,e,t)=>{const r=t,{axis:s}=r;return{value:()=>stack(n,s)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const unsortedSegmentSumGradConfig={kernelName:UnsortedSegmentSum$1,inputsToSave:["segmentIds"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>gatherDropNegatives(n,t)}}};function gatherDropNegatives(n,e){const t=maximum$4(e,zerosLike$4(e)),r=gather$1(n,t);let s=greaterEqual$3(e,scalar$1(0,"int32"));const a=r.rank-s.rank;for(let l=0;l<a;++l)s=expandDims$4(s,l+1);s=logicalAnd$3(s,ones$1(r.shape,"bool"));const i=zerosLike$4(r);return where(s,r,i)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const zerosLikeGradConfig={kernelName:ZerosLike$1,gradFunc:n=>({x:()=>zerosLike$4(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const gradConfigs=[absGradConfig,acosGradConfig,acoshGradConfig,addGradConfig,addNGradConfig,argMaxGradConfig,argMinGradConfig,asinGradConfig,asinhGradConfig,atan2GradConfig,atanGradConfig,atanhGradConfig,avgPool3DGradConfig$3,avgPoolGradConfig$3,batchMatMulGradConfig,batchToSpaceNDGradConfig,broadcastToGradConfig,castGradConfig,ceilGradConfig,clipByValueGradConfig,complexAbsGradConfig,concatGradConfig,conv2DBackpropInputGradConfig,conv2DGradConfig,conv3DGradConfig,cosGradConfig,coshGradConfig,cumsumGradConfig,depthwiseConv2dNativeGradConfig,dilation2dGradConfig,divGradConfig,eluGradConfig$3,erfGradConfig,expGradConfig,expandDimsGradConfig,expm1GradConfig,floorDivGradConfig,floorGradConfig,fusedBatchNormGradConfig,gatherGradConfig,greaterEqualGradConfig,identityGradConfig,isFiniteGradConfig,isInfGradConfig,isNanGradConfig,leakyReluGradConfig,log1pGradConfig,logGradConfig,logSoftmaxGradConfig,lrnGradConfig$1,maxGradConfig,maxGradConfig,maximumGradConfig,maxPool3DGradConfig$3,maxPoolGradConfig$3,meanGradConfig,minGradConfig,minimumGradConfig,mirrorPadGradConfig,modGradConfig,multiplyGradConfig,negGradConfig,oneHotGradConfig,onesLikeGradConfig,packGradConfig,padV2GradConfig,padV2GradConfig,powGradConfig,preluGradConfig,prodGradConfig,reciprocalGradConfig,relu6GradConfig,reluGradConfig,reshapeGradConfig,resizeBilinearGradConfig$3,resizeNearestNeighborGradConfig$3,reverseGradConfig,roundGradConfig,rsqrtGradConfig,selectGradConfig,seluGradConfig,sigmoidGradConfig,signGradConfig,sinGradConfig,sinhGradConfig,sliceGradConfig,softmaxGradConfig,softplusGradConfig,spaceToBatchNDGradConfig,spaceToBatchNDGradConfig,splitVGradConfig,splitVGradConfig,sqrtGradConfig,squaredDifferenceGradConfig,squareGradConfig,stepGradConfig,subGradConfig,sumGradConfig,tanGradConfig,tanhGradConfig,tileGradConfig,transposeGradConfig,unpackGradConfig,unsortedSegmentSumGradConfig,zerosLikeGradConfig];for(const n of gradConfigs)registerGradient(n);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.abs=function(){return this.throwIfDisposed(),abs$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.acos=function(){return this.throwIfDisposed(),acos$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.acosh=function(){return this.throwIfDisposed(),acosh$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.add=function(n){return this.throwIfDisposed(),add$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.all=function(n,e){return this.throwIfDisposed(),all$3(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.any=function(n,e){return this.throwIfDisposed(),any$3(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.argMax=function(n){return this.throwIfDisposed(),argMax$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.argMin=function(n){return this.throwIfDisposed(),argMin$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.asScalar=function(){return this.throwIfDisposed(),assert$2(this.size===1,()=>"The array must have only 1 element."),reshape$5(this,[])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.asType=function(n){return this.throwIfDisposed(),cast$5(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.as1D=function(){return this.throwIfDisposed(),reshape$5(this,[this.size])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.as2D=function(n,e){return this.throwIfDisposed(),reshape$5(this,[n,e])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.as3D=function(n,e,t){return this.throwIfDisposed(),reshape$5(this,[n,e,t])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.as4D=function(n,e,t,r){return this.throwIfDisposed(),reshape$5(this,[n,e,t,r])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.as5D=function(n,e,t,r,s){return this.throwIfDisposed(),reshape$5(this,[n,e,t,r,s])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.asin=function(){return this.throwIfDisposed(),asin$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.asinh=function(){return this.throwIfDisposed(),asinh$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.atan=function(){return this.throwIfDisposed(),atan$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.atan2=function(n){return this.throwIfDisposed(),atan2$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.atanh=function(){return this.throwIfDisposed(),atanh$3(this)},getGlobalTensorClass$1().prototype.avgPool=function(n,e,t,r){return this.throwIfDisposed(),avgPool$3(this,n,e,t,r)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.batchToSpaceND=function(n,e){return this.throwIfDisposed(),batchToSpaceND$3(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.batchNorm=function(n,e,t,r,s){return this.throwIfDisposed(),batchNorm$2(this,n,e,t,r,s)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.broadcastTo=function(n){return this.throwIfDisposed(),broadcastTo$1(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.cast=function(n){return this.throwIfDisposed(),cast$5(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.ceil=function(){return this.throwIfDisposed(),ceil$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.clipByValue=function(n,e){return this.throwIfDisposed(),clipByValue$3(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.concat=function(n,e){return this.throwIfDisposed(),n instanceof Tensor$1&&(n=[n]),concat$3([this,...n],e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.conv1d=function(n,e,t,r,s,a){return this.throwIfDisposed(),conv1d(this,n,e,t,r,s,a)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.conv2dTranspose=function(n,e,t,r,s){return this.throwIfDisposed(),conv2dTranspose(this,n,e,t,r,s)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.conv2d=function(n,e,t,r,s,a){return this.throwIfDisposed(),conv2d$3(this,n,e,t,r,s,a)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.cos=function(){return this.throwIfDisposed(),cos$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.cosh=function(){return this.throwIfDisposed(),cosh$3(this)};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.cumprod=function(n,e,t){return this.throwIfDisposed(),cumprod$3(this,n,e,t)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.cumsum=function(n,e,t){return this.throwIfDisposed(),cumsum$3(this,n,e,t)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.depthToSpace=function(n,e){return this.throwIfDisposed(),depthToSpace$3(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.depthwiseConv2d=function(n,e,t,r,s,a){return this.throwIfDisposed(),depthwiseConv2d$2(this,n,e,t,r,s,a)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.dilation2d=function(n,e,t,r,s){return this.throwIfDisposed(),dilation2d(this,n,e,t,r,s)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.divNoNan=function(n){return this.throwIfDisposed(),divNoNan(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.div=function(n){return this.throwIfDisposed(),div$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.dot=function(n){return this.throwIfDisposed(),dot$1(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.elu=function(){return this.throwIfDisposed(),elu$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.equal=function(n){return this.throwIfDisposed(),equal$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.erf=function(){return this.throwIfDisposed(),erf$3(this)};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.euclideanNorm=function(n,e){return this.throwIfDisposed(),euclideanNorm(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.exp=function(){return this.throwIfDisposed(),exp$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.expandDims=function(n){return this.throwIfDisposed(),expandDims$4(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.expm1=function(){return this.throwIfDisposed(),expm1$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.fft=function(){return this.throwIfDisposed(),fft$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.flatten=function(){return this.throwIfDisposed(),reshape$5(this,[this.size])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.floor=function(){return this.throwIfDisposed(),floor$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.floorDiv=function(n){return this.throwIfDisposed(),floorDiv$4(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.gather=function(n,e,t){return this.throwIfDisposed(),gather$1(this,n,e,t)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.greaterEqual=function(n){return this.throwIfDisposed(),greaterEqual$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.greater=function(n){return this.throwIfDisposed(),greater$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.ifft=function(){return this.throwIfDisposed(),ifft$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.irfft=function(){return this.throwIfDisposed(),irfft(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.isFinite=function(){return this.throwIfDisposed(),isFinite$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.isInf=function(){return this.throwIfDisposed(),isInf$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.isNaN=function(){return this.throwIfDisposed(),isNaN$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.leakyRelu=function(n){return this.throwIfDisposed(),leakyRelu$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.lessEqual=function(n){return this.throwIfDisposed(),lessEqual$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.less=function(n){return this.throwIfDisposed(),less$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.localResponseNormalization=function(n,e,t,r){return this.throwIfDisposed(),localResponseNormalization(this,n,e,t,r)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.logSigmoid=function(){return this.throwIfDisposed(),logSigmoid(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.logSoftmax=function(n){return this.throwIfDisposed(),logSoftmax(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.logSumExp=function(n,e){return this.throwIfDisposed(),logSumExp(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.log=function(){return this.throwIfDisposed(),log$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.log1p=function(){return this.throwIfDisposed(),log1p$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.logicalAnd=function(n){return this.throwIfDisposed(),logicalAnd$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.logicalNot=function(){return this.throwIfDisposed(),logicalNot$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.logicalOr=function(n){return this.throwIfDisposed(),logicalOr$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.logicalXor=function(n){return this.throwIfDisposed(),logicalXor(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.matMul=function(n,e,t){return this.throwIfDisposed(),matMul$1(this,n,e,t)},getGlobalTensorClass$1().prototype.maxPool=function(n,e,t,r){return this.throwIfDisposed(),maxPool$3(this,n,e,t,r)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.max=function(n,e){return this.throwIfDisposed(),max$4(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.maximum=function(n){return this.throwIfDisposed(),maximum$4(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.mean=function(n,e){return this.throwIfDisposed(),mean$2(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.min=function(n,e){return this.throwIfDisposed(),min$4(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.minimum=function(n){return this.throwIfDisposed(),minimum$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.mirrorPad=function(n,e){return this.throwIfDisposed(),mirrorPad$1(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.mod=function(n){return this.throwIfDisposed(),mod$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.mul=function(n){return this.throwIfDisposed(),mul$1(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.neg=function(){return this.throwIfDisposed(),neg$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.norm=function(n,e,t){return this.throwIfDisposed(),norm(this,n,e,t)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.notEqual=function(n){return this.throwIfDisposed(),notEqual$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.oneHot=function(n,e=1,t=0){return this.throwIfDisposed(),oneHot$3(this,n,e,t)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.onesLike=function(){return this.throwIfDisposed(),onesLike$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.pad=function(n,e){return this.throwIfDisposed(),pad(this,n,e)},getGlobalTensorClass$1().prototype.pool=function(n,e,t,r,s,a){return this.throwIfDisposed(),pool$1(this,n,e,t,r,s,a)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.pow=function(n){return this.throwIfDisposed(),pow$4(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.prelu=function(n){return this.throwIfDisposed(),prelu$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.prod=function(n,e){return this.throwIfDisposed(),prod$3(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.reciprocal=function(){return this.throwIfDisposed(),reciprocal$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.relu=function(){return this.throwIfDisposed(),relu$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.relu6=function(){return this.throwIfDisposed(),relu6$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.reshapeAs=function(n){return this.throwIfDisposed(),reshape$5(this,n.shape)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.reshape=function(n){return this.throwIfDisposed(),reshape$5(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.resizeBilinear=function(n,e,t){return this.throwIfDisposed(),resizeBilinear$4(this,n,e,t)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.resizeNearestNeighbor=function(n,e,t){return this.throwIfDisposed(),resizeNearestNeighbor$3(this,n,e,t)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.reverse=function(n){return this.throwIfDisposed(),reverse$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.rfft=function(){return this.throwIfDisposed(),rfft(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.round=function(){return this.throwIfDisposed(),round$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.rsqrt=function(){return this.throwIfDisposed(),rsqrt$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.selu=function(){return this.throwIfDisposed(),selu$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.separableConv2d=function(n,e,t,r,s,a){return this.throwIfDisposed(),separableConv2d(this,n,e,t,r,s,a)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.sigmoid=function(){return this.throwIfDisposed(),sigmoid$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.sign=function(){return this.throwIfDisposed(),sign$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.sin=function(){return this.throwIfDisposed(),sin$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.sinh=function(){return this.throwIfDisposed(),sinh$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.slice=function(n,e){return this.throwIfDisposed(),slice$3(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.softmax=function(n){return this.throwIfDisposed(),softmax$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.softplus=function(){return this.throwIfDisposed(),softplus$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.spaceToBatchND=function(n,e){return this.throwIfDisposed(),spaceToBatchND$3(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.split=function(n,e){return this.throwIfDisposed(),split$3(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.sqrt=function(){return this.throwIfDisposed(),sqrt$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.square=function(){return this.throwIfDisposed(),square$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.squaredDifference=function(n){return this.throwIfDisposed(),squaredDifference$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.squeeze=function(n){return this.throwIfDisposed(),squeeze(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.stack=function(n,e){this.throwIfDisposed();const t=n instanceof Tensor$1?[this,n]:[this,...n];return stack(t,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.step=function(n){return this.throwIfDisposed(),step$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.stridedSlice=function(n,e,t,r,s,a,i,l){return this.throwIfDisposed(),stridedSlice$3(this,n,e,t,r,s,a,i,l)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.sub=function(n){return this.throwIfDisposed(),sub$4(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.sum=function(n,e){return this.throwIfDisposed(),sum$4(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.tan=function(){return this.throwIfDisposed(),tan$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.tanh=function(){return this.throwIfDisposed(),tanh$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.tile=function(n){return this.throwIfDisposed(),tile$4(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.toBool=function(){return this.throwIfDisposed(),cast$5(this,"bool")};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.toFloat=function(){return this.throwIfDisposed(),cast$5(this,"float32")};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.toInt=function(){return this.throwIfDisposed(),cast$5(this,"int32")};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.topk=function(n,e){return this.throwIfDisposed(),topk(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.transpose=function(n){return this.throwIfDisposed(),transpose$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.unique=function(n){return this.throwIfDisposed(),unique$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.unsortedSegmentSum=function(n,e){return this.throwIfDisposed(),unsortedSegmentSum$3(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.unstack=function(n){return this.throwIfDisposed(),unstack(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.where=function(n,e){return this.throwIfDisposed(),where(n,this,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.zerosLike=function(){return this.throwIfDisposed(),zerosLike$4(this)};/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class AttributeError extends Error{constructor(e){super(e),Object.setPrototypeOf(this,AttributeError.prototype)}}class RuntimeError extends Error{constructor(e){super(e),Object.setPrototypeOf(this,RuntimeError.prototype)}}class ValueError extends Error{constructor(e){super(e),Object.setPrototypeOf(this,ValueError.prototype)}}class NotImplementedError extends Error{constructor(e){super(e),Object.setPrototypeOf(this,NotImplementedError.prototype)}}class AssertionError extends Error{constructor(e){super(e),Object.setPrototypeOf(this,AssertionError.prototype)}}/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class LruCache{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const r=this.cache.keys().next().value;this.cache.delete(r)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const r=this.cache.keys().next().value;this.cache.delete(r)}this.maxEntries=e}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function pyListRepeat(n,e){if(Array.isArray(n)){let t=[];for(let r=0;r<e;r++)t=t.concat(n);return t}else{const t=new Array(e);return t.fill(n),t}}function assert$1(n,e){if(!n)throw new AssertionError(e)}function count(n,e){let t=0;for(const r of n)r===e&&t++;return t}function singletonOrArray(n){return n.length===1?n[0]:n}function toList(n){return Array.isArray(n)?n:[n]}function toSnakeCase(n){const t=n.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return t[0]!=="_"?t:"private"+t}function toCamelCase(n){return n.length<=1||n.indexOf("_")===-1?n:n.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}let _GLOBAL_CUSTOM_OBJECTS={};function serializeKerasObject(n){if(n==null)return null;const e={};return e.className=n.getClassName(),e.config=n.getConfig(),e}function convertNDArrayScalarsInConfig(n){if(!(n==null||typeof n!="object"))if(Array.isArray(n))n.forEach(e=>convertNDArrayScalarsInConfig(e));else{const e=Object.keys(n);for(const t of e){const r=n[t];r!=null&&typeof r=="object"&&(!Array.isArray(r)&&r.type==="ndarray"&&typeof r.value=="number"?n[t]=r.value:convertNDArrayScalarsInConfig(r))}}}function deserializeKerasObject(n,e={},t={},r="object",s=!1){if(typeof n=="string"){const a=n;let i;if(a in t)i=t[a];else if(a in _GLOBAL_CUSTOM_OBJECTS)i=_GLOBAL_CUSTOM_OBJECTS[a];else if(i=e[a],i==null)throw new ValueError(`Unknown ${r}: ${n}. This may be due to one of the following reasons:
1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return i}else{const a=n;if(a.className==null||a.config==null)throw new ValueError(`${r}: Improper config format: ${JSON.stringify(a)}.
'className' and 'config' must set.`);const i=a.className;let l,u;if(i in t?[l,u]=t[i]:i in _GLOBAL_CUSTOM_OBJECTS?[l,u]=_GLOBAL_CUSTOM_OBJECTS.className:i in e&&([l,u]=e[i]),l==null)throw new ValueError(`Unknown ${r}: ${i}. This may be due to one of the following reasons:
1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(u!=null){const h={};for(const d of Object.keys(_GLOBAL_CUSTOM_OBJECTS))h[d]=_GLOBAL_CUSTOM_OBJECTS[d];for(const d of Object.keys(t))h[d]=t[d];const f=a.config;f.customObjects=h;const c=Object.assign({},_GLOBAL_CUSTOM_OBJECTS);for(const d of Object.keys(t))_GLOBAL_CUSTOM_OBJECTS[d]=t[d];convertNDArrayScalarsInConfig(a.config);const o=u(l,a.config,t,s);return _GLOBAL_CUSTOM_OBJECTS=Object.assign({},c),o}else{const h=Object.assign({},_GLOBAL_CUSTOM_OBJECTS);for(const c of Object.keys(t))_GLOBAL_CUSTOM_OBJECTS[c]=t[c];const f=new l(a.config);return _GLOBAL_CUSTOM_OBJECTS=Object.assign({},h),f}}}function numberCompare(n,e){return n<e?-1:n>e?1:0}function reverseNumberCompare(n,e){return-1*numberCompare(n,e)}function unique$2(n){if(n==null)return n;const e=[];for(const t of n)e.indexOf(t)===-1&&e.push(t);return e}function isObjectEmpty(n){if(n==null)throw new ValueError(`Invalid value in obj: ${JSON.stringify(n)}`);for(const e in n)if(n.hasOwnProperty(e))return!1;return!0}function checkStringTypeUnionValue(n,e,t){if(t!=null&&n.indexOf(t)<0)throw new ValueError(`${t} is not a valid ${e}.  Valid values are ${n} or null/undefined.`)}function checkArrayTypeAndLength(n,e,t=0,r=1/0){return assert$1(t>=0),assert$1(r>=t),Array.isArray(n)&&n.length>=t&&n.length<=r&&n.every(s=>typeof s===e)}function assertPositiveInteger(n,e){Array.isArray(n)?(assert$2(n.length>0,()=>`${e} is unexpectedly an empty array.`),n.forEach((t,r)=>assertPositiveInteger(t,`element ${r+1} of ${e}`))):assert$2(Number.isInteger(n)&&n>0,()=>`Expected ${e} to be a positive integer, but got ${formatAsFriendlyString(n)}.`)}function formatAsFriendlyString(n){return n===null?"null":Array.isArray(n)?"["+n.map(e=>formatAsFriendlyString(e)).join(",")+"]":typeof n=="string"?`"${n}"`:`${n}`}function debounce(n,e,t){let r=t!=null?t():now$1(),s;return(...i)=>{const l=t!=null?t():now$1();return l-r<e||(r=l,s=n(...i)),s}}function mapActivationToFusedKernel(n){return n==="relu"?"relu":n==="linear"?"linear":n==="elu"?"elu":null}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */let _nextUniqueTensorId=0;function getNextUniqueTensorId(){return _nextUniqueTensorId++}const _uidPrefixes={};function getUid(n=""){return n in _uidPrefixes||(_uidPrefixes[n]=0),_uidPrefixes[n]+=1,n+_uidPrefixes[n].toString()}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const VALID_DATA_FORMAT_VALUES=["channelsFirst","channelsLast"],VALID_INTERPOLATION_FORMAT_VALUES=["nearest","bilinear"],VALID_PADDING_MODE_VALUES=["valid","same","causal"],VALID_POOL_MODE_VALUES=["max","avg"],VALID_BIDIRECTIONAL_MERGE_MODES=["sum","mul","concat","ave"];/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const nameMap=new Map;function checkDataFormat(n){checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES,"DataFormat",n)}function checkInterpolationFormat(n){checkStringTypeUnionValue(VALID_INTERPOLATION_FORMAT_VALUES,"InterpolationFormat",n)}function checkPaddingMode(n){checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES,"PaddingMode",n)}function checkPoolMode(n){checkStringTypeUnionValue(VALID_POOL_MODE_VALUES,"PoolMode",n)}const _nameScopeStack=[],_nameScopeDivider="/";function nameScope(n,e){_nameScopeStack.push(n);try{const t=e();return _nameScopeStack.pop(),t}catch(t){throw _nameScopeStack.pop(),t}}function currentNameScopePrefix(){return _nameScopeStack.length===0?"":_nameScopeStack.join(_nameScopeDivider)+_nameScopeDivider}function getScopedTensorName(n){if(!isValidTensorName(n))throw new Error("Not a valid tensor name: '"+n+"'");return currentNameScopePrefix()+n}function getUniqueTensorName(n){if(!isValidTensorName(n))throw new Error("Not a valid tensor name: '"+n+"'");nameMap.has(n)||nameMap.set(n,0);const e=nameMap.get(n);if(nameMap.set(n,nameMap.get(n)+1),e>0){const t=`${n}_${e}`;return nameMap.set(t,1),t}else return n}const tensorNameRegex=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function isValidTensorName(n){return!!n.match(tensorNameRegex)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function isInteger(n){return n===parseInt(n.toString(),10)}function arrayProd(n,e,t){e==null&&(e=0),t==null&&(t=n.length);let r=1;for(let s=e;s<t;++s)r*=n[s];return r}function min$3(n){if(n.length===0)return Number.NaN;let e=Number.POSITIVE_INFINITY;for(let t=0;t<n.length;t++){const r=n[t];r<e&&(e=r)}return e}function max$3(n){if(n.length===0)return Number.NaN;let e=Number.NEGATIVE_INFINITY;for(let t=0;t<n.length;t++){const r=n[t];r>e&&(e=r)}return e}function range$3(n,e){if(e<n)throw new ValueError(`end (${e}) < begin (${n}) is forbidden.`);const t=[];for(let r=n;r<e;++r)t.push(r);return t}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */let _epsilon;function epsilon$1(){return _epsilon==null&&(_epsilon=backend().epsilon()),_epsilon}function imageDataFormat(){return"channelsLast"}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function cast$4(n,e){return cast$5(n,e)}function expandDims$3(n,e=-1){const t=n.shape.slice();return e<0&&(e=t.length+e+1),t.splice(e,0,1),reshape$5(n,t)}function repeat(n,e){return tidy$1(()=>{if(n.shape.length!==2)throw new ValueError(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);const t=expandDims$3(n,1);return tile$3(t,[1,e,1])})}function flatten$1(n){const e=[arrayProd(n.shape)];return reshape$5(n,e)}function batchFlatten(n){if(n.rank<=1)throw new ValueError(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);const e=[n.shape[0],arrayProd(n.shape,1)];return reshape$5(n,e)}function sliceAlongFirstAxis(n,e,t){return tidy$1(()=>{switch(n.rank){case 1:return slice1d(n,e,t);case 2:return slice2d(n,[e,0],[t,n.shape[1]]);case 3:return slice3d(n,[e,0,0],[t,n.shape[1],n.shape[2]]);case 4:return slice4d(n,[e,0,0,0],[t,n.shape[1],n.shape[2],n.shape[3]]);case 5:return slice$3(n,[e,0,0,0,0],[t,n.shape[1],n.shape[2],n.shape[3],n.shape[4]]);case 6:return slice$3(n,[e,0,0,0,0,0],[t,n.shape[1],n.shape[2],n.shape[3],n.shape[4],n.shape[5]]);default:throw new ValueError(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}})}function sliceAlongLastAxis(n,e,t){return tidy$1(()=>{switch(n.rank){case 1:return slice1d(n,e,t);case 2:return slice2d(n,[0,e],[n.shape[0],t]);case 3:return slice3d(n,[0,0,e],[n.shape[0],n.shape[1],t]);case 4:return slice4d(n,[0,0,0,e],[n.shape[0],n.shape[1],n.shape[2],t]);default:throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function sliceAlongAxis(n,e,t,r){return tidy$1(()=>{switch(n.rank){case 1:return slice1d(n,e,t);case 2:switch(r){case 1:return sliceAlongFirstAxis(n,e,t);case 2:return sliceAlongLastAxis(n,e,t);default:throw new ValueError(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return sliceAlongFirstAxis(n,e,t);case 2:return slice3d(n,[0,e,0],[n.shape[0],t,n.shape[2]]);case 3:return sliceAlongLastAxis(n,e,t);default:throw new ValueError(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return sliceAlongFirstAxis(n,e,t);case 2:return slice4d(n,[0,e,0,0],[n.shape[0],t,n.shape[2],n.shape[3]]);case 3:return slice4d(n,[0,0,e,0],[n.shape[0],n.shape[1],t,n.shape[3]]);case 4:return sliceAlongLastAxis(n,e,t);default:throw new ValueError(`The axis is not within the rank of the tensor ${r}`)}default:throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function concatenate(n,e=-1){let t;return e<0&&(t=n[0].rank,t!==0?e=t:e=0),e===n[0].rank&&(e=-1),concat$3(n,e)}function concatAlongFirstAxis(n,e){switch(n.rank){case 1:return concat1d([n,e]);case 2:return concat2d([n,e],0);case 3:return concat3d([n,e],0);case 4:return concat4d([n,e],0);default:throw new ValueError(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}}function tile$3(n,e){if(Array.isArray(e)||(e=[e]),n.rank!==e.length)throw new ValueError(`The length of input n (${e.length}) does not match the number of dimensions in input x (${n.rank})`);return tile$4(n,e)}function randomNormal(n,e=0,t=1,r,s){return randomNormal$1(n,e,t,r,s)}function dot(n,e,t,r){if(n.rank<2||e.rank<2)throw new NotImplementedError(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${e.shape}`);if(e.rank>=3){const s=n.shape.slice(-1)[0],a=e.shape.slice(-2)[0];if(s!==a)throw new NotImplementedError(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${e.shape}`)}if(n.rank===2&&e.rank===2)return matMul({a:n,b:e,transposeA:!1,transposeB:!1,bias:r?reshapeBias(n.rank,r,imageDataFormat()):null,activation:t});{const s=n.shape.slice(),a=s.pop();n=reshape$5(n,[-1,a]);const i=e.shape.slice(),l=i.pop(),u=i.pop(),h=[...i,l],f=Array.from({length:e.rank},(m,g)=>g===0?e.rank-2:g<=e.rank-2?g-1:g);e=reshape$5(transpose$3(e,f),[u,-1]);const c=[...s,...h];return reshape$5(matMul({a:n,b:e,transposeA:!1,transposeB:!1,bias:r?reshapeBias(n.rank,r,imageDataFormat()):null,activation:t}),c)}}function gather(n,e,t){return tidy$1(()=>(Array.isArray(e)?e=tensor1d(e,"int32"):e=cast$5(e,"int32"),gather$1(n,e,t)))}function square$2(n){return mul$1(n,n)}function reshapeBias(n,e,t){const r=e.shape;if(e.rank!==1&&e.rank!==n)throw new ValueError(`Unexpected bias dimensions: ${e.rank}; expected it to be 1 or ${n}`);if(n===5){if(t==="channelsFirst")return r.length===1?reshape$5(e,[1,r[0],1,1,1]):reshape$5(e,[1,r[3],r[0],r[1],r[2]]);if(t==="channelsLast")return r.length===1?reshape$5(e,[1,1,1,1,r[0]]):reshape$5(e,[1].concat(r))}else if(n===4){if(t==="channelsFirst")return r.length===1?reshape$5(e,[1,r[0],1,1]):reshape$5(e,[1,r[2],r[0],r[1]]);if(t==="channelsLast")return r.length===1?reshape$5(e,[1,1,1,r[0]]):reshape$5(e,[1].concat(r))}else if(n===3){if(t==="channelsFirst")return r.length===1?reshape$5(e,[1,r[0],1]):reshape$5(e,[1,r[1],r[0]]);if(t==="channelsLast")return r.length===1?reshape$5(e,[1,1,r[0]]):reshape$5(e,[1].concat(r))}else if(n<3)return e;throw new ValueError(`Unsupported input rank by biasAdd: ${e.rank}`)}function biasAdd(n,e,t){return tidy$1(()=>(t==null&&(t=imageDataFormat()),checkDataFormat(t),add$3(n,reshapeBias(n.rank,e,t))))}function elu$3(n,e=1){if(e!==1)throw new NotImplementedError(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return elu$4(n)}function softsign(n){return tidy$1(()=>div$2(n,add$3(abs$4(n),1)))}function dropout(n,e,t,r){return tidy$1(()=>dropout$1(n,e,t,r))}function hardSigmoid(n){return tidy$1(()=>{const e=add$3(.5,mul$1(.2,n));return clipByValue$3(e,0,1)})}function inTrainPhase(n,e,t=!1){return t?n():e()}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const VALID_FAN_MODE_VALUES=["fanIn","fanOut","fanAvg"],VALID_DISTRIBUTION_VALUES=["normal","uniform","truncatedNormal"];/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function checkFanMode(n){checkStringTypeUnionValue(VALID_FAN_MODE_VALUES,"FanMode",n)}function checkDistribution(n){checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES,"Distribution",n)}class Initializer extends Serializable$1{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Zeros extends Initializer{apply(e,t){return zeros$2(e,t)}}Zeros.className="Zeros",registerClass$1(Zeros);class Ones extends Initializer{apply(e,t){return ones$1(e,t)}}Ones.className="Ones",registerClass$1(Ones);class Constant extends Initializer{constructor(e){if(super(),typeof e!="object")throw new ValueError(`Expected argument of type ConstantConfig but got ${e}`);if(e.value===void 0)throw new ValueError(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return tidy$1(()=>mul$1(scalar$1(this.value),ones$1(e,t)))}getConfig(){return{value:this.value}}}Constant.className="Constant",registerClass$1(Constant);class RandomUniform extends Initializer{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return randomUniform(e,this.minval,this.maxval,t,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}RandomUniform.className="RandomUniform",registerClass$1(RandomUniform);class RandomNormal extends Initializer{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if(t=t||"float32",t!=="float32"&&t!=="int32")throw new NotImplementedError(`randomNormal does not support dType ${t}.`);return randomNormal(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}RandomNormal.className="RandomNormal",registerClass$1(RandomNormal);class TruncatedNormal extends Initializer{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if(t=t||"float32",t!=="float32"&&t!=="int32")throw new NotImplementedError(`truncatedNormal does not support dType ${t}.`);return truncatedNormal(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}TruncatedNormal.className="TruncatedNormal",registerClass$1(TruncatedNormal);let Identity$1=class extends Initializer{constructor(e){super(),this.gain=e.gain!=null?e.gain:1}apply(e,t){return tidy$1(()=>{if(e.length!==2||e[0]!==e[1])throw new ValueError("Identity matrix initializer can only be used for 2D square matrices.");return mul$1(this.gain,eye(e[0]))})}getConfig(){return{gain:this.gain}}};Identity$1.className="Identity",registerClass$1(Identity$1);function computeFans(n,e="channelsLast"){let t,r;if(checkDataFormat(e),n.length===2)t=n[0],r=n[1];else if([3,4,5].indexOf(n.length)!==-1){if(e==="channelsFirst"){const s=arrayProd(n,2);t=n[1]*s,r=n[0]*s}else if(e==="channelsLast"){const s=arrayProd(n,0,n.length-2);t=n[n.length-2]*s,r=n[n.length-1]*s}}else{const s=arrayProd(n);t=Math.sqrt(s),r=Math.sqrt(s)}return[t,r]}class VarianceScaling extends Initializer{constructor(e){if(super(),e.scale<0)throw new ValueError(`scale must be a positive float. Got: ${e.scale}`);this.scale=e.scale==null?1:e.scale,this.mode=e.mode==null?"fanIn":e.mode,checkFanMode(this.mode),this.distribution=e.distribution==null?"normal":e.distribution,checkDistribution(this.distribution),this.seed=e.seed}apply(e,t){const r=computeFans(e),s=r[0],a=r[1];let i=this.scale;if(this.mode==="fanIn"?i/=Math.max(1,s):this.mode==="fanOut"?i/=Math.max(1,a):i/=Math.max(1,(s+a)/2),this.distribution==="normal"){const l=Math.sqrt(i);if(t=t||"float32",t!=="float32"&&t!=="int32")throw new NotImplementedError(`${this.getClassName()} does not support dType ${t}.`);return truncatedNormal(e,0,l,t,this.seed)}else{const l=Math.sqrt(3*i);return randomUniform(e,-l,l,t,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}VarianceScaling.className="VarianceScaling",registerClass$1(VarianceScaling);class GlorotUniform extends VarianceScaling{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:e==null?null:e.seed})}getClassName(){return VarianceScaling.className}}GlorotUniform.className="GlorotUniform",registerClass$1(GlorotUniform);class GlorotNormal extends VarianceScaling{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:e==null?null:e.seed})}getClassName(){return VarianceScaling.className}}GlorotNormal.className="GlorotNormal",registerClass$1(GlorotNormal);class HeNormal extends VarianceScaling{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:e==null?null:e.seed})}getClassName(){return VarianceScaling.className}}HeNormal.className="HeNormal",registerClass$1(HeNormal);class HeUniform extends VarianceScaling{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:e==null?null:e.seed})}getClassName(){return VarianceScaling.className}}HeUniform.className="HeUniform",registerClass$1(HeUniform);class LeCunNormal extends VarianceScaling{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:e==null?null:e.seed})}getClassName(){return VarianceScaling.className}}LeCunNormal.className="LeCunNormal",registerClass$1(LeCunNormal);class LeCunUniform extends VarianceScaling{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:e==null?null:e.seed})}getClassName(){return VarianceScaling.className}}LeCunUniform.className="LeCunUniform",registerClass$1(LeCunUniform);class Orthogonal extends Initializer{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=e.gain==null?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,t){return tidy$1(()=>{if(e.length<2)throw new NotImplementedError("Shape must be at least 2D.");if(t!=="int32"&&t!=="float32"&&t!==void 0)throw new TypeError(`Unsupported data type ${t}.`);t=t;const r=sizeFromShape$1(e.slice(0,-1)),s=e[e.length-1],a=r*s;a>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${a}) elements: Slowness may result.`);const i=[Math.max(s,r),Math.min(s,r)],l=randomNormal(i,0,1,t,this.seed),u=linalg.qr(l,!1);let h=u[0];const c=u[1].flatten().stridedSlice([0],[Math.min(s,r)*Math.min(s,r)],[Math.min(s,r)+1]);return h=mul$1(h,c.sign()),r<s&&(h=h.transpose()),mul$1(scalar$1(this.gain),h.reshape(e))})}getConfig(){return{gain:this.gain,seed:this.seed}}}Orthogonal.className="Orthogonal",registerClass$1(Orthogonal);const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function deserializeInitializer(n,e={}){return deserializeKerasObject(n,SerializationMap$1.getMap().classNameMap,e,"initializer")}function serializeInitializer(n){return serializeKerasObject(n)}function getInitializer(n){if(typeof n=="string"){const e=n in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP?INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[n]:n;if(e==="GlorotNormal")return new GlorotNormal;if(e==="GlorotUniform")return new GlorotUniform;if(e==="HeNormal")return new HeNormal;if(e==="HeUniform")return new HeUniform;if(e==="LeCunNormal")return new LeCunNormal;if(e==="LeCunUniform")return new LeCunUniform;{const t={};return t.className=e,t.config={},deserializeInitializer(t)}}else return n instanceof Initializer?n:deserializeInitializer(n)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function isArrayOfShapes(n){return Array.isArray(n)&&Array.isArray(n[0])}function normalizeShapeList(n){return n.length===0?[]:Array.isArray(n[0])?n:[n]}function getExactlyOneTensor(n){let e;if(Array.isArray(n)){if(n.length!==1)throw new ValueError(`Expected Tensor length to be 1; got ${n.length}`);e=n[0]}else e=n;return e}function getExactlyOneShape(n){if(Array.isArray(n)&&Array.isArray(n[0])){if(n.length===1)return n=n,n[0];throw new ValueError(`Expected exactly 1 Shape; got ${n.length}`)}else return n}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function countParamsInWeights(n){let e=0;for(const t of n)t.shape.length===0?e+=1:e+=t.shape.reduce((r,s)=>r*s);return e}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const DEFAULT_VARIABLE_NAME_PREFIX="Variable";class LayerVariable{constructor(e,t="float32",r=DEFAULT_VARIABLE_NAME_PREFIX,s=!0,a=null){this.dtype=t??"float32",this.shape=e.shape,this.id=getNextUniqueTensorId(),r=r??DEFAULT_VARIABLE_NAME_PREFIX,this.originalName=getScopedTensorName(r),this.name=getUniqueTensorName(this.originalName),this.trainable_=s,this.constraint=a,this.val=variable(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),checkShapesMatch(this.val,e),this.val.id!==e.id&&(this.val.assign(e),this.constraint!=null&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function checkShapesMatch(n,e){if(n.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(n.shape)+" vs. "+JSON.stringify(e.shape))}function batchGetValue(n){return n.map(e=>e.read())}function batchSetValue(n){n.forEach(e=>{e[0].write(e[1])})}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class InputSpec{constructor(e){this.dtype=e.dtype,this.shape=e.shape,e.shape!=null?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class SymbolicTensor{constructor(e,t,r,s,a,i,l){this.dtype=e,this.shape=t,this.sourceLayer=r,this.inputs=s,this.callArgs=a,this.outputTensorIndex=l,this.id=getNextUniqueTensorId(),i!=null&&(this.originalName=getScopedTensorName(i),this.name=getUniqueTensorName(this.originalName)),this.rank=t.length}}let _nextNodeID=0;class Node{constructor(e,t){this.callArgs=t,this.id=_nextNodeID++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const r of e.inboundLayers)r?.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)t!=null?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let _nextLayerID=0;class Layer extends Serializable$1{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=_nextLayerID++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const r=this.getClassName();t=toSnakeCase(r)+"_"+getUid(r)}if(this.name=t,this.trainable_=e.trainable==null?!0:e.trainable,e.inputShape!=null||e.batchInputShape!=null){let r;if(e.batchInputShape!=null)r=e.batchInputShape;else if(e.inputShape!=null){let a=null;e.batchSize!=null&&(a=e.batchSize),r=[a].concat(e.inputShape)}this.batchInputShape=r;let s=e.dtype;s==null&&(s=e.inputDType),s==null&&(s="float32"),this.dtype=s}e.weights!=null?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(this.inboundNodes.length===0)throw new RuntimeError(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new ValueError(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return singletonOrArray(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return singletonOrArray(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new AttributeError(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(this.inboundNodes.length===0)throw new AttributeError(`Layer ${this.name} is not connected, no input to return.`);return singletonOrArray(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(this.inboundNodes.length===0)throw new AttributeError(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new AttributeError(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return singletonOrArray(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){const t=toList(e);if(this.inputSpec==null||this.inputSpec.length===0)return;const r=toList(this.inputSpec);if(t.length!==r.length)throw new ValueError(`Layer ${this.name} expects ${r.length} inputs, but it received ${t.length} input tensors. Input received: ${e}`);for(let s=0;s<t.length;s++){const a=t[s],i=r[s];if(i==null)continue;const l=a.rank;if(i.ndim!=null&&l!==i.ndim)throw new ValueError(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${i.ndim}, found ndim=${l}`);if(i.maxNDim!=null&&l>i.maxNDim)throw new ValueError(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${i.maxNDim}, found ndim=${l}`);if(i.minNDim!=null&&l<i.minNDim)throw new ValueError(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${i.minNDim}, found ndim=${l}.`);if(i.dtype!=null&&a.dtype!==i.dtype)throw new ValueError(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${i.dtype}, found dtype=${a.dtype}.`);if(i.axes){const u=a.shape;for(const h in i.axes){const f=Number(h),c=i.axes[h],o=f>=0?u[f]:u[u.length+f];if(c!=null&&[c,null].indexOf(o)===-1)throw new ValueError(`Input ${s} is incompatible with layer ${this.name}: expected axis ${f} of input shape to have value ${c} but got shape ${u}.`)}}if(i.shape!=null)for(let u=0;u<i.shape.length;++u){const h=i.shape[u],f=a.shape[u];if(h!=null&&f!=null&&h!==f)throw new ValueError(`Input ${s} is incompatible with layer ${this.name}: expected shape=${i.shape}, found shape=${a.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){this._callHook!=null&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const r=toList(e),s=checkAllSymbolic(e),a=checkNoneSymbolic(e);if(s===a)throw new ValueError("Arguments to apply() must be all SymbolicTensors or all Tensors");return nameScope(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);const i=[];for(const l of toList(e))i.push(l.shape);this.build(singletonOrArray(i)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),this._refCount===null&&a&&(this._refCount=1)}if(this.assertInputCompatibility(e),a){let i=this.call(e,t);this.supportsMasking&&this.setMaskMetadata(e,i);const l=toList(i),u=[];for(let h of l)r.indexOf(h)!==-1&&(h=h.clone()),u.push(h);if(i=singletonOrArray(u),this.activityRegularizer!=null)throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return i}else{const i=collectInputShape(e),l=this.computeOutputShape(i);let u;const h=guessOutputDType(e);if(this.warnOnIncompatibleInputShape(Array.isArray(e)?i[0]:i),l!=null&&l.length>0&&Array.isArray(l[0])?u=l.map((f,c)=>new SymbolicTensor(h,f,this,toList(e),t,this.name,c)):u=new SymbolicTensor(h,l,this,toList(e),t,this.name),this.addInboundNode(e,u,null,null,i,l,t),this._refCount++,this.activityRegularizer!=null)throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return u}})}warnOnIncompatibleInputShape(e){if(this.batchInputShape!=null)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach((r,s)=>{r!=null&&e[s]!=null&&e[s]!==r&&(t=!0)}),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(this.inboundNodes==null||this.inboundNodes.length===0)throw new AttributeError(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const r=JSON.stringify(t.outputShapes);e.indexOf(r)===-1&&e.push(r)}if(e.length===1){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&t.length===1?t[0]:t}else throw new AttributeError(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new RuntimeError(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return countParamsInWeights(this.weights)}build(e){this.built=!0}getWeights(e=!1){return batchGetValue(e?this.trainableWeights:this.weights)}setWeights(e){tidy$1(()=>{const t=this.weights;if(t.length!==e.length)throw new ValueError(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(t.length===0)return;const r=[],s=batchGetValue(t);for(let a=0;a<s.length;++a){const i=s[a],l=t[a],u=e[a];if(!arraysEqual$1(i.shape,u.shape))throw new ValueError(`Layer weight shape ${i.shape} not compatible with provided weight shape ${u.shape}`);r.push([l,u])}batchSetValue(r)})}addWeight(e,t,r,s,a,i,l,u){if(this._addedWeightNames.indexOf(e)!==-1)throw new ValueError(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),r==null&&(r="float32"),this.fastWeightInitDuringBuild&&(s=u!=null?u():getInitializer("zeros"));const h=s.apply(t,r),f=new LayerVariable(h,r,e,i,l);return h.dispose(),a!=null&&this.addLoss(()=>a.apply(f.read())),i==null&&(i=!0),i?this._trainableWeights.push(f):this._nonTrainableWeights.push(f),f}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){e==null||Array.isArray(e)&&e.length===0||(e=toList(e),this._losses!==void 0&&this._losses!==null&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(t!=null)if(Array.isArray(t))t.forEach(r=>{if(r!=null)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)});else throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);return null}return t}setMaskMetadata(e,t,r){if(!this.supportsMasking)return;const s=this.computeMask(e,r);if(t instanceof Array&&s instanceof Array){if(t.length!==s.length)throw new Error(`${this.name} outputs ${t.length} tensors but ${s.length} masks for those tensors`);for(let a=0;a<t.length;a++)t[a].kerasMask=s[a]}else{if(s instanceof Array)throw new Error(`{this.name} outputs a single tensor but ${s.length} masks`);if(t instanceof Array)throw new Error(`{this.name} outputs ${t.length} tensors but only one mask`);t.kerasMask=s}}addInboundNode(e,t,r,s,a,i,l=null){const u=toList(e);t=toList(t),r=toList(r),s=toList(s),a=normalizeShapeList(a),i=normalizeShapeList(i);const h=[],f=[],c=[];for(const o of u)h.push(o.sourceLayer),f.push(o.nodeIndex),c.push(o.tensorIndex);new Node({outboundLayer:this,inboundLayers:h,nodeIndices:f,tensorIndices:c,inputTensors:u,outputTensors:t,inputMasks:r,outputMasks:s,inputShapes:a,outputShapes:i},l);for(let o=0;o<t.length;o++)t[o].sourceLayer=this,t[o].nodeIndex=this.inboundNodes.length-1,t[o].tensorIndex=o}getConfig(){const e={name:this.name,trainable:this.trainable};return this.batchInputShape!=null&&(e.batchInputShape=this.batchInputShape),this.dtype!=null&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(this._refCount===0)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(this._refCount===null)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return--this._refCount===0&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function collectInputShape(n){n=toList(n);const e=[];for(const t of n)e.push(t.shape);return singletonOrArray(e)}function guessOutputDType(n){return"float32"}function getSourceInputs(n,e,t){if((e==null||t!=null&&t>0)&&(e=n.sourceLayer,t=n.nodeIndex),e.inboundNodes.length===0)return[n];{const r=e.inboundNodes[t];if(r.inboundLayers.length===0)return r.inputTensors;{const s=[];for(let a=0;a<r.inboundLayers.length;a++){const i=r.inputTensors[a],l=r.inboundLayers[a],u=r.nodeIndices[a],h=getSourceInputs(i,l,u);for(const f of h)s.indexOf(f)===-1&&s.push(f)}return s}}}function checkAllSymbolic(n){let e=!0;for(const t of toList(n))if(!(t instanceof SymbolicTensor)){e=!1;break}return e}function checkNoneSymbolic(n){let e=!0;for(const t of toList(n))if(t instanceof SymbolicTensor){e=!1;break}return e}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class InputLayer extends Layer{constructor(e){if(super({dtype:e.dtype,name:e.name!=null?e.name:getUid("input").toString()}),e.batchSize==null&&(e.batchSize=null),e.sparse==null&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,e.inputShape!=null&&e.batchInputShape!=null)throw new ValueError("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(t==null){if(e.inputShape==null)throw new ValueError("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(e.batchSize!=null)throw new ValueError("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const r=e.dtype||"float32";this.batchInputShape=t,this.dtype=r,this.inputSpec=[{shape:t}];const s=new SymbolicTensor(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new Node({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new ValueError(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}InputLayer.className="InputLayer",registerClass$1(InputLayer);function Input(n){if(n.batchShape==null&&n.shape==null)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(n.batchShape!=null&&n.shape!=null)throw new ValueError("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=n.batchShape;n.shape!=null&&e==null&&(e=[null].concat(n.shape));let t=n.dtype;return t==null&&(t="float32"),new InputLayer({batchInputShape:e,name:n.name,dtype:t,sparse:n.sparse}).inboundNodes[0].outputTensors[0]}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function assertFeedCompatibility(n,e){if(n.dtype==null||n.dtype===e.dtype)return e;try{return cast$5(e,n.dtype)}catch{throw new ValueError(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`)}}class FeedDict{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof FeedDict)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(e==null)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,r){if(this.id2Value[e.id]==null)this.id2Value[e.id]=assertFeedCompatibility(e,t),this.name2Id[e.name]=e.id,r!=null&&(this.id2Mask[e.id]=r);else throw new ValueError(`Duplicate key: name=${e.name}, id=${e.id}`);return this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return this.id2Value[e.id]!=null}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof SymbolicTensor){if(this.id2Value[e.id]==null)throw new ValueError(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}else{const t=this.name2Id[e];if(t==null)throw new ValueError(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof SymbolicTensor){if(this.id2Value[e.id]==null)throw new ValueError(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}else{const t=this.name2Id[e];if(t==null)throw new ValueError(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){this.id2Mask!=null&&dispose$1(this.id2Mask)}}const cachedSorted=new LruCache,cachedRecipientCounts=new LruCache;function updateCacheMaxEntries(n){cachedSorted?.setMaxEntries(n),cachedRecipientCounts?.setMaxEntries(n)}function execute(n,e,t,r){const s=t==null?!1:t.training,a=Array.isArray(n),i=a?n:[n],l=i.map(m=>m.name),u=[],h=e.names();for(const m of l)h.indexOf(m)!==-1?u.push(e.getValue(m)):u.push(null);r!=null&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const f=l.join(",")+"|"+e.names().sort().join(",");let c=cachedSorted.get(f),o;if(c==null){const m=getTopologicalSortAndRecipientCounts(i,e);c=m.sorted,o=m.recipientCounts,cachedSorted.put(f,c),cachedRecipientCounts.put(f,o)}o={},s||Object.assign(o,cachedRecipientCounts.get(f));const d=new FeedDict(e);for(let m=0;m<c.length;++m){if(r!=null){const I=memory().numTensors;I>r.maxNumTensors&&(r.maxNumTensors=I),I<r.minNumTensors&&(r.minNumTensors=I)}const g=c[m],y=g.sourceLayer;if(y instanceof InputLayer)continue;const $=[],b=[],x=[];let w=!1;for(const I of g.inputs){const N=d.getValue(I),P=d.getMask(I);$.push(N),b.push(P),P!=null&&(w=!0),s||(o[I.name]--,o[I.name]===0&&!e.hasKey(I)&&l.indexOf(I.name)===-1&&!N.isDisposed&&I.sourceLayer.stateful!==!0&&x.push(N))}w&&(t=t||{},t.mask=b[0]);const v=toList(y.apply($,t));let S=null;y.supportsMasking&&(S=y.computeMask($,b));const T=getNodeOutputs(g),C=Array.isArray(T)?T:[T];for(let I=0;I<C.length;++I){d.hasKey(C[I])||d.add(C[I],v[I],Array.isArray(S)?S[0]:S);const N=l.indexOf(C[I].name);N!==-1&&(u[N]=v[I])}s||dispose$1(x)}return d.disposeMasks(),a?u:u[0]}function getTopologicalSortAndRecipientCounts(n,e){assert$2(n!=null&&n.length>0,()=>"Expected at least one fetch, got none");let t=[],r={};if(n.length===1){const s=getTopologicalSortAndRecipientCountsForOneFetch(n[0],e);t=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of n){const{sorted:i,recipientMap:l}=getTopologicalSortAndRecipientCountsForOneFetch(a,e);for(const u of i)s.has(u.name)||(t.push(u),s.add(u.name));for(const u in l)r[u]==null&&(r[u]=new Set),l[u].forEach(h=>r[u].add(h))}}return{sorted:t,recipientCounts:recipientMap2Counts(r)}}function recipientMap2Counts(n){const e={};for(const t in n)e[t]=n[t].size;return e}function getTopologicalSortAndRecipientCountsForOneFetch(n,e){const t=new Set,r=[],s={};for(const l of e.names())t.add(l);const a=[],i=[];for(a.push(n);a.length>0;){const l=a[a.length-1];if(t.has(l.name)){a.pop();continue}const u=i[i.length-1]===a.length-1;if(l.inputs.length===0||u)a.pop(),r.push(l),t.add(l.name),u&&i.pop();else{i.push(a.length-1);for(const h of l.inputs)s[h.name]==null&&(s[h.name]=new Set),s[h.name].add(l.name),!t.has(h.name)&&a.push(h)}}return{sorted:r,recipientMap:s}}function getNodeOutputs(n){let e;if(n.sourceLayer.inboundNodes.length===1)e=n.sourceLayer.output;else{let t=null;for(let r=0;r<n.sourceLayer.inboundNodes.length;++r)for(const s of n.sourceLayer.inboundNodes[r].outputTensors)if(s.id===n.id){t=r;break}e=n.sourceLayer.getOutputAt(t)}return e}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV$5=env$1();ENV$5.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,updateCacheMaxEntries);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function calcL2Norms(n,e){return tidy$1(()=>sqrt$4(sum$4(mul$1(n,n),e,!0)))}class Constraint extends Serializable$1{getConfig(){return{}}}class MaxNorm extends Constraint{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=e.maxValue!=null?e.maxValue:this.defaultMaxValue,this.axis=e.axis!=null?e.axis:this.defaultAxis}apply(e){return tidy$1(()=>{const t=calcL2Norms(e,this.axis),r=clipByValue$3(t,0,this.maxValue);return mul$1(e,div$2(r,add$3(epsilon$1(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}MaxNorm.className="MaxNorm",registerClass$1(MaxNorm);class UnitNorm extends Constraint{constructor(e){super(),this.defaultAxis=0,this.axis=e.axis!=null?e.axis:this.defaultAxis}apply(e){return tidy$1(()=>div$2(e,add$3(epsilon$1(),calcL2Norms(e,this.axis))))}getConfig(){return{axis:this.axis}}}UnitNorm.className="UnitNorm",registerClass$1(UnitNorm);class NonNeg extends Constraint{apply(e){return relu$3(e)}}NonNeg.className="NonNeg",registerClass$1(NonNeg);class MinMaxNorm extends Constraint{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=e.minValue!=null?e.minValue:this.defaultMinValue,this.maxValue=e.maxValue!=null?e.maxValue:this.defaultMaxValue,this.rate=e.rate!=null?e.rate:this.defaultRate,this.axis=e.axis!=null?e.axis:this.defaultAxis}apply(e){return tidy$1(()=>{const t=calcL2Norms(e,this.axis),r=add$3(mul$1(this.rate,clipByValue$3(t,this.minValue,this.maxValue)),mul$1(1-this.rate,t));return mul$1(e,div$2(r,add$3(epsilon$1(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}MinMaxNorm.className="MinMaxNorm",registerClass$1(MinMaxNorm);const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function serializeConstraint(n){return serializeKerasObject(n)}function deserializeConstraint(n,e={}){return deserializeKerasObject(n,SerializationMap$1.getMap().classNameMap,e,"constraint")}function getConstraint(n){if(n==null)return null;if(typeof n=="string"){const t={className:n in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP?CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[n]:n,config:{}};return deserializeConstraint(t)}else return n instanceof Constraint?n:deserializeConstraint(n)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */async function resolveScalarsInLogs(n){if(n==null)return;const e=[],t=[],r=[];for(const s in n){const a=n[s];if(typeof a!="number"){const i=a;e.push(i.data()),t.push(s),r.push(i)}}if(e.length>0){const s=await Promise.all(e);for(let a=0;a<s.length;++a)n[t[a]]=s[a][0];dispose$1(r)}}function disposeTensorsInLogs(n){if(n!=null)for(const e in n){const t=n[e];typeof t!="number"&&t.dispose()}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var ModelLoggingVerbosity;(function(n){n[n.SILENT=0]="SILENT",n[n.VERBOSE=1]="VERBOSE"})(ModelLoggingVerbosity||(ModelLoggingVerbosity={}));const DEFAULT_YIELD_EVERY_MS=125;class BaseCallback{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class CallbackList{constructor(e,t=10){e==null&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){t==null&&(t={});for(const r of this.callbacks)await r.onEpochBegin(e,t)}async onEpochEnd(e,t){t==null&&(t={});for(const r of this.callbacks)await r.onEpochEnd(e,t)}async onBatchBegin(e,t){t==null&&(t={});for(const r of this.callbacks)await r.onBatchBegin(e,t)}async onBatchEnd(e,t){t==null&&(t={});for(const r of this.callbacks)await r.onBatchEnd(e,t)}async onTrainBegin(e){e==null&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){e==null&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class BaseLogger extends BaseCallback{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){t==null&&(t={});const r=t.size==null?0:t.size;this.seen+=r;for(const s in t){const a=t[s];if(typeof a=="number")this.totals.hasOwnProperty(s)||(this.totals[s]=0),this.totals[s]=this.totals[s]+a*r;else{let i;s in this.totals?i=this.totals[s]:this.totals[s]=0;const l=tidy$1(()=>add$3(this.totals[s],mul$1(a,r)));this.totals[s]=l,i?.dispose()}}}async onEpochEnd(e,t){if(t!=null)for(const r of this.params.metrics)this.totals[r]!=null&&(typeof this.totals[r]=="number"?t[r]=this.totals[r]/this.seen:tidy$1(()=>{const s=mul$1(div$2(1,this.seen),this.totals[r]);t[r]=s,this.totals[r].dispose(),keep$1(t[r])}))}}class History extends BaseCallback{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){t==null&&(t={}),this.epoch.push(e);for(const r in t)this.history[r]==null&&(this.history[r]=[]),this.history[r].push(t[r])}async syncData(){const e=[],t=[],r=[];for(const a in this.history){const i=this.history[a];for(let l=0;l<i.length;++l)if(typeof i[l]!="number"){const u=i[l];e.push(u.data()),t.push(a),r.push(l)}}const s=await Promise.all(e);for(let a=0;a<s.length;++a)this.history[t[a]][r[a]].dispose(),this.history[t[a]][r[a]]=s[a][0]}}class CustomCallback extends BaseCallback{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||nextFrame,this.yieldEvery=t||"auto",this.yieldEvery==="auto"&&(this.yieldEvery=DEFAULT_YIELD_EVERY_MS),this.yieldEvery==="never"&&e.onYield!=null)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");isNumber$1(this.yieldEvery)&&(this.maybeWait=debounce(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,r){const s=[];this.yield!=null&&(await resolveScalarsInLogs(r),s.push(this.yield(e,t,r))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,this.epochBegin!=null&&(await resolveScalarsInLogs(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const r=[];this.epochEnd!=null&&(await resolveScalarsInLogs(t),r.push(this.epochEnd(e,t))),this.yieldEvery==="epoch"&&r.push(this.nextFrameFunc()),await Promise.all(r)}async onBatchBegin(e,t){this.batchBegin!=null&&(await resolveScalarsInLogs(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const r=[];this.batchEnd!=null&&(await resolveScalarsInLogs(t),r.push(this.batchEnd(e,t))),this.yieldEvery==="batch"?r.push(this.nextFrameFunc()):isNumber$1(this.yieldEvery)&&r.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(r)}async onTrainBegin(e){this.trainBegin!=null&&(await resolveScalarsInLogs(e),await this.trainBegin(e))}async onTrainEnd(e){this.trainEnd!=null&&(await resolveScalarsInLogs(e),await this.trainEnd(e))}}function standardizeCallbacks(n,e){return n==null&&(n={}),n instanceof BaseCallback?[n]:Array.isArray(n)&&n[0]instanceof BaseCallback?n:toList(n).map(r=>new CustomCallback(r,e))}class CallbackConstructorRegistry{constructor(){}static registerCallbackConstructor(e,t){assert$2(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),CallbackConstructorRegistry.checkForDuplicate(t),CallbackConstructorRegistry.constructors[e]==null&&(CallbackConstructorRegistry.constructors[e]=[]),CallbackConstructorRegistry.constructors[e].push(t)}static checkForDuplicate(e){for(const t in CallbackConstructorRegistry.constructors)CallbackConstructorRegistry.constructors[+t].forEach(s=>{if(s===e)throw new ValueError("Duplicate callback constructor.")})}static clear(){CallbackConstructorRegistry.constructors={}}static createCallbacks(e){const t=[];for(const r in CallbackConstructorRegistry.constructors){const s=+r;e>=s&&t.push(...CallbackConstructorRegistry.constructors[s])}return t.map(r=>new r)}}CallbackConstructorRegistry.constructors={};function configureCallbacks(n,e,t,r,s,a,i,l,u){const h=new History,f=[new BaseLogger,...CallbackConstructorRegistry.createCallbacks(e)];n!=null&&f.push(...n),f.push(h);const c=new CallbackList(f);return c.setParams({epochs:t,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:e,doValidation:l,metrics:u}),{callbackList:c,history:h}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function deserialize(n,e={},t=!1){return deserializeKerasObject(n,SerializationMap$1.getMap().classNameMap,e,"layer",t)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function l2Normalize(n,e){return tidy$1(()=>{n.dtype!=="float32"&&(n=cast$5(n,"float32"));const t=sum$4(square$2(n),e,!0),r=fill$4(t.shape,epsilon$1()),s=sqrt$4(maximum$4(t,r));return div$2(n,s)})}function meanSquaredError(n,e){return tidy$1(()=>mean$2(square$2(sub$4(e,n)),-1))}function meanAbsoluteError(n,e){return tidy$1(()=>mean$2(abs$4(sub$4(e,n)),-1))}function meanAbsolutePercentageError(n,e){return tidy$1(()=>{const t=sub$4(n,e),r=clipByValue$3(abs$4(n),epsilon$1(),Number.MAX_VALUE),s=abs$4(div$2(t,r));return mul$1(100,mean$2(s,-1))})}function meanSquaredLogarithmicError(n,e){return tidy$1(()=>{const t=clipByValue$3(e,epsilon$1(),Number.MAX_VALUE),r=log$3(add$3(1,t)),s=clipByValue$3(n,epsilon$1(),Number.MAX_VALUE),a=log$3(add$3(1,s));return mean$2(square$2(sub$4(r,a)),-1)})}function squaredHinge(n,e){return tidy$1(()=>{const t=maximum$4(0,sub$4(1,mul$1(n,e)));return mean$2(square$2(t),-1)})}function hinge(n,e){return tidy$1(()=>{const t=maximum$4(0,sub$4(1,mul$1(n,e)));return mean$2(t,-1)})}function categoricalHinge(n,e){return tidy$1(()=>{const t=sum$4(mul$1(n,e),-1),r=max$4(mul$1(sub$4(1,n),e),-1);return maximum$4(0,add$3(1,sub$4(r,t)))})}function logcosh(n,e){return tidy$1(()=>{const t=Math.log(2),r=sub$4(e,n),s=sub$4(add$3(r,softplus$3(mul$1(-2,r))),t);return mean$2(s,-1)})}function categoricalCrossentropy$1(n,e,t=!1){return tidy$1(()=>{if(t)e=softmax$3(e);else{const r=sum$4(e,e.shape.length-1,!0);e=div$2(e,r)}return e=clipByValue$3(e,epsilon$1(),1-epsilon$1()),neg$3(sum$4(mul$1(cast$5(n,"float32"),log$3(e)),e.shape.length-1))})}function sparseCategoricalCrossentropy$1(n,e,t=!1){return tidy$1(()=>{const r=cast$5(floor$3(flatten$1(n)),"int32");e=clipByValue$3(e,epsilon$1(),1-epsilon$1());const s=e.shape,a=reshape$5(oneHot$3(r,s[s.length-1]),s);return categoricalCrossentropy$1(a,e,t)})}function sigmoidCrossEntropyWithLogits(n,e){if(!arraysEqual$1(n.shape,e.shape))throw new ValueError(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(e.shape)}`);return tidy$1(()=>{const t=relu$3(e),r=neg$3(abs$4(e));return add$3(sub$4(t,mul$1(e,n)),log1p$3(exp$3(r)))})}function binaryCrossentropy$1(n,e){return tidy$1(()=>{let t;return t=clipByValue$3(e,epsilon$1(),1-epsilon$1()),t=log$3(div$2(t,sub$4(1,t))),mean$2(sigmoidCrossEntropyWithLogits(n,t),-1)})}function kullbackLeiblerDivergence(n,e){return tidy$1(()=>{const t=clipByValue$3(n,epsilon$1(),1),r=clipByValue$3(e,epsilon$1(),1);return sum$4(mul$1(n,log$3(div$2(t,r))),-1)})}function poisson(n,e){return tidy$1(()=>{const t=log$3(add$3(epsilon$1(),e));return mean$2(sub$4(e,mul$1(n,t)),-1)})}function cosineProximity(n,e){return tidy$1(()=>{const t=l2Normalize(n,-1),r=l2Normalize(e,-1),s=mul$1(t,r);return neg$3(sum$4(s,-1))})}const lossesMap={meanSquaredError,meanAbsoluteError,meanAbsolutePercentageError,meanSquaredLogarithmicError,squaredHinge,hinge,categoricalHinge,logcosh,categoricalCrossentropy:categoricalCrossentropy$1,sparseCategoricalCrossentropy:sparseCategoricalCrossentropy$1,binaryCrossentropy:binaryCrossentropy$1,kullbackLeiblerDivergence,poisson,cosineProximity};function get$1(n){if(typeof n=="string"){if(n in lossesMap)return lossesMap[n];let e=`Unknown loss ${n}`;throw n.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new ValueError(e)}else return n}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function binaryAccuracy(n,e){return tidy$1(()=>{const t=mul$1(.5,onesLike$3(e)),r=cast$4(greater$3(e,t),n.dtype);return mean$2(equal$3(n,r),-1)})}function categoricalAccuracy(n,e){return tidy$1(()=>cast$4(equal$3(argMax$3(n,-1),argMax$3(e,-1)),"float32"))}function truePositives(n,e){return tidy$1(()=>cast$5(sum$4(logicalAnd$3(equal$3(n,1),equal$3(e,1))),"float32"))}function falsePositives(n,e){return tidy$1(()=>cast$5(sum$4(logicalAnd$3(equal$3(n,0),equal$3(e,1))),"float32"))}function precision(n,e){return tidy$1(()=>{const t=truePositives(n,e),r=falsePositives(n,e),s=add$3(t,r);return cast$5(where(greater$3(s,0),div$2(t,s),0),"float32")})}function binaryCrossentropy(n,e){return binaryCrossentropy$1(n,e)}function sparseCategoricalAccuracy(n,e){return n.rank===e.rank&&(n=squeeze(n,[n.rank-1])),e=argMax$3(e,-1),e.dtype!==n.dtype&&(e=cast$5(e,n.dtype)),cast$5(equal$3(n,e),"float32")}const mse=meanSquaredError,MSE=meanSquaredError,mae=meanAbsoluteError,MAE=meanAbsoluteError,mape=meanAbsolutePercentageError,MAPE=meanAbsolutePercentageError,categoricalCrossentropy=categoricalCrossentropy$1,cosine=cosineProximity,sparseCategoricalCrossentropy=sparseCategoricalCrossentropy$1,metricsMap={binaryAccuracy,categoricalAccuracy,precision,categoricalCrossentropy,sparseCategoricalCrossentropy,mse,MSE,mae,MAE,mape,MAPE,cosine};function get(n){if(typeof n=="string"&&n in metricsMap)return metricsMap[n];if(typeof n!="string"&&n!=null)return n;throw new ValueError(`Unknown metric ${n}`)}function getLossOrMetricName(n){if(assert$1(n!==null,`Unknown LossOrMetricFn ${n}`),typeof n=="string")return n;{let e;for(const t of Object.keys(lossesMap))if(lossesMap[t]===n){e=t;break}if(e!==void 0)return e;for(const t of Object.keys(metricsMap))if(metricsMap[t]===n){e=t;break}return e!==void 0?e:n.name}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function getOptimizer(n){const e={Adagrad:()=>train.adagrad(.01),Adadelta:()=>train.adadelta(1,.95,epsilon$1()),Adam:()=>train.adam(.001,.9,.999,epsilon$1()),Adamax:()=>train.adamax(.002,.9,.999,epsilon$1(),0),RMSProp:()=>train.rmsprop(.001,.9,0,epsilon$1()),SGD:()=>train.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,n in e)return e[n]();throw new ValueError(`Unknown Optimizer ${n}`)}/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH=1*1024*1024;function checkUserDefinedMetadata(n,e,t=!1){if(n==null||typeof n!="object"||Object.getPrototypeOf(n)!==Object.prototype||!plainObjectCheck(n))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(t){const r=JSON.stringify(n);r.length>MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${r.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`)}}function plainObjectCheck(n){if(n===null)return!0;if(typeof n=="object")if(Object.getPrototypeOf(n)===Object.prototype){const e=Object.keys(n);for(const t of e)if(typeof t!="string"||!plainObjectCheck(n[t]))return!1;return!0}else if(Array.isArray(n)){for(const e of n)if(!plainObjectCheck(e))return!1;return!0}else return!1;else{const e=typeof n;return e==="string"||e==="number"||e==="boolean"}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function printSummary(n,e,t,r=console.log){const s=isModelSequentialLike(n),a=["Layer (type)","Input Shape","Output shape","Param #"];s?(e=e||90,t=t||[.32,.61,.89,1]):(e=e||115,t=t||[.24,.48,.7,.8,1]),t[t.length-1]<=1&&(t=t.map(f=>Math.floor(e*f)));let i;if(!s){a.push("Receives inputs"),i=[];for(const f in n.nodesByDepth)i.push(...n.nodesByDepth[f])}r("_".repeat(e)),printRow(a,t,r),r("=".repeat(e));const l=n.layers;for(let f=0;f<l.length;++f)s?printLayerSummary(l[f],t,r):printLayerSummaryWithConnections(l[f],t,i,r),r((f===l.length-1?"=":"_").repeat(e));n.checkTrainableWeightsConsistency();const u=countTrainableParams(n),h=countParamsInWeights(n.nonTrainableWeights);r(`Total params: ${u+h}`),r(`Trainable params: ${u}`),r(`Non-trainable params: ${h}`),r("_".repeat(e))}function countTrainableParams(n){let e;return n.collectedTrainableWeights!=null?e=countParamsInWeights(n.collectedTrainableWeights):e=countParamsInWeights(n.trainableWeights),e}function isModelSequentialLike(n){let e=!0;const t=[],r=[];for(const s in n.nodesByDepth)t.push(n.nodesByDepth[s]);for(const s of t){if(s.length>1||s.length===1&&s[0].inboundLayers.length>1){e=!1;break}r.push(...s)}if(e)for(const s of n.layers){let a=!1;for(const i of s.inboundNodes)if(r.indexOf(i)!==-1)if(a){e=!1;break}else a=!0;if(!e)break}return e}function printRow(n,e,t=console.log){let r="";for(let s=0;s<n.length;++s)s>0&&(r=r.slice(0,r.length-1)+" "),r+=n[s],r=r.slice(0,e[s]),r+=" ".repeat(e[s]-r.length);t(r)}function printLayerSummary(n,e,t){let r,s;try{s=n.inboundNodes.map(u=>JSON.stringify(u.inputShapes)).join(",")}catch{s="multiple"}try{r=JSON.stringify(n.outputShape)}catch{r="multiple"}const a=n.name,i=n.getClassName(),l=[`${a} (${i})`,s,r,n.countParams().toString()];printRow(l,e,t)}function printLayerSummaryWithConnections(n,e,t,r){let s,a;try{a=n.inboundNodes.map(c=>JSON.stringify(c.inputShapes)).join(",")}catch{a="multiple"}try{s=JSON.stringify(n.outputShape)}catch{s="multiple"}const i=[];for(const c of n.inboundNodes)if(!(t!=null&&t.length>0&&t.indexOf(c)===-1))for(let o=0;o<c.inboundLayers.length;++o){const d=c.inboundLayers[o].name,m=c.nodeIndices[o],g=c.tensorIndices[o];i.push(`${d}[${m}][${g}]`)}const l=n.name,u=n.getClassName(),h=i.length===0?"":i[0],f=[`${l} (${u})`,a,s,n.countParams().toString(),h];printRow(f,e,r);for(let c=1;c<i.length;++c)printRow(["","","","",i[c]],e,r)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function isArrayItemInputOrOutputName(n,e,t){return(n==="inboundNodes"||n==="outputLayers"||n==="inputLayers")&&e===0&&typeof t=="string"}function convertPythonicToTs(n,e){if(n===null)return null;if(typeof n=="string")return toCamelCase(n);if(typeof n=="number"||typeof n=="boolean")return n;if(n instanceof Array){const t=[],r=n.length;for(let s=0;s<r;++s){const a=n[s];isArrayItemInputOrOutputName(e,s,a)?t.push(a):t.push(convertPythonicToTs(a,e))}return t}else{const t={};for(const r of Object.keys(n)){const s=n[r];if(r==="name"&&typeof s=="string")t[r]=s;else{const a=toCamelCase(r);t[a]=convertPythonicToTs(s,a)}}return t}}function convertTsToPythonic(n,e){if(n==null)return null;if(typeof n=="string")return toSnakeCase(n);if(typeof n=="number"||typeof n=="boolean")return n;if(n instanceof Array){const t=[],r=n.length;for(let s=0;s<r;++s){const a=n[s];isArrayItemInputOrOutputName(e,s,a)?t.push(a):t.push(convertTsToPythonic(a,e))}return t}else{const t={};for(const r of Object.keys(n)){const s=n[r],a=toSnakeCase(r);(r==="name"||r==="className")&&typeof s=="string"?t[a]=s:t[a]=convertTsToPythonic(s,r)}return t}}/** @license See the LICENSE file. */const version="4.12.0";/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const isKerasSavedModelFormat=n=>{const e=Object.keys(n);if(e.length===0)return!1;const t=e[0].split("/");return!isNaN(parseInt(t[t.length-1],10))};class Container extends Layer{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,this.name==null){const b=this.getClassName().toLowerCase();this.name=getUid(b)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],unique$2(this.inputs).length!==this.inputs.length)throw new ValueError(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(b=>b.name)}`);unique$2(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(b=>b.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const b of this.outputs){const x=b.sourceLayer,w=b.nodeIndex,v=b.tensorIndex;this.outputLayers.push(x),this.outputLayersNodeIndices.push(w),this.outputLayersTensorIndices.push(v)}for(const b of this.inputs){const x=b.sourceLayer,w=b.nodeIndex,v=b.tensorIndex;assert$1(w===0,"input layer has >1 nodes"),assert$1(v===0,"input layer has >1 tensors"),this.inputLayers.push(x),this.inputLayersNodeIndices.push(w),this.inputLayersTensorIndices.push(v)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let b=0;b<this.inputLayers.length;b++){const x=this.inputLayers[b];if(!(x instanceof InputLayer))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${b} (0-based) originates from layer type ${x.getClassName()}.`);this.inputNames.push(x.name),this.feedInputShapes.push(x.batchInputShape),this.feedInputNames.push(x.name)}for(const b of this.outputLayers)this.outputNames.push(b.name);this.internalInputShapes=this.inputs.map(b=>b.shape),this.internalOutputShapes=this.outputs.map(b=>b.shape);const t={},r={},s={},a={},i={},l=[],u=(b,x,w,v,S,T)=>{(v==null||S==null||T==null)&&(v=b.sourceLayer,S=b.nodeIndex,T=b.tensorIndex);const C=v.inboundNodes[S];if(w.indexOf(C)!==-1)throw new RuntimeError(`The tensor ${b.name} at layer "${v.name}" is part of a cycle.`);if(x.indexOf(C)!==-1)return;this.containerNodes.add(Container.nodeKey(v,S)),v.id in i||(i[v.id]=Object.keys(i).length),w.indexOf(C)===-1&&w.push(C);const I=C.inboundLayers.length;for(let N=0;N<I;N++){const P=C.inputTensors[N],F=C.inboundLayers[N],_=C.nodeIndices[N],D=C.tensorIndices[N];u(P,x,w,F,_,D)}for(x.push(C);w.indexOf(C)>=0;)w.splice(w.indexOf(C),1);l.push(C)},h=[],f=[];for(const b of this.outputs)u(b,h,f);const c=l.slice().reverse();for(const b of c){r[b.id]=b,b.id in t||(t[b.id]=0);let x=t[b.id];const w=s[b.outboundLayer.id]==null?0:s[b.outboundLayer.id];x=Math.max(x,w),s[b.outboundLayer.id]=x,a[b.outboundLayer.id]=b.outboundLayer,t[b.id]=x;for(let v=0;v<b.inboundLayers.length;v++){const S=b.inboundLayers[v],T=b.nodeIndices[v],C=S.inboundNodes[T],I=t[C.id]==null?0:t[C.id];t[C.id]=Math.max(x+1,I),r[C.id]=C}}const o={};for(const b in t){const x=t[b];x in o||(o[x]=[]),o[x].push(r[b])}const d={};for(const b in s){const x=s[b];x in d||(d[x]=[]),d[x].push(a[b])}let m=Object.keys(d).map(b=>parseInt(b,10)).sort(reverseNumberCompare);this.layers=[];for(const b of m){const x=d[b];x.sort((w,v)=>{const S=i[w.id],T=i[v.id];return S<T?-1:S>T?1:0});for(const w of x)w instanceof Container&&this.internalContainerRefs.push(w),this.layers.push(w)}this.layersByDepth=d,m=Object.keys(o).map(b=>parseInt(b,10)).sort(reverseNumberCompare);const g=this.inputs.slice(),y=[];for(const b of m)for(const x of o[b]){const w=x.outboundLayer;if(w!=null){for(const v of x.inputTensors)if(g.indexOf(v)===-1)throw new RuntimeError(`Graph disconnected: cannot obtain value for tensor ${v} at layer "${w.name}". The following previous layers were accessed without issue: ${y}`);for(const v of x.outputTensors)g.push(v);y.push(w.name)}}this.nodesByDepth=o;const $=this.layers.map(b=>b.name);for(const b of $){const x=$.filter(w=>w===b).length;if(x!==1)throw new RuntimeError(`The name "${b}" is used ${x} times in the model. All layer names should be unique. Layer names: `+JSON.stringify($))}this.outboundNodes=[],this.inboundNodes=[],new Node({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(b=>null),outputMasks:this.outputs.map(b=>null),inputShapes:this.inputs.map(b=>b.shape),outputShapes:this.outputs.map(b=>b.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(this._refCount===0)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(--this._refCount===0){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(r=>r.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new ValueError("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const r of this.layers)t.push(...r.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const r={};let s=0;const a=isKerasSavedModelFormat(e);a&&this.parseWeights(e);for(const l of this.layers)for(const[u,h]of l.weights.entries()){const f=a?`${h.name.split("/").slice(0,-1).join("/")+"/"}${u}`:h.originalName;if(r[f]!=null)throw new ValueError(`Duplicate weight name: ${f}`);r[f]=h,s++}const i=[];for(const l in e){let u=l;if(r[l]==null){const h=l.split("/");u=h.slice(0,-2).concat([h[h.length-1]]).join("/")}if(r[u]!=null)i.push([r[u],e[l]]);else if(t)throw new ValueError(`Provided weight data has no target variable: ${l}`);delete r[u]}if(t){const l=[];for(const u in r)l.push(u);if(l.length>0)throw new ValueError(`${l.length} of ${s} weights are not set: ${l}`)}batchSetValue(i)}parseWeights(e){for(const t in Object.keys(e)){const r=t.split("/"),s=["vars","layer_checkpoint_dependencies"],a=r.map(i=>i.startsWith("_")?i.slice(1):i).filter(i=>!s.includes(i)).join("/");a!==t&&(e[a]=e[t],delete e[t])}}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${version}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const r=convertTsToPythonic(this.updatedConfig());return t?JSON.stringify(r):r}call(e,t){return tidy$1(()=>{e=toList(e);const r=new FeedDict;for(let s=0;s<this.inputs.length;++s)r.add(this.inputs[s],e[s]);return execute(this.outputs,r,t)})}computeMask(e,t){return tidy$1(()=>{e=toList(e);let r;return t==null?r=pyListRepeat(null,e.length):r=toList(t),this.runInternalGraph(e,r)[1]})}computeOutputShape(e){const t=normalizeShapeList(e);if(t.length!==this.inputLayers.length)throw new ValueError(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const r={};for(let l=0;l<t.length;l++){const u=this.inputLayers[l],h=t[l],f=u.name+"_0_0";r[f]=h}const s=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(reverseNumberCompare);if(s.length>1)for(const l of s){const u=this.nodesByDepth[l];for(const h of u){const f=h.outboundLayer;if(this.inputLayers.map(g=>g.id).indexOf(f.id)!==-1)continue;const c=[];for(let g=0;g<h.inboundLayers.length;g++){const y=h.inboundLayers[g],$=h.nodeIndices[g],b=h.tensorIndices[g],x=`${y.name}_${$}_${b}`,w=r[x];c.push(w)}const o=f.computeOutputShape(singletonOrArray(c)),d=normalizeShapeList(o),m=f.inboundNodes.indexOf(h);for(let g=0;g<d.length;g++){const y=`${f.name}_${m}_${g}`;r[y]=d[g]}}}const a=[],i=[];for(let l=0;l<this.outputLayers.length;l++){const u=this.outputLayers[l],h=this.outputLayersNodeIndices[l],f=this.outputLayersTensorIndices[l],c=`${u.name}_${h}_${f}`;i.push(c)}for(let l=0;l<i.length;l++){const u=i[l];assert$1(u in r),a.push(r[u])}return singletonOrArray(a)}runInternalGraph(e,t){t==null&&(t=pyListRepeat(null,e.length));const r={};for(let u=0;u<this.inputs.length;++u){const h=this.inputs[u],f=e[u],c=t[u];r[h.id]=[f,c]}const s=Object.keys(this.nodesByDepth).map(u=>parseInt(u,10)).sort(reverseNumberCompare);for(const u of s){const h=this.nodesByDepth[u];for(const f of h){const c=f.outboundLayer,o=f.inputTensors,d=f.outputTensors,m=new Array;for(const g of o)g.id in r&&m.push(r[g.id]);if(m.length===o.length){let g={},y,$,b,x;if(f.callArgs!=null&&(g=f.callArgs),m.length===1){const[w,v]=m[0];g.mask==null&&(g.mask=v),b=toList(c.call(w,g)),x=toList(c.computeMask(w,v)),y=[w],$=[v]}else y=m.map(w=>w[0]),$=m.map(w=>w[1]),g.mask==null&&(g.mask=$),b=toList(c.call(y,g)),x=toList(c.computeMask(y,$));if(c.activityRegularizer)throw new NotImplementedError("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let w=0;w<d.length;++w){const v=d[w],S=b[w],T=x[w];r[v.id]=[S,T]}}}}const a=[],i=[],l=[];for(const u of this.outputs){assert$1(u.id in r,`Could not compute output ${u.name} : ${u.id}`);const[h,f]=r[u.id];l.push(h.shape),a.push(h),i.push(f)}return[a,i,l]}buildNodeConversionMap(e){const t={};let r;for(const s of this.layers){r=s instanceof Container?1:0;for(let a=0;a<s.inboundNodes.length;a++){const i=Container.nodeKey(s,a);this.containerNodes.has(i)&&(t[i]=r,r+=1)}}return t}getLayer(e,t){if(t!=null)return this.findLayer(t);if(e==null)throw new ValueError("Provide either a layer name or layer index");if(typeof e=="number")return this.findLayer(e);for(const r of this.layers)if(r.name===e)return r;throw new ValueError(`No such layer: ${e}`)}findLayer(e){if(this.layers.length<=e)throw new ValueError(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}calculateLosses(){return tidy$1(()=>{const e=[];for(const t of this.layers)for(let r=0;r<t.inboundNodes.length;++r){const s=Container.nodeKey(t,r);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e})}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),r=[];for(const i of this.layers){const l=i.getClassName(),u=i.getConfig(),h=[];for(let c=0;c<i.inboundNodes.length;c++){const o=i.inboundNodes[c],d=Container.nodeKey(i,c);let m={};if(this.containerNodes.has(d)){if(o.callArgs)try{JSON.stringify(o.callArgs),m=o.callArgs}catch{console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${o.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),m={}}if(o.inboundLayers.length>0){const g=[];for(let y=0;y<o.inboundLayers.length;y++){const $=o.inboundLayers[y],b=o.nodeIndices[y],x=o.tensorIndices[y],w=Container.nodeKey($,b);let v=t[w];v==null&&(v=0),g.push([$.name,v,x,m])}h.push(g)}}}const f={};f.name=i.name,f.className=l,f.config=u,f.inboundNodes=h,r.push(f)}e.layers=r;const s=[];for(let i=0;i<this.inputLayers.length;i++){const l=this.inputLayers[i],u=this.inputLayersNodeIndices[i],h=Container.nodeKey(l,u);if(!this.containerNodes.has(h))continue;let f=t[h];f==null&&(f=0);const c=this.inputLayersTensorIndices[i];s.push([l.name,f,c])}e.inputLayers=s;const a=[];for(let i=0;i<this.outputLayers.length;i++){const l=this.outputLayers[i],u=this.outputLayersNodeIndices[i],h=Container.nodeKey(l,u);if(!this.containerNodes.has(h))continue;let f=t[h];f==null&&(f=0);const c=this.outputLayersTensorIndices[i];a.push([l.name,f,c])}return e.outputLayers=a,e}static fromConfig(e,t,r={},s=!1){const a={},i={};function l(y,$){y.name in i?i[y.name].push($):i[y.name]=[$]}function u(y,$){const b=[];let x;for(const w of $){const v=w[0],S=w[1],T=w[2];if(x=w[3]==null?{}:w[3],!(v in a)){l(y,$);return}const C=a[v];if(C.inboundNodes.length<=S){l(y,$);return}const I=C.inboundNodes[S];b.push(I.outputTensors[T])}b.length>0&&y.apply(singletonOrArray(b),x)}function h(y){const $=y.name,b=deserialize(y,t.customObjects!=null?t.customObjects:{});b.setFastWeightInitDuringBuild(s),a[$]=b,y.inboundNodes.forEach(w=>{if(!(w instanceof Array))throw new ValueError(`Corrupted configuration, expected array for nodeData: ${w}`);l(b,w)})}const f=t.name,c=t.layers;for(const y of c)h(y);for(;!isObjectEmpty(i);)for(const y of c){const $=a[y.name];if($.name in i){const b=i[$.name];delete i[$.name];for(const x of b)u($,x)}}const o=[],d=[],m=t.inputLayers;for(const y of m){const $=y[0],b=y[1],x=y[2];assert$1($ in a);const v=a[$].inboundNodes[b].outputTensors;o.push(v[x])}const g=t.outputLayers;for(const y of g){const $=y[0],b=y[1],x=y[2];assert$1($ in a);const v=a[$].inboundNodes[b].outputTensors;d.push(v[x])}return new e({inputs:o,outputs:d,name:f})}get stateful(){if(this._stateful)throw new ValueError("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){tidy$1(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function standardizeSampleOrClassWeights(n,e,t){const r=e.length;if(n==null||Array.isArray(n)&&n.length===0)return e.map(s=>null);if(r===1)return Array.isArray(n)&&n.length===1?n:typeof n=="object"&&e[0]in n?[n[e[0]]]:[n];if(Array.isArray(n)){if(n.length!==r)throw new Error(`Provided ${t} is an array of ${n.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return n}else if(typeof n=="object"&&Object.keys(n).length>0&&typeof n[Object.keys(n)[0]]=="object"){const s=[];return e.forEach(a=>{a in n?s.push(n[a]):s.push(null)}),s}else throw new Error(`The model has multiple (${r}) outputs, so ${t} must be either an array with ${r} elements or an object with ${e} keys. Provided ${t} not understood: ${JSON.stringify(n)}`)}function standardizeClassWeights(n,e){return standardizeSampleOrClassWeights(n,e,"classWeight")}async function standardizeWeights(n,e,t,r){if(e!=null||r!=null)throw new Error("Support sampleWeight is not implemented yet");if(t!=null){const s=tidy$1(()=>{if(n.shape.length===1)return clone$1(n);if(n.shape.length===2){if(n.shape[1]>1)return argMax$3(n,1);if(n.shape[1]===1)return reshape$5(n,[n.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}else throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),a=Array.from(await s.data());dispose$1(s);const i=[];return a.forEach(l=>{if(t[l]==null)throw new Error(`classWeight must contain all classes in the training data. The class ${l} exists in the data but not in classWeight`);i.push(t[l])}),tensor1d(i,"float32")}else return null}function computeWeightedLoss(n,e){return mul$1(n,e)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const DEFAULT_VALIDATION_BATCH_SIZE=32;function standardizeDataIteratorOutput(n,e){let t,r;const s=e;t=s.xs,r=s.ys,assert$2(t!=null&&r!=null,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${e}`);const a=flattenTensorOrArrayOrMap("input",n.inputNames,t),i=flattenTensorOrArrayOrMap("output",n.outputNames,r),l=a[0].shape[0];assert$2(a.length===n.inputs.length,()=>`LayersModel has ${n.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`),assert$2(i.length===n.outputs.length,()=>`LayersModel has ${n.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);for(let u=0;u<a.length;u++)assert$2(a[u].shape[0]===l,()=>`Batch size mismatch: input ${n.inputNames[u]} has ${a[u].shape[0]}; expected  ${l} based on input ${n.inputNames[0]}.`);for(let u=0;u<i.length;u++)assert$2(i[u].shape[0]===l,()=>`Batch size mismatch: output ${n.outputNames[u]} has ${i[u].shape[0]}; expected  ${l} based on input ${n.inputNames[0]}.`);return{xs:a,ys:i}}function flattenTensorOrArrayOrMap(n,e,t){if(t instanceof Tensor$1)return[t];if(Array.isArray(t))return assert$2(t.length===e.length,()=>`Received an array of ${t.length} Tensors, but expected ${e.length} to match the ${n} keys ${e}.`),t;{const r=[];for(const s of e){if(t[s]==null)throw new ValueError(`The feature data generated by the dataset lacks the required ${n} key '${s}'.`);r.push(t[s])}return r}}function standardizeTensorValidationData(n){if(n.length===3)throw new NotImplementedError("Validation with sample weights is not implemented yet.");return{xs:n[0],ys:n[1]}}async function fitDataset(n,e,t){const r=t.batchesPerEpoch!=null;if(assert$2(n.optimizer!=null,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),assert$2(t!=null,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),assert$2(t.epochs!=null&&t.epochs>0&&Number.isInteger(t.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${t.epochs}`),assert$2(!r||t.batchesPerEpoch>0&&Number.isInteger(t.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${t.batchesPerEpoch}`),assert$2(t.validationSplit==null,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),n.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");n.isTraining=!0;try{const s=t.validationData!=null;let a,i;if(s)if(isDatasetObject(t.validationData))assert$2(t.validationBatches==null||t.validationBatches>0&&Number.isInteger(t.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${t.validationBatches}`);else{const y=standardizeTensorValidationData(t.validationData);a=y.xs,i=y.ys}const l=n.makeTrainFunction(),u=n.getDedupedMetricsNames();let h;s?h=u.slice().concat(u.map(y=>"val_"+y)):h=u.slice();const f=standardizeCallbacks(t.callbacks,t.yieldEvery),c=t.verbose==null?1:t.verbose,{callbackList:o,history:d}=configureCallbacks(f,c,t.epochs,null,null,getStepsPerEpoch(e,t),null,s,h);o.setModel(n),n.history=d,await o.onTrainBegin(),n.stopTraining_=!1;let m=t.initialEpoch==null?0:t.initialEpoch,g=await e.iterator();for(;m<t.epochs;){const y={};await o.onEpochBegin(m);let $=0,b=0;for(r||(g=await e.iterator());!r||$<t.batchesPerEpoch;){const x=await g.next();if(r&&x.done){console.warn(`You provided \`batchesPerEpoch\` as ${t.batchesPerEpoch}, but your dataset iterator ran out of data after ${$} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${t.batchesPerEpoch*t.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(x.value!=null){const{xs:w,ys:v}=standardizeDataIteratorOutput(n,x.value),S={};S.batch=b,S.size=w[0].shape[0],await o.onBatchBegin(b,S);const T=[];if(t.classWeight!=null){const N=standardizeClassWeights(t.classWeight,n.outputNames);for(let P=0;P<N.length;++P)T.push(await standardizeWeights(v[P],null,N[P]))}const C=w.concat(v).concat(T),I=l(C);dispose$1(C);for(let N=0;N<u.length;++N){const P=u[N],F=I[N];S[P]=F,keep$1(F)}await o.onBatchEnd(b,S),disposeTensorsInLogs(S),b++,$++}if(r?$>=t.batchesPerEpoch:x.done){if(s){let w;isDatasetObject(t.validationData)?w=toList(await n.evaluateDataset(t.validationData,{batches:t.validationBatches})):w=toList(n.evaluate(a,i,{batchSize:t.validationBatchSize==null?DEFAULT_VALIDATION_BATCH_SIZE:t.validationBatchSize,verbose:0}));for(let v=0;v<n.metricsNames.length;++v)y[`val_${n.metricsNames[v]}`]=w[v]}break}if(n.stopTraining_)break}if(await o.onEpochEnd(m,y),m++,n.stopTraining_)break}return await o.onTrainEnd(),await n.history.syncData(),n.history}finally{n.isTraining=!1}}function getStepsPerEpoch(n,e){let t=null;return e.batchesPerEpoch!=null?t=e.batchesPerEpoch:Number.isFinite(n.size)&&(t=n.size),t}function isDatasetObject(n){return typeof n.iterator=="function"}function isLazyIteratorObject(n){return typeof n.next=="function"}async function evaluateDataset(n,e,t){t=t||{};const r=t.batches!=null,s=n.testFunction;let a=[];if(t.verbose>0)throw new NotImplementedError("Verbose mode is not implemented yet.");assert$2(!r||t.batches>0&&Number.isInteger(t.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(t.batches)}`);const i=isLazyIteratorObject(e)?e:await e.iterator();let l=0,u=0;for(;!r||u<t.batches;){const h=await i.next();if(a=tidy$1(()=>{if(h.value){const{xs:f,ys:c}=standardizeDataIteratorOutput(n,h.value),o=f.concat(c),d=tidy$1(()=>s(o));if(dispose$1(o),u===0)for(let g=0;g<d.length;++g)a.push(scalar$1(0));const m=o[0].shape[0];for(let g=0;g<d.length;++g){const y=d[g],$=a[g];a[g]=tidy$1(()=>add$3(a[g],mul$1(m,y))),u>0&&dispose$1($)}dispose$1(d),l+=m,++u}return a}),h.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${t.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let h=0;h<a.length;++h){const f=a[h];a[h]=div$2(a[h],l),dispose$1(f)}return singletonOrArray(a)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function checkBatchSize(n){assert$2(n>0&&Number.isInteger(n),()=>`batchSize is required to be a positive integer, but got ${n}`)}function sliceArrays(n,e,t){return n==null?[null]:Array.isArray(n)?n.map(r=>sliceAlongFirstAxis(r,e,t-e)):sliceAlongFirstAxis(n,e,t-e)}function sliceArraysByIndices(n,e){return tidy$1(()=>n==null?null:Array.isArray(n)?n.map(t=>sliceArraysByIndices(t,e)):gather(n,e.dtype==="int32"?e:cast$5(e,"int32")))}function makeBatches(n,e){const t=[];let r=0,s=null;for(;r<n;)s=r+e,s>=n&&(s=n),t.push([r,s]),r=s;return t}function ensureTensorsRank2OrHigher(n){const e=[];n instanceof Tensor$1&&(n=[n]);for(let t=0;t<n.length;++t){const r=n[t];if(r.rank===1)e.push(expandDims$3(r,1));else{if(r.rank===0)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(r)}}return e}function disposeNewTensors(n,e){if(n==null)return;const t=[];if(e instanceof Tensor$1)t.push(e.id);else if(Array.isArray(e))e.forEach(s=>t.push(s.id));else if(e!=null)for(const s in e){const a=e[s];t.push(a.id)}const r=[];if(n instanceof Tensor$1)t.indexOf(n.id)===-1&&r.push(n);else if(Array.isArray(n))n.forEach(s=>{t.indexOf(s.id)===-1&&r.push(s)});else if(n!=null)for(const s in n){const a=n[s];t.indexOf(a.id)===-1&&r.push(a)}r.forEach(s=>{s.isDisposed||s.dispose()})}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function isDataTensor(n){return n instanceof Tensor$1}function isDataArray(n){return Array.isArray(n)}function isDataDict(n){return!isDataTensor(n)&&!isDataArray(n)}function standardizeInputData(n,e,t,r=!0,s=""){if(e==null||e.length===0){if(n!=null){let i=!1;if(isDataArray(n)&&n.length>0)i=!0;else if(isDataDict(n)){for(const l in n)if(n.hasOwnProperty(l)){i=!0;break}}else i=!0;if(i)throw new ValueError(`Error when checking model ${s} expected no data, but got ${n}`)}return[]}if(n==null)return e.map(i=>null);let a;if(isDataDict(n)){n=n,a=[];for(const i of e){if(n[i]==null)throw new ValueError(`No data provided for "${i}". Need data for each key in: ${e}`);a.push(n[i])}}else if(isDataArray(n)){if(n=n,n.length!==e.length)throw new ValueError(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);a=n}else{if(n=n,e.length>1)throw new ValueError(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);a=[n]}if(a=ensureTensorsRank2OrHigher(a),t!=null)for(let i=0;i<e.length;++i){if(t[i]==null)continue;const l=a[i];if(l.shape.length!==t[i].length)throw new ValueError(`Error when checking ${s}: expected ${e[i]} to have ${t[i].length} dimension(s). but got array with shape ${l.shape}`);for(let u=0;u<t[i].length;++u){if(u===0&&!r)continue;const h=l.shape[u],f=t[i][u];if(f!=null&&f>=0&&h!==f)throw new ValueError(`${s} expected a batch of elements where each example has shape [${t[i].slice(1,t[i].length)}] (i.e.,tensor shape [*,${t[i].slice(1,t[i].length)}]) but the ${s} received an input with ${l.shape[0]} examples, each with shape [${l.shape.slice(1,l.shape.length)}] (tensor shape [${l.shape}])`)}}return a}function checkArrayLengths(n,e,t){const r=unique$2(n.map(a=>a.shape[0]));r.sort();const s=unique$2(e.map(a=>a.shape[0]));if(s.sort(),r.length>1)throw new ValueError(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map(a=>a.shape))}`);if(s.length>1)throw new ValueError(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map(a=>a.shape))}`);if(r.length>0&&s.length>0&&!arraysEqual$1(r,s))throw new ValueError(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}function checkLossAndTargetCompatibility(n,e,t){const r=[meanSquaredError,binaryCrossentropy$1,categoricalCrossentropy$1];for(let s=0;s<n.length;++s){const a=n[s],i=e[s],l=t[s];if(i!=null){if(i===categoricalCrossentropy$1&&a.shape[a.shape.length-1]===1)throw new ValueError(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(r.indexOf(i)!==-1){const u=a.shape.slice(1),h=l.slice(1);for(let f=0;f<u.length;++f){const c=u[f],o=h[f];if(o!=null&&c!==o)throw new ValueError(`A target Tensor with shape ${a.shape} was passed for an output of shape ${l}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}function checkInputData(n,e,t,r=!0,s=""){let a;if(Array.isArray(n)){if(n.length!==e.length)throw new ValueError(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${n.length} Tensors(s).`);a=n}else{if(e.length>1)throw new ValueError(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);a=[n]}if(t!=null)for(let i=0;i<e.length;++i){if(t[i]==null)continue;const l=a[i];if(l.shape.length!==t[i].length)throw new ValueError(`Error when checking ${s}: expected ${e[i]} to have ${t[i].length} dimension(s), but got array with shape ${JSON.stringify(l.shape)}`);for(let u=0;u<t[i].length;++u){if(u===0&&!r)continue;const h=l.shape[u],f=t[i][u];if(f!=null&&f!==h)throw new ValueError(`Error when checking ${s}: expected ${e[i]} to have shape ${JSON.stringify(t[i])} but got array with shape ${JSON.stringify(l.shape)}.`)}}}function collectMetrics(n,e){if(n==null||Array.isArray(n)&&n.length===0)return e.map(r=>[]);let t;if(typeof n=="string"||typeof n=="function")t=[n];else if(Array.isArray(n)||typeof n=="object")t=n;else throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);if(Array.isArray(t))return e.map(r=>t);{const r=[];for(const s of e){let a=t.hasOwnProperty(s)?t[s]:[];Array.isArray(a)||(a=[a]),r.push(a)}return r}}const LAYERS_MODEL_FORMAT_NAME="layers-model";class LayersModel extends Container{constructor(e){super(e),this.isTraining=!1}summary(e,t,r=console.log){if(!this.built)throw new ValueError("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");printSummary(this,e,t,r)}compile(e){if(e.loss==null&&(e.loss=[]),this.loss=e.loss,typeof e.optimizer=="string")this.optimizer_=getOptimizer(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Optimizer$1))throw new ValueError("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(!Array.isArray(e.loss)&&typeof e.loss!="string"&&typeof e.loss!="function"){e.loss=e.loss;for(const i in e.loss)if(this.outputNames.indexOf(i)===-1)throw new ValueError(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(const i of this.outputNames)e.loss[i]==null&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),t.push(get$1(e.loss[i]))}else if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new ValueError(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);t=e.loss.map(l=>get$1(l))}else{const i=get$1(e.loss);this.outputs.forEach(l=>{t.push(i)})}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){const l=this.internalOutputShapes[i],u=this.outputNames[i];this.feedOutputNames.push(u),this.feedOutputShapes.push(l),this.feedLossFns.push(this.lossFunctions[i])}const r=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],nameScope("loss",()=>{for(let i=0;i<this.outputs.length;++i){if(r.indexOf(i)!==-1)continue;const l=this.lossFunctions[i];this.outputs.length>1&&(this.metricsTensors.push([l,i]),this.metricsNames.push(this.outputNames[i]+"_loss"))}});const s=collectMetrics(e.metrics,this.outputNames),a=(i,l,u)=>{this.outputNames.length>1&&(l=this.outputNames[i]+"_"+l),this.metricsNames.push(l),this.metricsTensors.push([u,i])};nameScope("metric",()=>{for(let i=0;i<this.outputs.length;++i){if(r.indexOf(i)!==-1)continue;const l=s[i];(h=>{const f="";let c,o,d;for(const m of h){if(typeof m=="string"&&["accuracy","acc","crossentropy","ce"].indexOf(m)!==-1){const y=this.internalOutputShapes[i];y[y.length-1]===1||this.lossFunctions[i]===binaryCrossentropy$1?["accuracy","acc"].indexOf(m)!==-1?o=binaryAccuracy:["crossentropy","ce"].indexOf(m)!==-1&&(o=binaryCrossentropy):this.lossFunctions[i]===sparseCategoricalCrossentropy$1?["accuracy","acc"].indexOf(m)!==-1?o=sparseCategoricalAccuracy:["crossentropy","ce"].indexOf(m)!==-1&&(o=sparseCategoricalCrossentropy):["accuracy","acc"].indexOf(m)!==-1?o=categoricalAccuracy:["crossentropy","ce"].indexOf(m)!==-1&&(o=categoricalCrossentropy);let $;["accuracy","acc"].indexOf(m)!==-1?$="acc":["crossentropy","ce"].indexOf(m)!==-1&&($="ce"),d=o,c=f+$}else d=get(m),c=f+getLossOrMetricName(m);let g;nameScope(c,()=>{g=d}),a(i,c,g)}})(l)}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){this.collectedTrainableWeights!=null&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,r={}){const s=r.batchSize==null?32:r.batchSize;checkBatchSize(s);const a=!0,i=this.standardizeUserDataXY(e,t,a,s);try{const l=i[0].concat(i[1]);this.makeTestFunction();const u=this.testFunction,h=this.testLoop(u,l,s,r.verbose,r.steps);return singletonOrArray(h)}finally{disposeNewTensors(i[0],e),disposeNewTensors(i[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),evaluateDataset(this,e,t)}checkNumSamples(e,t,r,s="steps"){let a;if(r!=null){if(a=null,t!=null)throw new ValueError(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else if(e!=null)Array.isArray(e)?a=e[0].shape[0]:a=e.shape[0];else throw new ValueError(`Either the input data should have a defined shape, or ${s} shoud be specified.`);return a}execute(e,t){if(Array.isArray(t)&&t.length===0)throw new ValueError("`outputs` is an empty Array, which is not allowed.");const r=Array.isArray(t),s=r?t:[t],a=this.retrieveSymbolicTensors(s),i=new FeedDict;if(e instanceof Tensor$1&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new ValueError(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let u=0;u<this.inputs.length;++u)i.add(this.inputs[u],e[u])}else for(const u of this.inputs){const h=e[u.name];if(h==null)throw new ValueError(`No value is provided for the model's input ${u.name}`);i.add(u,h)}const l=execute(a,i);return r?l:l[0]}retrieveSymbolicTensors(e){const t=pyListRepeat(null,e.length);let r=e.length;for(const s of this.layers){const a=Array.isArray(s.output)?s.output:[s.output],i=a.map(l=>l.name);for(let l=0;l<e.length;++l){const u=i.indexOf(e[l]);if(u!==-1&&(t[l]=a[u],r--),r===0)break}if(r===0)break}if(r>0){const s=[];throw t.forEach((a,i)=>{a==null&&s.push(e[i])}),new ValueError(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(s)}`)}return t}predictLoop(e,t=32,r=!1){return tidy$1(()=>{const s=this.checkNumSamples(e);if(r)throw new NotImplementedError("Verbose predictLoop() is not implemented yet.");const a=makeBatches(s,t),i=this.outputs.map(l=>[]);for(let l=0;l<a.length;++l)tidy$1(()=>{const h=a[l][0],f=a[l][1],c=sliceArrays(e,h,f),o=[];if(Array.isArray(c))for(let m=0;m<c.length;++m)o.push({key:this.inputs[m],value:c[m]});else o.push({key:this.inputs[0],value:c});const d=new FeedDict(o);return execute(this.outputs,d)}).forEach((h,f)=>i[f].push(h));return singletonOrArray(i.map(l=>concat$3(l,0)))})}predict(e,t={}){const r=ensureTensorsRank2OrHigher(e);checkInputData(r,this.inputNames,this.feedInputShapes,!1);try{const s=t.batchSize==null?32:t.batchSize;return checkBatchSize(s),this.predictLoop(r,s)}finally{disposeNewTensors(r,e)}}predictOnBatch(e){checkInputData(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,r=!0,s){if(this.optimizer_==null)throw new RuntimeError("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let i=0;i<this.feedOutputShapes.length;++i){const l=this.feedOutputShapes[i];this.feedLossFns[i]===sparseCategoricalCrossentropy$1?a.push(l.slice(0,l.length-1).concat([1])):a.push(l)}if(e=standardizeInputData(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=standardizeInputData(t,this.feedOutputNames,a,!1,"target"),checkArrayLengths(e,t),checkLossAndTargetCompatibility(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&s!=null&&s>0&&e[0].shape[0]%s!==0)throw new ValueError(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,r,s,a=!0,i){const[l,u]=this.standardizeUserDataXY(e,t,a,i);if(r!=null)throw new Error("sample weight is not supported yet.");let h=null;if(s!=null){const f=standardizeClassWeights(s,this.outputNames);h=[];for(let c=0;c<f.length;++c)h.push(await standardizeWeights(u[c],null,f[c]))}return[l,u,h]}testLoop(e,t,r,s=0,a){return tidy$1(()=>{const i=this.checkNumSamples(t,r,a,"steps"),l=[];if(s>0)throw new NotImplementedError("Verbose mode is not implemented yet.");if(a!=null)throw new NotImplementedError("steps mode in testLoop() is not implemented yet");{const u=makeBatches(i,r),h=tensor1d(range$3(0,i));for(let f=0;f<u.length;++f){const c=u[f][0],o=u[f][1],d=sliceAlongFirstAxis(h,c,o-c),m=sliceArraysByIndices(t,d),g=e(m);if(f===0)for(let y=0;y<g.length;++y)l.push(scalar$1(0));for(let y=0;y<g.length;++y){const $=g[y];l[y]=add$3(l[y],mul$1(o-c,$))}}for(let f=0;f<l.length;++f)l[f]=div$2(l[f],i)}return l})}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let r=0;r<e.length;++r){const s=e[r];let a=s;if(count(e,s)>1){const i=count(e.slice(0,r),s);a+=`_${i}`}t.push(a)}return t}makeTrainFunction(){return e=>{const t=[],r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+this.outputs.length*2),i=[],l=()=>{const c=[];for(let g=0;g<this.inputs.length;++g)c.push({key:this.inputs[g],value:r[g]});const o=new FeedDict(c),d=execute(this.outputs,o,{training:!0});let m;for(let g=0;g<this.lossFunctions.length;++g){const y=this.lossFunctions[g];let $=y(s[g],d[g]);a[g]!=null&&($=computeWeightedLoss($,a[g]));const b=mean$2($);t.push(b),g===0?m=$:m=add$3(m,$)}for(let g=0;g<this.metricsTensors.length;++g){let y;if(this.outputs.length>1&&g<this.outputs.length)y=t[g];else{const $=this.metricsTensors[g][0],b=this.metricsTensors[g][1];y=mean$2($(s[b],d[b]))}keep$1(y),i.push(y)}return m=mean$2(m),this.calculateLosses().forEach(g=>{m=add$3(m,g)}),m},u=this.collectedTrainableWeights.map(c=>c.read()),h=!0;return[this.optimizer_.minimize(l,h,u)].concat(i)}}makeTestFunction(){this.testFunction=e=>tidy$1(()=>{const t=[];let r;const s=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let h=0;h<this.inputs.length;++h)i.push({key:this.inputs[h],value:s[h]});const l=new FeedDict(i),u=execute(this.outputs,l);for(let h=0;h<this.lossFunctions.length;++h){const f=this.lossFunctions[h],c=mean$2(f(a[h],u[h]));h===0?r=c:r=add$3(r,c),t.push(r)}for(let h=0;h<this.metricsTensors.length;++h){const f=this.metricsTensors[h][0],c=this.metricsTensors[h][1],o=mean$2(f(a[c],u[c]));t.push(o)}return t})}async fit(e,t,r={}){if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");this.isTraining=!0;let s,a,i,l,u,h,f,c,o;try{const d=r.batchSize==null?32:r.batchSize;checkBatchSize(d);const m=!1,g=await this.standardizeUserData(e,t,r.sampleWeight,r.classWeight,m,d);s=g[0],a=g[1],o=g[2];let y=!1,$;if(r.validationData!=null&&r.validationData.length>0){if(y=!0,r.validationData.length===2)u=r.validationData[0],h=r.validationData[1];else throw r.validationData.length===3?new NotImplementedError("validationData including sample weights is not supported yet."):new ValueError(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);const I=!0,N=await this.standardizeUserData(u,h,null,null,I,d);f=N[0],c=N[1],$=f.concat(c)}else if(r.validationSplit!=null&&r.validationSplit>0&&r.validationSplit<1){y=!0;const I=Math.floor(s[0].shape[0]*(1-r.validationSplit)),N=s[0].shape[0];f=sliceArrays(s,I,N),i=s,s=sliceArrays(s,0,I),c=sliceArrays(a,I,N),l=a,a=sliceArrays(a,0,I),$=f.concat(c)}else r.validationSteps!=null&&(y=!0);const b=s.concat(a).concat(o);this.checkTrainableWeightsConsistency();const x=this.makeTrainFunction(),w=this.getDedupedMetricsNames();let v,S;y?(this.makeTestFunction(),v=this.testFunction,S=w.slice().concat(w.map(I=>"val_"+I))):(v=null,$=[],S=w.slice());const T=standardizeCallbacks(r.callbacks,r.yieldEvery);return await this.fitLoop(x,b,w,d,r.epochs,r.verbose,T,v,$,r.shuffle,S,r.initialEpoch,null,null)}finally{this.isTraining=!1,disposeNewTensors(s,e),disposeNewTensors(a,t),disposeNewTensors(i,e),disposeNewTensors(l,t),disposeNewTensors(f,u),disposeNewTensors(c,h),o!=null&&dispose$1(o)}}async fitLoop(e,t,r,s,a,i,l,u,h,f,c,o,d,m){s==null&&(s=32),a==null&&(a=1),f==null&&(f=!0),o==null&&(o=0);let g=!1;if(u!=null&&h!=null&&(g=!0),m!=null&&(g=!0,d==null))throw new ValueError("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const y=this.checkNumSamples(t,s,d,"steps_per_epoch");let $;y!=null&&($=range$3(0,y)),i==null&&(i=1);const{callbackList:b,history:x}=configureCallbacks(l,i,a,o,y,d,s,g,c);b.setModel(this),this.history=x,await b.onTrainBegin(),this.stopTraining_=!1;for(let w=o;w<a;++w){await b.onEpochBegin(w);const v={};if(d!=null)throw new NotImplementedError("stepsPerEpoch mode is not implemented yet.");{if(f==="batch")throw new NotImplementedError("batch shuffling is not implemneted yet");f&&shuffle($);const S=tensor1d($),T=makeBatches(y,s);for(let C=0;C<T.length;++C){const I={};if(await b.onBatchBegin(C,I),tidy$1(()=>{const N=T[C][0],P=T[C][1],F=sliceAlongFirstAxis(S,N,P-N);I.batch=C,I.size=P-N;const _=sliceArraysByIndices(t,F),D=e(_);for(let E=0;E<r.length;++E){const k=r[E],O=D[E];I[k]=O,keep$1(O)}if(C===T.length-1&&g){const E=this.testLoop(u,h,s);for(let k=0;k<r.length;++k){const O=r[k],M=E[k];keep$1(M),v["val_"+O]=M}}}),await b.onBatchEnd(C,I),disposeTensorsInLogs(I),this.stopTraining_)break}S.dispose()}if(await b.onEpochEnd(w,v),this.stopTraining_)break}return await b.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(e,t){return fitDataset(this,e,t)}async trainOnBatch(e,t){const r=await this.standardizeUserData(e,t),s=r[0],a=r[1],l=this.makeTrainFunction()(s.concat(a)),u=[];for(const h of l){const f=await h.data();u.push(f[0])}return dispose$1(l),disposeNewTensors(r[0],e),disposeNewTensors(r[1],t),singletonOrArray(u)}getNamedWeights(e){const t=[],r=e!=null&&e.trainableOnly,s=r?this.trainableWeights:this.weights,a=this.getWeights(r);for(let i=0;i<s.length;++i)r&&!s[i].trainable||t.push({name:s[i].originalName,tensor:a[i]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(e.refCountAfterDispose===0&&this.optimizer!=null&&this.isOptimizerOwned){const t=memory().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-memory().numTensors}return e}getLossIdentifiers(){let e;if(typeof this.loss=="string")e=toSnakeCase(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if(typeof t!="string")throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(t=>toSnakeCase(t))}else{const t=Object.keys(this.loss);e={};const r=this.loss;for(const s of t)if(typeof r[s]=="string")e[s]=toSnakeCase(r[s]);else throw new Error("Serialization of non-string loss is not supported.")}return e}getMetricIdentifiers(){if(typeof this.metrics=="string"||typeof this.metrics=="function")return[toSnakeCase(getLossOrMetricName(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>toSnakeCase(getLossOrMetricName(e)));{const e={};for(const t in this.metrics)e[t]=toSnakeCase(getLossOrMetricName(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(e.weighted_metrics!=null)throw new Error("Loading weight_metrics is not supported yet.");if(e.loss_weights!=null)throw new Error("Loading loss_weights is not supported yet.");if(e.sample_weight_mode!=null)throw new Error("Loading sample_weight_mode is not supported yet.");const t=convertPythonicToTs(e.optimizer_config),r=deserialize(t);let s;if(typeof e.loss=="string")s=toCamelCase(e.loss);else if(Array.isArray(e.loss))s=e.loss.map(i=>toCamelCase(i));else if(e.loss!=null){s={};for(const i in e.loss)s[i]=toCamelCase(e.loss[i])}let a;if(Array.isArray(e.metrics))a=e.metrics.map(i=>toCamelCase(i));else if(e.metrics!=null){a={};for(const i in e.metrics)a[i]=toCamelCase(e.metrics[i])}this.compile({loss:s,metrics:a,optimizer:r})}async save(e,t){if(typeof e=="string"){const h=getSaveHandlers(e);if(h.length===0)throw new ValueError(`Cannot find any save handlers for URL '${e}'`);if(h.length>1)throw new ValueError(`Found more than one (${h.length}) save handlers for URL '${e}'`);e=h[0]}if(e.save==null)throw new ValueError("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const r=await encodeWeights(this.getNamedWeights(t)),s=!1,a=null,l={modelTopology:this.toJSON(a,s),format:LAYERS_MODEL_FORMAT_NAME,generatedBy:`TensorFlow.js tfjs-layers v${version}`,convertedBy:null};if((t==null?!1:t.includeOptimizer)&&this.optimizer!=null){l.trainingConfig=this.getTrainingConfig();const h="optimizer",{data:f,specs:c}=await encodeWeights(await this.optimizer.getWeights(),h);r.specs.push(...c),r.data=concatenateArrayBuffers([r.data,f])}return this.userDefinedMetadata!=null&&(checkUserDefinedMetadata(this.userDefinedMetadata,this.name,!0),l.userDefinedMetadata=this.userDefinedMetadata),l.weightData=r.data,l.weightSpecs=r.specs,e.save(l)}setUserDefinedMetadata(e){checkUserDefinedMetadata(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}LayersModel.className="Model",registerClass$1(LayersModel);class Functional extends LayersModel{}Functional.className="Functional",registerClass$1(Functional);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Sequential extends LayersModel{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=e.name!=null?e.name:getUid("sequential_"),e.layers!=null)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(r=>r<0))throw new ValueError(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Sequential||e instanceof LayersModel;let r;if(t){if(r=e,r.outputs.length!==1)throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(r.inputs.length!==1)throw new ValueError("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(this.outputs.length===0){if(e.inboundNodes.length===0){if(e.batchInputShape==null)throw new ValueError("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const s=Input({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(s)}if(t)this.outputs=r.outputs,this.inputs=r.inputs;else{if(e.inboundNodes.length!==1)throw new ValueError(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(e.inboundNodes[0].outputTensors.length!==1)throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=getSourceInputs(this.outputs[0])}this.inboundNodes=[],new Node({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:pyListRepeat(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(s=>s.shape),outputShapes:this.outputs[0].shape})}else{const s=e.apply(this.outputs[0]);if(Array.isArray(s))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[s],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(this.layers.length===0)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),this.layers.length===0)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return this.model==null&&this.build(),this.model.call(e,t)}build(e){if(getExactlyOneShape(e),this.inputs.length===0||this.outputs.length===0)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new LayersModel({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,r=console.log){this.built||this.build(),super.summary(e,t,r)}setWeights(e){this.model==null&&this.build(),this.model.setWeights(e)}evaluate(e,t,r={}){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return this.model.evaluate(e,t,r)}async evaluateDataset(e,t){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return this.model==null&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return this.model==null&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return this.model==null?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,r={}){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return this.model.fit(e,t,r)}async fitDataset(e,t){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,r={},s=!1){let a,i={};if(t instanceof Array){if(t[0].className==null||t[0].className==="Merge")throw new ValueError("Legacy serialization format not supported yet.");a=t}else assert$2(t.layers!=null,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=t.layers,delete t.layers,i=t;const l=new e(i);if(!(l instanceof Sequential))throw new NotImplementedError(`Sequential.fromConfig called on non-Sequential input: ${l}`);for(const u of a){const f=deserialize(u,void 0,s);s&&f.setFastWeightInitDuringBuild(!0),l.add(f)}return l}set stopTraining(e){if(this.model==null)throw new ValueError("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(this.model==null)throw new ValueError("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const r={};r.className=t.getClassName(),r.config=t.getConfig(),e.push(r)}return{name:this.name,layers:e}}}Sequential.className="Sequential",registerClass$1(Sequential);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */let Activation$1=class extends Serializable$1{getConfig(){return{}}},Elu$1=class extends Activation$1{apply(e,t=1){return elu$3(e,t)}};Elu$1.className="elu",registerClass$1(Elu$1);let Selu$1=class extends Activation$1{apply(e){return selu$3(e)}};Selu$1.className="selu",registerClass$1(Selu$1);let Relu$1=class extends Activation$1{apply(e){return relu$3(e)}};Relu$1.className="relu",registerClass$1(Relu$1);let Relu6$1=class extends Activation$1{apply(e){return tidy$1(()=>minimum$3(6,relu$3(e)))}};Relu6$1.className="relu6",registerClass$1(Relu6$1);class Linear extends Activation$1{apply(e){return e}}Linear.className="linear",registerClass$1(Linear);let Sigmoid$1=class extends Activation$1{apply(e){return sigmoid$3(e)}};Sigmoid$1.className="sigmoid",registerClass$1(Sigmoid$1);class HardSigmoid extends Activation$1{apply(e){return hardSigmoid(e)}}HardSigmoid.className="hardSigmoid",registerClass$1(HardSigmoid);let Softplus$1=class extends Activation$1{apply(e){return softplus$3(e)}};Softplus$1.className="softplus",registerClass$1(Softplus$1);class Softsign extends Activation$1{apply(e){return softsign(e)}}Softsign.className="softsign",registerClass$1(Softsign);let Tanh$1=class extends Activation$1{apply(e){return tanh$3(e)}};Tanh$1.className="tanh",registerClass$1(Tanh$1);let Softmax$2=class extends Activation$1{apply(e,t=-1){return softmax$3(e,t)}};Softmax$2.className="softmax",registerClass$1(Softmax$2);class LogSoftmax extends Activation$1{apply(e,t=-1){return logSoftmax(e,t)}}LogSoftmax.className="logSoftmax",registerClass$1(LogSoftmax);class Swish extends Activation$1{apply(e,t=1){return tidy$1(()=>mul$1(sigmoid$3(mul$1(e,t)),e))}}Swish.className="swish",registerClass$1(Swish);class Mish extends Activation$1{apply(e){return tidy$1(()=>mul$1(e,tanh$3(softplus$3(e))))}}Mish.className="mish",registerClass$1(Mish);function serializeActivation(n){return n.getClassName()}function deserializeActivation(n,e={}){return deserializeKerasObject(n,SerializationMap$1.getMap().classNameMap,e,"activation")}function getActivation(n){if(n==null){const e={};return e.className="linear",e.config={},deserializeActivation(e)}if(typeof n=="string"){const e={};return e.className=n,e.config={},deserializeActivation(e)}else return n instanceof Activation$1?n:deserializeActivation(n)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function assertObjectArgs(n){if(n!=null&&typeof n!="object")throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`)}class Regularizer extends Serializable$1{}class L1L2 extends Regularizer{constructor(e){super(),assertObjectArgs(e),this.l1=e==null||e.l1==null?.01:e.l1,this.l2=e==null||e.l2==null?.01:e.l2,this.hasL1=this.l1!==0,this.hasL2=this.l2!==0}apply(e){return tidy$1(()=>{let t=zeros$2([1]);return this.hasL1&&(t=add$3(t,sum$4(mul$1(this.l1,abs$4(e))))),this.hasL2&&(t=add$3(t,sum$4(mul$1(this.l2,square$2(e))))),reshape$5(t,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}L1L2.className="L1L2",registerClass$1(L1L2);const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP={l1l2:"L1L2"};function serializeRegularizer(n){return serializeKerasObject(n)}function deserializeRegularizer(n,e={}){return deserializeKerasObject(n,SerializationMap$1.getMap().classNameMap,e,"regularizer")}function getRegularizer(n){if(n==null)return null;if(typeof n=="string"){const t={className:n in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP?REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[n]:n,config:{}};return deserializeRegularizer(t)}else return n instanceof Regularizer?n:deserializeRegularizer(n)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class ReLU extends Layer{constructor(e){super(e??{}),this.supportsMasking=!0,e!=null&&(this.maxValue=e.maxValue)}call(e,t){e=getExactlyOneTensor(e);let r=relu$3(e);return this.maxValue!=null&&(r=clipByValue$3(r,0,this.maxValue)),r}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}ReLU.className="ReLU",registerClass$1(ReLU);class LeakyReLU extends Layer{constructor(e){super(e??{}),this.DEFAULT_ALPHA=.3,e==null&&(e={}),this.alpha=e.alpha==null?this.DEFAULT_ALPHA:e.alpha}call(e,t){const r=getExactlyOneTensor(e);return leakyRelu$3(r,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}LeakyReLU.className="LeakyReLU",registerClass$1(LeakyReLU);class PReLU extends Layer{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA_INITIALIZER="zeros",e==null&&(e={}),this.supportsMasking=!0,this.alphaInitializer=getInitializer(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=getRegularizer(e.alphaRegularizer),this.alphaConstraint=getConstraint(e.alphaConstraint),e.sharedAxes==null)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else if(typeof e.sharedAxes=="number")this.sharedAxes=[e.sharedAxes];else throw new ValueError(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`)}build(e){e=getExactlyOneShape(e);const t=e.slice(1);if(this.sharedAxes!=null)for(const s of this.sharedAxes)t[s-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const r={};if(this.sharedAxes!=null)for(let s=1;s<e.length;++s)r[s]=e[s];this.inputSpec=[new InputSpec({ndim:e.length,axes:r})],this.built=!0}call(e,t){return e=getExactlyOneTensor(e),prelu$3(e,this.alpha.read())}getConfig(){const e={alphaInitializer:serializeInitializer(this.alphaInitializer),alphaRegularizer:serializeRegularizer(this.alphaRegularizer),alphaConstraint:serializeConstraint(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}PReLU.className="PReLU",registerClass$1(PReLU);let ELU$4=class extends Layer{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA=1,e==null&&(e={}),e.alpha!=null&&e.alpha!==this.DEFAULT_ALPHA)throw new NotImplementedError(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=e.alpha==null?this.DEFAULT_ALPHA:e.alpha}call(e,t){const r=getExactlyOneTensor(e);return elu$4(r)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}};ELU$4.className="ELU",registerClass$1(ELU$4);class ThresholdedReLU extends Layer{constructor(e){super(e??{}),this.DEFAULT_THETA=1,e==null&&(e={}),this.theta=e.theta==null?this.DEFAULT_THETA:e.theta}call(e,t){const r=getExactlyOneTensor(e);return mul$1(r,cast$5(greater$3(r,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}ThresholdedReLU.className="ThresholdedReLU",registerClass$1(ThresholdedReLU);let Softmax$1=class extends Layer{constructor(e){super(e??{}),this.DEFAULT_AXIS=1,e==null&&(e={}),this.softmax=new Softmax$2().apply,this.axis=e.axis==null?this.DEFAULT_AXIS:e.axis}call(e,t){return tidy$1(()=>{let r=getExactlyOneTensor(e);const s=t.mask;if(s!=null){const a=mul$1(sub$4(ones$1(r.shape),cast$5(s,r.dtype)),scalar$1(-1e9));r=add$3(r,a)}return this.axis instanceof Array?this.axis.length>1?exp$3(sub$4(r,logSumExp(r,this.axis,!0))):this.softmax(r,this.axis[0]):this.softmax(r,this.axis)})}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}};Softmax$1.className="Softmax",registerClass$1(Softmax$1);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function normalizeArray(n,e,t){if(typeof n=="number")return pyListRepeat(n,e);if(n.length!==e)throw new ValueError(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${n.length} elements.`);for(let r=0;r<e;++r){const s=n[r];if(!isInteger(s))throw new ValueError(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(n)} including a non-integer number ${s}`)}return n}function convOutputLength(n,e,t,r,s=1){if(n==null)return n;const a=e+(e-1)*(s-1);let i;return t==="same"?i=n:i=n-a+1,Math.floor((i+r-1)/r)}function deconvLength(n,e,t,r){if(n==null)return null;if(r==="valid")n=n*e+max$3([t-e,0]);else if(r==="same")n=n*e;else throw new ValueError(`Unsupport padding mode: ${r}.`);return n}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function preprocessConv2DInput(n,e){return tidy$1(()=>(checkDataFormat(e),e==="channelsFirst"?transpose$3(n,[0,2,3,1]):n))}function preprocessConv3DInput(n,e){return tidy$1(()=>(checkDataFormat(e),e==="channelsFirst"?transpose$3(n,[0,2,3,4,1]):n))}function conv1dWithBias(n,e,t,r=1,s="valid",a,i=1){return tidy$1(()=>{if(a==null&&(a=imageDataFormat()),checkDataFormat(a),n.shape.length!==3)throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);if(e.shape.length!==3)throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ${e.shape.length} instead`);if(t!=null&&t.shape.length!==1)throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ${e.shape.length} instead`);if(a==="channelsFirst"&&(n=transpose$3(n,[0,2,1])),s==="causal")throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let l=conv1d(n,e,r,s==="same"?"same":"valid","NWC",i);return t!=null&&(l=biasAdd(l,t)),l})}function conv2dWithBiasActivation(n,e,t,r=[1,1],s="valid",a,i,l=null){return tidy$1(()=>{if(a==null&&(a=imageDataFormat()),checkDataFormat(a),n.rank!==3&&n.rank!==4)throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);if(e.rank!==3&&e.rank!==4)throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);let u=preprocessConv2DInput(n,a);if(s==="causal")throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=conv2d$2({x:u,filter:e,strides:r,pad:s==="same"?"same":"valid",dilations:i,dataFormat:"NHWC",bias:t,activation:l}),a==="channelsFirst"&&(u=transpose$3(u,[0,3,1,2])),u})}function conv3dWithBias(n,e,t,r=[1,1,1],s="valid",a,i){return tidy$1(()=>{if(a==null&&(a=imageDataFormat()),checkDataFormat(a),n.rank!==4&&n.rank!==5)throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);if(e.rank!==4&&e.rank!==5)throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);let l=preprocessConv3DInput(n,a);if(s==="causal")throw new NotImplementedError("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return l=conv3d(l,e,r,s==="same"?"same":"valid","NDHWC",i),t!=null&&(l=biasAdd(l,t)),a==="channelsFirst"&&(l=transpose$3(l,[0,4,1,2,3])),l})}class BaseConv extends Layer{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",BaseConv.verifyArgs(t),this.rank=e,assertPositiveInteger(this.rank,"rank"),this.rank!==1&&this.rank!==2&&this.rank!==3)throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=normalizeArray(t.kernelSize,e,"kernelSize"),this.strides=normalizeArray(t.strides==null?1:t.strides,e,"strides"),this.padding=t.padding==null?"valid":t.padding,checkPaddingMode(this.padding),this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,checkDataFormat(this.dataFormat),this.activation=getActivation(t.activation),this.useBias=t.useBias==null?!0:t.useBias,this.biasInitializer=getInitializer(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=getConstraint(t.biasConstraint),this.biasRegularizer=getRegularizer(t.biasRegularizer),this.activityRegularizer=getRegularizer(t.activityRegularizer),this.dilationRate=normalizeArray(t.dilationRate==null?1:t.dilationRate,e,"dilationRate"),this.rank===1&&Array.isArray(this.dilationRate)&&this.dilationRate.length!==1)throw new ValueError(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(this.rank===2){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==2)throw new ValueError(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(this.rank===3){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==3)throw new ValueError(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}}static verifyArgs(e){if(assert$1("kernelSize"in e,"required key 'kernelSize' not in config"),typeof e.kernelSize!="number"&&!checkArrayTypeAndLength(e.kernelSize,"number",1,3))throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:serializeActivation(this.activation),useBias:this.useBias,biasInitializer:serializeInitializer(this.biasInitializer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),biasConstraint:serializeConstraint(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Conv extends BaseConv{constructor(e,t){super(e,t),this.kernel=null,Conv.verifyArgs(t),this.filters=t.filters,assertPositiveInteger(this.filters,"filters"),this.kernelInitializer=getInitializer(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=getConstraint(t.kernelConstraint),this.kernelRegularizer=getRegularizer(t.kernelRegularizer)}build(e){e=getExactlyOneShape(e);const t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null)throw new ValueError(`The channel dimension of the input should be defined. Found ${e[t]}`);const r=e[t],s=this.kernelSize.concat([r,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:r}}],this.built=!0}call(e,t){return tidy$1(()=>{e=getExactlyOneTensor(e);let r;const s=this.bias==null?null:this.bias.read(),a=mapActivationToFusedKernel(this.activation.getClassName());if(a!=null&&this.rank===2)r=conv2dWithBiasActivation(e,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate,a);else{if(this.rank===1)r=conv1dWithBias(e,this.kernel.read(),s,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(this.rank===2)r=conv2dWithBiasActivation(e,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate);else if(this.rank===3)r=conv3dWithBias(e,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate);else throw new NotImplementedError("convolutions greater than 3D are not implemented yet.");this.activation!=null&&(r=this.activation.apply(r))}return r})}computeOutputShape(e){e=getExactlyOneShape(e);const t=[],r=this.dataFormat==="channelsLast"?e.slice(1,e.length-1):e.slice(2);for(let a=0;a<r.length;++a){const i=convOutputLength(r[a],this.kernelSize[a],this.padding,this.strides[a],typeof this.dilationRate=="number"?this.dilationRate:this.dilationRate[a]);t.push(i)}let s=[e[0]];return this.dataFormat==="channelsLast"?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:serializeInitializer(this.kernelInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||typeof e.filters!="number"||e.filters<1)throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}let Conv2D$1=class dn extends Conv{constructor(e){super(2,e),dn.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if(typeof e.kernelSize!="number"&&!checkArrayTypeAndLength(e.kernelSize,"number",1,2))throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}};Conv2D$1.className="Conv2D",registerClass$1(Conv2D$1);let Conv3D$1=class hn extends Conv{constructor(e){super(3,e),hn.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if(typeof e.kernelSize!="number"&&!(Array.isArray(e.kernelSize)&&(e.kernelSize.length===1||e.kernelSize.length===3)))throw new ValueError(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}};Conv3D$1.className="Conv3D",registerClass$1(Conv3D$1);class Conv2DTranspose extends Conv2D$1{constructor(e){if(super(e),this.inputSpec=[new InputSpec({ndim:4})],this.padding!=="same"&&this.padding!=="valid")throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(e=getExactlyOneShape(e),e.length!==4)throw new ValueError("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null)throw new ValueError("The channel dimension of the inputs should be defined. Found `None`.");const r=e[t],s=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new InputSpec({ndim:4,axes:{[t]:r}})],this.built=!0}call(e,t){return tidy$1(()=>{let r=getExactlyOneTensor(e);if(r.shape.length!==4)throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const s=r.shape,a=s[0];let i,l;this.dataFormat==="channelsFirst"?(i=2,l=3):(i=1,l=2);const u=s[i],h=s[l],f=this.kernelSize[0],c=this.kernelSize[1],o=this.strides[0],d=this.strides[1],m=deconvLength(u,o,f,this.padding),g=deconvLength(h,d,c,this.padding),y=[a,m,g,this.filters];this.dataFormat!=="channelsLast"&&(r=transpose$3(r,[0,2,3,1]));let $=conv2dTranspose(r,this.kernel.read(),y,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&($=transpose$3($,[0,3,1,2])),this.bias!=null&&($=biasAdd($,this.bias.read(),this.dataFormat)),this.activation!=null&&($=this.activation.apply($)),$})}computeOutputShape(e){e=getExactlyOneShape(e);const t=e.slice();let r,s,a;this.dataFormat==="channelsFirst"?(r=1,s=2,a=3):(r=3,s=1,a=2);const i=this.kernelSize[0],l=this.kernelSize[1],u=this.strides[0],h=this.strides[1];return t[r]=this.filters,t[s]=deconvLength(t[s],u,i,this.padding),t[a]=deconvLength(t[a],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Conv2DTranspose.className="Conv2DTranspose",registerClass$1(Conv2DTranspose);class Conv3DTranspose extends Conv3D$1{constructor(e){if(super(e),this.inputSpec=[new InputSpec({ndim:5})],this.padding!=="same"&&this.padding!=="valid")throw new ValueError(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(e=getExactlyOneShape(e),e.length!==5)throw new ValueError("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null)throw new ValueError("The channel dimension of the inputs should be defined. Found `None`.");const r=e[t],s=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new InputSpec({ndim:5,axes:{[t]:r}})],this.built=!0}call(e,t){return tidy$1(()=>{let r=getExactlyOneTensor(e);if(r.shape.length!==5)throw new ValueError(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const s=r.shape,a=s[0];let i,l,u;this.dataFormat==="channelsFirst"?(u=2,i=3,l=4):(u=1,i=2,l=3);const h=s[u],f=s[i],c=s[l],o=this.kernelSize[0],d=this.kernelSize[1],m=this.kernelSize[2],g=this.strides[0],y=this.strides[1],$=this.strides[2],b=deconvLength(h,g,o,this.padding),x=deconvLength(f,y,d,this.padding),w=deconvLength(c,$,m,this.padding),v=[a,b,x,w,this.filters];this.dataFormat!=="channelsLast"&&(r=transpose$3(r,[0,2,3,4,1]));let S=conv3dTranspose(r,this.kernel.read(),v,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(S=transpose$3(S,[0,4,1,2,3])),this.bias!==null&&(S=biasAdd(S,this.bias.read(),this.dataFormat)),this.activation!==null&&(S=this.activation.apply(S)),S})}computeOutputShape(e){e=getExactlyOneShape(e);const t=e.slice();let r,s,a,i;this.dataFormat==="channelsFirst"?(r=1,s=2,a=3,i=4):(r=4,s=1,a=2,i=3);const l=this.kernelSize[0],u=this.kernelSize[1],h=this.kernelSize[2],f=this.strides[0],c=this.strides[1],o=this.strides[2];return t[r]=this.filters,t[s]=deconvLength(t[s],f,l,this.padding),t[a]=deconvLength(t[a],c,u,this.padding),t[i]=deconvLength(t[i],o,h,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Conv3DTranspose.className="Conv3DTranspose",registerClass$1(Conv3DTranspose);class SeparableConv extends Conv{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,t.filters==null)throw new ValueError("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(t.kernelInitializer!=null||t.kernelRegularizer!=null||t.kernelConstraint!=null)throw new ValueError("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(t.padding!=null&&t.padding!=="same"&&t.padding!=="valid")throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=t.depthMultiplier==null?1:t.depthMultiplier,this.depthwiseInitializer=getInitializer(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=getRegularizer(t.depthwiseRegularizer),this.depthwiseConstraint=getConstraint(t.depthwiseConstraint),this.pointwiseInitializer=getInitializer(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=getRegularizer(t.pointwiseRegularizer),this.pointwiseConstraint=getConstraint(t.pointwiseConstraint)}build(e){if(e=getExactlyOneShape(e),e.length<this.rank+2)throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null||e[t]<0)throw new ValueError(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const r=e[t],s=this.kernelSize.concat([r,this.depthMultiplier]),a=[];for(let l=0;l<this.rank;++l)a.push(1);a.push(r*this.depthMultiplier,this.filters);const i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):this.bias=null,this.inputSpec=[new InputSpec({ndim:this.rank+2,axes:{[t]:r}})],this.built=!0}call(e,t){return tidy$1(()=>{e=getExactlyOneTensor(e);let r;if(this.rank===1)throw new NotImplementedError("1D separable convolution is not implemented yet.");return this.rank===2&&(this.dataFormat==="channelsFirst"&&(e=transpose$3(e,[0,2,3,1])),r=separableConv2d(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(r=biasAdd(r,this.bias.read(),this.dataFormat)),this.activation!=null&&(r=this.activation.apply(r)),this.dataFormat==="channelsFirst"&&(r=transpose$3(r,[0,3,1,2])),r})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=serializeInitializer(this.depthwiseInitializer),e.pointwiseInitializer=serializeInitializer(this.pointwiseInitializer),e.depthwiseRegularizer=serializeRegularizer(this.depthwiseRegularizer),e.pointwiseRegularizer=serializeRegularizer(this.pointwiseRegularizer),e.depthwiseConstraint=serializeConstraint(this.depthwiseConstraint),e.pointwiseConstraint=serializeConstraint(this.pointwiseConstraint),e}}SeparableConv.className="SeparableConv";class SeparableConv2D extends SeparableConv{constructor(e){super(2,e)}}SeparableConv2D.className="SeparableConv2D",registerClass$1(SeparableConv2D);class Conv1D extends Conv{constructor(e){super(1,e),Conv1D.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if(typeof e.kernelSize!="number"&&!checkArrayTypeAndLength(e.kernelSize,"number",1,1))throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Conv1D.className="Conv1D",registerClass$1(Conv1D);class Cropping2D extends Layer{constructor(e){super(e),typeof e.cropping=="number"?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:typeof e.cropping[0]=="number"?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=e.dataFormat===void 0?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return this.dataFormat==="channelsFirst"?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return tidy$1(()=>{if(e=getExactlyOneTensor(e),this.dataFormat==="channelsLast"){const r=sliceAlongAxis(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return sliceAlongAxis(r,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}else{const r=sliceAlongAxis(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return sliceAlongAxis(r,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Cropping2D.className="Cropping2D",registerClass$1(Cropping2D);class UpSampling2D extends Layer{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=e.size==null?this.DEFAULT_SIZE:e.size,this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,checkDataFormat(this.dataFormat),this.interpolation=e.interpolation==null?"nearest":e.interpolation,checkInterpolationFormat(this.interpolation)}computeOutputShape(e){if(this.dataFormat==="channelsFirst"){const t=e[2]==null?null:this.size[0]*e[2],r=e[3]==null?null:this.size[1]*e[3];return[e[0],e[1],t,r]}else{const t=e[1]==null?null:this.size[0]*e[1],r=e[2]==null?null:this.size[1]*e[2];return[e[0],t,r,e[3]]}}call(e,t){return tidy$1(()=>{let r=getExactlyOneTensor(e);const s=r.shape;if(this.dataFormat==="channelsFirst"){r=transpose$3(r,[0,2,3,1]);const a=this.size[0]*s[2],i=this.size[1]*s[3],l=this.interpolation==="nearest"?image$1.resizeNearestNeighbor(r,[a,i]):image$1.resizeBilinear(r,[a,i]);return transpose$3(l,[0,3,1,2])}else{const a=this.size[0]*s[1],i=this.size[1]*s[2];return this.interpolation==="nearest"?image$1.resizeNearestNeighbor(r,[a,i]):image$1.resizeBilinear(r,[a,i])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}UpSampling2D.className="UpSampling2D",registerClass$1(UpSampling2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function depthwiseConv2d(n,e,t=[1,1],r="valid",s,a){return tidy$1(()=>{s==null&&(s=imageDataFormat()),checkDataFormat(s);let i=preprocessConv2DInput(n,s);if(n.rank!==4)throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);if(e.rank!==4)throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ${e.rank}-D`);return i=depthwiseConv2d$2(i,e,t,r==="same"?"same":"valid","NHWC",a),s==="channelsFirst"&&(i=transpose$3(i,[0,3,1,2])),i})}class DepthwiseConv2D extends BaseConv{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=e.depthMultiplier==null?1:e.depthMultiplier,this.depthwiseInitializer=getInitializer(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=getConstraint(e.depthwiseConstraint),this.depthwiseRegularizer=getRegularizer(e.depthwiseRegularizer)}build(e){if(e=getExactlyOneShape(e),e.length<4)throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t=this.dataFormat==="channelsFirst"?1:3;if(e[t]==null||e[t]<0)throw new ValueError(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const r=e[t],s=[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return tidy$1(()=>{e=getExactlyOneTensor(e);let r=depthwiseConv2d(e,this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(r=biasAdd(r,this.bias.read(),this.dataFormat)),this.activation!=null&&(r=this.activation.apply(r)),r})}computeOutputShape(e){e=getExactlyOneShape(e);const t=this.dataFormat==="channelsFirst"?e[2]:e[1],r=this.dataFormat==="channelsFirst"?e[3]:e[2],s=this.dataFormat==="channelsFirst"?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=convOutputLength(t,this.kernelSize[0],this.padding,this.strides[0]),i=convOutputLength(r,this.kernelSize[1],this.padding,this.strides[1]);return this.dataFormat==="channelsFirst"?[e[0],s,a,i]:[e[0],a,i,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=serializeInitializer(this.depthwiseInitializer),e.depthwiseRegularizer=serializeRegularizer(this.depthwiseRegularizer),e.depthwiseConstraint=serializeConstraint(this.depthwiseRegularizer),e}}DepthwiseConv2D.className="DepthwiseConv2D",registerClass$1(DepthwiseConv2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function standardizeArgs(n,e,t,r){if(Array.isArray(n)){if(e!=null||t!=null)throw new ValueError("When inputs is an array, neither initialState or constants should be provided");r!=null&&(t=n.slice(n.length-r,n.length),n=n.slice(0,n.length-r)),n.length>1&&(e=n.slice(1,n.length)),n=n[0]}function s(a){return a==null||Array.isArray(a)?a:[a]}return e=s(e),t=s(t),{inputs:n,initialState:e,constants:t}}function rnn(n,e,t,r=!1,s,a,i=!1,l=!1){return tidy$1(()=>{const u=e.shape.length;if(u<3)throw new ValueError(`Input should be at least 3D, but is ${u}D.`);const h=[1,0].concat(range$3(2,u));if(e=transpose$3(e,h),a!=null)throw new NotImplementedError("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),s!=null&&(s=cast$5(cast$5(s,"bool"),"float32"),s.rank===u-1&&(s=expandDims$4(s,-1)),s=transpose$3(s,h)),r&&(e=reverse$3(e,0),s!=null&&(s=reverse$3(s,0)));const f=[];let c,o=t;const d=e.shape[0],m=unstack(e);let g;s!=null&&(g=unstack(s));for(let $=0;$<d;++$){const b=m[$],x=tidy$1(()=>n(b,o));if(s==null)c=x[0],o=x[1];else{const w=tidy$1(()=>{const v=g[$],S=sub$4(onesLike$3(v),v),T=add$3(mul$1(x[0],v),mul$1(o[0],S)),C=o.map((I,N)=>add$3(mul$1(x[1][N],v),mul$1(I,S)));return{output:T,newStates:C}});c=w.output,o=w.newStates}l&&f.push(c)}let y;return l&&(y=stack(f,1)),[c,y,o]})}class RNN extends Layer{constructor(e){super(e);let t;if(e.cell==null)throw new ValueError("cell property is missing for the constructor of RNN.");if(Array.isArray(e.cell)?t=new StackedRNNCells({cells:e.cell}):t=e.cell,t.stateSize==null)throw new ValueError("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=e.returnSequences==null?!1:e.returnSequences,this.returnState=e.returnState==null?!1:e.returnState,this.goBackwards=e.goBackwards==null?!1:e.goBackwards,this._stateful=e.stateful==null?!1:e.stateful,this.unroll=e.unroll==null?!1:e.unroll,this.supportsMasking=!0,this.inputSpec=[new InputSpec({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(this.states_==null){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;return range$3(0,e).map(t=>null)}else return this.states_}setStates(e){this.states_=e}computeOutputShape(e){isArrayOfShapes(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const r=t[0];let s;if(this.returnSequences?s=[e[0],e[1],r]:s=[e[0],r],this.returnState){const a=[];for(const i of t)a.push([e[0],i]);return[s].concat(a)}else return s}computeMask(e,t){return tidy$1(()=>{Array.isArray(t)&&(t=t[0]);const r=this.returnSequences?t:null;if(this.returnState){const s=this.states.map(a=>null);return[r].concat(s)}else return r})}get states(){if(this.states_==null){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let r=0;r<e;++r)t.push(null);return t}else return this.states_}set states(e){this.states_=e}build(e){if(this.numConstants!=null)throw new NotImplementedError("Constants support is not implemented in RNN yet.");isArrayOfShapes(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,r=e.slice(2);this.inputSpec[0]=new InputSpec({shape:[t,null,...r]});const s=[e[0]].concat(e.slice(2));this.cell.build(s);let a;if(Array.isArray(this.cell.stateSize)?a=this.cell.stateSize:a=[this.cell.stateSize],this.stateSpec!=null){if(!arraysEqual$1(this.stateSpec.map(i=>i.shape[i.shape.length-1]),a))throw new ValueError(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=a.map(i=>new InputSpec({shape:[null,i]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){tidy$1(()=>{if(!this.stateful)throw new AttributeError("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape[0];if(r==null)throw new ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.states_==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(s=>zeros$2([r,s])):this.states_=[zeros$2([r,this.cell.stateSize])];else if(e==null)dispose$1(this.states_),this.keptStates!=null&&(dispose$1(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(s=>zeros$2([r,s])):this.states_[0]=zeros$2([r,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t===!0?this.keptStates.push(this.states_.slice()):dispose$1(this.states_);for(let s=0;s<this.states_.length;++s){const a=e[s],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[s]:this.cell.stateSize,l=[r,i];if(!arraysEqual$1(a.shape,l))throw new ValueError(`State ${s} is incompatible with layer ${this.name}: expected shape=${l}, received shape=${a.shape}`);this.states_[s]=a}}this.states_=this.states_.map(s=>keep$1(s.clone()))})}apply(e,t){let r=t==null?null:t.initialState,s=t==null?null:t.constants;t==null&&(t={});const a=standardizeArgs(e,r,s,this.numConstants);e=a.inputs,r=a.initialState,s=a.constants;let i=[],l=[];if(r!=null){t.initialState=r,i=i.concat(r),this.stateSpec=[];for(const h of r)this.stateSpec.push(new InputSpec({shape:h.shape}));l=l.concat(this.stateSpec)}if(s!=null&&(t.constants=s,i=i.concat(s),this.numConstants=s.length),i[0]instanceof SymbolicTensor){const h=[e].concat(i),f=this.inputSpec.concat(l),c=this.inputSpec;this.inputSpec=f;const o=super.apply(h,t);return this.inputSpec=c,o}else return super.apply(e,t)}call(e,t){return tidy$1(()=>{const r=t==null?null:t.mask,s=t==null?null:t.training;let a=t==null?null:t.initialState;e=getExactlyOneTensor(e),a==null&&(this.stateful?a=this.states_:a=this.getInitialState(e));const i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==i)throw new ValueError(`RNN Layer has ${i} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const l={training:s},h=rnn((m,g)=>{const y=this.cell.call([m].concat(g),l);return[y[0],y.slice(1)]},e,a,this.goBackwards,r,null,this.unroll,this.returnSequences),f=h[0],c=h[1],o=h[2];this.stateful&&this.resetStates(o,s);const d=this.returnSequences?c:f;return this.returnState?[d].concat(o):d})}getInitialState(e){return tidy$1(()=>{let t=zeros$2(e.shape);return t=sum$4(t,[1,2]),t=expandDims$3(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(r=>r>1?tile$3(t,[1,r]):t):this.cell.stateSize>1?[tile$3(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),this.cell!=null&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};this.numConstants!=null&&(t.numConstants=this.numConstants);const r=this.cell.getConfig();return this.getClassName()===RNN.className&&(t.cell={className:this.cell.getClassName(),config:r}),Object.assign(Object.assign(Object.assign({},r),e),t)}static fromConfig(e,t,r={}){const s=t.cell,a=deserialize(s,r);return new e(Object.assign(t,{cell:a}))}}RNN.className="RNN",registerClass$1(RNN);class RNNCell extends Layer{}class SimpleRNNCell extends RNNCell{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,assertPositiveInteger(this.units,"units"),this.activation=getActivation(e.activation==null?this.DEFAULT_ACTIVATION:e.activation),this.useBias=e.useBias==null?!0:e.useBias,this.kernelInitializer=getInitializer(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=getInitializer(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=getInitializer(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=getRegularizer(e.kernelRegularizer),this.recurrentRegularizer=getRegularizer(e.recurrentRegularizer),this.biasRegularizer=getRegularizer(e.biasRegularizer),this.kernelConstraint=getConstraint(e.kernelConstraint),this.recurrentConstraint=getConstraint(e.recurrentConstraint),this.biasConstraint=getConstraint(e.biasConstraint),this.dropout=min$3([1,max$3([0,e.dropout==null?0:e.dropout])]),this.recurrentDropout=min$3([1,max$3([0,e.recurrentDropout==null?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=getExactlyOneShape(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return tidy$1(()=>{if(e=e,e.length!==2)throw new ValueError(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let r=e[1];e=e[0];const s=t.training==null?!1:t.training;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=generateDropoutMask({ones:()=>onesLike$3(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=generateDropoutMask({ones:()=>onesLike$3(r),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));let a;const i=this.dropoutMask,l=this.recurrentDropoutMask;i!=null?a=dot(mul$1(e,i),this.kernel.read()):a=dot(e,this.kernel.read()),this.bias!=null&&(a=biasAdd(a,this.bias.read())),l!=null&&(r=mul$1(r,l));let u=add$3(a,dot(r,this.recurrentKernel.read()));return this.activation!=null&&(u=this.activation.apply(u)),[u,u]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:serializeActivation(this.activation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}SimpleRNNCell.className="SimpleRNNCell",registerClass$1(SimpleRNNCell);class SimpleRNN extends RNN{constructor(e){e.cell=new SimpleRNNCell(e),super(e)}call(e,t){return tidy$1(()=>{this.cell.dropoutMask!=null&&(dispose$1(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(dispose$1(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const r=t==null?null:t.mask,s=t==null?null:t.training,a=t==null?null:t.initialState;return super.call(e,{mask:r,training:s,initialState:a})})}static fromConfig(e,t){return new e(t)}}SimpleRNN.className="SimpleRNN",registerClass$1(SimpleRNN);class GRUCell extends RNNCell{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new ValueError("GRUCell does not support reset_after parameter set to true.");this.units=e.units,assertPositiveInteger(this.units,"units"),this.activation=getActivation(e.activation===void 0?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=getActivation(e.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=e.useBias==null?!0:e.useBias,this.kernelInitializer=getInitializer(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=getInitializer(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=getInitializer(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=getRegularizer(e.kernelRegularizer),this.recurrentRegularizer=getRegularizer(e.recurrentRegularizer),this.biasRegularizer=getRegularizer(e.biasRegularizer),this.kernelConstraint=getConstraint(e.kernelConstraint),this.recurrentConstraint=getConstraint(e.recurrentConstraint),this.biasConstraint=getConstraint(e.biasConstraint),this.dropout=min$3([1,max$3([0,e.dropout==null?0:e.dropout])]),this.recurrentDropout=min$3([1,max$3([0,e.recurrentDropout==null?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=getExactlyOneShape(e);const t=e[e.length-1];this.kernel=this.addWeight("kernel",[t,this.units*3],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*3],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units*3],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return tidy$1(()=>{if(e=e,e.length!==2)throw new ValueError(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const r=t.training==null?!1:t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=generateDropoutMask({ones:()=>onesLike$3(e),rate:this.dropout,training:r,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=generateDropoutMask({ones:()=>onesLike$3(s),rate:this.recurrentDropout,training:r,count:3,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let l,u,h;0<this.dropout&&this.dropout<1&&(e=mul$1(e,a[0]));let f=dot(e,this.kernel.read());this.useBias&&(f=biasAdd(f,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=mul$1(s,i[0]));const c=this.recurrentKernel.read(),[o,d]=split$3(c,[2*this.units,this.units],c.rank-1),m=dot(s,o),[g,y,$]=split$3(f,3,f.rank-1),[b,x]=split$3(m,2,m.rank-1);l=this.recurrentActivation.apply(add$3(g,b)),u=this.recurrentActivation.apply(add$3(y,x));const w=dot(mul$1(u,s),d);h=this.activation.apply(add$3($,w));const v=add$3(mul$1(l,s),mul$1(add$3(1,neg$3(l)),h));return[v,v]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:serializeActivation(this.activation),recurrentActivation:serializeActivation(this.recurrentActivation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}GRUCell.className="GRUCell",registerClass$1(GRUCell);class GRU extends RNN{constructor(e){e.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new GRUCell(e),super(e)}call(e,t){return tidy$1(()=>{this.cell.dropoutMask!=null&&(dispose$1(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(dispose$1(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const r=t==null?null:t.mask,s=t==null?null:t.training,a=t==null?null:t.initialState;return super.call(e,{mask:r,training:s,initialState:a})})}static fromConfig(e,t){return t.implmentation===0&&(t.implementation=1),new e(t)}}GRU.className="GRU",registerClass$1(GRU);class LSTMCell extends RNNCell{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,assertPositiveInteger(this.units,"units"),this.activation=getActivation(e.activation===void 0?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=getActivation(e.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=e.useBias==null?!0:e.useBias,this.kernelInitializer=getInitializer(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=getInitializer(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=getInitializer(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=getRegularizer(e.kernelRegularizer),this.recurrentRegularizer=getRegularizer(e.recurrentRegularizer),this.biasRegularizer=getRegularizer(e.biasRegularizer),this.kernelConstraint=getConstraint(e.kernelConstraint),this.recurrentConstraint=getConstraint(e.recurrentConstraint),this.biasConstraint=getConstraint(e.biasConstraint),this.dropout=min$3([1,max$3([0,e.dropout==null?0:e.dropout])]),this.recurrentDropout=min$3([1,max$3([0,e.recurrentDropout==null?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;e=getExactlyOneShape(e);const r=e[e.length-1];this.kernel=this.addWeight("kernel",[r,this.units*4],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*4],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint);let s;if(this.useBias){if(this.unitForgetBias){const a=this.biasInitializer,i=this.units;s=new(t=class extends Initializer{apply(u,h){const f=a.apply([i]),c=new Ones().apply([i]),o=a.apply([i*2]);return concatAlongFirstAxis(concatAlongFirstAxis(f,c),o)}},t.className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[this.units*4],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return tidy$1(()=>{const r=t.training==null?!1:t.training;if(e=e,e.length!==3)throw new ValueError(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const a=e[2];e=e[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=generateDropoutMask({ones:()=>onesLike$3(e),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=generateDropoutMask({ones:()=>onesLike$3(s),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,l=this.recurrentDropoutMask;let u,h,f,c;0<this.dropout&&this.dropout<1&&(e=mul$1(e,i[0]));let o=dot(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=mul$1(s,l[0])),o=add$3(o,dot(s,this.recurrentKernel.read())),this.useBias&&(o=biasAdd(o,this.bias.read()));const[d,m,g,y]=split$3(o,4,o.rank-1);u=this.recurrentActivation.apply(d),h=this.recurrentActivation.apply(m),f=add$3(mul$1(h,a),mul$1(u,this.activation.apply(g))),c=this.recurrentActivation.apply(y);const $=mul$1(c,this.activation.apply(f));return[$,$,f]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:serializeActivation(this.activation),recurrentActivation:serializeActivation(this.recurrentActivation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}LSTMCell.className="LSTMCell",registerClass$1(LSTMCell);class LSTM extends RNN{constructor(e){e.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new LSTMCell(e),super(e)}call(e,t){return tidy$1(()=>{this.cell.dropoutMask!=null&&(dispose$1(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(dispose$1(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const r=t==null?null:t.mask,s=t==null?null:t.training,a=t==null?null:t.initialState;return super.call(e,{mask:r,training:s,initialState:a})})}static fromConfig(e,t){return t.implmentation===0&&(t.implementation=1),new e(t)}}LSTM.className="LSTM",registerClass$1(LSTM);class StackedRNNCells extends RNNCell{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return tidy$1(()=>{e=e;let r=e.slice(1);const s=[];for(const l of this.cells.slice().reverse())Array.isArray(l.stateSize)?s.push(r.splice(0,l.stateSize.length)):s.push(r.splice(0,1));s.reverse();const a=[];let i;for(let l=0;l<this.cells.length;++l){const u=this.cells[l];r=s[l],l===0?i=[e[0]].concat(r):i=[i[0]].concat(r),i=u.call(i,t),a.push(i.slice(1))}r=[];for(const l of a.slice().reverse())r.push(...l);return[i[0]].concat(r)})}build(e){isArrayOfShapes(e)&&(e=e[0]),e=e;let t;this.cells.forEach((r,s)=>{nameScope(`RNNCell_${s}`,()=>{r.build(e),Array.isArray(r.stateSize)?t=r.stateSize[0]:t=r.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){const e=super.getConfig(),t=a=>({className:a.getClassName(),config:a.getConfig()}),s={cells:this.cells.map(t)};return Object.assign(Object.assign({},e),s)}static fromConfig(e,t,r={}){const s=[];for(const a of t.cells)s.push(deserialize(a,r));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const r of this.cells)t.push(...r.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return batchGetValue(e)}setWeights(e){const t=[];for(const r of this.cells){const s=r.weights.length,a=e.splice(s);for(let i=0;i<r.weights.length;++i)t.push([r.weights[i],a[i]])}batchSetValue(t)}}StackedRNNCells.className="StackedRNNCells",registerClass$1(StackedRNNCells);function generateDropoutMask(n){const{ones:e,rate:t,training:r=!1,count:s=1,dropoutFunc:a}=n,i=()=>a!=null?a(e(),t):dropout(e(),t),l=()=>inTrainPhase(i,e,r);return!s||s<=1?keep$1(l().clone()):Array(s).fill(void 0).map(l).map(h=>keep$1(h.clone()))}/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var __rest=function(n,e){var t={};for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&e.indexOf(r)<0&&(t[r]=n[r]);if(n!=null&&typeof Object.getOwnPropertySymbols=="function")for(var s=0,r=Object.getOwnPropertySymbols(n);s<r.length;s++)e.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(n,r[s])&&(t[r[s]]=n[r[s]]);return t};class ConvRNN2D extends RNN{constructor(e){if(e.unroll)throw new NotImplementedError("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new NotImplementedError("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new InputSpec({ndim:5})]}call(e,t){return tidy$1(()=>{if(this.cell.dropoutMask!=null&&(dispose$1(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(dispose$1(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new ValueError("ConvRNN2D cell does not support constants");const r=t==null?null:t.mask,s=t==null?null:t.training,a=t==null?null:t.initialState;return super.call(e,{mask:r,training:s,initialState:a})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return tidy$1(()=>{const{stateSize:t}=this.cell,r=e.shape,s=this.computeSingleOutputShape(r),a=[s[0],...s.slice(2)],i=zeros$2(a);return Array.isArray(t)?Array(t.length).fill(i):[i]})}resetStates(e,t=!1){tidy$1(()=>{if(!this.stateful)throw new AttributeError("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape,s=this.computeSingleOutputShape(r),a=[s[0],...s.slice(2)];if(r[0]==null)throw new ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.getStates()==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>zeros$2(a)):this.states_=[zeros$2(a)];else if(e==null)dispose$1(this.states_),this.keptStates!=null&&(dispose$1(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>zeros$2(a)):this.states_[0]=zeros$2(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):dispose$1(this.states_);for(let l=0;l<this.states_.length;++l){const u=e[l],h=a;if(!arraysEqual$1(u.shape,h))throw new ValueError(`State ${l} is incompatible with layer ${this.name}: expected shape=${h}, received shape=${u.shape}`);this.states_[l]=u}}this.states_=this.states_.map(l=>keep$1(l.clone()))})}computeSingleOutputShape(e){const{dataFormat:t,filters:r,kernelSize:s,padding:a,strides:i,dilationRate:l}=this.cell,u=t==="channelsFirst",h=e[u?3:2],f=e[u?4:3],c=convOutputLength(h,s[0],a,i[0],l[0]),o=convOutputLength(f,s[1],a,i[1],l[1]);return[...e.slice(0,2),...u?[r,c,o]:[c,o,r]]}}ConvRNN2D.className="ConvRNN2D";class ConvLSTM2DCell extends LSTMCell{constructor(e){const{filters:t,kernelSize:r,strides:s,padding:a,dataFormat:i,dilationRate:l}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,assertPositiveInteger(this.filters,"filters"),this.kernelSize=normalizeArray(r,2,"kernelSize"),this.kernelSize.forEach(u=>assertPositiveInteger(u,"kernelSize")),this.strides=normalizeArray(s||1,2,"strides"),this.strides.forEach(u=>assertPositiveInteger(u,"strides")),this.padding=a||"valid",checkPaddingMode(this.padding),this.dataFormat=i||"channelsLast",checkDataFormat(this.dataFormat),this.dilationRate=normalizeArray(l||1,2,"dilationRate"),this.dilationRate.forEach(u=>assertPositiveInteger(u,"dilationRate"))}build(e){var t;e=getExactlyOneShape(e);const r=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[r]==null)throw new ValueError(`The channel dimension of the input should be defined. Found ${e[r]}`);const s=e[r],a=4,i=this.kernelSize.concat([s,this.filters*a]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const l=this.kernelSize.concat([this.filters,this.filters*a]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",l,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let u;if(this.unitForgetBias){const h=this.biasInitializer,f=this.filters;u=new(t=class extends Initializer{apply(o,d){const m=h.apply([f]),g=ones$1([f]),y=h.apply([f*2]);return concatenate([m,g,y])}},t.className="CustomInit",t)}else u=this.biasInitializer;this.bias=this.addWeight("bias",[this.filters*a],null,u,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return tidy$1(()=>{if(e.length!==3)throw new ValueError(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const r=t.training||!1,s=e[0],a=e[1],i=e[2],l=4;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=generateDropoutMask({ones:()=>onesLike$3(s),rate:this.dropout,training:r,count:l,dropoutFunc:this.dropoutFunc}));const u=this.dropoutMask,h=(G,j,K)=>!j||!j[K]?G:mul$1(j[K],G);let f=h(s,u,0),c=h(s,u,1),o=h(s,u,2),d=h(s,u,3);0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=generateDropoutMask({ones:()=>onesLike$3(a),rate:this.recurrentDropout,training:r,count:l,dropoutFunc:this.dropoutFunc}));const m=this.recurrentDropoutMask;let g=h(a,m,0),y=h(a,m,1),$=h(a,m,2),b=h(a,m,3);const x=3,[w,v,S,T]=split$3(this.kernel.read(),l,x),[C,I,N,P]=this.useBias?split$3(this.bias.read(),l):[null,null,null,null];f=this.inputConv(f,w,C,this.padding),c=this.inputConv(c,v,I,this.padding),o=this.inputConv(o,S,N,this.padding),d=this.inputConv(d,T,P,this.padding);const[F,_,D,E]=split$3(this.recurrentKernel.read(),l,x);g=this.recurrentConv(g,F),y=this.recurrentConv(y,_),$=this.recurrentConv($,D),b=this.recurrentConv(b,E);const k=this.recurrentActivation.apply(add$3(f,g)),O=this.recurrentActivation.apply(add$3(c,y)),M=add$3(mul$1(O,i),mul$1(k,this.activation.apply(add$3(o,$)))),z=mul$1(this.recurrentActivation.apply(add$3(d,b)),this.activation.apply(M));return[z,z,M]})}getConfig(){const e=super.getConfig(),t=__rest(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},t),r)}inputConv(e,t,r,s){const a=conv2d$3(e,t,this.strides,s||"valid",this.dataFormat==="channelsFirst"?"NCHW":"NHWC",this.dilationRate);return r?biasAdd(a,r,this.dataFormat):a}recurrentConv(e,t){return conv2d$3(e,t,1,"same",this.dataFormat==="channelsFirst"?"NCHW":"NHWC")}}ConvLSTM2DCell.className="ConvLSTM2DCell",registerClass$1(ConvLSTM2DCell);class ConvLSTM2D extends ConvRNN2D{constructor(e){const t=new ConvLSTM2DCell(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}ConvLSTM2D.className="ConvLSTM2D",registerClass$1(ConvLSTM2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Dropout extends Layer{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(this.noiseShape==null)return this.noiseShape;const t=e.shape,r=[];for(let s=0;s<this.noiseShape.length;++s)r.push(this.noiseShape[s]==null?t[s]:this.noiseShape[s]);return r}call(e,t){return tidy$1(()=>{this.invokeCallHook(e,t);const r=getExactlyOneTensor(e);if(0<this.rate&&this.rate<1){const s=t.training==null?!1:t.training,a=this.getNoiseShape(r);return inTrainPhase(()=>dropout(r,this.rate,a,this.seed),()=>r,s)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Dropout.className="Dropout",registerClass$1(Dropout);class SpatialDropout1D extends Dropout{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}SpatialDropout1D.className="SpatialDropout1D",registerClass$1(SpatialDropout1D);class Dense extends Layer{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.batchInputShape==null&&e.inputShape==null&&e.inputDim!=null){let t=null;e.batchSize!=null&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,assertPositiveInteger(this.units,"units"),this.activation=getActivation(e.activation),e.useBias!=null&&(this.useBias=e.useBias),this.kernelInitializer=getInitializer(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=getInitializer(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=getConstraint(e.kernelConstraint),this.biasConstraint=getConstraint(e.biasConstraint),this.kernelRegularizer=getRegularizer(e.kernelRegularizer),this.biasRegularizer=getRegularizer(e.biasRegularizer),this.activityRegularizer=getRegularizer(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){e=getExactlyOneShape(e);const t=e[e.length-1];this.kernel==null&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){e=getExactlyOneShape(e);const t=e.slice();return t[t.length-1]=this.units,t}call(e,t){return tidy$1(()=>{this.invokeCallHook(e,t);const r=getExactlyOneTensor(e),s=mapActivationToFusedKernel(this.activation.getClassName());let a;return s!=null?a=dot(r,this.kernel.read(),s,this.bias?this.bias.read():null):(a=dot(r,this.kernel.read()),this.bias!=null&&(a=biasAdd(a,this.bias.read())),this.activation!=null&&(a=this.activation.apply(a))),a})}getConfig(){const e={units:this.units,activation:serializeActivation(this.activation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),biasConstraint:serializeConstraint(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Dense.className="Dense",registerClass$1(Dense);class Flatten extends Layer{constructor(e){e=e||{},super(e),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=getExactlyOneShape(e);for(const t of e.slice(1))if(t==null)throw new ValueError(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],arrayProd(e,1)]}call(e,t){return tidy$1(()=>{this.invokeCallHook(e,t);let r=getExactlyOneTensor(e);if(this.dataFormat==="channelsFirst"&&r.rank>1){const s=[0];for(let a=2;a<r.rank;++a)s.push(a);s.push(1),r=transpose$3(r,s)}return batchFlatten(r)})}getConfig(){const e={};this.dataFormat!=null&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Flatten.className="Flatten",registerClass$1(Flatten);class Activation extends Layer{constructor(e){super(e),this.supportsMasking=!0,this.activation=getActivation(e.activation)}call(e,t){return tidy$1(()=>{this.invokeCallHook(e,t);const r=getExactlyOneTensor(e);return this.activation.apply(r)})}getConfig(){const e={activation:serializeActivation(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}Activation.className="Activation",registerClass$1(Activation);class RepeatVector extends Layer{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return tidy$1(()=>(e=getExactlyOneTensor(e),repeat(e,this.n)))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}RepeatVector.className="RepeatVector",registerClass$1(RepeatVector);let Reshape$1=class extends Layer{constructor(e){super(e),this.targetShape=e.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(e){return e<0||e==null}fixUnknownDimension(e,t){const r="Total size of new array must be unchanged.",s=t.slice();let a=1,i=null;for(let u=0;u<s.length;++u){const h=s[u];if(this.isUnknown(h))if(i===null)i=u;else throw new ValueError("Can only specifiy one unknown dimension.");else a*=h}const l=arrayProd(e);if(i!==null){if(a===0||l%a!==0)throw new ValueError(r);s[i]=l/a}else if(l!==a)throw new ValueError(r);return s}computeOutputShape(e){let t=!1;for(let r=0;r<e.length;++r)if(this.isUnknown(e[r])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return tidy$1(()=>{this.invokeCallHook(e,t);const r=getExactlyOneTensor(e),s=r.shape,a=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return reshape$5(r,a)})}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}};Reshape$1.className="Reshape",registerClass$1(Reshape$1);class Permute extends Layer{constructor(e){if(super(e),e.dims==null)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=range$3(1,e.dims.length+1);if(!arraysEqual$1(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new InputSpec({ndim:this.dims.length+1})]}computeOutputShape(e){e=getExactlyOneShape(e);const t=e.slice();return this.dims.forEach((r,s)=>{t[s+1]=e[r]}),t}call(e,t){return transpose$3(getExactlyOneTensor(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}Permute.className="Permute",registerClass$1(Permute);class Masking extends Layer{constructor(e){super(e??{}),this.supportsMasking=!0,e!=null?this.maskValue=e.maskValue==null?0:e.maskValue:this.maskValue=0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const r=getExactlyOneTensor(e),s=-1;return any$3(notEqual$3(r,this.maskValue),s)}call(e,t){return tidy$1(()=>{this.invokeCallHook(e,t);const r=getExactlyOneTensor(e),s=-1,a=!0,i=any$3(notEqual$3(r,this.maskValue),s,a);return mul$1(r,cast$5(i,r.dtype))})}}Masking.className="Masking",registerClass$1(Masking);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Embedding extends Layer{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",e.batchInputShape==null&&e.inputShape==null){let t=null;e.batchSize!=null&&(t=e.batchSize),e.inputLength==null?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(toList(e.inputLength))}this.inputDim=e.inputDim,assertPositiveInteger(this.inputDim,"inputDim"),this.outputDim=e.outputDim,assertPositiveInteger(this.outputDim,"outputDim"),this.embeddingsInitializer=getInitializer(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=getRegularizer(e.embeddingsRegularizer),this.activityRegularizer=getRegularizer(e.activityRegularizer),this.embeddingsConstraint=getConstraint(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return tidy$1(()=>this.maskZero?(e=getExactlyOneTensor(e),notEqual$3(e,zerosLike$4(e))):null)}computeOutputShape(e){if(e=getExactlyOneShape(e),this.inputLength==null)return[...e,this.outputDim];const t=toList(this.inputLength);if(t.length!==e.length-1)throw new ValueError(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let r=0;for(let s=0;s<t.length;++s){const a=t[s],i=e[s+1];if(a!=null&&i!=null&&a!==i)throw new ValueError(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);a==null&&(t[r]=i),r++}}return[e[0],...t,this.outputDim]}call(e,t){return tidy$1(()=>{this.invokeCallHook(e,t);let r=getExactlyOneTensor(e);r.dtype!=="int32"&&(r=cast$4(r,"int32"));const s=gather(this.embeddings.read(),reshape$5(r,[r.size]));return reshape$5(s,getExactlyOneShape(this.computeOutputShape(r.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:serializeInitializer(this.embeddingsInitializer),embeddingsRegularizer:serializeRegularizer(this.embeddingsRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),embeddingsConstraint:serializeConstraint(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}Embedding.className="Embedding",registerClass$1(Embedding);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Merge extends Layer{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new NotImplementedError}computeElementwiseOpOutputShape(e,t){if(e==null||t==null)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(t.length===0)return e;const r=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const a=e[e.length-t.length+s],i=t[s];if(a==null||i==null||a<0||i<0)r.push(null);else if(a===1)r.push(i);else if(i===1)r.push(a);else{if(a!==i)throw new ValueError("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));r.push(a)}}return r}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[getExactlyOneShape(e)]),e=e,e.length<2)throw new ValueError(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const a of e)a!=null&&a[0]!==null&&t.push(a[0]);if(t=unique$2(t),t.length>1)throw new ValueError(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let r=e[0]==null?null:e[0].slice(1);for(let a=1;a<e.length;++a){const i=e[a]==null?null:e[a].slice(1);r=this.computeElementwiseOpOutputShape(r,i)}const s=e.map(a=>a.length);e.indexOf(null)===-1&&unique$2(s).length===1?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return tidy$1(()=>{if(e=e,this.reshapeRequired){const r=[],s=e.map(a=>a.rank);if(s.indexOf(null)===-1){const a=max$3(s);for(let i of e){const l=i.rank;for(let u=0;u<a-l;++u)i=expandDims$3(i,1);r.push(i)}return this.mergeFunction(r)}else{let a=!1;for(const u of e){const h=u.rank;if(h==null){const f=u.shape,c=f[0],o=f.slice(1).concat([c]);let d=reshape$5(u,[c].concat(arrayProd(f.slice(1))));d=transpose$3(d,[1,0]),d=reshape$5(d,o),r.push(d),a=!0}else if(h>1){const f=range$3(1,h).concat([0]);r.push(transpose$3(u,f)),a=!0}else r.push(u)}let i=this.mergeFunction(r);const l=i.rank;if(a){if(l==null){const u=i.shape,h=u.length,f=u[h-1],c=[f].concat(u.slice(0,u.length-1));i=reshape$5(transpose$3(reshape$5(i,[-1,f]),[1,0]),c)}else if(l>1){const u=[l-1].concat(range$3(0,l-1));i=transpose$3(i,u)}}return i}}else return this.mergeFunction(e)})}computeOutputShape(e){e=e;let t;e[0]==null?t=null:t=e[0].slice(1);for(let s=1;s<e.length;++s){const a=e[s]==null?null:e[s].slice(1);t=this.computeElementwiseOpOutputShape(t,a)}let r=[];for(const s of e)s!=null&&s[0]!==null&&r.push(s[0]);return r=unique$2(r),r.length===1?t=r.concat(t):t=[null].concat(t),t}computeMask(e,t){return tidy$1(()=>{if(t==null)return null;if(!Array.isArray(t))throw new ValueError("`mask` should be an Array");if(!Array.isArray(e))throw new ValueError("`inputs` should be an Array");if(t.length!==e.length)throw new ValueError(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(s=>s==null))return null;t=t.map(s=>s==null?s:expandDims$4(s,0));let r=t[0];for(let s=1;s<t.length-1;++s)r=logicalAnd$3(r,t[s]);return r})}}let Add$1=class extends Merge{constructor(e){super(e)}mergeFunction(e){return tidy$1(()=>{let t=e[0].clone();for(let r=1;r<e.length;++r)t=add$3(t,e[r]);return t})}};Add$1.className="Add",registerClass$1(Add$1);let Multiply$1=class extends Merge{constructor(e){super(e)}mergeFunction(e){return tidy$1(()=>{let t=e[0].clone();for(let r=1;r<e.length;++r)t=mul$1(t,e[r]);return t})}};Multiply$1.className="Multiply",registerClass$1(Multiply$1);class Average extends Merge{constructor(e){super(e)}mergeFunction(e){return tidy$1(()=>{let t=e[0].clone();for(let r=1;r<e.length;++r)t=add$3(t,e[r]);return mul$1(1/e.length,t)})}}Average.className="Average",registerClass$1(Average);let Maximum$1=class extends Merge{constructor(e){super(e)}mergeFunction(e){return tidy$1(()=>{let t=e[0];for(let r=1;r<e.length;++r)t=maximum$4(t,e[r]);return t})}};Maximum$1.className="Maximum",registerClass$1(Maximum$1);let Minimum$1=class extends Merge{constructor(e){super(e)}mergeFunction(e){return tidy$1(()=>{let t=e[0];for(let r=1;r<e.length;++r)t=minimum$3(t,e[r]);return t})}};Minimum$1.className="Minimum",registerClass$1(Minimum$1);class Concatenate extends Merge{constructor(e){super(e),this.DEFAULT_AXIS=-1,e==null&&(e={}),this.axis=e.axis==null?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!(Array.isArray(e)&&Array.isArray(e[0]))||e.length===1)throw new ValueError("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const s of e)if(s!=null){t=!1;break}if(t)return;const r=[];for(let s=0;s<e.length;++s){const a=e[s].slice();a.splice(this.axis,1);let i=!1;for(const l of r)if(arraysEqual$1(l,a)){i=!0;break}i||r.push(a)}if(r.length>1)throw new ValueError("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return tidy$1(()=>concatenate(e,this.axis))}computeOutputShape(e){if(!(Array.isArray(e)&&Array.isArray(e[0])))throw new ValueError("A `Concatenate` layer should be called on a list of inputs.");const t=e,r=t[0].slice(),s=this.axis<0?r.length+this.axis:this.axis;for(const a of t.slice(1)){if(r[s]==null||a[s]==null){r[s]=null;break}r[s]+=a[s]}return r}computeMask(e,t){if(t==null)return null;if(!Array.isArray(t))throw new ValueError("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new ValueError("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new ValueError(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return tidy$1(()=>{let r=!0;if(t.forEach(i=>{if(i!=null){r=!1;return}}),r)return null;const s=[];for(let i=0;i<e.length;++i)t[i]==null?s.push(cast$5(onesLike$3(e[i]),"bool")):t[i].rank<e[i].rank?s.push(expandDims$4(t[i],-1)):s.push(t[i]);const a=concat$3(s,this.axis);return all$3(a,-1,!1)})}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}Concatenate.className="Concatenate",registerClass$1(Concatenate);function interpretAxis(n,e){for(;n<0;)n+=e;return n}function batchDot(n,e,t){if(n.shape.length>3||e.shape.length>3)throw new NotImplementedError("batchDot is not implemented for tensors of 4D or higher rank yet");if(assert$2(n.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`),assert$2(n.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${e.shape.length}`),typeof t=="number"&&(t=[t,t]),n.dtype==="complex64"||e.dtype==="complex64")throw new NotImplementedError("batchDot is not implemented for complex64-type Tensors yet.");const r=n.shape.length,s=e.shape.length;t==null&&(t=[r-1,s-2]);const a=t;return tidy$1(()=>{let i;if(r>s){i=r-s;const u=[];for(let h=0;h<i;++h)u.push(1);e=reshape$5(e,e.shape.concat(u))}else if(s>r){i=s-r;const u=[];for(let h=0;h<i;++h)u.push(1);n=reshape$5(n,n.shape.concat(u))}else i=0;let l;if(n.shape.length===2&&e.shape.length===2)a[0]===a[1]?l=sum$4(mul$1(n,e),a[0]):l=sum$4(mul$1(transpose$3(n,[1,0]),e),a[1]);else{const u=a[0]!==n.shape.length-1,h=a[1]===e.shape.length-1;l=matMul$1(n,e,u,h)}if(i>0){let u;r>s?u=r+s-3:u=r-1;const h=[];for(let f=u;f<u+i;++f)h.push(f);l=squeeze(l,h)}return l.shape.length===1&&(l=expandDims$4(l,1)),l})}class Dot extends Merge{constructor(e){super(e),this.axes=e.axes,this.normalize=e.normalize==null?!1:e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){assert$2(Array.isArray(e)&&e.length===2&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0],r=e[1];if(t.length>3||r.length>3)throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,r);if(t[s[0]]!==r[s[1]])throw new ValueError(`Dimension incompatibility: ${t[s[0]]} !== ${r[s[1]]}`)}mergeFunction(e){if(e.length!==2)throw new ValueError(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t=e[0],r=e[1],s;return Array.isArray(this.axes)?s=this.axes.map((a,i)=>interpretAxis(a,e[i].shape.length)):s=[interpretAxis(this.axes,t.shape.length),interpretAxis(this.axes,r.shape.length)],this.normalize&&(t=l2Normalize(t,s[0]),r=l2Normalize(r,s[1])),batchDot(t,r,s)}interpretAxes(e,t){let r;return Array.isArray(this.axes)?r=this.axes:r=[interpretAxis(this.axes,e.length),interpretAxis(this.axes,t.length)],r}computeOutputShape(e){assert$2(Array.isArray(e)&&e.length===2&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0].slice(),r=e[1].slice();if(t.length>3||r.length>3)throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,r);t.splice(s[0],1),r.splice(s[1],1),r.splice(0,1);const a=t.concat(r);return a.length===1&&a.push(1),a}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}Dot.className="Dot",registerClass$1(Dot);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class GaussianNoise extends Layer{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return tidy$1(()=>{this.invokeCallHook(e,t);const r=getExactlyOneTensor(e);return inTrainPhase(()=>add$3(randomNormal(r.shape,0,this.stddev),r),()=>r,t.training||!1)})}}GaussianNoise.className="GaussianNoise",registerClass$1(GaussianNoise);class GaussianDropout extends Layer{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return tidy$1(()=>{this.invokeCallHook(e,t);const r=getExactlyOneTensor(e);return this.rate>0&&this.rate<1?inTrainPhase(()=>{const a=Math.sqrt(this.rate/(1-this.rate));return mul$1(r,randomNormal(r.shape,1,a))},()=>r,t.training||!1):r})}}GaussianDropout.className="GaussianDropout",registerClass$1(GaussianDropout);class AlphaDropout extends Layer{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||getExactlyOneTensor(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return tidy$1(()=>{if(this.rate<1&&this.rate>0){const r=this._getNoiseShape(e);return inTrainPhase(()=>{const a=getExactlyOneTensor(e),i=1.6732632423543772,l=1.0507009873554805,u=-i*l;let h=greaterEqual$3(randomUniform(r),this.rate);h=cast$4(h,"float32");const f=((1-this.rate)*(1+this.rate*u**2))**-.5,c=-f*u*this.rate,o=add$3(mul$1(a,h),mul$1(add$3(h,-1),u));return add$3(mul$1(o,f),c)},()=>getExactlyOneTensor(e),t.training||!1)}return e})}}AlphaDropout.className="AlphaDropout",registerClass$1(AlphaDropout);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function batchNormalization(n,e,t,r,s,a=.001){let i;if(n.rank===2)i=batchNorm2d(n,e,t,r,s,a);else if(n.rank===3)i=batchNorm3d(n,e,t,r,s,a);else if(n.rank===4)i=batchNorm4d(n,e,t,r,s,a);else throw new NotImplementedError(`batchNormalization is not implemented for array of rank ${n.rank} yet`);return i}function regularNormalizeBatchInTraining(n,e,t,r,s=.001){return tidy$1(()=>{const a=moments(n,r),i=a.mean,l=a.variance;return[batchNormalization(n,i,l,t,e,s),i,l]})}function broadcastNormalizeBatchInTraining(n,e,t,r,s=.001){return tidy$1(()=>{const a=moments(n,r),i=a.mean,l=a.variance,u=[];for(const m of range$3(0,n.rank))r.indexOf(m)!==-1?u.push(1):u.push(n.shape[m]);const h=reshape$5(i,u),f=reshape$5(l,u),c=e==null?null:reshape$5(e,u),o=t==null?null:reshape$5(t,u);return[batchNormalization(n,h,f,o,c,s),i,l]})}function normalizeBatchInTraining(n,e,t,r,s=.001){return arraysEqual$1(r.slice().sort(),range$3(0,n.rank-1))?regularNormalizeBatchInTraining(n,e,t,r,s):broadcastNormalizeBatchInTraining(n,e,t,r,s)}class BatchNormalization extends Layer{constructor(e){e==null&&(e={}),super(e),this.supportsMasking=!0,this.axis=e.axis==null?-1:e.axis,this.momentum=e.momentum==null?.99:e.momentum,this.epsilon=e.epsilon==null?.001:e.epsilon,this.center=e.center==null?!0:e.center,this.scale=e.scale==null?!0:e.scale,this.betaInitializer=getInitializer(e.betaInitializer||"zeros"),this.gammaInitializer=getInitializer(e.gammaInitializer||"ones"),this.movingMeanInitializer=getInitializer(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=getInitializer(e.movingVarianceInitializer||"ones"),this.betaConstraint=getConstraint(e.betaConstraint),this.gammaConstraint=getConstraint(e.gammaConstraint),this.betaRegularizer=getRegularizer(e.betaRegularizer),this.gammaRegularizer=getRegularizer(e.gammaRegularizer)}build(e){e=getExactlyOneShape(e);const t=this.axis>=0?this.axis:this.axis+e.length,r=e[t];if(r==null)throw new ValueError(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new InputSpec({ndim:e.length,axes:{[t]:r}})];const s=[r];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return tidy$1(()=>{const r=t.training==null?!1:t.training,s=getExactlyOneTensor(e),a=s.shape,i=a.length,l=range$3(0,i),u=this.axis>=0?this.axis:this.axis+i;l.splice(u,1);const h=pyListRepeat(1,i);h[u]=a[u];const f=l.slice();f.sort();const c=!arraysEqual$1(f,range$3(0,i).slice(0,i-1)),o=()=>{if(c){const b=reshape$5(this.movingMean.read(),h),x=reshape$5(this.movingVariance.read(),h),w=this.center?reshape$5(this.beta.read(),h):null,v=this.scale?reshape$5(this.gamma.read(),h):null;return batchNormalization(s,b,x,w,v,this.epsilon)}else return batchNormalization(s,this.movingMean.read(),this.movingVariance.read(),this.beta==null?null:this.beta.read(),this.gamma==null?null:this.gamma.read(),this.epsilon)};if(!r)return o();const[d,m,g]=normalizeBatchInTraining(s,this.gamma.read(),this.beta.read(),l,this.epsilon),y=(b,x,w)=>{tidy$1(()=>{const v=1-w,S=b.read(),T=mul$1(sub$4(S,x),v);b.write(sub$4(S,T))})};return(()=>{y(this.movingMean,m,this.momentum),y(this.movingVariance,g,this.momentum)})(),d})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:serializeInitializer(this.betaInitializer),gammaInitializer:serializeInitializer(this.gammaInitializer),movingMeanInitializer:serializeInitializer(this.movingMeanInitializer),movingVarianceInitializer:serializeInitializer(this.movingVarianceInitializer),betaRegularizer:serializeRegularizer(this.betaRegularizer),gammaRegularizer:serializeRegularizer(this.gammaRegularizer),betaConstraint:serializeConstraint(this.betaConstraint),gammaConstraint:serializeConstraint(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}BatchNormalization.className="BatchNormalization",registerClass$1(BatchNormalization);class LayerNormalization extends Layer{constructor(e){if(e==null&&(e={}),super(e),this.axis=e.axis==null?-1:e.axis,typeof this.axis=="number"){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else if(Array.isArray(this.axis)){for(const t of this.axis)if(!Number.isInteger(t))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}else throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);this.epsilon=e.epsilon==null?.001:e.epsilon,this.center=e.center==null?!0:e.center,this.scale=e.scale==null?!0:e.scale,this.betaInitializer=getInitializer(e.betaInitializer||"zeros"),this.gammaInitializer=getInitializer(e.gammaInitializer||"ones"),this.betaRegularizer=getRegularizer(e.betaRegularizer),this.gammaRegularizer=getRegularizer(e.gammaRegularizer),this.supportsMasking=!0}build(e){e=getExactlyOneShape(e);const t=e.length;typeof this.axis=="number"&&(this.axis=[this.axis]);for(let a=0;a<this.axis.length;++a)this.axis[a]<0&&(this.axis[a]+=t);for(const a of this.axis)if(a<0||a>=t)throw new Error(`Invalid axis: ${a}`);if(this.axis.length!==unique$2(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const r=this.axis.map(a=>e[a]),s=!0;this.scale?this.gamma=this.addWeight("gamma",r,"float32",this.gammaInitializer,this.gammaRegularizer,s):this.gamma=null,this.center?this.beta=this.addWeight("beta",r,"float32",this.betaInitializer,this.betaRegularizer,s):this.beta=null,this.built=!0}call(e,t){const r=getExactlyOneTensor(e),s=r.shape,a=s.length;return tidy$1(()=>{let{mean:l,variance:u}=moments(r,this.axis,!0);const h=pyListRepeat(1,a);for(const g of this.axis)h[g]=s[g];const f=g=>g!=null&&g.shape.length!==a?reshape$5(g,h):g;let c=this.scale?f(this.gamma.read()):null,o=this.center?f(this.beta.read()):null;const d=[],m=[];for(let g=0;g<a;++g)this.axis.indexOf(g)!==-1?(d.push(s[g]),m.push(1)):(d.push(1),m.push(s[g]));return l=tile$4(l,d),u=tile$4(u,d),c!=null&&(c=tile$4(c,m)),o!=null&&(o=tile$4(o,m)),batchNormalization(r,l,u,o,c,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:serializeInitializer(this.betaInitializer),gammaInitializer:serializeInitializer(this.gammaInitializer),betaRegularizer:serializeRegularizer(this.betaRegularizer),gammaRegularizer:serializeRegularizer(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}LayerNormalization.className="LayerNormalization",registerClass$1(LayerNormalization);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function spatial2dPadding(n,e,t){return tidy$1(()=>{if(n.rank!==4)throw new ValueError(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);if(e==null&&(e=[[1,1],[1,1]]),e.length!==2||e[0].length!==2||e[1].length!==2)throw new ValueError("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(t==null&&(t=imageDataFormat()),t!=="channelsLast"&&t!=="channelsFirst")throw new ValueError(`Unknown data format: ${t}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let r;return t==="channelsFirst"?r=[[0,0],[0,0],e[0],e[1]]:r=[[0,0],e[0],e[1],[0,0]],pad(n,r)})}class ZeroPadding2D extends Layer{constructor(e){if(e==null&&(e={}),super(e),this.dataFormat=e.dataFormat==null?imageDataFormat():e.dataFormat,e.padding==null)this.padding=[[1,1],[1,1]];else if(typeof e.padding=="number")this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,e.padding.length!==2)throw new ValueError(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,r;if(typeof e.padding[0]=="number")t=[e.padding[0],e.padding[0]],r=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,e.padding[0].length!==2)throw new ValueError(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],e.padding[1].length!==2)throw new ValueError(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);r=e.padding[1]}this.padding=[t,r]}this.inputSpec=[new InputSpec({ndim:4})]}computeOutputShape(e){e=getExactlyOneShape(e);let t,r;return this.dataFormat==="channelsFirst"?(e[2]!=null&&e[2]>=0?t=e[2]+this.padding[0][0]+this.padding[0][1]:t=null,e[3]!=null&&e[3]>=0?r=e[3]+this.padding[1][0]+this.padding[1][1]:r=null,[e[0],e[1],t,r]):(e[1]!=null&&e[1]>=0?t=e[1]+this.padding[0][0]+this.padding[0][1]:t=null,e[2]!=null&&e[2]>=0?r=e[2]+this.padding[1][0]+this.padding[1][1]:r=null,[e[0],t,r,e[3]])}call(e,t){return tidy$1(()=>spatial2dPadding(getExactlyOneTensor(e),this.padding,this.dataFormat))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}ZeroPadding2D.className="ZeroPadding2D",registerClass$1(ZeroPadding2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function pool2d(n,e,t,r,s,a){return tidy$1(()=>{checkDataFormat(s),checkPoolMode(a),checkPaddingMode(r),t==null&&(t=[1,1]),r==null&&(r="valid"),s==null&&(s=imageDataFormat()),a==null&&(a="max"),n=preprocessConv2DInput(n,s);let i;const l=r==="same"?"same":"valid";return a==="max"?i=maxPool$3(n,e,t,l):i=avgPool$3(n,e,t,l),s==="channelsFirst"&&(i=transpose$3(i,[0,3,1,2])),i})}function pool3d$1(n,e,t,r,s,a){return tidy$1(()=>{checkDataFormat(s),checkPoolMode(a),checkPaddingMode(r),t==null&&(t=[1,1,1]),r==null&&(r="valid"),s==null&&(s=imageDataFormat()),a==null&&(a="max"),n=preprocessConv3DInput(n,s);let i;const l=r==="same"?"same":"valid";return a==="max"?i=maxPool3d$2(n,e,t,l):i=avgPool3d(n,e,t,l),s==="channelsFirst"&&(i=transpose$3(i,[0,4,1,2,3])),i})}class Pooling1D extends Layer{constructor(e){if(e.poolSize==null&&(e.poolSize=2),super(e),typeof e.poolSize=="number")this.poolSize=[e.poolSize];else if(Array.isArray(e.poolSize)&&e.poolSize.length===1&&typeof e.poolSize[0]=="number")this.poolSize=e.poolSize;else throw new ValueError(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);if(assertPositiveInteger(this.poolSize,"poolSize"),e.strides==null)this.strides=this.poolSize;else if(typeof e.strides=="number")this.strides=[e.strides];else if(Array.isArray(e.strides)&&e.strides.length===1&&typeof e.strides[0]=="number")this.strides=e.strides;else throw new ValueError(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);assertPositiveInteger(this.strides,"strides"),this.padding=e.padding==null?"valid":e.padding,checkPaddingMode(this.padding),this.inputSpec=[new InputSpec({ndim:3})]}computeOutputShape(e){e=getExactlyOneShape(e);const t=convOutputLength(e[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return tidy$1(()=>{this.invokeCallHook(e,t),e=expandDims$3(getExactlyOneTensor(e),2);const r=this.poolingFunction(getExactlyOneTensor(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return squeeze(r,[2])})}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class MaxPooling1D extends Pooling1D{constructor(e){super(e)}poolingFunction(e,t,r,s,a){return checkDataFormat(a),checkPaddingMode(s),pool2d(e,t,r,s,a,"max")}}MaxPooling1D.className="MaxPooling1D",registerClass$1(MaxPooling1D);class AveragePooling1D extends Pooling1D{constructor(e){super(e)}poolingFunction(e,t,r,s,a){return checkDataFormat(a),checkPaddingMode(s),pool2d(e,t,r,s,a,"avg")}}AveragePooling1D.className="AveragePooling1D",registerClass$1(AveragePooling1D);class Pooling2D extends Layer{constructor(e){if(e.poolSize==null&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],e.strides==null)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(e.strides.length!==2)throw new ValueError(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];assertPositiveInteger(this.poolSize,"poolSize"),assertPositiveInteger(this.strides,"strides"),this.padding=e.padding==null?"valid":e.padding,this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,checkDataFormat(this.dataFormat),checkPaddingMode(this.padding),this.inputSpec=[new InputSpec({ndim:4})]}computeOutputShape(e){e=getExactlyOneShape(e);let t=this.dataFormat==="channelsFirst"?e[2]:e[1],r=this.dataFormat==="channelsFirst"?e[3]:e[2];return t=convOutputLength(t,this.poolSize[0],this.padding,this.strides[0]),r=convOutputLength(r,this.poolSize[1],this.padding,this.strides[1]),this.dataFormat==="channelsFirst"?[e[0],e[1],t,r]:[e[0],t,r,e[3]]}call(e,t){return tidy$1(()=>(this.invokeCallHook(e,t),this.poolingFunction(getExactlyOneTensor(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class MaxPooling2D extends Pooling2D{constructor(e){super(e)}poolingFunction(e,t,r,s,a){return checkDataFormat(a),checkPaddingMode(s),pool2d(e,t,r,s,a,"max")}}MaxPooling2D.className="MaxPooling2D",registerClass$1(MaxPooling2D);class AveragePooling2D extends Pooling2D{constructor(e){super(e)}poolingFunction(e,t,r,s,a){return checkDataFormat(a),checkPaddingMode(s),pool2d(e,t,r,s,a,"avg")}}AveragePooling2D.className="AveragePooling2D",registerClass$1(AveragePooling2D);class Pooling3D extends Layer{constructor(e){if(e.poolSize==null&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],e.strides==null)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(e.strides.length!==3)throw new ValueError(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];assertPositiveInteger(this.poolSize,"poolSize"),assertPositiveInteger(this.strides,"strides"),this.padding=e.padding==null?"valid":e.padding,this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,checkDataFormat(this.dataFormat),checkPaddingMode(this.padding),this.inputSpec=[new InputSpec({ndim:5})]}computeOutputShape(e){e=getExactlyOneShape(e);let t=this.dataFormat==="channelsFirst"?e[2]:e[1],r=this.dataFormat==="channelsFirst"?e[3]:e[2],s=this.dataFormat==="channelsFirst"?e[4]:e[3];return t=convOutputLength(t,this.poolSize[0],this.padding,this.strides[0]),r=convOutputLength(r,this.poolSize[1],this.padding,this.strides[1]),s=convOutputLength(s,this.poolSize[2],this.padding,this.strides[2]),this.dataFormat==="channelsFirst"?[e[0],e[1],t,r,s]:[e[0],t,r,s,e[4]]}call(e,t){return tidy$1(()=>(this.invokeCallHook(e,t),this.poolingFunction(getExactlyOneTensor(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class MaxPooling3D extends Pooling3D{constructor(e){super(e)}poolingFunction(e,t,r,s,a){return checkDataFormat(a),checkPaddingMode(s),pool3d$1(e,t,r,s,a,"max")}}MaxPooling3D.className="MaxPooling3D",registerClass$1(MaxPooling3D);class AveragePooling3D extends Pooling3D{constructor(e){super(e)}poolingFunction(e,t,r,s,a){return checkDataFormat(a),checkPaddingMode(s),pool3d$1(e,t,r,s,a,"avg")}}AveragePooling3D.className="AveragePooling3D",registerClass$1(AveragePooling3D);class GlobalPooling1D extends Layer{constructor(e){super(e),this.inputSpec=[new InputSpec({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new NotImplementedError}}class GlobalAveragePooling1D extends GlobalPooling1D{constructor(e){super(e||{})}call(e,t){return tidy$1(()=>{const r=getExactlyOneTensor(e);return mean$2(r,1)})}}GlobalAveragePooling1D.className="GlobalAveragePooling1D",registerClass$1(GlobalAveragePooling1D);class GlobalMaxPooling1D extends GlobalPooling1D{constructor(e){super(e||{})}call(e,t){return tidy$1(()=>{const r=getExactlyOneTensor(e);return max$4(r,1)})}}GlobalMaxPooling1D.className="GlobalMaxPooling1D",registerClass$1(GlobalMaxPooling1D);class GlobalPooling2D extends Layer{constructor(e){super(e),this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,checkDataFormat(this.dataFormat),this.inputSpec=[new InputSpec({ndim:4})]}computeOutputShape(e){return e=e,this.dataFormat==="channelsLast"?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new NotImplementedError}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class GlobalAveragePooling2D extends GlobalPooling2D{call(e,t){return tidy$1(()=>{const r=getExactlyOneTensor(e);return this.dataFormat==="channelsLast"?mean$2(r,[1,2]):mean$2(r,[2,3])})}}GlobalAveragePooling2D.className="GlobalAveragePooling2D",registerClass$1(GlobalAveragePooling2D);class GlobalMaxPooling2D extends GlobalPooling2D{call(e,t){return tidy$1(()=>{const r=getExactlyOneTensor(e);return this.dataFormat==="channelsLast"?max$4(r,[1,2]):max$4(r,[2,3])})}}GlobalMaxPooling2D.className="GlobalMaxPooling2D",registerClass$1(GlobalMaxPooling2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Wrapper extends Layer{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return this.layer!=null?this.layer.trainable:!1}set trainable(e){this.layer!=null&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),this.layer!=null&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,r={}){const s=t.layer,a=deserialize(s,r);delete t.layer;const i={layer:a};return Object.assign(i,t),new e(i)}}class TimeDistributed extends Wrapper{constructor(e){super(e),this.supportsMasking=!0}build(e){if(e=getExactlyOneShape(e),e.length<3)throw new ValueError(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){e=getExactlyOneShape(e);const t=[e[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(t),s=e[1];return[r[0],s].concat(r.slice(1))}call(e,t){return tidy$1(()=>(e=getExactlyOneTensor(e),rnn((i,l)=>[getExactlyOneTensor(this.layer.call(i,t)),[]],e,[],!1,null,null,!1,!0)[1]))}}TimeDistributed.className="TimeDistributed",registerClass$1(TimeDistributed);function checkBidirectionalMergeMode(n){checkStringTypeUnionValue(VALID_BIDIRECTIONAL_MERGE_MODES,"BidirectionalMergeMode",n)}const DEFAULT_BIDIRECTIONAL_MERGE_MODE="concat";class Bidirectional extends Wrapper{constructor(e){super(e);const t=e.layer.getConfig(),r={};r.className=e.layer.getClassName(),r.config=t,this.forwardLayer=deserialize(r),t.goBackwards=t.goBackwards!==!0;const s={};if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=deserialize(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=e.mergeMode===void 0?DEFAULT_BIDIRECTIONAL_MERGE_MODE:e.mergeMode,checkBidirectionalMergeMode(this.mergeMode),e.weights)throw new NotImplementedError("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,this.forwardLayer!=null&&(this.forwardLayer.trainable=e),this.backwardLayer!=null&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,r=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,r)),this.backwardLayer.setWeights(e.slice(r))}computeOutputShape(e){let t=this.forwardLayer.computeOutputShape(e);Array.isArray(t)&&Array.isArray(t[0])||(t=[t]),t=t;let r,s,a;return this.returnState&&(a=t.slice(1)),r=t[0],r=r,this.mergeMode==="concat"?(r[r.length-1]*=2,s=[r]):this.mergeMode==null?s=[r,r.slice()]:s=[r],this.returnState?this.mergeMode==null?s.concat(a).concat(a.slice()):[r].concat(a).concat(a.slice()):singletonOrArray(s)}apply(e,t){let r=t==null?null:t.initialState,s=t==null?null:t.constants;t==null&&(t={});const a=standardizeArgs(e,r,s,this.numConstants);if(e=a.inputs,r=a.initialState,s=a.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(r==null||r.length===0)&&s==null)return super.apply(e,t);const i=[],l=[];if(r!=null){const h=r.length;if(h%2>0)throw new ValueError("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=r,i.push(...r);const f=r.map(c=>new InputSpec({shape:c.shape}));this.forwardLayer.stateSpec=f.slice(0,h/2),this.backwardLayer.stateSpec=f.slice(h/2),l.push(...f)}if(s!=null)throw new NotImplementedError("Support for constants in Bidirectional layers is not implemented yet.");const u=i[0]instanceof SymbolicTensor;for(const h of i)if(h instanceof SymbolicTensor!==u)throw new ValueError("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(u){const h=[e].concat(i),f=this.inputSpec.concat(l),c=this.inputSpec;this.inputSpec=f;const o=super.apply(h,t);return this.inputSpec=c,o}else return super.apply(e,t)}call(e,t){return tidy$1(()=>{const r=t.initialState;let s,a;if(r==null)s=this.forwardLayer.call(e,t),a=this.backwardLayer.call(e,t);else{const u=r.slice(0,r.length/2),h=r.slice(r.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:u})),a=this.backwardLayer.call(e,Object.assign(t,{initialState:h}))}let i;this.returnState&&(Array.isArray(s)&&(i=s.slice(1).concat(a.slice(1))),s=s[0],a=a[0]),this.returnSequences&&(a=reverse$3(a,1));let l;return this.mergeMode==="concat"?l=concatenate([s,a]):this.mergeMode==="sum"?l=add$3(s,a):this.mergeMode==="ave"?l=mul$1(.5,add$3(s,a)):this.mergeMode==="mul"?l=mul$1(s,a):this.mergeMode==null&&(l=[s,a]),this.returnState?this.mergeMode==null?l.concat(i):[l].concat(i):l})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){nameScope(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),nameScope(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){Array.isArray(t)&&(t=t[0]);let r;if(this.returnSequences?this.mergeMode==null?r=[t,t]:r=t:this.mergeMode==null?r=[null,null]:r=null,this.returnState){const a=this.forwardLayer.states.map(i=>null);return Array.isArray(r)?r.concat(a).concat(a):[r].concat(a).concat(a)}else return r}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),this.forwardLayer!=null&&this.forwardLayer.setFastWeightInitDuringBuild(e),this.backwardLayer!=null&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const r=deserialize(t.layer);if(delete t.layer,t.numConstants!=null)throw new NotImplementedError("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=r,new e(s)}}Bidirectional.className="Bidirectional",registerClass$1(Bidirectional);/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Rescaling extends Layer{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return tidy$1(()=>(e=getExactlyOneTensor(e),e.dtype!=="float32"&&(e=cast$4(e,"float32")),add$3(mul$1(e,this.scale),this.offset)))}}Rescaling.className="Rescaling",registerClass$1(Rescaling);/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const{resizeBilinear:resizeBilinear$3,cropAndResize:cropAndResize$3}=image$1;class CenterCrop extends Layer{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,t,r,s,a,i,l,u){return tidy$1(()=>{let h,f=!1;const c=t/i,o=r/l,d=(s+t)/i,m=(a+r)/l,g=[c,o,d,m],y=[];e.rank===3?(f=!0,h=stack([e])):h=e;for(let v=0;v<h.shape[0];v++)y.push(g);const $=tensor(y,[y.length,4]),b=range$4(0,y.length,1,"int32"),w=cropAndResize$3(h,$,b,[s,a],"nearest");return cast$4(f?getExactlyOneTensor(unstack(w)):w,u)})}upsize(e,t,r,s){return tidy$1(()=>{const a=resizeBilinear$3(e,[t,r]);return cast$4(a,s)})}call(e,t){return tidy$1(()=>{const r=getExactlyOneTensor(e),s=r.dtype,a=r.shape,i=a[a.length-3],l=a[a.length-2];let u=0;i!==this.height&&(u=Math.floor((i-this.height)/2));let h=0;return l!==this.width&&(h=Math.floor((l-this.width)/2),h===0&&(h=1)),u>=0&&h>=0?this.centerCrop(r,u,h,this.height,this.width,i,l,s):this.upsize(e,this.height,this.width,s)})}getConfig(){const e={height:this.height,width:this.width},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){e=getExactlyOneShape(e);const t=e.length-3,r=e.length-2;return e[t]=this.height,e[r]=this.width,e}}CenterCrop.className="CenterCrop",registerClass$1(CenterCrop);/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function encodeCategoricalInputs(n,e,t,r){let s=getExactlyOneTensor(n);if(s.dtype!=="int32"&&(s=cast$4(s,"int32")),e==="int")return s;const a=s.shape;if(s.rank===0&&(s=expandDims$4(s,-1)),e==="oneHot"&&s.shape[s.shape.length-1]!==1&&(s=expandDims$4(s,-1)),s.rank>2)throw new ValueError(`When outputMode is not int, maximum output rank is 2 Received outputMode ${e} and input shape ${a} which would result in output rank ${s.rank}.`);const i=["multiHot","oneHot"].includes(e),l=s;let u;if(typeof r<"u"&&e==="count"?u=denseBincount$3(l,r,t,i):u=denseBincount$3(l,[],t,i),e!=="tfIdf")return u;if(r)return mul$1(u,r);throw new ValueError("When outputMode is 'tfIdf', weights must be provided.")}/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class CategoryEncoding extends Layer{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return e=getExactlyOneShape(e),e==null?[this.numTokens]:this.outputMode==="oneHot"&&e[e.length-1]!==1?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return tidy$1(()=>{e=getExactlyOneTensor(e),e.dtype!=="int32"&&(e=cast$4(e,"int32"));let r;if(typeof t.countWeights<"u"){if(this.outputMode!=="count")throw new ValueError(`countWeights is not used when outputMode !== count.
              Received countWeights=${t.countWeights}`);r=getExactlyOneTensor(t.countWeights)}const s=max$4(e),a=min$4(e),i=greater$3(this.numTokens,s).bufferSync().get(0),l=greaterEqual$3(a,0).bufferSync().get(0);if(!(i&&l))throw new ValueError(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return encodeCategoricalInputs(e,this.outputMode,this.numTokens,r)})}}CategoryEncoding.className="CategoryEncoding",registerClass$1(CategoryEncoding);/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const INTERPOLATION_KEYS$1=["bilinear","nearest"],INTERPOLATION_METHODS$1=new Set(INTERPOLATION_KEYS$1);class Resizing extends Layer{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation)if(INTERPOLATION_METHODS$1.has(e.interpolation))this.interpolation=e.interpolation;else throw new ValueError(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);else this.interpolation="bilinear";this.cropToAspectRatio=!!e.cropToAspectRatio}computeOutputShape(e){e=getExactlyOneShape(e);const t=e[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return tidy$1(()=>{const r=[this.height,this.width];if(this.interpolation==="bilinear")return image$1.resizeBilinear(e,r,!this.cropToAspectRatio);if(this.interpolation==="nearest")return image$1.resizeNearestNeighbor(e,r,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...INTERPOLATION_METHODS$1]} are supported`)})}}Resizing.className="Resizing",registerClass$1(Resizing);/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class RandomSeed{constructor(e){this.seed=e}next(){if(this.seed!==void 0)return this.seed++}}RandomSeed.className="RandomSeed";/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class BaseRandomLayer extends Layer{constructor(e){super(e),this.randomGenerator=new RandomSeed(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},t=super.getConfig();return Object.assign(e,t),e}}BaseRandomLayer.className="BaseRandomLayer";/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const INTERPOLATION_KEYS=["bilinear","nearest"],INTERPOLATION_METHODS=new Set(INTERPOLATION_KEYS);class RandomWidth extends BaseRandomLayer{constructor(e){super(e);const{factor:t,interpolation:r="bilinear"}=e;if(this.factor=t,Array.isArray(this.factor)&&this.factor.length===2)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else if(!Array.isArray(this.factor)&&this.factor>0)this.widthLower=-this.factor,this.widthUpper=this.factor;else throw new ValueError(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);if(this.widthLower<-1||this.widthUpper<-1)throw new ValueError(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new ValueError(`factor cannot have upper bound less than lower bound.
        Got upper bound: ${this.widthUpper}.
        Got lower bound: ${this.widthLower}
      `);if(r)if(INTERPOLATION_METHODS.has(r))this.interpolation=r;else throw new ValueError(`Invalid interpolation parameter: ${r} is not implemented`)}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){e=getExactlyOneShape(e);const t=e[2];return[this.imgHeight,-1,t]}call(e,t){return tidy$1(()=>{const r=getExactlyOneTensor(e);this.imgHeight=r.shape[r.shape.length-3];const s=r.shape[r.shape.length-2];this.widthFactor=randomUniform([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let a=this.widthFactor.dataSync()[0]*s;a=Math.round(a);const i=[this.imgHeight,a];switch(this.interpolation){case"bilinear":return image$1.resizeBilinear(e,i);case"nearest":return image$1.resizeNearestNeighbor(e,i);default:throw new Error(`Interpolation is ${this.interpolation}
          but only ${[...INTERPOLATION_METHODS]} are supported`)}})}}RandomWidth.className="RandomWidth",registerClass$1(RandomWidth);/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV$4=env$1();ENV$4.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,n=>{n&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */var DataType;(function(n){n[n.DT_INVALID=0]="DT_INVALID",n[n.DT_FLOAT=1]="DT_FLOAT",n[n.DT_DOUBLE=2]="DT_DOUBLE",n[n.DT_INT32=3]="DT_INT32",n[n.DT_UINT8=4]="DT_UINT8",n[n.DT_INT16=5]="DT_INT16",n[n.DT_INT8=6]="DT_INT8",n[n.DT_STRING=7]="DT_STRING",n[n.DT_COMPLEX64=8]="DT_COMPLEX64",n[n.DT_INT64=9]="DT_INT64",n[n.DT_BOOL=10]="DT_BOOL",n[n.DT_QINT8=11]="DT_QINT8",n[n.DT_QUINT8=12]="DT_QUINT8",n[n.DT_QINT32=13]="DT_QINT32",n[n.DT_BFLOAT16=14]="DT_BFLOAT16",n[n.DT_QINT16=15]="DT_QINT16",n[n.DT_QUINT16=16]="DT_QUINT16",n[n.DT_UINT16=17]="DT_UINT16",n[n.DT_COMPLEX128=18]="DT_COMPLEX128",n[n.DT_HALF=19]="DT_HALF",n[n.DT_RESOURCE=20]="DT_RESOURCE",n[n.DT_VARIANT=21]="DT_VARIANT",n[n.DT_UINT32=22]="DT_UINT32",n[n.DT_UINT64=23]="DT_UINT64",n[n.DT_FLOAT_REF=101]="DT_FLOAT_REF",n[n.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",n[n.DT_INT32_REF=103]="DT_INT32_REF",n[n.DT_UINT8_REF=104]="DT_UINT8_REF",n[n.DT_INT16_REF=105]="DT_INT16_REF",n[n.DT_INT8_REF=106]="DT_INT8_REF",n[n.DT_STRING_REF=107]="DT_STRING_REF",n[n.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",n[n.DT_INT64_REF=109]="DT_INT64_REF",n[n.DT_BOOL_REF=110]="DT_BOOL_REF",n[n.DT_QINT8_REF=111]="DT_QINT8_REF",n[n.DT_QUINT8_REF=112]="DT_QUINT8_REF",n[n.DT_QINT32_REF=113]="DT_QINT32_REF",n[n.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",n[n.DT_QINT16_REF=115]="DT_QINT16_REF",n[n.DT_QUINT16_REF=116]="DT_QUINT16_REF",n[n.DT_UINT16_REF=117]="DT_UINT16_REF",n[n.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",n[n.DT_HALF_REF=119]="DT_HALF_REF",n[n.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",n[n.DT_VARIANT_REF=121]="DT_VARIANT_REF",n[n.DT_UINT32_REF=122]="DT_UINT32_REF",n[n.DT_UINT64_REF=123]="DT_UINT64_REF"})(DataType||(DataType={}));var SaverDef;(function(n){(function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"})(n.CheckpointFormatVersion||(n.CheckpointFormatVersion={}))})(SaverDef||(SaverDef={}));/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CUSTOM_OPS={};function getRegisteredOp(n){return CUSTOM_OPS[n]}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getParamValue(n,e,t,r,s){const a=e.inputParams[n];if(a&&a.inputIndexStart!==void 0){const l=a.inputIndexStart,u=a.inputIndexEnd===0?void 0:a.inputIndexEnd===void 0?l+1:a.inputIndexEnd,h=l<0?e.inputNames.length+l:l;if(a.type==="tensor")return getTensor(e.inputNames[h],t,r,s);if(a.type==="tensors"){const o=e.inputs.slice(l,u);return e.inputNames.slice(l,u).filter((m,g)=>{var y;return((y=o[g])===null||y===void 0?void 0:y.op)!=="NoOp"}).map(m=>getTensor(m,t,r,s))}const f=getTensor(e.inputNames[h],t,r,s),c=f.dataSync();return a.type==="number"?c[0]:toNestedArray$1(f.shape,c)}const i=e.attrParams[n];return i&&i.value}function getTensor(n,e,t,r){const[s,a]=parseNodeName(n,t);if(r!=null){const l=r.getHashTableHandleByName(s);if(l!=null)return l}const i=t.currentContextIds.find(l=>!!e[getNodeNameWithContextId(s,l)]);return i!==void 0?e[getNodeNameWithContextId(s,i)][a]:void 0}function getTensorsForCurrentContext(n,e,t){return e[getNodeNameWithContextId(n,t.currentContextId)]}function getNodeNameAndIndex(n,e){const[t,r,s]=parseNodeName(n,e);return[getNodeNameWithContextId(t,e&&e.currentContextId),r,s]}function getNodeNameWithContextId(n,e){return e?`${n}-${e}`:n}function parseNodeName(n,e){if(n==="")return["",0,void 0];const t=e!=null&&e.parseNodeNameCache!=null;if(t){const a=e.parseNodeNameCache.get(n);if(a!=null)return a}const r=n.split(":");let s;if(r.length===1)s=[n,0,void 0];else{const a=r[0],i=r.length===3?r[1]:void 0,l=Number(r[r.length-1]);s=[a,l,i]}return t&&e.parseNodeNameCache.set(n,s),s}function getPadding(n,e,t){let r=getParamValue("pad",n,e,t);if(r==="explicit"){r=getParamValue("explicitPaddings",n,e,t);const s=[[0,0],[0,0],[0,0],[0,0]];for(let a=0;a<4;a++)s[a][0]=r[a*2],s[a][1]=r[a*2+1];return s}return r}function cloneTensor(n){return n.kept?n:clone$1(n)}/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$i=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var arithmetic=Object.freeze({__proto__:null,json:json$i});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$h=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var basicMath=Object.freeze({__proto__:null,json:json$h});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$g=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var control=Object.freeze({__proto__:null,json:json$g});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$f=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var convolution=Object.freeze({__proto__:null,json:json$f});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$e=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var creation=Object.freeze({__proto__:null,json:json$e});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$d=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var dynamic=Object.freeze({__proto__:null,json:json$d});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$c=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var evaluation=Object.freeze({__proto__:null,json:json$c});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$b=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var graph=Object.freeze({__proto__:null,json:json$b});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$a=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var hashTable=Object.freeze({__proto__:null,json:json$a});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$9=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var image=Object.freeze({__proto__:null,json:json$9});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$8=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}];var logical=Object.freeze({__proto__:null,json:json$8});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$7=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}];var matrices=Object.freeze({__proto__:null,json:json$7});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$6=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}];var normalization=Object.freeze({__proto__:null,json:json$6});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$5=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var reduction=Object.freeze({__proto__:null,json:json$5});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$4=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var sliceJoin=Object.freeze({__proto__:null,json:json$4});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$3=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var sparse=Object.freeze({__proto__:null,json:json$3});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$2=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var spectral=Object.freeze({__proto__:null,json:json$2});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$1=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var string=Object.freeze({__proto__:null,json:json$1});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var transformation=Object.freeze({__proto__:null,json});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class OperationMapper{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[arithmetic,basicMath,control,convolution,creation,dynamic,evaluation,graph,hashTable,image,logical,matrices,normalization,reduction,sliceJoin,sparse,spectral,string,transformation],t=[].concat(...e.map(r=>r.json));this.opMappers=t.reduce((r,s)=>(r[s.tfOpName]=s,r),{})}transformGraph(e,t={}){const r=e.node,s=[],a=[],i=[],l=r.reduce((g,y)=>(g[y.name]=this.mapNode(y),y.op.startsWith("Placeholder")?s.push(g[y.name]):y.op==="Const"?a.push(g[y.name]):(y.input==null||y.input.length===0)&&i.push(g[y.name]),g),{});let u=[];const h=[];let f={},c={};t!=null&&(f=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const o=Object.keys(l);o.forEach(g=>{const y=l[g];y.inputNames.forEach(($,b)=>{const[x,,w]=getNodeNameAndIndex($),v=l[x];if(v.outputs!=null){const S=v.outputs.indexOf(w);if(S!==-1){const T=`${x}:${S}`;y.inputNames[b]=T}}y.inputs.push(v),v.children.push(y)})}),Object.keys(c).length===0?o.forEach(g=>{const y=l[g];y.children.length===0&&h.push(y)}):Object.keys(c).forEach(g=>{const[y]=getNodeNameAndIndex(g),$=l[y];$!=null&&($.signatureKey=c[g],h.push($))}),Object.keys(f).length>0?Object.keys(f).forEach(g=>{const[y]=getNodeNameAndIndex(g),$=l[y];$&&($.signatureKey=f[g],u.push($))}):u=s;let d={};e.library!=null&&e.library.function!=null&&(d=e.library.function.reduce((g,y)=>(g[y.signature.name]=this.mapFunction(y),g),{}));const m={nodes:l,inputs:u,outputs:h,weights:a,placeholders:s,signature:t,functions:d};return i.length>0&&(m.initNodes=i),m}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,r)=>(t[e[r].name]=r,t),{})}mapNode(e){const t=getRegisteredOp(e.op)||this.opMappers[e.op]||{};e.attr==null&&(e.attr={});const r={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(s=>s.startsWith("^")?s.slice(1):s),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return t.inputs!=null&&(r.inputParams=t.inputs.reduce((s,a)=>(s[a.name]={type:a.type,inputIndexStart:a.start,inputIndexEnd:a.end},s),{})),t.attrs!=null&&(r.attrParams=t.attrs.reduce((s,a)=>{const i=a.type;let l;switch(a.type){case"string":l=getStringParam(e.attr,a.tfName,a.defaultValue),l===void 0&&a.tfDeprecatedName&&(l=getStringParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"string[]":l=getStringArrayParam(e.attr,a.tfName,a.defaultValue),l===void 0&&a.tfDeprecatedName&&(l=getStringArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"number":l=getNumberParam(e.attr,a.tfName,a.defaultValue||0),l===void 0&&a.tfDeprecatedName&&(l=getNumberParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"number[]":l=getNumericArrayParam(e.attr,a.tfName,a.defaultValue),l===void 0&&a.tfDeprecatedName&&(l=getNumericArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool":l=getBoolParam(e.attr,a.tfName,a.defaultValue),l===void 0&&a.tfDeprecatedName&&(l=getBoolParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool[]":l=getBoolArrayParam(e.attr,a.tfName,a.defaultValue),l===void 0&&a.tfDeprecatedName&&(l=getBoolArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape":l=getTensorShapeParam(e.attr,a.tfName,a.defaultValue),l===void 0&&a.tfDeprecatedName&&(l=getTensorShapeParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape[]":l=getTensorShapeArrayParam(e.attr,a.tfName,a.defaultValue),l===void 0&&a.tfDeprecatedName&&(l=getTensorShapeArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype":l=getDtypeParam(e.attr,a.tfName,a.defaultValue),l===void 0&&a.tfDeprecatedName&&(l=getDtypeParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype[]":l=getDtypeArrayParam(e.attr,a.tfName,a.defaultValue),l===void 0&&a.tfDeprecatedName&&(l=getDtypeArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"func":l=getFuncParam(e.attr,a.tfName,a.defaultValue),l===void 0&&a.tfDeprecatedName&&(l=getFuncParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${a.type} for op: ${e.op}`)}return s[a.name]={value:l,type:i},s},{})),r}mapFunction(e){const t=e.nodeDef,r=[],s=[];let a={};t!=null&&(a=t.reduce((c,o)=>(c[o.name]=this.mapNode(o),o.op==="Const"&&s.push(c[o.name]),c),{}));const i=[],l=[];e.signature.inputArg.forEach(c=>{const[o]=getNodeNameAndIndex(c.name),d={name:o,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:parseDtypeParam(c.type),type:"dtype"}},children:[]};d.signatureKey=c.name,i.push(d),a[o]=d}),Object.keys(a).forEach(c=>{const o=a[c];o.inputNames.forEach((d,m)=>{const[g,,y]=getNodeNameAndIndex(d),$=a[g];if($.outputs!=null){const b=$.outputs.indexOf(y);if(b!==-1){const x=`${g}:${b}`;o.inputNames[m]=x}}o.inputs.push($),$.children.push(o)})});const h=e.ret;e.signature.outputArg.forEach(c=>{const[o,d]=getNodeNameAndIndex(h[c.name]),m=a[o];m!=null&&(m.defaultOutput=d,l.push(m))});const f=this.mapArgsToSignature(e);return{nodes:a,inputs:i,outputs:l,weights:s,placeholders:r,signature:f}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((t,r)=>(t[r.name]=this.mapArgToTensorInfo(r),t),{}),outputs:e.signature.outputArg.reduce((t,r)=>(t[r.name]=this.mapArgToTensorInfo(r,e.ret),t),{})}}mapArgToTensorInfo(e,t){let r=e.name;return t!=null&&(r=t[r]),{name:r,dtype:e.type}}}function decodeBase64(n){const e=env$1().global;if(typeof e.atob<"u")return e.atob(n);if(typeof Buffer<"u")return new Buffer(n,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}function parseStringParam(n,e){const t=Array.isArray(n)?String.fromCharCode.apply(null,n):decodeBase64(n);return e?t:t.toLowerCase()}function getStringParam(n,e,t,r=!1){const s=n[e];return s!=null?parseStringParam(s.s,r):t}function getBoolParam(n,e,t){const r=n[e];return r?r.b:t}function getNumberParam(n,e,t){const r=n[e]||{},s=r.i!=null?r.i:r.f!=null?r.f:t;return typeof s=="number"?s:parseInt(s,10)}function parseDtypeParam(n){switch(typeof n=="string"&&(n=DataType[n]),n){case DataType.DT_FLOAT:case DataType.DT_HALF:return"float32";case DataType.DT_INT32:case DataType.DT_INT64:case DataType.DT_INT8:case DataType.DT_UINT8:return"int32";case DataType.DT_BOOL:return"bool";case DataType.DT_DOUBLE:return"float32";case DataType.DT_STRING:return"string";default:return null}}function getFuncParam(n,e,t){const r=n[e];return r&&r.func?r.func.name:t}function getDtypeParam(n,e,t){const r=n[e];return r&&r.type?parseDtypeParam(r.type):t}function getDtypeArrayParam(n,e,t){const r=n[e];return r&&r.list&&r.list.type?r.list.type.map(s=>parseDtypeParam(s)):t}function parseTensorShapeParam(n){if(!n.unknownRank)return n.dim!=null?n.dim.map(e=>typeof e.size=="number"?e.size:parseInt(e.size,10)):[]}function getTensorShapeParam(n,e,t){const r=n[e];return r&&r.shape?parseTensorShapeParam(r.shape):t}function getNumericArrayParam(n,e,t){const r=n[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(s=>typeof s=="number"?s:parseInt(s,10)):t}function getStringArrayParam(n,e,t,r=!1){const s=n[e];return s&&s.list&&s.list.s?s.list.s.map(a=>parseStringParam(a,r)):t}function getTensorShapeArrayParam(n,e,t){const r=n[e];return r&&r.list&&r.list.shape?r.list.shape.map(s=>parseTensorShapeParam(s)):t}function getBoolArrayParam(n,e,t){const r=n[e];return r&&r.list&&r.list.b?r.list.b:t}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class NodeValueImpl{constructor(e,t,r){this.node=e,this.tensorMap=t,this.context=r,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(s=>this.getInput(s)),e.rawAttrs!=null&&(this.attrs=Object.keys(e.rawAttrs).reduce((s,a)=>(s[a]=this.getAttr(a),s),{}))}getInput(e){return getTensor(e,this.tensorMap,this.context)}getAttr(e,t){const r=this.node.rawAttrs[e];if(r.tensor!=null)return getTensor(e,this.tensorMap,this.context);if(r.i!=null||r.f!=null)return getNumberParam(this.node.rawAttrs,e,t);if(r.s!=null)return getStringParam(this.node.rawAttrs,e,t);if(r.b!=null)return getBoolParam(this.node.rawAttrs,e,t);if(r.shape!=null)return getTensorShapeParam(this.node.rawAttrs,e,t);if(r.type!=null)return getDtypeParam(this.node.rawAttrs,e,t);if(r.list!=null){if(r.list.i!=null||r.list.f!=null)return getNumericArrayParam(this.node.rawAttrs,e,t);if(r.list.s!=null)return getStringArrayParam(this.node.rawAttrs,e,t);if(r.list.shape!=null)return getTensorShapeArrayParam(this.node.rawAttrs,e,t);if(r.list.b!=null)return getBoolArrayParam(this.node.rawAttrs,e,t);if(r.list.type!=null)return getDtypeArrayParam(this.node.rawAttrs,e,t)}return t}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var tfOps=Object.freeze({__proto__:null,OP_SCOPE_SUFFIX:OP_SCOPE_SUFFIX$1,abs:abs$4,acos:acos$3,acosh:acosh$3,add:add$3,addN:addN$3,all:all$3,any:any$3,argMax:argMax$3,argMin:argMin$3,asin:asin$3,asinh:asinh$3,atan:atan$3,atan2:atan2$3,atanh:atanh$3,avgPool:avgPool$3,avgPool3d,basicLSTMCell,batchNorm:batchNorm$2,batchNorm2d,batchNorm3d,batchNorm4d,batchToSpaceND:batchToSpaceND$3,bincount:bincount$3,bitwiseAnd:bitwiseAnd$2,booleanMaskAsync,broadcastArgs:broadcastArgs$3,broadcastTo:broadcastTo$1,buffer:buffer$1,cast:cast$5,ceil:ceil$3,clipByValue:clipByValue$3,clone:clone$1,complex:complex$4,concat:concat$3,concat1d,concat2d,concat3d,concat4d,conv1d,conv2d:conv2d$3,conv2dTranspose,conv3d,conv3dTranspose,cos:cos$3,cosh:cosh$3,cosineWindow,cumprod:cumprod$3,cumsum:cumsum$3,denseBincount:denseBincount$3,depthToSpace:depthToSpace$3,depthwiseConv2d:depthwiseConv2d$2,diag:diag$3,dilation2d,div:div$2,divNoNan,dot:dot$1,dropout:dropout$1,einsum:einsum$3,elu:elu$4,enclosingPowerOfTwo,ensureShape,equal:equal$3,erf:erf$3,euclideanNorm,exp:exp$3,expandDims:expandDims$4,expm1:expm1$3,eye,fft:fft$3,fill:fill$4,floor:floor$3,floorDiv:floorDiv$4,fused:fused_ops,gather:gather$1,gatherND,greater:greater$3,greaterEqual:greaterEqual$3,ifft:ifft$3,imag:imag$3,image:image$1,inTopKAsync,irfft,isFinite:isFinite$4,isInf:isInf$3,isNaN:isNaN$4,leakyRelu:leakyRelu$3,less:less$3,lessEqual:lessEqual$3,linalg,linspace,localResponseNormalization,log:log$3,log1p:log1p$3,logSigmoid,logSoftmax,logSumExp,logicalAnd:logicalAnd$3,logicalNot:logicalNot$3,logicalOr:logicalOr$3,logicalXor,losses,lowerBound:lowerBound$1,matMul:matMul$1,max:max$4,maxPool:maxPool$3,maxPool3d:maxPool3d$2,maxPoolWithArgmax:maxPoolWithArgmax$1,maximum:maximum$4,mean:mean$2,meshgrid,min:min$4,minimum:minimum$3,mirrorPad:mirrorPad$1,mod:mod$3,moments,movingAverage,mul:mul$1,multiRNNCell,multinomial:multinomial$3,neg:neg$3,norm,notEqual:notEqual$3,oneHot:oneHot$3,ones:ones$1,onesLike:onesLike$3,op:op$1,outerProduct,pad,pad1d,pad2d,pad3d,pad4d,pool:pool$1,pow:pow$4,prelu:prelu$3,print:print$1,prod:prod$3,raggedGather:raggedGather$2,raggedRange:raggedRange$2,raggedTensorToTensor:raggedTensorToTensor$2,rand,randomGamma,randomNormal:randomNormal$1,randomStandardNormal,randomUniform,randomUniformInt,range:range$4,real:real$3,reciprocal:reciprocal$3,relu:relu$3,relu6:relu6$3,reshape:reshape$5,reverse:reverse$3,reverse1d,reverse2d,reverse3d,reverse4d,rfft,round:round$4,rsqrt:rsqrt$3,scalar:scalar$1,scatterND,searchSorted:searchSorted$3,selu:selu$3,separableConv2d,setdiff1dAsync,sigmoid:sigmoid$3,sign:sign$3,signal,sin:sin$3,sinh:sinh$3,slice:slice$3,slice1d,slice2d,slice3d,slice4d,softmax:softmax$3,softplus:softplus$3,spaceToBatchND:spaceToBatchND$3,sparse:sparse$1,sparseToDense:sparseToDense$3,spectral:spectral$1,split:split$3,sqrt:sqrt$4,square:square$3,squaredDifference:squaredDifference$3,squeeze,stack,step:step$3,stridedSlice:stridedSlice$3,string:string$1,sub:sub$4,sum:sum$4,tan:tan$3,tanh:tanh$3,tensor,tensor1d,tensor2d,tensor3d,tensor4d,tensor5d,tensor6d,tensorScatterUpdate:tensorScatterUpdate$3,tile:tile$4,topk,transpose:transpose$3,truncatedNormal,unique:unique$3,unsortedSegmentSum:unsortedSegmentSum$3,unstack,upperBound:upperBound$1,variable,where,whereAsync,zeros:zeros$2,zerosLike:zerosLike$4});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$k=(n,e,t,r=tfOps)=>{switch(n.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"AddN":return[r.addN(getParamValue("tensors",n,e,t))];case"FloorMod":case"Mod":return[r.mod(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"Mul":return[r.mul(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"RealDiv":case"Div":return[r.div(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"DivNoNan":return[r.divNoNan(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"FloorDiv":return[r.floorDiv(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"Sub":return[r.sub(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"Minimum":return[r.minimum(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"Maximum":return[r.maximum(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"Pow":return[r.pow(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"SquaredDifference":return[r.squaredDifference(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$j=(n,e,t,r=tfOps)=>{switch(n.op){case"Abs":case"ComplexAbs":return[r.abs(getParamValue("x",n,e,t))];case"Acos":return[r.acos(getParamValue("x",n,e,t))];case"Acosh":return[r.acosh(getParamValue("x",n,e,t))];case"Asin":return[r.asin(getParamValue("x",n,e,t))];case"Asinh":return[r.asinh(getParamValue("x",n,e,t))];case"Atan":return[r.atan(getParamValue("x",n,e,t))];case"Atan2":return[r.atan2(getParamValue("x",n,e,t),getParamValue("y",n,e,t))];case"Atanh":return[r.atanh(getParamValue("x",n,e,t))];case"Ceil":return[r.ceil(getParamValue("x",n,e,t))];case"Complex":return[r.complex(getParamValue("real",n,e,t),getParamValue("imag",n,e,t))];case"Cos":return[r.cos(getParamValue("x",n,e,t))];case"Cosh":return[r.cosh(getParamValue("x",n,e,t))];case"Elu":return[r.elu(getParamValue("x",n,e,t))];case"Erf":return[r.erf(getParamValue("x",n,e,t))];case"Exp":return[r.exp(getParamValue("x",n,e,t))];case"Expm1":return[r.expm1(getParamValue("x",n,e,t))];case"Floor":return[r.floor(getParamValue("x",n,e,t))];case"Log":return[r.log(getParamValue("x",n,e,t))];case"Log1p":return[r.log1p(getParamValue("x",n,e,t))];case"Imag":return[r.imag(getParamValue("x",n,e,t))];case"Neg":return[r.neg(getParamValue("x",n,e,t))];case"Reciprocal":return[r.reciprocal(getParamValue("x",n,e,t))];case"Real":return[r.real(getParamValue("x",n,e,t))];case"Relu":return[r.relu(getParamValue("x",n,e,t))];case"Round":return[r.round(getParamValue("x",n,e,t))];case"Selu":return[r.selu(getParamValue("x",n,e,t))];case"Sigmoid":return[r.sigmoid(getParamValue("x",n,e,t))];case"Sin":return[r.sin(getParamValue("x",n,e,t))];case"Sign":return[r.sign(getParamValue("x",n,e,t))];case"Sinh":return[r.sinh(getParamValue("x",n,e,t))];case"Softplus":return[r.softplus(getParamValue("x",n,e,t))];case"Sqrt":return[r.sqrt(getParamValue("x",n,e,t))];case"Square":return[r.square(getParamValue("x",n,e,t))];case"Tanh":return[r.tanh(getParamValue("x",n,e,t))];case"Tan":return[r.tan(getParamValue("x",n,e,t))];case"ClipByValue":return[r.clipByValue(getParamValue("x",n,e,t),getParamValue("clipValueMin",n,e,t),getParamValue("clipValueMax",n,e,t))];case"Relu6":return[r.relu6(getParamValue("x",n,e,t))];case"Rsqrt":return[r.rsqrt(getTensor(n.inputNames[0],e,t))];case"LeakyRelu":return[r.leakyRelu(getParamValue("x",n,e,t),getParamValue("alpha",n,e,t))];case"Prelu":return[r.prelu(getParamValue("x",n,e,t),getParamValue("alpha",n,e,t))];case"IsNan":return[r.isNaN(getTensor(n.inputNames[0],e,t))];case"IsInf":return[r.isInf(getTensor(n.inputNames[0],e,t))];case"IsFinite":return[r.isFinite(getTensor(n.inputNames[0],e,t))];default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function assertShapesMatchAllowUndefinedSize(n,e,t=""){if(!(typeof n=="number"||typeof e=="number")){assert$2(n.length===e.length,()=>t+` Shapes ${n} and ${e} must match`);for(let r=0;r<n.length;r++){const s=n[r],a=e[r];assert$2(s<0||a<0||s===a,()=>t+` Shapes ${n} and ${e} must match`)}}}function fullDefinedShape(n){return!(typeof n=="number"||n.some(e=>e<0))}function inferElementShape(n,e,t){let r=mergeElementShape(n,t);const s=!fullDefinedShape(r);if(s&&e.length===0)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&e.forEach(a=>{r=mergeElementShape(a.shape,r)}),!fullDefinedShape(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function mergeElementShape(n,e){if(typeof n=="number")return e;if(typeof e=="number")return n;if(n.length!==e.length)throw new Error(`Incompatible ranks during merge: ${n} vs. ${e}`);const t=[];for(let r=0;r<n.length;++r){const s=n[r],a=e[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${n} vs. ${e}`);t[r]=s>=0?s:a}return t}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TensorArray{constructor(e,t,r,s,a,i,l){this.name=e,this.dtype=t,this.maxSize=r,this.elementShape=s,this.identicalElementShapes=a,this.dynamicSize=i,this.clearAfterRead=l,this.tensors=[],this.closed_=!1,this.idTensor=scalar$1(0),keep$1(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{(e==null||!e.has(t.tensor.id))&&t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(t=>this.read(t))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const r=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(this.size()===0&&(this.elementShape==null||this.elementShape.length===0)&&(this.elementShape=t.shape),assertShapesMatchAllowUndefinedSize(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),r.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(r.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);r.tensor=t,keep$1(t),r.written=!0,this.tensors[e]=r}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((r,s)=>this.write(r,t[s]))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let s=0;s<this.size();s++)e.push(s)}if(e.length===0)return tensor([],[0].concat(this.elementShape));const r=this.readMany(e);return assertShapesMatchAllowUndefinedSize(this.elementShape,r[0].shape,"TensorArray shape mismatch: "),stack(r,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(this.size()===0)return tensor([],[0].concat(this.elementShape));const t=[];for(let s=0;s<this.size();s++)t.push(s);const r=this.readMany(t);return assertShapesMatchAllowUndefinedSize(this.elementShape,r[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${r[0].shape})`),concat$3(r,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const r=Math.max(...e);if(!this.dynamicSize&&r>=this.maxSize)throw new Error(`Max index must be < array size (${r}  vs. ${this.maxSize})`);this.writeMany(e,unstack(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let r=0;const s=e.map(u=>(r+=u,r));if(r!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${r}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=r===0?0:t.size/r,i=[];tidy$1(()=>{t=reshape$5(t,[1,r,a]);for(let u=0;u<e.length;++u){const f=[0,u===0?0:s[u-1],0],c=[1,e[u],a];i[u]=reshape$5(slice$3(t,f,c),this.elementShape)}return i});const l=[];for(let u=0;u<e.length;u++)l[u]=u;this.writeMany(l,i)}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TensorList{get id(){return this.idTensor.id}constructor(e,t,r,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=r,e?.forEach(a=>{if(r!==a.dtype)throw new Error(`Invalid data types; op elements ${r}, but list elements ${a.dtype}`);assertShapesMatchAllowUndefinedSize(t,a.shape,"TensorList shape mismatch: "),keep$1(a)}),this.idTensor=scalar$1(0),this.maxNumElements=s,keep$1(this.idTensor)}copy(){return new TensorList([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{(e==null||!e.has(t.id))&&t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,r=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(r!==-1&&this.tensors.length!==r)throw new Error(`Operation expected a list with ${r} elements but got a list with ${this.tensors.length} elements.`);assertShapesMatchAllowUndefinedSize(e,this.elementShape,"TensorList shape mismatch: ");const s=inferElementShape(this.elementShape,this.tensors,e);return tidy$1(()=>{const a=this.tensors.map(i=>reshape$5(i,s));return stack(a,0)})}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(this.size()===0)throw new Error("Trying to pop from an empty list.");const r=inferElementShape(this.elementShape,this.tensors,e),s=this.tensors.pop();return s.kept=!1,assertShapesMatchAllowUndefinedSize(s.shape,e,"TensorList shape mismatch: "),reshape$5(s,r)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(assertShapesMatchAllowUndefinedSize(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");keep$1(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(this.maxNumElements!==-1&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new TensorList([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let r=0;r<Math.min(this.tensors.length,e);++r)t.tensors[r]=this.tensors[r];return t}getItem(e,t,r){if(r!==this.elementDtype)throw new Error(`Invalid data types; op elements ${r}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(this.tensors[e]==null)throw new Error(`element at index ${e} is null.`);assertShapesMatchAllowUndefinedSize(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=inferElementShape(this.elementShape,this.tensors,t);return reshape$5(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||this.maxNumElements!==-1&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);assertShapesMatchAllowUndefinedSize(this.elementShape,t.shape,"TensorList shape mismatch: "),keep$1(t),this.tensors[e]!=null&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,r){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);assertShapesMatchAllowUndefinedSize(this.elementShape,r,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=inferElementShape(this.elementShape,this.tensors,r);return e.length===0?tensor([],[0].concat(s)):tidy$1(()=>{const a=e.map(i=>reshape$5(this.tensors[i],s));return stack(a,0)})}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);assertShapesMatchAllowUndefinedSize(this.elementShape,t,"TensorList shape mismatch: ");const r=inferElementShape(this.elementShape,this.tensors,t);return this.size()===0?tensor([],[0].concat(r)):tidy$1(()=>{const s=this.tensors.map(a=>reshape$5(a,r));return concat$3(s,0)})}}function fromTensor(n,e,t){const r=n.dtype;if(n.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${n.shape}`);if(n.dtype!==t)throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${t}`);const s=n.shape.slice(1);assertShapesMatchAllowUndefinedSize(s,e,"TensorList shape mismatch: ");const a=unstack(n);return new TensorList(a,e,r)}function reserve(n,e,t,r){return new TensorList([],n,e,r)}function scatter(n,e,t,r){if(e.length!==n.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${n.shape[0]}`);const s=Math.max(...e);if(r!=null&&r!==-1&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new TensorList([],t,n.dtype,r),i=unstack(n,0);return e.forEach((l,u)=>{a.setItem(l,i[u])}),a}function split$2(n,e,t){let r=0;const s=e.map(f=>(r+=f,r));if(r!==n.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${r}, and tensor's shape is: ${n.shape}`);const a=n.shape.slice(1),i=mergeElementShape(a,t),l=r===0?0:n.size/r,u=tidy$1(()=>{const f=[];n=reshape$5(n,[1,r,l]);for(let c=0;c<e.length;++c){const d=[0,c===0?0:s[c-1],0],m=[1,e[c],l];f[c]=reshape$5(slice$3(n,d,m),i)}return n.dispose(),f}),h=new TensorList([],t,n.dtype,e.length);for(let f=0;f<u.length;f++)h.setItem(f,u[f]);return h}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$i=async(n,e,t)=>{switch(n.op){case"If":case"StatelessIf":{const r=getParamValue("thenBranch",n,e,t),s=getParamValue("elseBranch",n,e,t),a=getParamValue("cond",n,e,t),i=getParamValue("args",n,e,t);return(await a.data())[0]?t.functionMap[r].executeFunctionAsync(i,t.tensorArrayMap,t.tensorListMap):t.functionMap[s].executeFunctionAsync(i,t.tensorArrayMap,t.tensorListMap)}case"While":case"StatelessWhile":{const r=getParamValue("body",n,e,t),s=getParamValue("cond",n,e,t),a=getParamValue("args",n,e,t),i=await t.functionMap[s].executeFunctionAsync(a,t.tensorArrayMap,t.tensorListMap),l=a.map(f=>f.id);let u=await i[0].data();i.forEach(f=>{!f.kept&&l.indexOf(f.id)===-1&&f.dispose()});let h=a;for(;u[0];){const f=h;h=await t.functionMap[r].executeFunctionAsync(h,t.tensorArrayMap,t.tensorListMap);const c=h.map(d=>d.id);f.forEach(d=>{!d.kept&&l.indexOf(d.id)===-1&&c.indexOf(d.id)===-1&&d.dispose()});const o=await t.functionMap[s].executeFunctionAsync(h,t.tensorArrayMap,t.tensorListMap);u=await o[0].data(),o.forEach(d=>{!d.kept&&l.indexOf(d.id)===-1&&c.indexOf(d.id)===-1&&d.dispose()})}return h}case"LoopCond":{const r=getParamValue("pred",n,e,t);return[cloneTensor(r)]}case"Switch":{const r=getParamValue("pred",n,e,t);let s=getParamValue("data",n,e,t);return s.kept||(s=cloneTensor(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=n.inputNames.find(s=>getTensor(s,e,t)!==void 0);if(r){const s=getTensor(r,e,t);return[cloneTensor(s)]}return}case"Enter":{const r=getParamValue("frameName",n,e,t),s=getParamValue("tensor",n,e,t);return t.enterFrame(r),[cloneTensor(s)]}case"Exit":{const r=getParamValue("tensor",n,e,t);return t.exitFrame(),[cloneTensor(r)]}case"NextIteration":{const r=getParamValue("tensor",n,e,t);return t.nextIteration(),[cloneTensor(r)]}case"TensorArrayV3":{const r=getParamValue("size",n,e,t),s=getParamValue("dtype",n,e,t),a=getParamValue("elementShape",n,e,t),i=getParamValue("dynamicSize",n,e,t),l=getParamValue("clearAfterRead",n,e,t),u=getParamValue("identicalElementShapes",n,e,t),h=getParamValue("name",n,e,t),f=new TensorArray(h,s,r,a,u,i,l);return t.addTensorArray(f),[f.idTensor,scalar$1(1)]}case"TensorArrayWriteV3":{const r=getParamValue("tensorArrayId",n,e,t),s=getParamValue("index",n,e,t),a=getParamValue("tensor",n,e,t),i=t.getTensorArray(r.id);return i.write(s,a),[i.idTensor]}case"TensorArrayReadV3":{const r=getParamValue("tensorArrayId",n,e,t),s=getParamValue("index",n,e,t);return[t.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=getParamValue("tensorArrayId",n,e,t),s=getParamValue("indices",n,e,t),a=getParamValue("dtype",n,e,t);return[t.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=getParamValue("tensorArrayId",n,e,t),s=getParamValue("indices",n,e,t),a=getParamValue("tensor",n,e,t),i=t.getTensorArray(r.id);return i.scatter(s,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=getParamValue("tensorArrayId",n,e,t),s=t.getTensorArray(r.id),a=getParamValue("dtype",n,e,t);return[s.concat(a)]}case"TensorArraySplitV3":{const r=getParamValue("tensorArrayId",n,e,t),s=getParamValue("tensor",n,e,t),a=getParamValue("lengths",n,e,t),i=t.getTensorArray(r.id);return i.split(a,s),[i.idTensor]}case"TensorArraySizeV3":{const r=getParamValue("tensorArrayId",n,e,t),s=t.getTensorArray(r.id);return[scalar$1(s.size(),"int32")]}case"TensorArrayCloseV3":{const r=getParamValue("tensorArrayId",n,e,t),s=t.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=getParamValue("tensorListId",n,e,t),s=getParamValue("index",n,e,t),a=getParamValue("tensor",n,e,t),i=t.getTensorList(r.id);return i.setItem(s,a),[i.idTensor]}case"TensorListGetItem":{const r=getParamValue("tensorListId",n,e,t),s=getParamValue("index",n,e,t),a=getParamValue("elementShape",n,e,t),i=getParamValue("elementDType",n,e,t);return[t.getTensorList(r.id).getItem(s,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=getParamValue("indices",n,e,t),s=getParamValue("tensor",n,e,t),a=getParamValue("elementShape",n,e,t),i=getParamValue("numElements",n,e,t),l=scatter(s,r,a,i);return t.addTensorList(l),[l.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=getParamValue("elementShape",n,e,t),s=getParamValue("elementDType",n,e,t);let a;n.op==="TensorListReserve"?a="numElements":a="maxNumElements";const i=getParamValue(a,n,e,t),l=n.op==="TensorListReserve"?-1:i,u=reserve(r,s,i,l);return t.addTensorList(u),[u.idTensor]}case"TensorListGather":{const r=getParamValue("tensorListId",n,e,t),s=getParamValue("indices",n,e,t),a=getParamValue("elementShape",n,e,t),i=getParamValue("elementDType",n,e,t);return[t.getTensorList(r.id).gather(s,i,a)]}case"TensorListStack":{const r=getParamValue("tensorListId",n,e,t),s=getParamValue("elementShape",n,e,t),a=getParamValue("elementDType",n,e,t),i=getParamValue("numElements",n,e,t);return[t.getTensorList(r.id).stack(s,a,i)]}case"TensorListFromTensor":{const r=getParamValue("tensor",n,e,t),s=getParamValue("elementShape",n,e,t),a=getParamValue("elementDType",n,e,t),i=fromTensor(r,s,a);return t.addTensorList(i),[i.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=getParamValue("tensorListId",n,e,t),s=t.getTensorList(r.id),a=getParamValue("dtype",n,e,t),i=getParamValue("elementShape",n,e,t);return[s.concat(a,i)]}case"TensorListPushBack":{const r=getParamValue("tensorListId",n,e,t),s=getParamValue("tensor",n,e,t),a=t.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=getParamValue("tensorListId",n,e,t),s=getParamValue("elementShape",n,e,t),a=getParamValue("elementDType",n,e,t);return[t.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=getParamValue("tensor",n,e,t),s=getParamValue("elementShape",n,e,t),a=getParamValue("lengths",n,e,t),i=split$2(r,a,s);return t.addTensorList(i),[i.idTensor]}case"TensorListLength":{const r=getParamValue("tensorListId",n,e,t),s=t.getTensorList(r.id);return[scalar$1(s.size(),"int32")]}case"TensorListResize":{const r=getParamValue("tensorListId",n,e,t),s=getParamValue("size",n,e,t),i=t.getTensorList(r.id).resize(s);return t.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedConvAndDepthWiseParams(n,e,t){const[r,s]=getParamValue("fusedOps",n,e,t),a=r==="biasadd",i=!a,l=s==="prelu",u=r==="fusedbatchnorm",h=getParamValue("numArgs",n,e,t);if(a){if(l&&h!==2)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!l&&a&&h!==1)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const f=getParamValue("strides",n,e,t),c=getPadding(n,e,t),o=getParamValue("dataFormat",n,e,t).toUpperCase(),d=getParamValue("dilations",n,e,t);let[m,g]=getParamValue("args",n,e,t);i&&(g=m,m=void 0);const y=getParamValue("leakyreluAlpha",n,e,t);return{stride:f,pad:c,dataFormat:o,dilations:d,biasArg:m,preluArg:g,activationFunc:s,leakyreluAlpha:y}}const executeOp$h=(n,e,t,r=tfOps)=>{switch(n.op){case"Conv1D":{const s=getParamValue("stride",n,e,t),a=getParamValue("pad",n,e,t),i=getParamValue("dataFormat",n,e,t).toUpperCase(),l=getParamValue("dilation",n,e,t);return[r.conv1d(getParamValue("x",n,e,t),getParamValue("filter",n,e,t),s,a,i,l)]}case"Conv2D":{const s=getParamValue("strides",n,e,t),a=getPadding(n,e,t),i=getParamValue("dataFormat",n,e,t).toUpperCase(),l=getParamValue("dilations",n,e,t);return[r.conv2d(getParamValue("x",n,e,t),getParamValue("filter",n,e,t),[s[1],s[2]],a,i,[l[1],l[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:i,dilations:l,biasArg:u,preluArg:h,activationFunc:f,leakyreluAlpha:c}=fusedConvAndDepthWiseParams(n,e,t);return[r.fused.conv2d({x:getParamValue("x",n,e,t),filter:getParamValue("filter",n,e,t),strides:[s[1],s[2]],pad:a,dataFormat:i,dilations:[l[1],l[2]],bias:u,activation:f,preluActivationWeights:h,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:i,dilations:l,biasArg:u,preluArg:h,activationFunc:f,leakyreluAlpha:c}=fusedConvAndDepthWiseParams(n,e,t);return[r.fused.depthwiseConv2d({x:getParamValue("x",n,e,t),filter:getParamValue("filter",n,e,t),strides:[s[1],s[2]],pad:a,dataFormat:i,dilations:[l[1],l[2]],bias:u,activation:f,preluActivationWeights:h,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=getParamValue("outputShape",n,e,t),a=getParamValue("strides",n,e,t),i=getPadding(n,e,t);return[r.conv2dTranspose(getParamValue("x",n,e,t),getParamValue("filter",n,e,t),s,[a[1],a[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=getParamValue("strides",n,e,t),a=getPadding(n,e,t),i=getParamValue("dilations",n,e,t),l=getParamValue("dataFormat",n,e,t).toUpperCase();return[r.depthwiseConv2d(getParamValue("input",n,e,t),getParamValue("filter",n,e,t),[s[1],s[2]],a,l,[i[1],i[2]])]}case"Conv3D":{const s=getParamValue("strides",n,e,t),a=getParamValue("pad",n,e,t),i=getParamValue("dataFormat",n,e,t).toUpperCase(),l=getParamValue("dilations",n,e,t);return[r.conv3d(getParamValue("x",n,e,t),getParamValue("filter",n,e,t),[s[1],s[2],s[3]],a,i,[l[1],l[2],l[3]])]}case"AvgPool":{const s=getParamValue("strides",n,e,t),a=getParamValue("pad",n,e,t),i=getParamValue("kernelSize",n,e,t);return[r.avgPool(getParamValue("x",n,e,t),[i[1],i[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=getParamValue("strides",n,e,t),a=getParamValue("pad",n,e,t),i=getParamValue("kernelSize",n,e,t);return[r.maxPool(getParamValue("x",n,e,t),[i[1],i[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=getParamValue("strides",n,e,t),a=getParamValue("pad",n,e,t),i=getParamValue("kernelSize",n,e,t),l=getParamValue("includeBatchInIndex",n,e,t),{result:u,indexes:h}=r.maxPoolWithArgmax(getParamValue("x",n,e,t),[i[1],i[2]],[s[1],s[2]],a,l);return[u,h]}case"AvgPool3D":{const s=getParamValue("strides",n,e,t),a=getParamValue("pad",n,e,t),i=getParamValue("kernelSize",n,e,t);return[r.avgPool3d(getParamValue("x",n,e,t),[i[1],i[2],i[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=getParamValue("strides",n,e,t),a=getParamValue("pad",n,e,t),i=getParamValue("kernelSize",n,e,t);return[r.maxPool3d(getParamValue("x",n,e,t),[i[1],i[2],i[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=getParamValue("strides",n,e,t),a=getParamValue("pad",n,e,t),i=getParamValue("dilations",n,e,t),l=s[1],u=s[2],h=i[1],f=i[2];return[r.dilation2d(getParamValue("x",n,e,t),getParamValue("filter",n,e,t),[l,u],a,[h,f],"NHWC")]}default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$g=(n,e,t,r=tfOps)=>{switch(n.op){case"Fill":{const s=getParamValue("shape",n,e,t),a=getParamValue("dtype",n,e,t),i=getParamValue("value",n,e,t);return[r.fill(s,i,a)]}case"LinSpace":{const s=getParamValue("start",n,e,t),a=getParamValue("stop",n,e,t),i=getParamValue("num",n,e,t);return[r.linspace(s,a,i)]}case"Multinomial":{const s=getParamValue("logits",n,e,t),a=getParamValue("numSamples",n,e,t),i=getParamValue("seed",n,e,t);return[r.multinomial(s,a,i)]}case"OneHot":{const s=getParamValue("indices",n,e,t),a=getParamValue("depth",n,e,t),i=getParamValue("onValue",n,e,t),l=getParamValue("offValue",n,e,t),u=getParamValue("dtype",n,e,t);return[r.oneHot(s,a,i,l,u)]}case"Ones":return[r.ones(getParamValue("shape",n,e,t),getParamValue("dtype",n,e,t))];case"OnesLike":return[r.onesLike(getParamValue("x",n,e,t))];case"RandomStandardNormal":return[r.randomStandardNormal(getParamValue("shape",n,e,t),getParamValue("dtype",n,e,t),getParamValue("seed",n,e,t))];case"RandomUniform":return[r.randomUniform(getParamValue("shape",n,e,t),getParamValue("minval",n,e,t),getParamValue("maxval",n,e,t),getParamValue("dtype",n,e,t))];case"RandomUniformInt":return[r.randomUniformInt(getParamValue("shape",n,e,t),getParamValue("minval",n,e,t),getParamValue("maxval",n,e,t),getParamValue("seed",n,e,t))];case"Range":{const s=getParamValue("start",n,e,t),a=getParamValue("stop",n,e,t),i=getParamValue("step",n,e,t);return[r.range(s,a,i,getParamValue("dtype",n,e,t))]}case"TruncatedNormal":{const s=getParamValue("shape",n,e,t),a=getParamValue("mean",n,e,t),i=getParamValue("stdDev",n,e,t),l=getParamValue("seed",n,e,t);return[r.truncatedNormal(s,a,i,getParamValue("dtype",n,e,t),l)]}case"Zeros":return[r.zeros(getParamValue("shape",n,e,t),getParamValue("dtype",n,e,t))];case"ZerosLike":return[r.zerosLike(getParamValue("x",n,e,t))];default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nmsParams(n,e,t){const r=getParamValue("boxes",n,e,t),s=getParamValue("scores",n,e,t),a=getParamValue("maxOutputSize",n,e,t),i=getParamValue("iouThreshold",n,e,t),l=getParamValue("scoreThreshold",n,e,t),u=getParamValue("softNmsSigma",n,e,t);return{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}}const executeOp$f=async(n,e,t,r,s=tfOps)=>{switch(n.op){case"NonMaxSuppressionV5":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:h,softNmsSigma:f}=nmsParams(n,e,t),c=await s.image.nonMaxSuppressionWithScoreAsync(a,i,l,u,h,f);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:h}=nmsParams(n,e,t),f=getParamValue("padToMaxOutputSize",n,e,t),c=await s.image.nonMaxSuppressionPaddedAsync(a,i,l,u,h,f);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:h}=nmsParams(n,e,t);return[await s.image.nonMaxSuppressionAsync(a,i,l,u,h)]}case"Where":{const a=s.cast(getParamValue("condition",n,e,t),"bool"),i=[await s.whereAsync(a)];return a.dispose(),i}case"ListDiff":return s.setdiff1dAsync(getParamValue("x",n,e,t),getParamValue("y",n,e,t));default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$e=(n,e,t,r=tfOps)=>{switch(n.op){case"LowerBound":{const s=getParamValue("sortedSequence",n,e,t),a=getParamValue("values",n,e,t);return[r.lowerBound(s,a)]}case"TopKV2":{const s=getParamValue("x",n,e,t),a=getParamValue("k",n,e,t),i=getParamValue("sorted",n,e,t),l=r.topk(s,a,i);return[l.values,l.indices]}case"UpperBound":{const s=getParamValue("sortedSequence",n,e,t),a=getParamValue("values",n,e,t);return[r.upperBound(s,a)]}case"Unique":{const s=getParamValue("x",n,e,t),a=r.unique(s);return[a.values,a.indices]}case"UniqueV2":{const s=getParamValue("x",n,e,t),a=getParamValue("axis",n,e,t),i=r.unique(s,a);return[i.values,i.indices]}default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$d=(n,e,t,r=tfOps)=>{switch(n.op){case"Const":return e[n.name];case"PlaceholderWithDefault":const s=getParamValue("default",n,e,t);return[getTensor(n.name,e,t)||s];case"Placeholder":return[getTensor(n.name,e,t)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{const f=getParamValue("x",n,e,t);return[cloneTensor(f)]}case"IdentityN":return getParamValue("x",n,e,t).map(f=>cloneTensor(f));case"Snapshot":const a=getParamValue("x",n,e,t);return[cloneTensor(a)];case"Shape":return[r.tensor1d(getParamValue("x",n,e,t).shape,"int32")];case"ShapeN":return getParamValue("x",n,e,t).map(f=>r.tensor1d(f.shape));case"Size":return[r.scalar(getParamValue("x",n,e,t).size,"int32")];case"Rank":return[r.scalar(getParamValue("x",n,e,t).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const i=getParamValue("x",n,e,t),l=getParamValue("data",n,e,t),u=getParamValue("message",n,e,t),h=getParamValue("summarize",n,e,t);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(u);for(let f=0;f<l.length;f++)console.log(Array.prototype.slice.call(l[f].dataSync()).slice(0,h));return[i];default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class HashTable{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=scalar$1(0),this.tensorMap=new Map,keep$1(this.handle)}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return scalar$1(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const r=await e.data();return this.tensorMap.forEach(s=>s.dispose()),this.tensorMap.clear(),tidy$1(()=>{const s=unstack(t),a=r.length,i=s.length;assert$2(a===i,()=>`The number of elements doesn't match, keys has ${a} elements, the values has ${i} elements.`);for(let l=0;l<a;l++){const u=r[l],h=s[l];keep$1(h),this.tensorMap.set(u,h)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);const r=await e.data();return tidy$1(()=>{const s=[];for(let a=0;a<r.length;a++){const i=r[a],l=this.findWithDefault(i,t);s.push(l)}return stack(s)})}findWithDefault(e,t){const r=this.tensorMap.get(e);return r??t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$c=async(n,e,t,r)=>{switch(n.op){case"HashTable":case"HashTableV2":{const s=r.getHashTableHandleByName(n.name);if(s!=null)return[s];{const a=getParamValue("keyDType",n,e,t),i=getParamValue("valueDType",n,e,t),l=new HashTable(a,i);return r.addHashTable(n.name,l),[l.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const s=getParamValue("tableHandle",n,e,t,r),a=getParamValue("keys",n,e,t),i=getParamValue("values",n,e,t);return[await r.getHashTableById(s.id).import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const s=getParamValue("tableHandle",n,e,t,r),a=getParamValue("keys",n,e,t),i=getParamValue("defaultValue",n,e,t);return[await r.getHashTableById(s.id).find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=getParamValue("tableHandle",n,e,t,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$b=(n,e,t,r=tfOps)=>{switch(n.op){case"ResizeBilinear":{const s=getParamValue("images",n,e,t),a=getParamValue("size",n,e,t),i=getParamValue("alignCorners",n,e,t),l=getParamValue("halfPixelCenters",n,e,t);return[r.image.resizeBilinear(s,[a[0],a[1]],i,l)]}case"ResizeNearestNeighbor":{const s=getParamValue("images",n,e,t),a=getParamValue("size",n,e,t),i=getParamValue("alignCorners",n,e,t),l=getParamValue("halfPixelCenters",n,e,t);return[r.image.resizeNearestNeighbor(s,[a[0],a[1]],i,l)]}case"CropAndResize":{const s=getParamValue("image",n,e,t),a=getParamValue("boxes",n,e,t),i=getParamValue("boxInd",n,e,t),l=getParamValue("cropSize",n,e,t),u=getParamValue("method",n,e,t),h=getParamValue("extrapolationValue",n,e,t);return[r.image.cropAndResize(s,a,i,l,u,h)]}case"ImageProjectiveTransformV3":{const s=getParamValue("images",n,e,t),a=getParamValue("transforms",n,e,t),i=getParamValue("outputShape",n,e,t),l=getParamValue("fillValue",n,e,t),u=getParamValue("interpolation",n,e,t),h=getParamValue("fillMode",n,e,t);return[r.image.transform(s,a,u.toLowerCase(),h.toLowerCase(),l,i)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$a=(n,e,t,r=tfOps)=>{switch(n.op){case"Equal":return[r.equal(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"NotEqual":return[r.notEqual(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"Greater":return[r.greater(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"GreaterEqual":return[r.greaterEqual(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"Less":return[r.less(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"LessEqual":return[r.lessEqual(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"LogicalAnd":return[r.logicalAnd(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"LogicalNot":return[r.logicalNot(getParamValue("a",n,e,t))];case"LogicalOr":return[r.logicalOr(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"Select":case"SelectV2":return[r.where(getParamValue("condition",n,e,t),getParamValue("a",n,e,t),getParamValue("b",n,e,t))];case"BitwiseAnd":return[r.bitwiseAnd(getParamValue("a",n,e,t),getParamValue("b",n,e,t))];default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$9=(n,e,t,r=tfOps)=>{switch(n.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(getParamValue("a",n,e,t),getParamValue("b",n,e,t),getParamValue("transposeA",n,e,t),getParamValue("transposeB",n,e,t))];case"Einsum":return[r.einsum(getParamValue("equation",n,e,t),...getParamValue("tensors",n,e,t))];case"Transpose":return[r.transpose(getParamValue("x",n,e,t),getParamValue("perm",n,e,t))];case"_FusedMatMul":const[s,a]=getParamValue("fusedOps",n,e,t),i=s==="biasadd",l=a==="prelu",u=getParamValue("numArgs",n,e,t),h=getParamValue("leakyreluAlpha",n,e,t);if(i){if(l&&u!==2)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!l&&u!==1)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[f,c]=getParamValue("args",n,e,t);return[r.fused.matMul({a:getParamValue("a",n,e,t),b:getParamValue("b",n,e,t),transposeA:getParamValue("transposeA",n,e,t),transposeB:getParamValue("transposeB",n,e,t),bias:f,activation:a,preluActivationWeights:c,leakyreluAlpha:h})];case"MatrixBandPart":return[r.linalg.bandPart(getParamValue("a",n,e,t),getParamValue("numLower",n,e,t),getParamValue("numUpper",n,e,t))];default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$8=(n,e,t,r=tfOps)=>{switch(n.op){case"EuclideanNorm":return[r.euclideanNorm(getParamValue("x",n,e,t),getParamValue("axis",n,e,t),getParamValue("keepDims",n,e,t))];case"FusedBatchNorm":case"FusedBatchNormV2":return[r.batchNorm(getParamValue("x",n,e,t),getParamValue("mean",n,e,t),getParamValue("variance",n,e,t),getParamValue("offset",n,e,t),getParamValue("scale",n,e,t),getParamValue("epsilon",n,e,t))];case"FusedBatchNormV3":return[r.batchNorm(getParamValue("x",n,e,t),getParamValue("mean",n,e,t),getParamValue("variance",n,e,t),getParamValue("offset",n,e,t),getParamValue("scale",n,e,t),getParamValue("epsilon",n,e,t))];case"LRN":return[r.localResponseNormalization(getParamValue("x",n,e,t),getParamValue("radius",n,e,t),getParamValue("bias",n,e,t),getParamValue("alpha",n,e,t),getParamValue("beta",n,e,t))];case"Softmax":return[r.softmax(getParamValue("x",n,e,t))];case"LogSoftmax":return[r.logSoftmax(getParamValue("x",n,e,t))];default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$7=(n,e,t,r=tfOps)=>{switch(n.op){case"RaggedGather":{const{outputNestedSplits:s,outputDenseValues:a}=r.raggedGather(getParamValue("paramsNestedSplits",n,e,t),getParamValue("paramsDenseValues",n,e,t),getParamValue("indices",n,e,t),getParamValue("outputRaggedRank",n,e,t));return s.concat(a)}case"RaggedRange":{const{rtNestedSplits:s,rtDenseValues:a}=r.raggedRange(getParamValue("starts",n,e,t),getParamValue("limits",n,e,t),getParamValue("splits",n,e,t));return[s,a]}case"RaggedTensorToTensor":return[r.raggedTensorToTensor(getParamValue("shape",n,e,t),getParamValue("values",n,e,t),getParamValue("defaultValue",n,e,t),getParamValue("rowPartitionTensors",n,e,t),getParamValue("rowPartitionTypes",n,e,t))];default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$6=(n,e,t,r=tfOps)=>{switch(n.op){case"Max":{const l=getParamValue("axis",n,e,t),u=getParamValue("keepDims",n,e,t);return[r.max(getParamValue("x",n,e,t),l,u)]}case"Mean":{const l=getParamValue("axis",n,e,t),u=getParamValue("keepDims",n,e,t);return[r.mean(getParamValue("x",n,e,t),l,u)]}case"Min":{const l=getParamValue("axis",n,e,t),u=getParamValue("keepDims",n,e,t);return[r.min(getParamValue("x",n,e,t),l,u)]}case"Sum":{const l=getParamValue("axis",n,e,t),u=getParamValue("keepDims",n,e,t);return[r.sum(getParamValue("x",n,e,t),l,u)]}case"All":{const l=getParamValue("axis",n,e,t),u=getParamValue("keepDims",n,e,t);return[r.all(getParamValue("x",n,e,t),l,u)]}case"Any":{const l=getParamValue("axis",n,e,t),u=getParamValue("keepDims",n,e,t);return[r.any(getParamValue("x",n,e,t),l,u)]}case"ArgMax":{const l=getParamValue("axis",n,e,t);return[r.argMax(getParamValue("x",n,e,t),l)]}case"ArgMin":{const l=getParamValue("axis",n,e,t);return[r.argMin(getParamValue("x",n,e,t),l)]}case"Prod":{const l=getParamValue("axis",n,e,t),u=getParamValue("keepDims",n,e,t);return[r.prod(getParamValue("x",n,e,t),l,u)]}case"Cumprod":{const l=getParamValue("axis",n,e,t),u=getParamValue("exclusive",n,e,t),h=getParamValue("reverse",n,e,t);return[r.cumprod(getParamValue("x",n,e,t),l,u,h)]}case"Cumsum":{const l=getParamValue("axis",n,e,t),u=getParamValue("exclusive",n,e,t),h=getParamValue("reverse",n,e,t);return[r.cumsum(getParamValue("x",n,e,t),l,u,h)]}case"Bincount":const s=getParamValue("x",n,e,t),a=getParamValue("weights",n,e,t),i=getParamValue("size",n,e,t);return[r.bincount(s,a,i)];case"DenseBincount":{const l=getParamValue("x",n,e,t),u=getParamValue("weights",n,e,t),h=getParamValue("size",n,e,t),f=getParamValue("binaryOutput",n,e,t);return[r.denseBincount(l,u,h,f)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$5=(n,e,t,r=tfOps)=>{switch(n.op){case"ConcatV2":case"Concat":{const s=getParamValue("n",n,e,t),a=getParamValue("axis",n,e,t);let i=getParamValue("tensors",n,e,t);return i=i.slice(0,s),[r.concat(i,a)]}case"Gather":{const s=getParamValue("x",n,e,t),a=getParamValue("indices",n,e,t);return[r.gather(s,r.cast(a,"int32"),0)]}case"GatherV2":{const s=getParamValue("axis",n,e,t),a=getParamValue("batchDims",n,e,t),i=getParamValue("x",n,e,t),l=getParamValue("indices",n,e,t);return[r.gather(i,r.cast(l,"int32"),s,a)]}case"Reverse":{const s=getParamValue("dims",n,e,t),a=[];for(let l=0;l<s.length;l++)s[l]&&a.push(l);const i=getParamValue("x",n,e,t);return[r.reverse(i,a)]}case"ReverseV2":{const s=getParamValue("axis",n,e,t),a=getParamValue("x",n,e,t);return[r.reverse(a,s)]}case"Slice":{const s=getParamValue("begin",n,e,t),a=getParamValue("size",n,e,t);return[r.slice(getParamValue("x",n,e,t),s,a)]}case"StridedSlice":{const s=getParamValue("begin",n,e,t),a=getParamValue("end",n,e,t),i=getParamValue("strides",n,e,t),l=getParamValue("beginMask",n,e,t),u=getParamValue("endMask",n,e,t),h=getParamValue("ellipsisMask",n,e,t),f=getParamValue("newAxisMask",n,e,t),c=getParamValue("shrinkAxisMask",n,e,t),o=getParamValue("x",n,e,t);return[r.stridedSlice(o,s,a,i,l,u,h,f,c)]}case"Pack":return tidy$1(()=>{const s=getParamValue("axis",n,e,t),a=getParamValue("tensors",n,e,t),i=a[0].shape,l=r.squeeze(a[0]).shape,u=a.map(h=>{const f=arraysEqual$1(h.shape,i);if(!f&&!arraysEqual$1(r.squeeze(h).shape,l))throw new Error("the input tensors shape does not match");return f?h:r.reshape(h,i)});return[r.stack(u,s)]});case"Unpack":{const s=getParamValue("axis",n,e,t),a=getParamValue("tensor",n,e,t);return r.unstack(a,s)}case"Tile":{const s=getParamValue("reps",n,e,t);return[r.tile(getParamValue("x",n,e,t),s)]}case"Split":case"SplitV":{const s=getParamValue("axis",n,e,t),a=getParamValue("numOrSizeSplits",n,e,t),i=getParamValue("x",n,e,t);return r.split(i,a,s)}case"ScatterNd":{const s=getParamValue("indices",n,e,t),a=getParamValue("values",n,e,t),i=getParamValue("shape",n,e,t);return[r.scatterND(s,a,i)]}case"GatherNd":{const s=getParamValue("x",n,e,t),a=getParamValue("indices",n,e,t);return[r.gatherND(s,a)]}case"SparseToDense":{const s=getParamValue("sparseIndices",n,e,t),a=getParamValue("outputShape",n,e,t),i=getParamValue("sparseValues",n,e,t),l=getParamValue("defaultValue",n,e,t);return[r.sparseToDense(s,i,a,i.dtype===l.dtype?l:r.cast(l,i.dtype))]}case"TensorScatterUpdate":{const s=getParamValue("indices",n,e,t),a=getParamValue("values",n,e,t),i=getParamValue("tensor",n,e,t);return[r.tensorScatterUpdate(i,s,a)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$4=(n,e,t,r=tfOps)=>{switch(n.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:a,emptyRowIndicator:i,reverseIndexMap:l}=r.sparse.sparseFillEmptyRows(getParamValue("indices",n,e,t),getParamValue("values",n,e,t),getParamValue("denseShape",n,e,t),getParamValue("defaultValue",n,e,t));return[s,a,i,l]}case"SparseReshape":{const{outputIndices:s,outputShape:a}=r.sparse.sparseReshape(getParamValue("inputIndices",n,e,t),getParamValue("inputShape",n,e,t),getParamValue("newShape",n,e,t));return[s,a]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(getParamValue("data",n,e,t),getParamValue("indices",n,e,t),getParamValue("segmentIds",n,e,t))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(getParamValue("data",n,e,t),getParamValue("indices",n,e,t),getParamValue("segmentIds",n,e,t))];default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$3=(n,e,t,r=tfOps)=>{switch(n.op){case"FFT":return[r.fft(getParamValue("x",n,e,t))];case"IFFT":return[r.ifft(getParamValue("x",n,e,t))];case"RFFT":return[r.rfft(getParamValue("x",n,e,t))];case"IRFFT":return[r.irfft(getParamValue("x",n,e,t))];default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$2=(n,e,t,r=tfOps)=>{switch(n.op){case"StaticRegexReplace":return[r.string.staticRegexReplace(getParamValue("input",n,e,t),getParamValue("pattern",n,e,t),getParamValue("rewrite",n,e,t),getParamValue("replaceGlobal",n,e,t))];case"StringNGrams":{const{nGrams:s,nGramsSplits:a}=r.string.stringNGrams(getParamValue("data",n,e,t),getParamValue("dataSplits",n,e,t),getParamValue("separator",n,e,t),getParamValue("nGramWidths",n,e,t),getParamValue("leftPad",n,e,t),getParamValue("rightPad",n,e,t),getParamValue("padWidth",n,e,t),getParamValue("preserveShortSequences",n,e,t));return[s,a]}case"StringSplit":{const{indices:s,values:a,shape:i}=r.string.stringSplit(getParamValue("input",n,e,t),getParamValue("delimiter",n,e,t),getParamValue("skipEmpty",n,e,t));return[s,a,i]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(getParamValue("input",n,e,t),getParamValue("numBuckets",n,e,t))];default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$1=(n,e,t,r=tfOps)=>{switch(n.op){case"Cast":return[r.cast(getParamValue("x",n,e,t),getParamValue("dtype",n,e,t))];case"ExpandDims":{const s=getParamValue("axis",n,e,t);return[r.expandDims(getParamValue("x",n,e,t),s)]}case"Squeeze":{const s=getParamValue("axis",n,e,t);return[r.squeeze(getParamValue("x",n,e,t),s)]}case"Reshape":return[r.reshape(getParamValue("x",n,e,t),getParamValue("shape",n,e,t))];case"EnsureShape":return[r.ensureShape(getParamValue("x",n,e,t),getParamValue("shape",n,e,t))];case"MirrorPad":return[r.mirrorPad(getParamValue("x",n,e,t),getParamValue("padding",n,e,t),getParamValue("mode",n,e,t))];case"PadV2":case"Pad":return[r.pad(getParamValue("x",n,e,t),getParamValue("padding",n,e,t),getParamValue("constantValue",n,e,t))];case"SpaceToBatchND":{const s=getParamValue("blockShape",n,e,t),a=getParamValue("paddings",n,e,t);return[r.spaceToBatchND(getParamValue("x",n,e,t),s,a)]}case"BatchToSpaceND":{const s=getParamValue("blockShape",n,e,t),a=getParamValue("crops",n,e,t);return[r.batchToSpaceND(getParamValue("x",n,e,t),s,a)]}case"DepthToSpace":{const s=getParamValue("blockSize",n,e,t),a=getParamValue("dataFormat",n,e,t).toUpperCase();return[r.depthToSpace(getParamValue("x",n,e,t),s,a)]}case"BroadcastTo":return[r.broadcastTo(getParamValue("x",n,e,t),getParamValue("shape",n,e,t))];case"BroadcastArgs":return[r.broadcastArgs(getParamValue("s0",n,e,t),getParamValue("s1",n,e,t))];default:throw TypeError(`Node type ${n.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function executeOp(n,e,t,r,s=tidy$1){const a=((i,l,u)=>{switch(i.category){case"arithmetic":return s(()=>executeOp$k(i,l,u));case"basic_math":return s(()=>executeOp$j(i,l,u));case"control":return executeOp$i(i,l,u);case"convolution":return s(()=>executeOp$h(i,l,u));case"creation":return s(()=>executeOp$g(i,l,u));case"dynamic":return executeOp$f(i,l,u);case"evaluation":return s(()=>executeOp$e(i,l,u));case"image":return s(()=>executeOp$b(i,l,u));case"graph":return s(()=>executeOp$d(i,l,u));case"logical":return s(()=>executeOp$a(i,l,u));case"matrices":return s(()=>executeOp$9(i,l,u));case"normalization":return s(()=>executeOp$8(i,l,u));case"ragged":return s(()=>executeOp$7(i,l,u));case"reduction":return s(()=>executeOp$6(i,l,u));case"slice_join":return s(()=>executeOp$5(i,l,u));case"sparse":return s(()=>executeOp$4(i,l,u));case"spectral":return s(()=>executeOp$3(i,l,u));case"string":return s(()=>executeOp$2(i,l,u));case"transformation":return s(()=>executeOp$1(i,l,u));case"hash_table":return executeOp$c(i,l,u,r);case"custom":const h=getRegisteredOp(i.op);if(h&&h.customExecutor)return h.customExecutor(new NodeValueImpl(i,l,u));throw TypeError(`Custom op ${i.op} is not registered.`);default:throw TypeError(`Unknown op '${i.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(n,e,t);return isPromise$1(a)?a.then(i=>[].concat(i)):[].concat(a)}class ExecutionContext{constructor(e={},t={},r={},s={},a){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=r,this.functionMap=s,this.parseNodeNameCache=a,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const r=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(r))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(t=>t.id===0&&t.iterationId===0?"":`${t.frameName}-${t.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(this.contexts&&this.contexts.length>1)this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift();else throw new Error("Cannot exit frame, the context is empty")}nextIteration(){if(this.contexts&&this.contexts.length>0){this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}else throw new Error("Cannot increase frame iteration, the context is empty")}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getExecutionSubgraph(n,e,t,r){const s=new Set,a=[];let i=null,l=null;const u=new Set,h=new Set(Object.keys(n).map(o=>parseNodeName(o)[0]));r=r||[];const f=new Set(r.map(o=>parseNodeName(o.name)[0])),c=[...e];for(;c.length>0;){const o=c.pop();if((isControlFlow(o)||isDynamicShape(o)||isHashTable(o))&&i==null&&(i=o,l=i.children.map(d=>d.name).filter(d=>s.has(d))),s.add(o.name),t[o.name]==null&&!h.has(o.name)&&!f.has(o.name)){if(o.inputs.length===0){a.push(o.name);continue}o.inputs.forEach(d=>{u.has(d.name)||(u.add(d.name),c.push(d))})}}return{inputs:n,outputs:e,usedNodes:s,missingInputs:a,dynamicNode:i,syncInputs:l}}function getNodesInTopologicalOrder(n,e){const{usedNodes:t,inputs:r}=e,s=Object.keys(r).map(y=>parseNodeName(y)[0]).map(y=>n.nodes[y]),a=n.initNodes||[],i=y=>t.has(typeof y=="string"?y:y.name);function l(y){return[...new Map(y.map($=>[$.name,$])).values()]}const u=l([...s,...n.weights,...a]).filter(i),h=l([...u,...Object.values(n.nodes)]).filter(i),f=new Map(h.map(y=>[y.name,y])),c={};for(const y of h){c[y.name]=c[y.name]||0;for(const $ of y.children)i($)||(c[$.name]=Number.POSITIVE_INFINITY),c[$.name]=(c[$.name]||0)+1}const o=Object.entries(c).filter(([,y])=>y===0).map(([y])=>y),d=[...o];for(;o.length>0;){const y=o.pop(),$=f.get(y);for(const b of $.children.filter(i))--c[b.name]===0&&(d.push(b.name),o.push(b.name))}const m=d.map(y=>f.get(y)),g=filterPredefinedReachableNodes(m,u);return validateNodesExecutionOrder(g,u),g}function filterPredefinedReachableNodes(n,e){const t=new Map(n.map(i=>[i.name,i])),r=e.map(i=>i.name),s=new Set(r);for(;r.length>0;){const i=r.pop(),l=t.get(i);for(const u of l.children)!t.has(u.name)||s.has(u.name)||(s.add(u.name),r.push(u.name))}return n.filter(i=>s.has(i.name))}class NodesExecutionOrderError extends Error{constructor(e){super(`NodesExecutionOrderError: ${e}`)}}function validateNodesExecutionOrder(n,e){const t=new Map(n.map((l,u)=>[l.name,u])),r=new Set(e.map(l=>l.name)),s=l=>r.has(typeof l=="string"?l:l.name),a=new Set(n.map(l=>l.name)),i=l=>a.has(typeof l=="string"?l:l.name);for(const l of n){for(const u of l.children.filter(i)){if(!t.has(u.name))throw new NodesExecutionOrderError(`Child ${u.name} of node ${l.name} is unreachable.`);if(t.get(l.name)>t.get(u.name))throw new NodesExecutionOrderError(`Node ${l.name} is scheduled to run after its child ${u.name}.`)}if(!s(l))for(const u of l.inputs){if(!t.has(u.name))throw new NodesExecutionOrderError(`Input ${u.name} of node ${l.name} is unreachable.`);if(t.get(u.name)>t.get(l.name))throw new NodesExecutionOrderError(`Node ${l.name} is scheduled to run before its input ${u.name}.`)}}}function getNodeLiveUntilMap(n){const e=new Map(n.map((l,u)=>[l.name,u])),t=Number.MAX_SAFE_INTEGER,r=n.map((l,u)=>isControlFlow(l)?t:u),s=l=>{const u=r[e.get(l.name)];return u??-1},a=n.map((l,u)=>l.children.map(s).reduce((h,f)=>Math.max(h,f),r[u])),i=new Map;for(let l=0;l<n.length;++l){const u=a[l];if(u===t)continue;const h=n[l],f=n[u];i.has(f.name)||i.set(f.name,[]),i.get(f.name).push(h)}return i}const CONTROL_FLOW_OPS=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),DYNAMIC_SHAPE_OPS=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),HASH_TABLE_OPS=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function isControlFlow(n){return CONTROL_FLOW_OPS.has(n.op)}function isDynamicShape(n){return DYNAMIC_SHAPE_OPS.has(n.op)}function isHashTable(n){return HASH_TABLE_OPS.has(n.op)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class GraphExecutor{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map(r=>e[r].map(s=>s.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,e.functions!=null&&Object.keys(e.functions).forEach(r=>{this._functionExecutorMap[r]=new GraphExecutor(e.functions[r],this)})}getCompilationKey(e,t){const r=e.map(a=>a.name).sort(),s=t.map(a=>a.name).sort();return r.join(this.SEPARATOR)+"--"+s.join(this.SEPARATOR)}compile(e,t){const r=getExecutionSubgraph(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:a,syncInputs:i}=r;if(a!=null)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);if(s.length>0){const h=t.map(c=>c.name),f=Object.keys(e);throw new Error(`Cannot compute the outputs [${h}] from the provided inputs [${f}]. Missing the following inputs: [${s}]`)}const l=getNodesInTopologicalOrder(this.graph,r),u=getNodeLiveUntilMap(l);return{orderedNodes:l,nodeLiveUntilMap:u}}cloneAndKeepTensor(e){if(e==null)return null;const t=e.clone();return keep$1(t),t}cloneTensorList(e){return e?e.map(r=>this.cloneAndKeepTensor(r)):null}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map(([t,r])=>[t,this.cloneTensorList(r)]))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);const r=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=r.map(o=>this.graph.nodes[parseNodeName(o)[0]]),a=t.map(o=>parseNodeName(o)[0]),i=new Set(a);let l=a.map(o=>this.graph.nodes[o]);l.length===0&&(l=this._outputs);const u=this.getCompilationKey(s,l);let h=this.compiledMap.get(u);h==null&&(h=this.compile(e,l),this.compiledMap.set(u,h));try{this.keepIntermediateTensors=env$1().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(o){this.keepIntermediateTensors=!1,console.warn(o.message)}const f={},c={};return tidy$1(()=>{const o=new ExecutionContext(this.weightMap,f,c,this.functionExecutorMap,this.parseNodeNameCache),d=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach($=>{const[b,x]=parseNodeName($,o),w=[];w[x]=e[$],d[b]=w,this.keepIntermediateTensors&&(this.clonedTensorsMap[b]=this.cloneTensorList(w))});const m=this.getFrozenTensorIds(d),{orderedNodes:g,nodeLiveUntilMap:y}=h;for(const $ of g){if(d[$.name])continue;const b=executeOp($,d,o,this._resourceManager);if(isPromise$1(b))throw new Error(`The execution of the op '${$.op}' returned a promise. Please use model.executeAsync() instead.`);d[$.name]=b,this.keepIntermediateTensors&&(this.clonedTensorsMap[$.name]=this.cloneTensorList(b)),this.checkTensorForDisposalWithNodeLiveUntilInfo($,d,o,m,i,y.get($.name))}return this.parent==null&&o.dispose(m),t.map($=>getTensor($,d,o))})}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map(r=>e[r]).map(r=>r.map(s=>s.id)));return new Set(t)}checkTensorForDisposal(e,t,r,s,a,i,l){if(!(isControlFlow(t)||i.has(e))){for(const u of r[e])u!=null&&(l[u.id]=(l[u.id]||0)+t.children.length);for(const u of t.inputs){if(isControlFlow(u))continue;const h=getTensorsForCurrentContext(u.name,r,s);if(h!=null)for(const f of h){if(!f||f.kept||a.has(f.id))continue;const c=l[f.id];c===1?(f.dispose(),delete l[f.id]):c!=null&&l[f.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,r,s,a,i){function l(u){return isControlFlow(u)||a.has(u.name)}if(!(isControlFlow(e)||i==null))for(const u of i){if(l(u))continue;const h=getTensorsForCurrentContext(u.name,t,r);for(const f of h)!f||f.kept||s.has(f.id)||f.dispose()}}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(e=>{for(const t of e)t&&!t.isDisposed&&t.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,r=!1,s={},a={}){this.disposeIntermediateTensors(),r||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=env$1().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(o){this.keepIntermediateTensors=!1,console.warn(o.message)}const i=new ExecutionContext(this.weightMap,s,a,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const l=await this.executeWithControlFlow(e,i,t,r),u=t.map(o=>getTensor(o,l,i)),h=u.map(o=>o.id),f=Object.keys(e).map(o=>e[o].id),c=new Set([...h,...f,...this.weightIds]);return Object.values(l).forEach(o=>{o.forEach(d=>{d&&!d.isDisposed&&!c.has(d.id)&&d.dispose()})}),this.parent==null&&i.dispose(c),u}async executeFunctionAsync(e,t,r){const s=e.reduce((a,i,l)=>(a[this.inputs[l].name]=i,a),{});return this._executeAsync(s,this.outputNodes,!0,t,r)}async executeWithControlFlow(e,t,r,s){const a=Object.keys(e),i=a.map(w=>this.graph.nodes[parseNodeName(w)[0]]),l=r.map(w=>parseNodeName(w)[0]),u=new Set(l);let h=l.map(w=>this.graph.nodes[w]);h.length===0&&(h=this._outputs);const{usedNodes:f,missingInputs:c,dynamicNode:o,syncInputs:d}=getExecutionSubgraph(e,h,this.weightMap,this._initNodes),m=[...i,...this.graph.weights,...this._initNodes||[]].map(w=>({node:w,contexts:t.currentContext})),g=Object.assign({},this.weightMap);Object.keys(e).forEach(w=>{const[v,S]=parseNodeName(w),T=[];T[S]=e[w],g[v]=T});const y={},$=this.getFrozenTensorIds(g),b={};for(;m.length>0;){const w=this.processStack(i,m,t,g,b,$,u,y,f);await Promise.all(w)}o==null&&!s&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const x=h.filter(w=>!isControlFlow(w)&&!getTensor(w.name,g,t)).map(w=>w.name);if(x.length>0){let w="";throw o!=null&&(w=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`),new Error(`Cannot compute the outputs [${x}] from the provided inputs [${a}]. Consider providing the following inputs: [${c}]. ${w}`)}return g}processStack(e,t,r,s,a,i,l,u,h){const f=[];for(;t.length>0;){const c=t.pop();r.currentContext=c.contexts;let o="";if(c.node.op==="Enter"&&getParamValue("isConstant",c.node,s,r)&&([o]=getNodeNameAndIndex(c.node.name,r)),s[c.node.name]==null){const d=executeOp(c.node,s,r,this._resourceManager);o||([o]=getNodeNameAndIndex(c.node.name,r));const m=r.currentContext;isPromise$1(d)?f.push(d.then(g=>(s[o]=g,this.keepIntermediateTensors&&(this.clonedTensorsMap[o]=this.cloneTensorList(g)),r.currentContext=m,this.checkTensorForDisposal(o,c.node,s,r,i,l,u),this.processChildNodes(c.node,t,r,s,a,h),g))):(s[o]=d,this.keepIntermediateTensors&&(this.clonedTensorsMap[o]=this.cloneTensorList(d)),this.checkTensorForDisposal(o,c.node,s,r,i,l,u),this.processChildNodes(c.node,t,r,s,a,h))}else this.processChildNodes(c.node,t,r,s,a,h)}return f}processChildNodes(e,t,r,s,a,i){e.children.forEach(l=>{const[u]=getNodeNameAndIndex(l.name,r);a[u]||!i.has(l.name)||(l.op==="Merge"?l.inputNames.some(h=>!!getTensor(h,s,r))&&(a[u]=!0,t.push({contexts:r.currentContext,node:l})):l.inputNames.every(h=>!!getTensor(h,s,r))&&(a[u]=!0,t.push({contexts:r.currentContext,node:l})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(t=>t.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{const r=e[t],[s]=parseNodeName(t),a=this.graph.nodes[s];if(a.attrParams.shape&&a.attrParams.shape.value){const i=a.attrParams.shape.value,l=i.length===r.shape.length&&r.shape.every((u,h)=>i[h]===-1||i[h]===u);assert$2(l,()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${i}], but was [${r.shape}]`)}a.attrParams.dtype&&a.attrParams.dtype.value&&assert$2(r.dtype===a.attrParams.dtype.value,()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${r.dtype}`)})}mapInputs(e){var t,r;const s={};for(const a in e){const i=(r=(t=this._signature)===null||t===void 0?void 0:t.inputs)===null||r===void 0?void 0:r[a];i!=null?s[i.name]=e[a]:s[a]=e[a]}return s}checkInputs(e){const t=Object.keys(e).filter(r=>{const[s]=parseNodeName(r);return this.graph.nodes[s]==null});if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(t=>{var r,s;const a=(s=(r=this._signature)===null||r===void 0?void 0:r.outputs)===null||s===void 0?void 0:s[t];return a!=null?a.name:t},{})}checkOutputs(e){e.forEach(t=>{const[r]=parseNodeName(t);if(!this.graph.nodes[r])throw new Error(`The output '${t}' is not found in the graph`)})}}class ResourceManager{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TFHUB_SEARCH_PARAM="?tfjs-format=file",DEFAULT_MODEL_NAME="model.json";class GraphModel{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e,t={},r=io){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=r,t==null&&(this.loadOptions={}),this.resourceManager=new ResourceManager}findIOHandler(){const e=this.modelUrl;if(e.load!=null)this.handler=e;else if(this.loadOptions.requestInit!=null)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(t.length===0)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),this.handler.load==null)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return isPromise$1(e)?e.then(t=>this.loadSync(t)):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let r=this.artifacts.signature;if(this.artifacts.userDefinedMetadata!=null){const a=this.artifacts.userDefinedMetadata;a.signature!=null&&(r=a.signature),a.structuredOutputKeys!=null&&(this.structuredOutputKeys=a.structuredOutputKeys)}this.signature=r,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new GraphExecutor(OperationMapper.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,e.modelInitializer!=null&&e.modelInitializer.node!=null){const a=OperationMapper.Instance.transformGraph(e.modelInitializer);this.initializer=new GraphExecutor(a),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if(typeof e=="string"){const r=this.io.getSaveHandlers(e);if(r.length===0)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(r.length>1)throw new Error(`Found more than one (${r.length}) save handlers for URL '${e}'`);e=r[0]}if(e.save==null)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){const t=e instanceof Tensor$1?[e]:e,r={};return t.forEach((s,a)=>r[this.structuredOutputKeys[a]]=s),r}return e}predict(e,t){const r=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(r)}async predictAsync(e,t){const r=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(r)}normalizeInputs(e){var t;if(!(e instanceof Tensor$1)&&!Array.isArray(e)){const a=(t=this.signature)===null||t===void 0?void 0:t.inputs;if(a!=null)for(const i in a){const l=a[i];l.resourceId!=null&&(e[i]=this.resourceIdToCapturedInput[l.resourceId])}return e}e=Array.isArray(e)?e:[e];const r=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+r!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-r} non-resource placeholders, while there are ${e.length} input tensors provided.`);let s=0;return this.inputNodes.reduce((a,i)=>{var l,u,h;const f=(h=(u=(l=this.signature)===null||l===void 0?void 0:l.inputs)===null||u===void 0?void 0:u[i])===null||h===void 0?void 0:h.resourceId;return f!=null?a[i]=this.resourceIdToCapturedInput[f]:a[i]=e[s++],a},{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return this.initializer==null?[]:this.initializerSignature==null?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return this.initializer==null?[]:this.initializerSignature==null?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){const t=this.initializerSignature.outputs,r=Object.keys(t);for(let s=0;s<r.length;s++){const a=r[s],i=t[a];this.resourceIdToCapturedInput[i.resourceId]=e[s]}}}execute(e,t){this.resourceIdToCapturedInput==null&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const r=this.executor.execute(e,t);return r.length>1?r:r[0]}async executeAsync(e,t){this.resourceIdToCapturedInput==null&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const r=await this.executor.executeAsync(e,t);return r.length>1?r:r[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,r)=>(t[r]=[e[r]],t),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&dispose$1(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function loadGraphModel(n,e={},t=io){if(n==null)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");e==null&&(e={}),e.fromTFHub&&typeof n=="string"&&(n=getTFHubUrl(n));const r=new GraphModel(n,e,t);return await r.load(),r}function getTFHubUrl(n){return n.endsWith("/")||(n=n+"/"),`${n}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */var ZipMismatchMode;(function(n){n[n.FAIL=0]="FAIL",n[n.SHORTEST=1]="SHORTEST",n[n.LONGEST=2]="LONGEST"})(ZipMismatchMode||(ZipMismatchMode={}));/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function assertNotComplex$2(n,e){Array.isArray(n)||(n=[n]),n.forEach(t=>{t!=null&&assert$2(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the CPU backend.`)})}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const whereImpl$1=whereImpl$2;class MathBackendCPU extends KernelBackend$1{nextDataId(){return MathBackendCPU.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new DataStorage$1(this,engine$1())}write(e,t,r){this.firstUse&&(this.firstUse=!1,env$1().get("IS_NODE")&&warn$1(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:r,refCount:1}),s}makeTensorInfo(e,t,r){let s;if(t==="string"&&r!=null&&r.length>0&&isString$1(r[0])){const a=r.map(i=>encodeString$1(i));s=this.write(a,e,t)}else s=this.write(r,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){const t=this.data.get(e);t.refCount++}decRef(e){if(this.data.has(e)){const t=this.data.get(e);t.refCount--}}move(e,t,r,s,a){this.data.set(e,{values:t,dtype:s,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:r}=this.data.get(e);if(t==="complex64"){const s=this.readSync(r.real.dataId),a=this.readSync(r.imag.dataId);return mergeRealAndImagArrays$1(s,a)}return convertBackendValuesAndArrayBuffer$1(this.data.get(e).values,t)}bufferSync(e){const t=this.readSync(e.dataId);if(e.dtype==="string")try{const r=t.map(s=>decodeString$1(s));return buffer$1(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return buffer$1(e.shape,e.dtype,t)}makeOutput(e,t,r){return engine$1().makeTensorFromTensorInfo(this.makeTensorInfo(t,r,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:r}=this.data.get(e);r!=null&&(this.disposeData(r.real.dataId,!0),this.disposeData(r.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=now$1();return e(),{kernelMs:now$1()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){assertNotComplex$2([e],"where");const t=this.readSync(e.dataId);return whereImpl$1(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}MathBackendCPU.nextDataId=0;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function simpleAbsImpl$1(n){const e=new Float32Array(n.length);for(let t=0;t<n.length;++t)e[t]=Math.abs(n[t]);return e}const abs$3=n=>{const{x:e}=n.inputs,t=n.backend;assertNotComplex$2(e,"abs");let r=new Float32Array(sizeFromShape$1(e.shape));const s=t.data.get(e.dataId).values;return r=simpleAbsImpl$1(s),t.makeOutput(r,e.shape,e.dtype)},absConfig$2={kernelName:Abs$1,backendName:"cpu",kernelFunc:abs$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createSimpleBinaryKernelImpl$1(n){return(e,t,r,s,a)=>{const i=assertAndGetBroadcastShape$1(e,t),l=i.length,u=computeStrides$1(i),h=sizeFromShape$1(i),f=getTypedArrayFromDType$1(a,h),c=e.length,o=t.length,d=computeStrides$1(e),m=computeStrides$1(t),g=getBroadcastDims$2(e,i),y=getBroadcastDims$2(t,i);if(g.length+y.length===0)for(let $=0;$<f.length;++$)f[$]=n(r[$%r.length],s[$%s.length]);else for(let $=0;$<f.length;++$){const b=indexToLoc$1($,l,u),x=b.slice(-c);g.forEach(T=>x[T]=0);const w=locToIndex$1(x,c,d),v=b.slice(-o);y.forEach(T=>v[T]=0);const S=locToIndex$1(v,o,m);f[$]=n(r[w],s[S])}return[f,i]}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function complex$3(n){const{inputs:e,backend:t}=n,{real:r,imag:s}=e,a=t.data.get(r.dataId).values,i=t.data.get(s.dataId).values,l=t.makeTensorInfo(r.shape,"complex64"),u=t.data.get(l.dataId);return u.complexTensorInfos={real:t.makeTensorInfo(r.shape,"float32",a),imag:t.makeTensorInfo(s.shape,"float32",i)},l}const complexConfig$2={kernelName:Complex$1,backendName:"cpu",kernelFunc:complex$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zeros$1(n,e,t="float32"){if(t==="complex64"){const s=zeros$1(n,e,"float32"),a=zeros$1(n,e,"float32");return complex$3({inputs:{real:s,imag:a},backend:n})}const r=makeZerosTypedArray$1(sizeFromShape$1(e),t);return n.makeTensorInfo(e,t,r)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function identity$2(n){const{inputs:e,backend:t}=n,{x:r}=e;return t.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const identityConfig$2={kernelName:Identity$2,backendName:"cpu",kernelFunc:identity$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function real$2(n){const{inputs:e,backend:t}=n,{input:r}=e,s=t.data.get(r.dataId).complexTensorInfos.real,a=t.data.get(s.dataId).values;return t.makeTensorInfo(s.shape,s.dtype,a)}const realConfig$2={kernelName:Real$1,backendName:"cpu",kernelFunc:real$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function castImpl$1(n,e,t,r){if(r==="int32"){const s=Int32Array.from(n);return[e,"int32",s]}if(r==="bool"){const s=toTypedArray$1([0],t),[a,i]=createSimpleBinaryKernelImpl$1((l,u)=>l!==u?1:0)(e,[],n,s,"bool");return[i,"bool",a]}throw new Error(`Error in Cast: failed to cast ${t} to ${r}`)}function cast$3(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{dtype:a}=r;if(a==="complex64"){if(s.dtype==="complex64")return identity$2({inputs:{x:s},backend:t});const f=zeros$1(t,s.shape,s.dtype),c=cast$3({inputs:{x:s},backend:t,attrs:{dtype:"float32"}}),o=complex$3({inputs:{real:c,imag:f},backend:t});return t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(c),o}if(s.dtype==="complex64"){const f=real$2({inputs:{input:s},backend:t}),c=cast$3({inputs:{x:f},backend:t,attrs:{dtype:a}});return t.disposeIntermediateTensorInfo(f),c}if(!hasEncodingLoss$1(s.dtype,a)){const f=identity$2({inputs:{x:s},backend:t});return{dataId:f.dataId,shape:f.shape,dtype:a}}const i=t.data.get(s.dataId).values,[l,u,h]=castImpl$1(i,s.shape,s.dtype,a);return t.makeTensorInfo(l,u,h)}const castConfig$2={kernelName:Cast$1,backendName:"cpu",kernelFunc:cast$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function binaryKernelFunc$2(n,e,t,r){return t==null?({inputs:s,backend:a})=>{const{a:i,b:l}=s,u=a;assertNotComplex$2([i,l],n);const h=u.data.get(i.dataId).values,f=u.data.get(l.dataId).values,c=i.dtype==="string"?fromUint8ToStringArray$1(h):h,o=i.dtype==="string"?fromUint8ToStringArray$1(f):f,d=r||i.dtype,[m,g]=e(i.shape,l.shape,c,o,d);return u.makeTensorInfo(g,d,m)}:({inputs:s,backend:a})=>{const{a:i,b:l}=s,u=a;if(i.dtype==="complex64"||l.dtype==="complex64"){const h=cast$3({inputs:{x:i},backend:u,attrs:{dtype:"complex64"}}),f=u.data.get(h.dataId),c=f.complexTensorInfos.real,o=f.complexTensorInfos.imag,d=u.data.get(c.dataId).values,m=u.data.get(o.dataId).values,g=cast$3({inputs:{x:l},backend:u,attrs:{dtype:"complex64"}}),y=u.data.get(g.dataId),$=y.complexTensorInfos.real,b=y.complexTensorInfos.imag,x=u.data.get($.dataId).values,w=u.data.get(b.dataId).values,[v,S,T]=t(i.shape,l.shape,d,m,x,w),C=u.makeTensorInfo(T,"float32",v),I=u.makeTensorInfo(T,"float32",S),N=complex$3({inputs:{real:C,imag:I},backend:u});return u.disposeIntermediateTensorInfo(h),u.disposeIntermediateTensorInfo(g),u.disposeIntermediateTensorInfo(C),u.disposeIntermediateTensorInfo(I),N}else{const h=u.data.get(i.dataId).values,f=u.data.get(l.dataId).values,c=r||i.dtype,[o,d]=e(i.shape,l.shape,h,f,c);return u.makeTensorInfo(d,c,o)}}}function createComplexBinaryKernelImpl(n){return(e,t,r,s,a,i)=>{const l=assertAndGetBroadcastShape$1(e,t),u=sizeFromShape$1(l),h=l.length,f=computeStrides$1(l),c=getTypedArrayFromDType$1("float32",u),o=getTypedArrayFromDType$1("float32",u),d=getBroadcastDims$2(e,l),m=getBroadcastDims$2(t,l),g=mergeRealAndImagArrays$1(r,s),y=mergeRealAndImagArrays$1(a,i),$=e.length,b=computeStrides$1(e),x=t.length,w=computeStrides$1(t);if(d.length+m.length===0)for(let v=0;v<c.length;v++){const S=v%g.length,T=v%y.length,C=n(g[S*2],g[S*2+1],y[T*2],y[T*2+1]);c[v]=C.real,o[v]=C.imag}else for(let v=0;v<c.length;v++){const S=indexToLoc$1(v,h,f),T=S.slice(-$);d.forEach(F=>T[F]=0);const C=locToIndex$1(T,$,b),I=S.slice(-x);m.forEach(F=>I[F]=0);const N=locToIndex$1(I,x,w),P=n(g[C*2],g[C*2+1],y[N*2],y[N*2+1]);c[v]=P.real,o[v]=P.imag}return[c,o,l]}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const addImpl$1=createSimpleBinaryKernelImpl$1((n,e)=>n+e),addComplexImpl=createComplexBinaryKernelImpl((n,e,t,r)=>({real:n+t,imag:e+r})),add$2=binaryKernelFunc$2(Add$2,addImpl$1,addComplexImpl),addConfig$2={kernelName:Add$2,backendName:"cpu",kernelFunc:add$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincountImpl$1(n,e,t,r,s){const a=sizeFromShape$1(r),i=makeZerosTypedArray$1(s,t);for(let l=0;l<n.length;l++){const u=n[l];if(u<0)throw new Error("Input x must be non-negative!");u>=s||(a>0?i[u]+=e[l]:i[u]+=1)}return i}function bincountReduceImpl$1(n,e,t,r=!1){const s=n.shape[0],a=n.shape[1],i=buffer$1([s,t],e.dtype);for(let l=0;l<s;l++)for(let u=0;u<a;u++){const h=n.get(l,u);if(h<0)throw new Error("Input x must be non-negative!");h>=t||(r?i.set(1,l,h):e.size>0?i.set(i.get(l,h)+e.get(l,u),l,h):i.set(i.get(l,h)+1,l,h))}return i}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const bitwiseAndImpl$1=createSimpleBinaryKernelImpl$1((n,e)=>n&e),bitwiseAnd$1=binaryKernelFunc$2(BitwiseAnd,bitwiseAndImpl$1),bitwiseAndConfig$1={kernelName:BitwiseAnd,backendName:"cpu",kernelFunc:bitwiseAnd$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createSimpleUnaryImpl$1(n){return(e,t,r)=>{const s=getArrayFromDType$1(t,e.length);for(let a=0;a<e.length;++a)s[a]=n(e[a],r);return s}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unaryKernelFunc$2(n,e,t){const r=createSimpleUnaryImpl$1(e);return unaryKernelFuncFromImpl(n,r,t)}function unaryKernelFuncFromImpl(n,e,t){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;assertNotComplex$2(i,n);const l=a,u=l.data.get(i.dataId).values;let h;if(i.dtype==="string"){if(!Array.isArray(u))throw new Error("String tensor's value was not an instance of Array");h=fromUint8ToStringArray$1(u)}else h=u;const f=t||i.dtype,c=e(h,f,s);return l.makeTensorInfo(i.shape,f,c)}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ceilImpl$1=createSimpleUnaryImpl$1(n=>Math.ceil(n)),ceil$2=unaryKernelFuncFromImpl(Ceil$1,ceilImpl$1),ceilConfig$2={kernelName:Ceil$1,backendName:"cpu",kernelFunc:ceil$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concatImpl$3(n,e,t,r){const s=getArrayFromDType$1(t,sizeFromShape$1(e));if(r&&t!=="string"){let a=0;n.forEach(i=>{const l=sizeFromShape$1(i.shape);s.set(i.vals,a),a+=l})}else{let a=0;n.forEach(i=>{const l=t==="string"?fromUint8ToStringArray$1(i.vals):i.vals;let u=0;for(let h=0;h<i.shape[0];++h){const f=h*e[1]+a;for(let c=0;c<i.shape[1];++c)s[f+c]=l[u++]}a+=i.shape[1]})}return s}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const equalImpl$1=createSimpleBinaryKernelImpl$1((n,e)=>n===e?1:0),equal$2=binaryKernelFunc$2(Equal$1,equalImpl$1,null,"bool"),equalConfig$2={kernelName:Equal$1,backendName:"cpu",kernelFunc:equal$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expImpl$1=createSimpleUnaryImpl$1(n=>Math.exp(n)),exp$2=unaryKernelFuncFromImpl(Exp$1,expImpl$1,"float32"),expConfig$2={kernelName:Exp$1,backendName:"cpu",kernelFunc:exp$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expm1Impl$1=createSimpleUnaryImpl$1(n=>Math.expm1(n)),expm1$2=unaryKernelFuncFromImpl(Expm1$1,expm1Impl$1),expm1Config$2={kernelName:Expm1$1,backendName:"cpu",kernelFunc:expm1$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorImpl$1=createSimpleUnaryImpl$1(n=>Math.floor(n)),floor$2=unaryKernelFuncFromImpl(Floor$1,floorImpl$1),floorConfig$2={kernelName:Floor$1,backendName:"cpu",kernelFunc:floor$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorDivImpl$1=createSimpleBinaryKernelImpl$1((n,e)=>Math.floor(n/e)),floorDiv$3=binaryKernelFunc$2(FloorDiv$1,floorDivImpl$1,null,"int32"),floorDivConfig$2={kernelName:FloorDiv$1,backendName:"cpu",kernelFunc:floorDiv$3};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherNdImpl$1(n,e,t,r,s,a,i,l,u){const h=buffer$1([r,a],t);for(let f=0;f<r;f++){const c=[];let o=0;for(let d=0;d<s;d++){const m=n[f*s+d];o+=m*i[d],c.push(m)}if(o<0||o>=u/a)throw new Error(`Invalid indices: ${c} does not index into ${l}`);for(let d=0;d<a;d++)h.values[f*a+d]=e.get(...e.indexToLoc(o*a+d))}return h}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherV2Impl$1(n,e,t){const r=buffer$1(t,n.dtype);for(let s=0;s<r.size;++s){const i=r.indexToLoc(s).slice(),l=i[0],u=i[2],h=e.locToIndex([l,u]);i[2]=e.values[h];const f=n.locToIndex(i);0<=f&&f<n.values.length&&(r.values[s]=n.values[f])}return r}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greaterImpl$1=createSimpleBinaryKernelImpl$1((n,e)=>n>e?1:0),greater$2=binaryKernelFunc$2(Greater$1,greaterImpl$1,null,"bool"),greaterConfig$2={kernelName:Greater$1,backendName:"cpu",kernelFunc:greater$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greaterEqualImpl$1=createSimpleBinaryKernelImpl$1((n,e)=>n>=e?1:0),greaterEqual$2=binaryKernelFunc$2(GreaterEqual$1,greaterEqualImpl$1,null,"bool"),greaterEqualConfig$2={kernelName:GreaterEqual$1,backendName:"cpu",kernelFunc:greaterEqual$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lessImpl$1=createSimpleBinaryKernelImpl$1((n,e)=>n<e?1:0),less$2=binaryKernelFunc$2(Less$1,lessImpl$1,null,"bool"),lessConfig$2={kernelName:Less$1,backendName:"cpu",kernelFunc:less$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lessEqualImpl$1=createSimpleBinaryKernelImpl$1((n,e)=>n<=e?1:0),lessEqual$2=binaryKernelFunc$2(LessEqual$1,lessEqualImpl$1,null,"bool"),lessEqualConfig$2={kernelName:LessEqual$1,backendName:"cpu",kernelFunc:lessEqual$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linSpaceImpl$1(n,e,t){const r=(e-n)/(t-1),s=makeZerosTypedArray$1(t,"float32");s[0]=n;for(let a=1;a<s.length;a++)s[a]=s[a-1]+r;return s}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logImpl$1=createSimpleUnaryImpl$1(n=>Math.log(n)),log$2=unaryKernelFuncFromImpl(Log$1,logImpl$1),logConfig$2={kernelName:Log$1,backendName:"cpu",kernelFunc:log$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxImpl$2(n,e,t,r){const s=getTypedArrayFromDType$1(r,sizeFromShape$1(t));for(let a=0;a<s.length;++a){const i=a*e;let l=n[i];for(let u=0;u<e;++u){const h=n[i+u];(Number.isNaN(h)||h>l)&&(l=h)}s[a]=l}return s}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maximumImpl$1=createSimpleBinaryKernelImpl$1((n,e)=>Math.max(n,e)),maximum$3=binaryKernelFunc$2(Maximum$2,maximumImpl$1),maximumConfig$2={kernelName:Maximum$2,backendName:"cpu",kernelFunc:maximum$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const minimumImpl$1=createSimpleBinaryKernelImpl$1((n,e)=>Math.min(n,e)),minimum$2=binaryKernelFunc$2(Minimum$2,minimumImpl$1),minimumConfig$2={kernelName:Minimum$2,backendName:"cpu",kernelFunc:minimum$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const multiplyImpl$1=createSimpleBinaryKernelImpl$1((n,e)=>n*e),multiplyComplexImpl=createComplexBinaryKernelImpl((n,e,t,r)=>({real:n*t-e*r,imag:n*r+e*t})),multiply$1=binaryKernelFunc$2(Multiply$2,multiplyImpl$1,multiplyComplexImpl),multiplyConfig$2={kernelName:Multiply$2,backendName:"cpu",kernelFunc:multiply$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function negImpl$1(n,e,t){const r=createScalarValue$1(-1,t);return multiplyImpl$1([],e,r,n,t)}function neg$2(n){const{inputs:e,backend:t}=n,{x:r}=e;assertNotComplex$2(r,"neg");const s=t.data.get(r.dataId).values,[a,i]=negImpl$1(s,r.shape,r.dtype);return t.makeTensorInfo(i,r.dtype,a)}const negConfig$2={kernelName:Neg$1,backendName:"cpu",kernelFunc:neg$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const notEqualImpl$1=createSimpleBinaryKernelImpl$1((n,e)=>n!==e?1:0),notEqual$2=binaryKernelFunc$2(NotEqual$1,notEqualImpl$1,null,"bool"),notEqualConfig$2={kernelName:NotEqual$1,backendName:"cpu",kernelFunc:notEqual$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transposeImpl$2(n,e,t,r,s){const a=e.length,i=sizeFromShape$1(e),l=computeStrides$1(e),u=computeStrides$1(s),h=getTypedArrayFromDType$1(t,sizeFromShape$1(s));for(let f=0;f<i;++f){const c=indexToLoc$1(f,a,l),o=new Array(c.length);for(let m=0;m<o.length;m++)o[m]=c[r[m]];const d=locToIndex$1(o,a,u);h[d]=n[f]}return h}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transpose$2(n){const{inputs:e,attrs:t,backend:r}=n,{x:s}=e,{perm:a}=t;assertNotComplex$2(s,"transpose");const i=s.shape.length,l=new Array(i);for(let c=0;c<l.length;c++)l[c]=s.shape[a[c]];const u=r.data.get(s.dataId).values,h=transposeImpl$2(u,s.shape,s.dtype,a,l);return{dataId:r.write(h,l,s.dtype),shape:l,dtype:s.dtype}}const transposeConfig$2={kernelName:Transpose$1,backendName:"cpu",kernelFunc:transpose$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prodImpl$1(n,e,t,r){const[s,a]=computeOutAndReduceShapes$1(n,r),i=upcastType$1(e,"int32"),l=makeZerosTypedArray$1(sizeFromShape$1(s),i),u=sizeFromShape$1(a);for(let h=0;h<l.length;++h){const f=h*u;let c=1;for(let o=0;o<u;++o)c*=t[f+o];l[h]=c}return{outVals:l,outShape:s,outDtype:i}}function prod$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,keepDims:i}=r;assertNotComplex$2(s,"prod");const l=s.shape.length,u=parseAxisParam$1(a,s.shape),h=getAxesPermutation$1(u,l);let f=u,c=s;const o=[];h!=null&&(c=transpose$2({inputs:{x:s},backend:t,attrs:{perm:h}}),o.push(c),f=getInnerMostAxes$1(f.length,l));const d=t.data.get(c.dataId).values,{outVals:m,outShape:g,outDtype:y}=prodImpl$1(c.shape,c.dtype,d,f);let $=g;return i&&($=expandShapeToKeepDim$1(g,u)),o.forEach(b=>t.disposeIntermediateTensorInfo(b)),t.makeTensorInfo($,y,m)}const prodConfig$2={kernelName:Prod$1,backendName:"cpu",kernelFunc:prod$2};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function validateIndices$1(n,e,t){n.forEach((r,s)=>{if(r<0||r>=t){const a=indexToLoc$1(s,e.length,computeStrides$1(e)).join(",");throw new Error(`indices[${a}] = ${r} is not in [0, ${t})`)}})}function validateSplits$1(n,e){for(let t=0;t<n.length;++t){const r=n[t],s=t===n.length-1?e:n[t+1].length;if(r.length===0)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let a=1;a<r.length;++a)if(r[a-1]>r[a])throw new Error("Ragged splits must be sorted in ascending order")}}function makeSplits$1(n,e,t,r){const s=[];let a=0;const i=e.length-1+t.length,l=new Array(i).fill(null).map(()=>[0]);validateSplits$1(t,r);let u=1;for(let h=0;h<e.length-1;++h){u*=e[h];const f=e[h+1];for(let c=1;c<u+1;++c)l[h].push(c*f)}for(let h=0;h<n.length;++h){let f=n[h],c=n[h]+1;for(let o=0;o<t.length;++o){const d=t[o],m=o+e.length-1;if(m>=0){const g=l[m],y=g[g.length-1]-d[f];for(let $=f;$<c;++$)l[m].push(d[$+1]+y)}f=d[f],c=d[c]}c!==f&&(s.push([f,c]),a+=c-f)}return{outSplits:l,valueSlices:s,numValues:a}}function getSplits$1(n){const e=[];for(let t=0;t<n.length;++t){const r=n[t].length,s=getArrayFromDType$1("int32",r);e.push(s),n[t].forEach((a,i)=>s[i]=a)}return e}function computeFlatOuterDims$1(n,e){const t=n.slice(0,e);for(;t.length<e;)t.push(1);for(let r=e;r<n.length;r++)t[e-1]*=n[r];return t}function writeValueSlices$1(n,e,t,r,s,a){const i=computeFlatOuterDims$1(e,2)[1],l=computeFlatOuterDims$1(a,2)[1];let u=0;for(const h of t)for(let f=h[0];f<h[1];++f){for(let c=0;c<r;++c)s[u*l+c]=n[f*i+c];++u}}function getValues$1(n,e,t,r,s){const a=e.slice();a[0]=s;const i=getArrayFromDType$1(t,sizeFromShape$1(a)),l=n.length,u=l===0?0:l/e[0];return writeValueSlices$1(n,e,r,u,i,a),[i,a]}function raggedGatherImpl$1(n,e,t,r,s,a,i,l){if(n.length===0)throw new Error("paramsNestedSplits must be non empty");if(e[0].length===0)throw new Error("Split tensors must not be scalars");const u=e[0][0]-1;if(validateIndices$1(a,i,u),r.length===0)throw new Error("params.rank must be nonzero");const h=r[0],{outSplits:f,valueSlices:c,numValues:o}=makeSplits$1(a,i,n,h),d=getSplits$1(f),m=getValues$1(t,r,s,c,o);return[d,m[0],m[1]]}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const INT32_MAX$1=2147483647;function raggedRangeImpl$1(n,e,t,r,s,a,i){if(e.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");const l=e.length===0,u=s.length===0,h=i.length===0,f=[];l||f.push(e[0]),u||f.push(s[0]),h||f.push(i[0]);for(let y=1;y<f.length;++y)if(f[y]!==f[y-1])throw new Error("starts, limits, and deltas must have the same shape");const c=f.length===0?1:f[0],o=getArrayFromDType$1("int32",c+1);o[0]=0;for(let y=0;y<c;++y){const $=l?n[0]:n[y],b=u?r[0]:r[y],x=h?a[0]:a[y];if(x===0)throw new Error("Requires delta != 0");let w;if(x>0&&b<$||x<0&&b>$)w=0;else if(w=Math.ceil(Math.abs((b-$)/x)),w>INT32_MAX$1)throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX$1}`);o[y+1]=o[y]+w}const d=o[c],m=getArrayFromDType$1(t,d);let g=0;for(let y=0;y<c;++y){const $=o[y+1]-o[y];let b=l?n[0]:n[y];const x=h?a[0]:a[y];for(let w=0;w<$;++w)m[g++]=b,b+=x}return[o,m]}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var RowPartitionType$2=RowPartitionType$3;let RaggedTensorToTensorOp$1=class zt{constructor(e,t,r,s,a,i,l,u,h,f){this.shape=e,this.shapeShape=t,this.values=r,this.valuesShape=s,this.valuesDType=a,this.defaultValue=i,this.defaultValueShape=l,this.rowPartitionValues=u,this.rowPartitionValuesShapes=h,this.rowPartitionTypes=getRowPartitionTypesHelper$1(f),this.raggedRank=getRaggedRank$1(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===RowPartitionType$2.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===RowPartitionType$2.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case RowPartitionType$2.VALUE_ROWIDS:return zt.getMaxWidthValueRowID(t);case RowPartitionType$2.ROW_SPLITS:return zt.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${RowPartitionType$2[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(t===0||t===1)return 0;let r=0;for(let s=0;s<t-1;++s){const a=e[s+1]-e[s];a>r&&(r=a)}return r}static getMaxWidthValueRowID(e){const t=e.length;if(t===0)return 0;let r=0,s=e[0],a=0;for(let i=1;i<t;++i){const l=e[i];l!==s&&(s=l,a=Math.max(i-r,a),r=i)}return Math.max(t-r,a)}tensorShapeFromTensor(e,t,r=!0){if(t.length===0){if(e[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return makeShape$1(e,r)}calculateOutputSize(e){const t=this.valuesShape,r=this.defaultValueShape;validateDefaultValueShape$1(r,t);const s=this.tensorShapeFromTensor(this.shape,this.shapeShape),i=combineRaggedTensorToTensorShapes$1(this.raggedRank,s,t);i[0]<0&&(i[0]=e);for(let l=1;l<=this.raggedRank;++l)i[l]<0&&(i[l]=this.getMaxWidth(l));return i}calculateFirstParentOutputIndex(e,t,r){const s=Math.min(e,r),a=[];let i=0;for(let l=0;l<s;++l,i+=t)a.push(i);for(let l=s;l<e;++l)a.push(-1);return assert$2(a.length===e,()=>"Final length of result must be equal to firstDimension."),a}calculateOutputIndexRowSplit(e,t,r,s){const a=e.length,i=[];for(let l=0;l<a-1;++l){const u=e[l+1]-e[l];let h=Math.min(s,u),f=t[l];f===-1&&(h=0);for(let c=0;c<h;++c)i.push(f),f+=r;for(let c=0;c<u-h;++c)i.push(-1)}if(a>0&&i.length!==e[a-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(e,t,r,s){const a=e.length,i=[];if(a===0)return[];let l=0,u=e[0];if(u>=t.length)throw new Error(`Got currentValueRowId=${u}, which is not less than ${t.length}`);let h=t[u];i.push(h);for(let f=1;f<a;++f){const c=e[f];if(c===u)h>=0&&(++l,l<s?h+=r:h=-1);else{if(l=0,u=c,c>=t.length)throw new Error(`Got nextValueRowId=${c} which is not less than ${t.length}`);h=t[c]}i.push(h)}if(i.length!==e.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(e,t,r,s){const a=this.getRowPartitionTensor(e),i=this.getRowPartitionTypeByDimension(e);switch(i){case RowPartitionType$2.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(a,t,r,s);case RowPartitionType$2.ROW_SPLITS:if(a.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${a.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(a,t,r,s);default:throw new Error(`Unsupported partition type: ${RowPartitionType$2[i]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case RowPartitionType$2.FIRST_DIM_SIZE:return e[0];case RowPartitionType$2.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case RowPartitionType$2.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${RowPartitionType$2[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const t=this.getFirstDimensionSize(),r=this.calculateOutputSize(t),s=new Array(this.raggedRank+1);s[s.length-1]=1;for(let u=s.length-2;u>=0;--u)s[u]=s[u+1]*r[u+1];const a=makeShape$1(r,!1),i=getArrayFromDType$1(this.valuesDType,sizeFromShape$1(a));if(s[0]*r[0]>0){let u=this.calculateFirstParentOutputIndex(t,s[0],r[0]);for(let h=1;h<=this.raggedRank;++h)u=this.calculateOutputIndex(h-1,u,s[h],r[h]);this.setOutput(this.raggedRank,u,i,a)}return[a,i]}setOutput(e,t,r,s){if(r.length===0)return;const a=this.values,i=r;let l=s.slice();l=l.slice(e+1);const u=sizeFromShape$1(l),h=t.length;let f=this.defaultValue;if(f.length!==u&&f.length!==1){const m=this.defaultValueShape;tidy$1(()=>{const g=reshape$5(f,m);f=broadcastTo$1(g,l).dataSync()})}let c=0,o=0,d=0;for(let m=0;m<=h;++m){let g=m<h?t[m]:-1;if(g===d){++d;continue}if(o<d){const y=a.subarray(c*u),$=i.subarray(o*u),b=(d-o)*u;copyArray$1($,y,b)}if(m>=h){const y=r.length;g=Math.floor(y/u)}if(g>d)if(this.defaultValue.length===1)i.subarray(d*u,g*u).fill(this.defaultValue[0]),d=g;else for(;g>d;){const y=i.slice(d*u);copyArray$1(y,f,u),++d}g<0?(c=m+1,o=d):(c=m,o=d,d=o+1)}}};function copyArray$1(n,e,t){for(let r=0;r<t;r++)n[r]=e[r]}function makeShape$1(n,e){const t=[];for(let r of n){if(r<0){if(!e)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}t.push(r)}return t}function raggedTensorToTensorImpl$1(n,e,t,r,s,a,i,l,u,h){return new RaggedTensorToTensorOp$1(n,e,t,r,s,a,i,l,u,h).compute()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rangeImpl$1(n,e,t,r){const s=n===e,a=n<e&&t<0,i=e<n&&t>1;if(s||a||i)return makeZerosTypedArray$1(0,r);const l=Math.abs(Math.ceil((e-n)/t)),u=makeZerosTypedArray$1(l,r);e<n&&t===1&&(t=-1),u[0]=n;for(let h=1;h<u.length;h++)u[h]=u[h-1]+t;return u}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rsqrtImpl$1=createSimpleUnaryImpl$1(n=>1/Math.sqrt(n)),rsqrt$2=unaryKernelFuncFromImpl(Rsqrt$1,rsqrtImpl$1),rsqrtConfig$2={kernelName:Rsqrt$1,backendName:"cpu",kernelFunc:rsqrt$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterImpl$1(n,e,t,r,s,a,i,l,u,h){const f=[r/s,s],c=n.values,o=e.values;if(r===0)return buffer$1(t,e.dtype);const d=u instanceof TensorBuffer$1?u:buffer$1(f,e.dtype);typeof u=="string"||typeof u=="number"?d.values.fill(u):typeof u=="boolean"&&d.values.fill(+u);for(let m=0;m<a;m++){const g=[];let y=0;for(let $=0;$<i;$++){const b=c[m*i+$];g.push(b),y+=b*l[$]}if(y<0||y>=r/s)throw new Error(`Invalid indices: ${g} does not index into ${t}`);for(let $=0;$<s;$++)h?d.values[y*s+$]+=o[m*s+$]:d.values[y*s+$]=e.rank===0?o[0]:o[m*s+$]}return d}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sigmoidImpl$1=createSimpleUnaryImpl$1(n=>1/(1+Math.exp(-n))),sigmoid$2=unaryKernelFunc$2(Sigmoid$2,n=>1/(1+Math.exp(-n))),sigmoidConfig$2={kernelName:Sigmoid$2,backendName:"cpu",kernelFunc:sigmoid$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sliceImpl$1(n,e,t,r,s){const a=isSliceContinous$1(r,e,t),i=sizeFromShape$1(t),l=computeStrides$1(r);if(a){const c=computeFlatOffset$1(e,l);return s==="string"?n.slice(c,c+i):n.subarray(c,c+i)}const u=s==="string"?fromUint8ToStringArray$1(n):n,h=buffer$1(r,s,u),f=buffer$1(t,s);for(let c=0;c<f.size;++c){const o=f.indexToLoc(c),d=o.map((m,g)=>m+e[g]);f.set(h.get(...d),...o)}return s==="string"?fromStringArrayToUint8$1(f.values):f.values}function slice$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{begin:a,size:i}=r;assertNotComplex$2(s,"slice");const[l,u]=parseSliceParams$1(s,a,i);assertParamsValid$1(s,l,u);const h=t.data.get(s.dataId).values,f=sliceImpl$1(h,l,u,s.shape,s.dtype);return t.makeTensorInfo(u,s.dtype,f)}const sliceConfig$2={kernelName:Slice$1,backendName:"cpu",kernelFunc:slice$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseFillEmptyRowsImpl$1(n,e,t,r,s,a,i){const l=e[0],u=a[0],h=new Array(u),f=new Array(l),c=e[1];if(u===0){if(l!==0)throw new Error(getSparseFillEmptyRowsIndicesDenseShapeMismatch$1(l));const y=getArrayFromDType$1(t,0),$=getArrayFromDType$1(s,0);return[y,[0,c],$,h,f]}let o=!0,d=0;const m=new Array(u).fill(0);for(let y=0;y<l;++y){const $=n[y*c];if($<0)throw new Error(getSparseFillEmptyRowsNegativeIndexErrorMessage$1(y,$));if($>=u)throw new Error(getSparseFillEmptyRowsOutOfRangeIndexErrorMessage$1(y,$,u));++m[$],o=o&&$>=d,d=$}let g=!0;for(let y=0;y<u;++y){const $=m[y]===0;h[y]=$,g=g&&!$,m[y]=Math.max(m[y],1),y>0&&(m[y]+=m[y-1])}if(g&&o){const y=n,$=r;for(let b=0;b<l;++b)f[b]=b;return[y,[l,c],$,h,f]}else{const y=m[u-1],$=getArrayFromDType$1(t,y*c),b=getArrayFromDType$1(s,y),x=new Array(u).fill(0);for(let w=0;w<l;++w){const v=n[w*c],S=x[v],T=(v===0?0:m[v-1])+S;x[v]++;for(let C=0;C<c;++C)$[T*c+C]=n[w*c+C];b[T]=r[w],f[w]=T}for(let w=0;w<u;++w)if(x[w]===0){const S=w===0?0:m[w-1];$[S*c+0]=w;for(let T=1;T<c;++T)$[S*c+T]=0;b[S]=i}return[$,[y,c],b,h,f]}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseReshapeImpl$1(n,e,t,r,s){const a=sizeFromShape$1(r),i=e[0],l=s.length,u=[];let h=1,f=-1;for(let y=0;y<l;++y){const $=s[y];if($===-1){if(f!==-1)throw new Error(getSparseReshapeMultipleNegativeOneOutputDimErrorMessage$1(f,y));f=y,u.push(1)}else{if($<0)throw new Error(getSparseReshapeNegativeOutputDimErrorMessage$1(y,$));h*=$,u.push($)}}if(f!==-1){if(h<=0)throw new Error(getSparseReshapeEmptyTensorZeroOutputDimErrorMessage$1());const y=Math.trunc(a/h);if(h*y!==a)throw new Error(getSparseReshapeInputOutputMultipleErrorMessage$1(r,u));u[f]=y}if(sizeFromShape$1(u)!==a)throw new Error(getSparseReshapeInputOutputMismatchErrorMessage$1(r,u));const o=r.length,d=[];if(o>0){d[o-1]=1;for(let y=o-2;y>=0;--y)d[y]=d[y+1]*r[y+1]}const m=[];if(l>0){m[l-1]=1;for(let y=l-2;y>=0;--y)m[y]=m[y+1]*u[y+1]}const g=getArrayFromDType$1(t,i*l);for(let y=0;y<i;++y){let $=0;for(let b=0;b<o;++b)$+=n[y*o+b]*d[b];for(let b=0;b<l;++b)g[y*l+b]=Math.trunc($/m[b]),$%=m[b]}return[g,[i,l],u]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentReductionImpl$1(n,e,t,r,s,a=!1,i=0){const l=r.length,u=[e[0],n.length/e[0]],h=u[1],c=l>0?s[l-1]+1:0;if(c<0)throw new Error(getSparseSegmentReductionNegativeSegmentIdsErrorMessage$1());const o=e.slice();o[0]=c;const d=o.reduce((x,w)=>x*w,1),m=getArrayFromDType$1(t,d);if(l===0)return c>0&&m.fill(i),[m,o];if(c<=0)throw new Error(getSparseSegmentReductionNegativeSegmentIdsErrorMessage$1());let g=0,y=1,$=0,b=s[g];for(;;){let x=0;if(y<l){if(x=s[y],b===x){++y;continue}if(b>=x)throw new Error(getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage$1())}if(b<0||b>=c)throw new Error(getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage$1(b,c));b>$&&m.fill(i,$*h,b*h);for(let w=g;w<y;++w){const v=r[w];if(v<0||v>=u[0])throw new Error(getSparseSegmentReductionIndicesOutOfRangeErrorMessage$1(w,r[w],u[0]));for(let S=0;S<h;S++)m[b*h+S]+=n[v*h+S]}if(a)for(let w=0;w<h;w++)m[b*h+w]/=y-g;if(g=y,++y,$=b+1,b=x,y>l)break}return $<c&&m.fill(i,$*h,c*h),[m,o]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sqrtImpl$1=createSimpleUnaryImpl$1(n=>Math.sqrt(n)),sqrt$3=unaryKernelFunc$2(Sqrt$1,n=>Math.sqrt(n)),sqrtConfig$2={kernelName:Sqrt$1,backendName:"cpu",kernelFunc:sqrt$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squaredDifferenceImpl$1=createSimpleBinaryKernelImpl$1((n,e)=>{const t=n-e;return t*t}),squaredDifference$2=binaryKernelFunc$2(SquaredDifference$1,squaredDifferenceImpl$1),squaredDifferenceConfig$2={kernelName:SquaredDifference$1,backendName:"cpu",kernelFunc:squaredDifference$2};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const staticRegexReplaceImpl$1=createSimpleUnaryImpl$1((n,e)=>{const{pattern:t,replaceGlobal:r,rewrite:s}=e;return n.replace(new RegExp(t,r?"g":""),s)}),staticRegexReplace$1=unaryKernelFuncFromImpl(StaticRegexReplace,staticRegexReplaceImpl$1),staticRegexReplaceConfig$1={kernelName:StaticRegexReplace,backendName:"cpu",kernelFunc:staticRegexReplace$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSliceImpl$1(n,e,t,r){const s=buffer$1(n,e.dtype);for(let a=0;a<s.size;a++){const i=s.indexToLoc(a),l=new Array(i.length);for(let u=0;u<l.length;u++)l[u]=i[u]*t[u]+r[u];s.set(e.get(...l),...i)}return s}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let StringNGramsOp$1=class{constructor(e,t,r,s,a,i){this.separator=encodeString$1(e),this.nGramWidths=t,this.leftPad=encodeString$1(r),this.rightPad=encodeString$1(s),this.padWidth=a,this.preserveShort=i}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const r=this.getPadWidth(t);return Math.max(0,e+2*r-t+1)}createNGrams(e,t,r,s,a,i){for(let l=0;l<a;++l){const u=this.getPadWidth(i),h=Math.max(0,u-l),f=Math.max(0,u-(a-(l+1))),c=i-(h+f),o=t+(h>0?0:l-u);let d=0;d+=h*this.leftPad.length;for(let b=0;b<c;++b)d+=e[o+b].length;d+=f*this.rightPad.length;const m=h+f+c-1;d+=m*this.separator.length,r[s+l]=new Uint8Array(d);const g=r[s+l];let y=0;const $=b=>b.forEach(x=>g[y++]=x);for(let b=0;b<h;++b)$(this.leftPad),$(this.separator);for(let b=0;b<c-1;++b)$(e[o+b]),$(this.separator);if(c>0){$(e[o+c-1]);for(let b=0;b<f;++b)$(this.separator),$(this.rightPad)}else{for(let b=0;b<f-1;++b)$(this.rightPad),$(this.separator);$(this.rightPad)}}}compute(e,t){const r=e.length,s=t.length;if(s>0){let u=t[0];if(u!==0)throw new Error(`First split value must be 0, got ${u}`);for(let h=1;h<s;++h){let f=t[h]>=u;if(f=f&&t[h]<=r,!f)throw new Error(`Invalid split value ${t[h]}, must be in [${u}, ${r}]`);u=t[h]}if(u!==r)throw new Error(`Last split value must be data size. Expected ${r}, got ${u}`)}const a=s-1,i=getArrayFromDType$1("int32",s);if(r===0||s===0){const u=new Array(r);for(let h=0;h<=a;++h)i[h]=0;return[u,i]}i[0]=0;for(let u=1;u<=a;++u){const h=t[u]-t[u-1];let f=0;this.nGramWidths.forEach(c=>{f+=this.getNumNGrams(h,c)}),this.preserveShort&&h>0&&f===0&&(f=1),i[u]=i[u-1]+f}const l=new Array(i[a]);for(let u=0;u<a;++u){const h=t[u];let f=i[u];if(this.nGramWidths.forEach(c=>{const o=t[u+1]-t[u],d=this.getNumNGrams(o,c);this.createNGrams(e,h,l,f,d,c),f+=d}),this.preserveShort&&f===i[u]){const c=t[u+1]-t[u];if(c===0)continue;const o=c+2*this.padWidth,d=1;this.createNGrams(e,h,l,f,d,o)}}return[l,i]}};function stringNGramsImpl$1(n,e,t,r,s,a,i,l){return new StringNGramsOp$1(t,r,s,a,i,l).compute(n,e)}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function split$1(n,e,t,r){if(!n.length)return;if(e.length===0){for(let a=0;a<n.length;++a)r.push(n.subarray(a,a+1));return}if(e.length===1){const a=e[0];let i=n.indexOf(a);for(;i!==-1;){const l=n.subarray(0,i);(!t||l.length!==0)&&r.push(l),n=n.subarray(i+1),i=n.indexOf(a)}(!t||n.length!==0)&&r.push(n);return}let s=0;for(let a=0;a<n.length+1;a++)if(a===n.length||e.indexOf(n[a])!==-1){const i=n.subarray(s,a);(!t||i.length!==0)&&r.push(i),s=a+1}}function stringSplitImpl$1(n,e,t){const r=n.length,s=[];let a=0,i=0;const l=new Array(r);for(let o=0;o<r;++o){const d=s.length;split$1(n[o],e,t,s);const m=s.length-d;l[o]=m,a+=m,i=Math.max(i,m)}const u=getArrayFromDType$1("int32",a*2),h=new Array(a),f=[r,i];let c=0;for(let o=0;o<r;++o)for(let d=0;d<l[o];++d)u[c*2]=o,u[c*2+1]=d,h[c]=s[c],++c;return[u,h,f]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringToHashBucketFastImpl$1(n,e){const t=getArrayFromDType$1("int32",n.length);for(let r=0;r<n.length;++r)t[r]=fingerPrint64$1(n[r]).modulo(e).getLowBitsUnsigned();return t}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const subImpl$1=createSimpleBinaryKernelImpl$1((n,e)=>n-e),subComplexImpl=createComplexBinaryKernelImpl((n,e,t,r)=>({real:n-t,imag:e-r})),sub$3=binaryKernelFunc$2(Sub$1,subImpl$1,subComplexImpl),subConfig$2={kernelName:Sub$1,backendName:"cpu",kernelFunc:sub$3};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tileImpl$1(n,e){const t=new Array(n.rank);for(let s=0;s<t.length;s++)t[s]=n.shape[s]*e[s];const r=buffer$1(t,n.dtype);for(let s=0;s<r.values.length;++s){const a=r.indexToLoc(s),i=new Array(n.rank);for(let u=0;u<i.length;u++)i[u]=a[u]%n.shape[u];const l=n.locToIndex(i);r.values[s]=n.values[l]}return r}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const comparePair$1=(n,e)=>{const t=e.value-n.value;return t===0?n.index-e.index:t};function select$4(n,e,t=0,r=n.length-1){for(;r>t;){if(r-t>600){const l=r-t+1,u=e-t+1,h=Math.log(l),f=.5*Math.exp(2*h/3),c=.5*Math.sqrt(h*f*(l-f)/l)*Math.sign(u-l/2),o=Math.max(t,Math.floor(e-u*f/l+c)),d=Math.min(r,Math.floor(e+(l-u)*f/l+c));select$4(n,e,o,d)}const s=n[e];let a=t,i=r;for(swap$1(n,t,e),comparePair$1(n[r],s)>0&&swap$1(n,t,r);a<i;){for(swap$1(n,a,i),a++,i--;comparePair$1(n[a],s)<0;)a=a+1;for(;comparePair$1(n[i],s)>0;)i=i-1}comparePair$1(n[t],s)===0?swap$1(n,t,i):(i=i+1,swap$1(n,i,r)),i<=e&&(t=i+1),e<=i&&(r=i-1)}}function topKImpl$1(n,e,t,r,s){const a=e[e.length-1],[i,l]=[n.length/a,a],u=getTypedArrayFromDType$1(t,i*r),h=getTypedArrayFromDType$1("int32",i*r);for(let c=0;c<i;c++){const o=c*l,d=n.subarray(o,o+l);let m=new Array(d.length);d.forEach((b,x)=>m[x]={value:b,index:x}),r<m.length&&(select$4(m,r),m=m.slice(0,r)),s&&m.sort(comparePair$1);const g=c*r,y=u.subarray(g,g+r),$=h.subarray(g,g+r);for(let b=0;b<r;b++)y[b]=m[b].value,$[b]=m[b].index}const f=e.slice();return f[f.length-1]=r,[buffer$1(f,t,u),buffer$1(f,"int32",h)]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function uniqueImpl$1(n,e,t,r){const s=parseAxisParam$1(e,t)[0],a=[1,t[0],1];for(let m=0;m<s;m++)a[0]*=t[m];a[1]=t[s];for(let m=s+1;m<t.length;m++)a[2]*=t[m];const i=new Map,l=new Int32Array(t[s]),u=new TensorBuffer$1(a,r,n),h=[],f=a[0]===1&&a[2]===1;for(let m=0;m<t[s];m++){let g;if(f)g=n[m].toString();else{const $=[];for(let b=0;b<a[0];b++)for(let x=0;x<a[2];x++)$.push(u.get(b,m,x));g=$.join(",")}const y=i.get(g);if(y!=null)l[m]=y;else{const $=i.size;i.set(g,$),l[m]=$,h.push(m)}}const c=a.slice();c[1]=i.size;const o=new TensorBuffer$1(c,r);h.forEach((m,g)=>{for(let y=0;y<a[0];y++)for(let $=0;$<a[2];$++)o.set(u.get(y,m,$),y,g,$)});const d=t.slice();return d[s]=c[1],{outputValues:o.values,outputShape:d,indices:l}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var shared$1=Object.freeze({__proto__:null,addImpl:addImpl$1,bincountImpl:bincountImpl$1,bincountReduceImpl:bincountReduceImpl$1,bitwiseAndImpl:bitwiseAndImpl$1,castImpl:castImpl$1,ceilImpl:ceilImpl$1,concatImpl:concatImpl$3,equalImpl:equalImpl$1,expImpl:expImpl$1,expm1Impl:expm1Impl$1,floorDivImpl:floorDivImpl$1,floorImpl:floorImpl$1,gatherNdImpl:gatherNdImpl$1,gatherV2Impl:gatherV2Impl$1,greaterEqualImpl:greaterEqualImpl$1,greaterImpl:greaterImpl$1,lessEqualImpl:lessEqualImpl$1,lessImpl:lessImpl$1,linSpaceImpl:linSpaceImpl$1,logImpl:logImpl$1,maxImpl:maxImpl$2,maximumImpl:maximumImpl$1,minimumImpl:minimumImpl$1,multiplyImpl:multiplyImpl$1,negImpl:negImpl$1,notEqualImpl:notEqualImpl$1,prodImpl:prodImpl$1,raggedGatherImpl:raggedGatherImpl$1,raggedRangeImpl:raggedRangeImpl$1,raggedTensorToTensorImpl:raggedTensorToTensorImpl$1,rangeImpl:rangeImpl$1,rsqrtImpl:rsqrtImpl$1,scatterImpl:scatterImpl$1,sigmoidImpl:sigmoidImpl$1,simpleAbsImpl:simpleAbsImpl$1,sliceImpl:sliceImpl$1,sparseFillEmptyRowsImpl:sparseFillEmptyRowsImpl$1,sparseReshapeImpl:sparseReshapeImpl$1,sparseSegmentReductionImpl:sparseSegmentReductionImpl$1,sqrtImpl:sqrtImpl$1,squaredDifferenceImpl:squaredDifferenceImpl$1,staticRegexReplaceImpl:staticRegexReplaceImpl$1,stridedSliceImpl:stridedSliceImpl$1,stringNGramsImpl:stringNGramsImpl$1,stringSplitImpl:stringSplitImpl$1,stringToHashBucketFastImpl:stringToHashBucketFastImpl$1,subImpl:subImpl$1,tileImpl:tileImpl$1,topKImpl:topKImpl$1,transposeImpl:transposeImpl$2,uniqueImpl:uniqueImpl$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */registerBackend$1("cpu",()=>new MathBackendCPU,1);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const elu$2=unaryKernelFunc$2(Elu$2,n=>n>=0?n:Math.exp(n)-1),eluConfig$2={kernelName:Elu$2,backendName:"cpu",kernelFunc:elu$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function leakyRelu$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{alpha:a}=r;assertNotComplex$2([s],"leakyRelu");const i=sizeFromShape$1(s.shape),l=t.data.get(s.dataId).values,u=getTypedArrayFromDType$1("float32",i);for(let h=0;h<l.length;h++)u[h]=l[h]<0?a*l[h]:l[h];return t.makeTensorInfo(s.shape,"float32",u)}const leakyReluConfig$2={kernelName:LeakyRelu$1,backendName:"cpu",kernelFunc:leakyRelu$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const preluImpl=createSimpleBinaryKernelImpl$1((n,e)=>n<0?e*n:n);function prelu$2(n){const{inputs:e,backend:t}=n,{x:r,alpha:s}=e;assertNotComplex$2([r,s],"prelu");const a=t.data.get(r.dataId).values,i=t.data.get(s.dataId).values,[l,u]=preluImpl(r.shape,s.shape,a,i,"float32");return t.makeTensorInfo(u,"float32",l)}const preluConfig$2={kernelName:Prelu$1,backendName:"cpu",kernelFunc:prelu$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const relu$2=unaryKernelFunc$2(Relu$2,n=>Math.max(0,n)),reluConfig$2={kernelName:Relu$2,backendName:"cpu",kernelFunc:relu$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const relu6$2=unaryKernelFunc$2(Relu6$2,n=>Math.min(Math.max(0,n),6)),relu6Config$2={kernelName:Relu6$2,backendName:"cpu",kernelFunc:relu6$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function applyActivation(n,e,t,r,s){if(t==="linear")return identity$2({inputs:{x:e},backend:n});if(t==="relu")return relu$2({inputs:{x:e},backend:n});if(t==="elu")return elu$2({inputs:{x:e},backend:n});if(t==="relu6")return relu6$2({inputs:{x:e},backend:n});if(t==="prelu")return prelu$2({inputs:{x:e,alpha:r},backend:n});if(t==="leakyrelu")return leakyRelu$2({inputs:{x:e},backend:n,attrs:{alpha:s}});if(t==="sigmoid")return sigmoid$2({inputs:{x:e},backend:n});throw new Error(`Activation ${t} has not been implemented for the CPU backend.`)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reshape$4(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{shape:a}=r,i=sizeFromShape$1(s.shape),l=inferFromImplicitShape$1(a,i),u=sizeFromShape$1(l);assert$2(i===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),t.incRef(s.dataId);const h=t.data.get(s.dataId);if(h.complexTensorInfos!=null){const f=h.complexTensorInfos.real,c=h.complexTensorInfos.imag;f.shape=l,c.shape=l}return{dataId:s.dataId,shape:l,dtype:s.dtype}}const reshapeConfig$2={kernelName:Reshape$2,backendName:"cpu",kernelFunc:reshape$4};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchMatMul$2(n){const{inputs:e,backend:t,attrs:r}=n,{a:s,b:a}=e,{transposeA:i,transposeB:l}=r;assertNotComplex$2([s,a],"matMul");const u=s.shape.length,h=a.shape.length,f=i?s.shape[u-2]:s.shape[u-1],c=l?a.shape[h-1]:a.shape[h-2],o=i?s.shape[u-1]:s.shape[u-2],d=l?a.shape[h-2]:a.shape[h-1],m=s.shape.slice(0,-2),g=a.shape.slice(0,-2),y=sizeFromShape$1(m),$=sizeFromShape$1(g),x=assertAndGetBroadcastShape$1(s.shape.slice(0,-2),a.shape.slice(0,-2)).concat([o,d]);assert$2(f===c,()=>`Error in matMul: inner shapes (${f}) and (${c}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${i} and transposeB=${l} must match.`);const w=i?[y,f,o]:[y,o,f],v=l?[$,d,c]:[$,c,d],S=reshape$4({inputs:{x:s},backend:t,attrs:{shape:w}}),T=reshape$4({inputs:{x:a},backend:t,attrs:{shape:v}}),C=i?S.shape[1]:S.shape[2],I=i?S.shape[2]:S.shape[1],N=l?T.shape[1]:T.shape[2],P=Math.max(y,$),F=t.data.get(S.dataId).values,_=t.data.get(T.dataId).values,D=computeStrides$1(S.shape),E=computeStrides$1(T.shape),[k,O,M]=i?[D[0],1,D[1]]:[D[0],D[1],1],[z,G,j]=l?[1,E[1],E[0]]:[E[1],1,E[0]],K=I*N,X=buffer$1([P,I,N],S.dtype),Y=X.values,J=t.blockSize;for(let te=0;te<P;te++){const re=te%y,ue=te%$;for(let ie=0;ie<I;ie+=J){const ce=Math.min(ie+J,I);for(let se=0;se<N;se+=J){const xe=Math.min(se+J,N);for(let me=0;me<C;me+=J){const $e=Math.min(me+J,C);for(let Se=ie;Se<ce;Se++)for(let ve=se;ve<xe;ve++){let Ee=0;for(let Ae=me;Ae<$e;Ae++){const Fe=F[re*k+Se*O+Ae*M],ke=_[Ae*z+ve*G+ue*j];Ee+=Fe*ke}Y[te*K+(Se*N+ve)]+=Ee}}}}}return t.disposeIntermediateTensorInfo(S),t.disposeIntermediateTensorInfo(T),t.makeTensorInfo(x,X.dtype,X.values)}const batchMatMulConfig$2={kernelName:BatchMatMul$1,backendName:"cpu",kernelFunc:batchMatMul$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function _fusedMatMul$2(n){const{inputs:e,backend:t,attrs:r}=n,{a:s,b:a,bias:i,preluActivationWeights:l}=e,{transposeA:u,transposeB:h,activation:f,leakyreluAlpha:c}=r;let o,d,m;const g=[];o=batchMatMul$2({inputs:{a:s,b:a},attrs:{transposeA:u,transposeB:h},backend:t}),i&&(d=add$2({inputs:{a:o,b:i},backend:t}),g.push(o),o=d),f&&(m=applyActivation(t,o,f,l,c),g.push(o),o=m);for(const $ of g)t.disposeIntermediateTensorInfo($);return o}const _fusedMatMulConfig$2={kernelName:_FusedMatMul$1,backendName:"cpu",kernelFunc:_fusedMatMul$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const acos$2=unaryKernelFunc$2(Acos$1,n=>Math.acos(n)),acosConfig$2={kernelName:Acos$1,backendName:"cpu",kernelFunc:acos$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const acosh$2=unaryKernelFunc$2(Acosh$1,n=>Math.acosh(n)),acoshConfig$2={kernelName:Acosh$1,backendName:"cpu",kernelFunc:acosh$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function addN$2(n){const{inputs:e,backend:t}=n,r=e;assertNotComplex$2(e,"addN");const s=r.map(l=>t.data.get(l.dataId).values),a=buffer$1(r[0].shape,r[0].dtype),i=a.values;for(let l=0;l<r.length;l++){const u=s[l];for(let h=0;h<i.length;h++)i[h]+=u[h]}return t.makeTensorInfo(a.shape,a.dtype,a.values)}const addNConfig$2={kernelName:AddN$1,backendName:"cpu",kernelFunc:addN$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function all$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,keepDims:i}=r;assertNotComplex$2(s,"all");const l=parseAxisParam$1(a,s.shape);let u=l;const h=getAxesPermutation$1(u,s.shape.length);let f=s;h!=null&&(f=transpose$2({inputs:{x:s},backend:t,attrs:{perm:h}}),u=getInnerMostAxes$1(u.length,s.shape.length)),assertAxesAreInnerMostDims$1("all",u,f.shape.length);const[c,o]=computeOutAndReduceShapes$1(f.shape,u),d=sizeFromShape$1(o),m=makeZerosTypedArray$1(sizeFromShape$1(c),f.dtype),g=t.data.get(f.dataId).values;for(let $=0;$<m.length;++$){const b=$*d;let x=g[b];for(let w=0;w<d;++w){const v=g[b+w];x=x&&v}m[$]=x}h!=null&&t.disposeIntermediateTensorInfo(f);const y=t.makeTensorInfo(c,f.dtype,m);if(i){const $=expandShapeToKeepDim$1(c,l),b=reshape$4({inputs:{x:y},backend:t,attrs:{shape:$}});return t.disposeIntermediateTensorInfo(y),b}return y}const allConfig$2={kernelName:All$1,backendName:"cpu",kernelFunc:all$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function any$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,keepDims:i}=r;assertNotComplex$2(s,"any");const l=parseAxisParam$1(a,s.shape);let u=l;const h=getAxesPermutation$1(u,s.shape.length);let f=s;h!=null&&(f=transpose$2({inputs:{x:s},backend:t,attrs:{perm:h}}),u=getInnerMostAxes$1(u.length,s.shape.length)),assertAxesAreInnerMostDims$1("any",u,f.shape.length);const[c,o]=computeOutAndReduceShapes$1(f.shape,u),d=sizeFromShape$1(o),m=makeZerosTypedArray$1(sizeFromShape$1(c),f.dtype),g=t.data.get(f.dataId).values;for(let $=0;$<m.length;++$){const b=$*d;let x=g[b];for(let w=0;w<d;++w){const v=g[b+w];x=x||v}m[$]=x}h!=null&&t.disposeIntermediateTensorInfo(f);const y=t.makeTensorInfo(c,f.dtype,m);if(i){const $=expandShapeToKeepDim$1(c,l),b=reshape$4({inputs:{x:y},backend:t,attrs:{shape:$}});return t.disposeIntermediateTensorInfo(y),b}return y}const anyConfig$2={kernelName:Any$1,backendName:"cpu",kernelFunc:any$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMax$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a}=r;assertNotComplex$2(s,"argMax");let i=parseAxisParam$1(a,s.shape);const l=getAxesPermutation$1(i,s.shape.length);let u=s;const h=[];l!=null&&(u=transpose$2({inputs:{x:s},backend:t,attrs:{perm:l}}),h.push(u),i=getInnerMostAxes$1(i.length,u.shape.length)),i=[i[0]],assertAxesAreInnerMostDims$1("argMax",i,u.shape.length);const[f,c]=computeOutAndReduceShapes$1(u.shape,i),o=sizeFromShape$1(f),d=makeZerosTypedArray$1(o,"int32"),m=sizeFromShape$1(c),g=t.data.get(u.dataId).values;for(let y=0;y<d.length;++y){const $=y*m;let b=g[$],x=0;for(let w=0;w<m;++w){const v=g[$+w];v>b&&(b=v,x=w)}d[y]=x}return h.forEach(y=>t.disposeIntermediateTensorInfo(y)),t.makeTensorInfo(f,"int32",d)}const argMaxConfig$2={kernelName:ArgMax$1,backendName:"cpu",kernelFunc:argMax$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMin$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a}=r;assertNotComplex$2(s,"argMin");let i=parseAxisParam$1(a,s.shape);const l=getAxesPermutation$1(i,s.shape.length);let u=s;const h=[];l!=null&&(u=transpose$2({inputs:{x:s},backend:t,attrs:{perm:l}}),h.push(u),i=getInnerMostAxes$1(i.length,u.shape.length)),i=[i[0]],assertAxesAreInnerMostDims$1("argMin",i,u.shape.length);const[f,c]=computeOutAndReduceShapes$1(u.shape,i),o=sizeFromShape$1(f),d=makeZerosTypedArray$1(o,"int32"),m=sizeFromShape$1(c),g=t.data.get(u.dataId).values;for(let y=0;y<d.length;++y){const $=y*m;let b=g[$],x=0;for(let w=0;w<m;++w){const v=g[$+w];v<b&&(b=v,x=w)}d[y]=x}return h.forEach(y=>t.disposeIntermediateTensorInfo(y)),t.makeTensorInfo(f,"int32",d)}const argMinConfig$2={kernelName:ArgMin$1,backendName:"cpu",kernelFunc:argMin$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const asin$2=unaryKernelFunc$2(Asin$1,n=>Math.asin(n)),asinConfig$2={kernelName:Asin$1,backendName:"cpu",kernelFunc:asin$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const asinh$2=unaryKernelFunc$2(Asinh$1,n=>Math.asinh(n)),asinhConfig$2={kernelName:Asinh$1,backendName:"cpu",kernelFunc:asinh$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atan$2=unaryKernelFunc$2(Atan$1,n=>Math.atan(n)),atanConfig$2={kernelName:Atan$1,backendName:"cpu",kernelFunc:atan$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atan2Impl=createSimpleBinaryKernelImpl$1((n,e)=>Math.atan2(n,e)),atan2$2=binaryKernelFunc$2(Atan2$1,atan2Impl),atan2Config$2={kernelName:Atan2$1,backendName:"cpu",kernelFunc:atan2$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atanh$2=unaryKernelFunc$2(Atanh$1,n=>Math.atanh(n)),atanhConfig$2={kernelName:Atanh$1,backendName:"cpu",kernelFunc:atanh$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pool(n,e,t,r,s,a){const i=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,h=s.dilationWidth,f=s.effectiveFilterHeight,c=s.effectiveFilterWidth,o=s.padInfo.top,d=s.padInfo.left,m=a==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=buffer$1(s.outShape,t),y=g.values,$=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let w=0;w<s.batchSize;++w){const v=w*$,S=w*r[0];for(let T=0;T<s.inChannels;++T)for(let C=0;C<s.outHeight;++C){const I=C*i-o,N=Math.max(0,I),P=Math.min(s.inHeight,f+I),F=v+C*b;for(let _=0;_<s.outWidth;++_){const D=_*l-d,E=Math.max(0,D),k=Math.min(s.inWidth,c+D);let O=m,M=0,z=0;for(let j=N;j<P;j+=u){const K=S+j*r[1];for(let X=E;X<k;X+=h){const Y=K+X*r[2],J=n[Y+T];a==="max"&&J>O?O=J:a==="avg"&&(M+=J,z++)}if(isNaN(O))break}const G=F+_*x+T;y[G]=a==="avg"?M/z:O}}}return g}function maxPoolPositions(n,e,t,r,s=!1,a=!1){const i=buffer$1(r.outShape,"int32"),l=r.strideHeight,u=r.strideWidth,h=r.dilationHeight,f=r.dilationWidth,c=r.effectiveFilterHeight,o=r.effectiveFilterWidth,d=r.padInfo.top,m=r.padInfo.left,g=buffer$1(e,t,n);for(let y=0;y<r.batchSize;++y)for(let $=0;$<r.inChannels;++$)for(let b=0;b<r.outHeight;++b){const x=b*l-d;let w=x;for(;w<0;)w+=h;const v=Math.min(r.inHeight,c+x);for(let S=0;S<r.outWidth;++S){const T=S*u-m;let C=T;for(;C<0;)C+=f;const I=Math.min(r.inWidth,o+T);let N=Number.NEGATIVE_INFINITY,P=-1;for(let F=w;F<v;F+=h){const _=F-x;for(let D=C;D<I;D+=f){const E=D-T,k=g.get(y,F,D,$);k>N&&(N=k,s?P=a?((y*r.inHeight+F)*r.inWidth+D)*r.inChannels+$:(F*r.inWidth+D)*r.inChannels+$:P=_*o+E)}}i.set(P,y,b,S,$)}}return i}function pool3d(n,e,t,r,s,a){const i=s.strideDepth,l=s.strideHeight,u=s.strideWidth,h=s.dilationDepth,f=s.dilationHeight,c=s.dilationWidth,o=s.effectiveFilterDepth,d=s.effectiveFilterHeight,m=s.effectiveFilterWidth,g=s.padInfo.front,y=s.padInfo.top,$=s.padInfo.left,b=a==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=buffer$1(s.outShape,t),w=x.values,v=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],S=s.outShape[2]*s.outShape[3]*s.outShape[4],T=s.outShape[3]*s.outShape[4],C=s.outShape[4];for(let I=0;I<s.batchSize;++I){const N=I*v,P=I*r[0];for(let F=0;F<s.inChannels;++F)for(let _=0;_<s.outDepth;++_){const D=_*i-g;let E=D;for(;E<0;)E+=h;const k=Math.min(s.inDepth,o+D),O=N+_*S;for(let M=0;M<s.outHeight;++M){const z=M*l-y;let G=z;for(;G<0;)G+=f;const j=Math.min(s.inHeight,d+z),K=O+M*T;for(let X=0;X<s.outWidth;++X){const Y=X*u-$;let J=Y;for(;J<0;)J+=c;const te=Math.min(s.inWidth,m+Y),re=K+X*C;let ue=b,ie=0,ce=0;for(let xe=E;xe<k;xe+=h){const me=P+xe*r[1];for(let $e=G;$e<j;$e+=f){const Se=me+$e*r[2];for(let ve=J;ve<te;ve+=c){const Ee=Se+ve*r[3],Ae=n[Ee+F];if(a==="max"&&Ae>ue?ue=Ae:a==="avg"&&(ie+=Ae,ce++),isNaN(ue))break}if(isNaN(ue))break}if(isNaN(ue))break}const se=re+F;w[se]=a==="avg"?ie/Math.max(ce,1):ue}}}}return x}function maxPool3dPositions(n,e){const t=buffer$1(e.outShape,"int32"),r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,h=e.effectiveFilterDepth,f=e.effectiveFilterHeight,c=e.effectiveFilterWidth,o=e.padInfo.front,d=e.padInfo.top,m=e.padInfo.left;for(let g=0;g<e.batchSize;++g)for(let y=0;y<e.inChannels;++y)for(let $=0;$<e.outDepth;++$){const b=$*r-o;let x=b;for(;x<0;)x+=i;const w=Math.min(e.inDepth,h+b);for(let v=0;v<e.outHeight;++v){const S=v*s-d;let T=S;for(;T<0;)T+=l;const C=Math.min(e.inHeight,f+S);for(let I=0;I<e.outWidth;++I){const N=I*a-m;let P=N;for(;P<0;)P+=u;const F=Math.min(e.inWidth,c+N);let _=Number.NEGATIVE_INFINITY,D=-1;for(let E=x;E<w;E+=i){const k=E-b;for(let O=T;O<C;O+=l){const M=O-S;for(let z=P;z<F;z+=u){const G=z-N,j=n.get(g,E,O,z,y);j>=_&&(_=j,D=k*f*c+M*f+G)}}}t.set(D,g,$,v,I,y)}}}return t}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e;assertNotComplex$2(s,"avgPool");const{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=r,h=1;assert$2(eitherStridesOrDilationsAreOne$1(i,h),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${h}'`);const f=computePool2DInfo$1(s.shape,a,i,h,l,u);let c;if(f.filterWidth===1&&f.filterHeight===1&&arraysEqual$1(f.inShape,f.outShape))c=identity$2({inputs:{x:s},backend:t});else{const o=t.data.get(s.dataId).values,d=computeStrides$1(s.shape),m=pool(o,s.shape,s.dtype,d,f,"avg");c=t.makeTensorInfo(f.outShape,s.dtype,m.values)}return c}const avgPoolConfig$2={kernelName:AvgPool$1,backendName:"cpu",kernelFunc:avgPool$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3D$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{filterSize:a,strides:i,pad:l,dimRoundingMode:u,dataFormat:h}=r;assertNotComplex$2(s,"avgPool3d");const f=computePool3DInfo$1(s.shape,a,i,1,l,u,h),c=t.data.get(s.dataId).values,o=pool3d(c,s.shape,s.dtype,computeStrides$1(s.shape),f,"avg");return t.makeTensorInfo(o.shape,"float32",o.values)}const avgPool3DConfig$2={kernelName:AvgPool3D$1,backendName:"cpu",kernelFunc:avgPool3D$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3DGrad$2(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:a}=e,{filterSize:i,strides:l,pad:u,dimRoundingMode:h}=r;assertNotComplex$2([s,a],"avgPool3DGrad");const f=computePool3DInfo$1(a.shape,i,l,1,u,h),c=f.strideDepth,o=f.strideHeight,d=f.strideWidth,m=f.filterDepth,g=f.filterHeight,y=f.filterWidth,$=f.dilationDepth,b=f.dilationHeight,x=f.dilationWidth,w=f.effectiveFilterDepth,v=f.effectiveFilterHeight,S=f.effectiveFilterWidth,T=w-1-f.padInfo.front,C=S-1-f.padInfo.left,I=v-1-f.padInfo.top,N=buffer$1(a.shape,"float32"),P=1/(m*g*y),F=t.bufferSync(s);for(let _=0;_<f.batchSize;++_)for(let D=0;D<f.inChannels;++D)for(let E=0;E<f.inDepth;++E)for(let k=0;k<f.inHeight;++k)for(let O=0;O<f.inWidth;++O){const M=E-T,z=k-I,G=O-C;let j=0;for(let K=0;K<w;K+=$){const X=(M+K)/c;if(!(X<0||X>=f.outDepth||Math.floor(X)!==X))for(let Y=0;Y<v;Y+=b){const J=(z+Y)/o;if(!(J<0||J>=f.outHeight||Math.floor(J)!==J))for(let te=0;te<S;te+=x){const re=(G+te)/d;if(re<0||re>=f.outWidth||Math.floor(re)!==re)continue;const ue=F.get(_,X,J,re,D);j+=ue}}}N.set(j*P,_,E,k,O,D)}return t.makeTensorInfo(N.shape,N.dtype,N.values)}const avgPool3DGradConfig$2={kernelName:AvgPool3DGrad$1,backendName:"cpu",kernelFunc:avgPool3DGrad$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPoolGrad$2(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:a}=e,i=a;assertNotComplex$2([s,a],"avgPoolGrad");const{filterSize:l,strides:u,pad:h}=r,f=computePool2DInfo$1(i.shape,l,u,1,h),c=f.strideHeight,o=f.strideWidth,d=f.filterHeight,m=f.filterWidth,g=f.dilationHeight,y=f.dilationWidth,$=f.effectiveFilterHeight,b=f.effectiveFilterWidth,x=b-1-f.padInfo.left,w=$-1-f.padInfo.top,v=buffer$1(i.shape,"float32"),S=1/(d*m),T=t.data.get(s.dataId).values,C=buffer$1(s.shape,"float32",T);for(let I=0;I<f.batchSize;++I)for(let N=0;N<f.inChannels;++N)for(let P=0;P<f.inHeight;++P)for(let F=0;F<f.inWidth;++F){const _=P-w,D=F-x;let E=0;for(let k=0;k<$;k+=g){const O=(_+k)/c;if(!(O<0||O>=f.outHeight||Math.floor(O)!==O))for(let M=0;M<b;M+=y){const z=(D+M)/o;if(z<0||z>=f.outWidth||Math.floor(z)!==z)continue;const G=C.get(I,O,z,N);E+=G}}v.set(E*S,I,P,F,N)}return t.makeTensorInfo(v.shape,v.dtype,v.values)}const avgPoolGradConfig$2={kernelName:AvgPoolGrad$1,backendName:"cpu",kernelFunc:avgPoolGrad$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchNorm$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,scale:a,offset:i,mean:l,variance:u}=e;assert$2(l.shape.length===u.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),assert$2(i==null||l.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),assert$2(a==null||l.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),assertNotComplex$2([s,l,u,a,i],"batchNorm");let{varianceEpsilon:h}=r;h==null&&(h=.001);const f=t.data.get(s.dataId).values,c=t.data.get(l.dataId).values,o=t.data.get(u.dataId).values,d=a?t.data.get(a.dataId).values:new Float32Array([1]),m=i?t.data.get(i.dataId).values:new Float32Array([0]),g=new Float32Array(f.length),y=m.length,$=d.length,b=o.length,x=c.length;let w=0,v=0,S=0,T=0;for(let C=0;C<f.length;++C)g[C]=m[w++]+(f[C]-c[v++])*d[S++]/Math.sqrt(o[T++]+h),w>=y&&(w=0),v>=x&&(v=0),S>=$&&(S=0),T>=b&&(T=0);return t.makeTensorInfo(s.shape,s.dtype,g)}const batchNormConfig$1={kernelName:FusedBatchNorm$1,backendName:"cpu",kernelFunc:batchNorm$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchToSpaceND$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockShape:a,crops:i}=r;assertNotComplex$2([s],"batchToSpaceND");const l=a.reduce(($,b)=>$*b),u=getReshaped$1(s.shape,a,l),h=getPermuted$1(u.length,a.length),f=getReshapedPermuted$1(s.shape,a,l),c=getSliceBeginCoords$1(i,a.length),o=getSliceSize$1(f,i,a.length),d=reshape$4({inputs:{x:s},backend:t,attrs:{shape:u}}),m=transpose$2({inputs:{x:d},backend:t,attrs:{perm:h}}),g=reshape$4({inputs:{x:m},backend:t,attrs:{shape:f}}),y=slice$2({inputs:{x:g},backend:t,attrs:{begin:c,size:o}});return t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(g),y}const batchToSpaceNDConfig$2={kernelName:BatchToSpaceND$1,backendName:"cpu",kernelFunc:batchToSpaceND$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincount$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,weights:a}=e,{size:i}=r,l=t.data.get(s.dataId).values,u=t.data.get(a.dataId).values,h=bincountImpl$1(l,u,a.dtype,a.shape,i);return t.makeTensorInfo([i],a.dtype,h)}const bincountConfig$2={kernelName:Bincount$1,backendName:"cpu",kernelFunc:bincount$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastArgs$2(n){const{inputs:e,backend:t}=n,{s0:r,s1:s}=e,a=t.data.get(r.dataId).values,i=t.data.get(s.dataId).values,l=assertAndGetBroadcastShape$1(Array.from(a),Array.from(i));return t.makeTensorInfo([l.length],"int32",Int32Array.from(l))}const broadcastArgsConfig$2={kernelName:BroadcastArgs$1,backendName:"cpu",kernelFunc:broadcastArgs$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const clipByValue$2=unaryKernelFunc$2(ClipByValue$1,(n,e)=>{const t=e;return n>t.clipValueMax?t.clipValueMax:n<t.clipValueMin?t.clipValueMin:n}),clipByValueConfig$2={kernelName:ClipByValue$1,backendName:"cpu",kernelFunc:clipByValue$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const complexAbs$2=n=>{const{x:e}=n.inputs,t=n.backend,r=new Float32Array(sizeFromShape$1(e.shape)),s=t.data.get(e.dataId),a=s.complexTensorInfos.real,i=s.complexTensorInfos.imag,l=t.data.get(a.dataId).values,u=t.data.get(i.dataId).values;for(let h=0;h<l.length;h++){const f=l[h],c=u[h];r[h]=Math.hypot(f,c)}return t.makeOutput(r,e.shape,"float32")},complexAbsConfig$2={kernelName:ComplexAbs$1,backendName:"cpu",kernelFunc:complexAbs$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function imag$2(n){const{inputs:e,backend:t}=n,{input:r}=e,s=t.data.get(r.dataId).complexTensorInfos.imag,a=t.data.get(s.dataId).values;return t.makeTensorInfo(s.shape,s.dtype,a)}const imagConfig$2={kernelName:Imag$1,backendName:"cpu",kernelFunc:imag$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concat$2(n){const{inputs:e,backend:t,attrs:r}=n,{axis:s}=r,a=parseAxisParam$1(s,e[0].shape)[0],i=e.map(g=>g.shape);assertParamsConsistent$1(i,a);let l=computeOutShape$4(e.map(g=>g.shape),a);if(sizeFromShape$1(l)===0)return t.makeTensorInfo(l,e[0].dtype,[]);const u=e.filter(g=>sizeFromShape$1(g.shape)>0);if(u.length===1)return identity$2({inputs:{x:u[0]},backend:t});if(u[0].dtype==="complex64"){const g=u.map(w=>real$2({inputs:{input:w},backend:t})),y=u.map(w=>imag$2({inputs:{input:w},backend:t})),$=concat$2({inputs:g,backend:t,attrs:{axis:a}}),b=concat$2({inputs:y,backend:t,attrs:{axis:a}}),x=complex$3({inputs:{real:$,imag:b},backend:t});return g.forEach(w=>t.disposeIntermediateTensorInfo(w)),y.forEach(w=>t.disposeIntermediateTensorInfo(w)),t.disposeIntermediateTensorInfo($),t.disposeIntermediateTensorInfo(b),x}const h=u.map(g=>{const $=[-1,sizeFromShape$1(g.shape.slice(a))];return reshape$4({inputs:{x:g},backend:t,attrs:{shape:$}})}),f=h.map(g=>({vals:t.data.get(g.dataId).values,shape:g.shape}));l=computeOutShape$4(h.map(g=>g.shape),1);const c=h[0].shape[0]===1,o=concatImpl$3(f,l,e[0].dtype,c),d=computeOutShape$4(u.map(g=>g.shape),a),m=t.makeTensorInfo(d,e[0].dtype,o);return h.forEach(g=>t.disposeIntermediateTensorInfo(g)),m}const concatConfig$2={kernelName:Concat$1,backendName:"cpu",kernelFunc:concat$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2D(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a}=e,{strides:i,pad:l,dataFormat:u,dilations:h,dimRoundingMode:f}=r;assertNotComplex$2([s,a],"conv2d");const c=convertConv2DDataFormat$1(u),o=computeConv2DInfo$1(s.shape,a.shape,i,h,l,f,!1,c),d=o.filterHeight,m=o.filterWidth,g=o.dilationHeight,y=o.dilationWidth,$=o.padInfo.left,b=o.padInfo.top,x=o.dataFormat==="channelsLast",w=new TensorBuffer$1(o.outShape,s.dtype),v=computeStrides$1(s.shape),S=computeStrides$1(a.shape),T=v[0],C=x?v[1]:v[2],I=x?v[2]:1,N=x?1:v[1],P=w.strides[0],F=x?w.strides[1]:w.strides[2],_=x?w.strides[2]:1,D=x?1:w.strides[1],E=t.data.get(s.dataId).values,k=t.data.get(a.dataId).values,O=w.values;for(let M=0;M<o.batchSize;++M){const z=M*T,G=M*P;for(let j=0;j<o.outHeight;++j){const K=G+j*F,X=j*o.strideHeight-b;for(let Y=0;Y<d;++Y){const J=X+Y*g;if(J<0||J>=o.inHeight)continue;const te=Y*S[0],re=z+J*C;for(let ue=0;ue<o.outWidth;++ue){const ie=K+ue*_,ce=ue*o.strideWidth-$;for(let se=0;se<m;++se){const xe=ce+se*y;if(xe<0||xe>=o.inWidth)continue;const me=te+se*S[1],$e=re+xe*I;let Se=me;for(let ve=0;ve<o.inChannels;++ve){const Ee=E[$e+ve*N];for(let Ae=0;Ae<o.outChannels;++Ae)O[ie+Ae*D]+=Ee*k[Se+Ae];Se+=o.outChannels}}}}}}return t.makeTensorInfo(w.shape,w.dtype,O)}const conv2DConfig$2={kernelName:Conv2D$2,backendName:"cpu",kernelFunc:conv2D};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropFilter$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:a}=e,{strides:i,pad:l,dataFormat:u,dimRoundingMode:h,filterShape:f}=r;assertNotComplex$2([s,a],"conv2dBackpropFilter");const c=convertConv2DDataFormat$1(u),o=computeConv2DInfo$1(s.shape,f,i,1,l,h,!1,c),{strideHeight:d,strideWidth:m,filterHeight:g,filterWidth:y}=o,$=o.dataFormat==="channelsLast",b=new TensorBuffer$1(o.filterShape,"float32"),x=o.padInfo.left,w=o.padInfo.top,v=t.data.get(s.dataId).values,S=t.data.get(a.dataId).values,T=new TensorBuffer$1(s.shape,s.dtype,v),C=new TensorBuffer$1(a.shape,a.dtype,S);for(let I=0;I<g;++I){const N=Math.max(0,Math.ceil((w-I)/d)),P=Math.min(o.outHeight,(o.inHeight+w-I)/d);for(let F=0;F<y;++F){const _=Math.max(0,Math.ceil((x-F)/m)),D=Math.min(o.outWidth,(o.inWidth+x-F)/m);for(let E=0;E<o.inChannels;++E)for(let k=0;k<o.outChannels;++k){let O=0;for(let M=0;M<o.batchSize;++M)for(let z=N;z<P;++z){const G=I+z*d-w;for(let j=_;j<D;++j){const K=F+j*m-x;$?O+=T.get(M,G,K,E)*C.get(M,z,j,k):O+=T.get(M,E,G,K)*C.get(M,k,z,j)}}b.set(O,I,F,E,k)}}}return t.makeTensorInfo(b.shape,b.dtype,b.values)}const conv2DBackpropFilterConfig$2={kernelName:Conv2DBackpropFilter$1,backendName:"cpu",kernelFunc:conv2DBackpropFilter$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropInput$2(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:a}=e,{inputShape:i,strides:l,pad:u,dataFormat:h,dimRoundingMode:f}=r;assertNotComplex$2([s,a],"conv2dBackpropInput");const c=computeStrides$1(a.shape),o=computeStrides$1(s.shape);let d=convertConv2DDataFormat$1(h);const m=computeConv2DInfo$1(i,a.shape,l,1,u,f,!1,d),g=new TensorBuffer$1(m.inShape,"float32"),y=g.values,$=t.data.get(s.dataId).values,b=t.data.get(a.dataId).values,[x,w,v]=c,{batchSize:S,filterHeight:T,filterWidth:C,inChannels:I,inHeight:N,inWidth:P,outChannels:F,outHeight:_,outWidth:D,strideHeight:E,strideWidth:k}=m;d=m.dataFormat;const O=T-1-m.padInfo.top,M=C-1-m.padInfo.left,z=d==="channelsLast",G=g.strides[0],j=z?g.strides[1]:g.strides[2],K=z?g.strides[2]:1,X=z?1:g.strides[1],Y=o[0],J=z?o[1]:o[2],te=z?o[2]:1,re=z?1:o[1];for(let ue=0;ue<S;++ue)for(let ie=0;ie<I;++ie)for(let ce=0;ce<N;++ce){const se=ce-O,xe=Math.max(0,Math.ceil(se/E)),me=Math.min(_,(T+se)/E);for(let $e=0;$e<P;++$e){const Se=$e-M,ve=Math.max(0,Math.ceil(Se/k)),Ee=Math.min(D,(C+Se)/k);let Ae=0;for(let ke=xe;ke<me;++ke){const Be=ke*E-se;for(let Ne=ve;Ne<Ee;++Ne){const Ve=Ne*k-Se,Me=Y*ue+J*ke+te*Ne,Ue=x*(T-1-Be)+w*(C-1-Ve)+v*ie;for(let ze=0;ze<F;++ze){const Ge=$[Me+re*ze],We=b[Ue+ze];Ae+=Ge*We}}}const Fe=G*ue+j*ce+K*$e+X*ie;y[Fe]=Ae}}return t.makeTensorInfo(g.shape,g.dtype,g.values)}const conv2DBackpropInputConfig$2={kernelName:Conv2DBackpropInput$1,backendName:"cpu",kernelFunc:conv2DBackpropInput$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3D$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a}=e,{strides:i,pad:l,dilations:u}=r;assertNotComplex$2([s,a],"conv3d");const h=computeConv3DInfo$1(s.shape,a.shape,i,u,l),{filterDepth:f,filterHeight:c,filterWidth:o,dilationDepth:d,dilationHeight:m,dilationWidth:g,padInfo:y}=h,$=y.front,b=y.left,x=y.top,w=new TensorBuffer$1(h.outShape,s.dtype),v=t.data.get(s.dataId).values,S=t.data.get(a.dataId).values,T=w.values,C=computeStrides$1(s.shape),I=computeStrides$1(a.shape);for(let N=0;N<h.batchSize;++N){const P=N*C[0],F=N*w.strides[0];for(let _=0;_<h.outDepth;++_){const D=F+_*w.strides[1],E=_*h.strideDepth-$;for(let k=0;k<f;++k){const O=E+k*d;if(O<0||O>=h.inDepth)continue;const M=k*I[0],z=P+O*C[1];for(let G=0;G<h.outHeight;++G){const j=D+G*w.strides[2],K=G*h.strideHeight-x;for(let X=0;X<c;++X){const Y=K+X*m;if(Y<0||Y>=h.inHeight)continue;const J=M+X*I[1],te=z+Y*C[2];for(let re=0;re<h.outWidth;++re){const ue=j+re*h.outChannels,ie=re*h.strideWidth-b;for(let ce=0;ce<o;++ce){const se=ie+ce*g;if(se<0||se>=h.inWidth)continue;const xe=J+ce*I[2],me=te+se*h.inChannels;let $e=xe;for(let Se=0;Se<h.inChannels;++Se){const ve=v[me+Se];for(let Ee=0;Ee<h.outChannels;++Ee)T[ue+Ee]+=ve*S[$e+Ee];$e+=h.outChannels}}}}}}}}return t.makeTensorInfo(w.shape,w.dtype,w.values)}const conv3DConfig$2={kernelName:Conv3D$2,backendName:"cpu",kernelFunc:conv3D$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropFilterV2$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:a}=e,{strides:i,pad:l,filterShape:u}=r;assertNotComplex$2([s,a],"conv3dBackpropFilterV2");const h=computeStrides$1(s.shape),f=computeStrides$1(a.shape),c=computeConv3DInfo$1(s.shape,u,i,1,l),o=c.strideDepth,d=c.strideHeight,m=c.strideWidth,g=c.filterDepth,y=c.filterHeight,$=c.filterWidth,b=new TensorBuffer$1(c.filterShape,"float32"),x=b.values,[w,v,S,T]=b.strides,C=t.data.get(a.dataId).values,[I,N,P,F]=f,_=t.data.get(s.dataId).values,[D,E,k,O]=h,M=c.padInfo.front,z=c.padInfo.left,G=c.padInfo.top;for(let j=0;j<g;++j){const K=Math.max(0,Math.ceil((M-j)/o)),X=Math.min(c.outDepth,(c.inDepth+M-j)/o),Y=j*w;for(let J=0;J<y;++J){const te=Math.max(0,Math.ceil((G-J)/d)),re=Math.min(c.outHeight,(c.inHeight+G-J)/d),ue=J*v+Y;for(let ie=0;ie<$;++ie){const ce=Math.max(0,Math.ceil((z-ie)/m)),se=Math.min(c.outWidth,(c.inWidth+z-ie)/m),xe=ie*S+ue;for(let me=0;me<c.inChannels;++me){const $e=me*T+xe;for(let Se=0;Se<c.outChannels;++Se){let ve=0;for(let Ee=0;Ee<c.batchSize;++Ee){const Ae=Ee*D,Fe=Ee*I;for(let ke=K;ke<X;++ke){const Ne=(j+ke*o-M)*E+Ae,Ve=ke*N+Fe;for(let Me=te;Me<re;++Me){const ze=(J+Me*d-G)*k+Ne,Ge=Me*P+Ve;for(let We=ce;We<se;++We){const Je=(ie+We*m-z)*O+ze,et=We*F+Ge;ve+=_[Je+me]*C[et+Se]}}}}x[$e+Se]=ve}}}}}return t.makeTensorInfo(b.shape,b.dtype,b.values)}const conv3DBackpropFilterV2Config$2={kernelName:Conv3DBackpropFilterV2$1,backendName:"cpu",kernelFunc:conv3DBackpropFilterV2$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropInputV2$1(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:a}=e,{pad:i,strides:l,inputShape:u}=r;assertNotComplex$2([s],"conv3dBackpropInputV2");const h=computeStrides$1(s.shape),f=computeStrides$1(a.shape),c=computeConv3DInfo$1(u,a.shape,l,1,i),o=new TensorBuffer$1(c.inShape,"float32"),d=o.values,[m,g,y,$]=o.strides,b=t.data.get(s.dataId).values,[x,w,v,S]=h,T=t.data.get(a.dataId).values,[C,I,N,P]=f,{batchSize:F,filterDepth:_,filterHeight:D,filterWidth:E,inChannels:k,inDepth:O,inHeight:M,inWidth:z,outChannels:G,outDepth:j,outHeight:K,outWidth:X,strideDepth:Y,strideHeight:J,strideWidth:te}=c,re=_-1-c.padInfo.front,ue=D-1-c.padInfo.top,ie=E-1-c.padInfo.left;for(let ce=0;ce<F;++ce)for(let se=0;se<k;++se)for(let xe=0;xe<O;++xe){const me=xe-re,$e=Math.max(0,Math.ceil(me/Y)),Se=Math.min(j,(_+me)/Y);for(let ve=0;ve<M;++ve){const Ee=ve-ue,Ae=Math.max(0,Math.ceil(Ee/J)),Fe=Math.min(K,(D+Ee)/J);for(let ke=0;ke<z;++ke){const Be=ke-ie,Ne=Math.max(0,Math.ceil(Be/te)),Ve=Math.min(X,(E+Be)/te);let Me=0;for(let Ue=$e;Ue<Se;++Ue){const ze=Ue*Y-me;for(let Ge=Ae;Ge<Fe;++Ge){const We=Ge*J-Ee;for(let He=Ne;He<Ve;++He){const Je=He*te-Be,et=x*ce+w*Ue+v*Ge+S*He,je=C*(_-1-ze)+I*(D-1-We)+N*(E-1-Je)+P*se;for(let Xe=0;Xe<G;++Xe){const tt=b[et+Xe],we=T[je+Xe];Me+=tt*we}}}}d[m*ce+g*xe+y*ve+$*ke+se]=Me}}}return t.makeTensorInfo(o.shape,o.dtype,o.values)}const conv3DBackpropInputV2Config$1={kernelName:Conv3DBackpropInputV2$1,backendName:"cpu",kernelFunc:conv3DBackpropInputV2$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cos$2=unaryKernelFunc$2(Cos$1,n=>Math.cos(n)),cosConfig$2={kernelName:Cos$1,backendName:"cpu",kernelFunc:cos$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cosh$2=unaryKernelFunc$2(Cosh$1,n=>Math.cosh(n)),coshConfig$2={kernelName:Cosh$1,backendName:"cpu",kernelFunc:cosh$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cropAndResize$2(n){const{inputs:e,backend:t,attrs:r}=n,{image:s,boxes:a,boxInd:i}=e,{cropSize:l,method:u,extrapolationValue:h}=r,[f,c,o,d]=s.shape,m=a.shape[0],[g,y]=l,$=buffer$1([m,g,y,d],"float32"),b=t.data.get(a.dataId).values,x=t.data.get(i.dataId).values,w=t.data.get(s.dataId).values,v=computeStrides$1(s.shape),S=computeStrides$1($.shape);for(let T=0;T<m;T++){const C=T*4,I=b[C],N=b[C+1],P=b[C+2],F=b[C+3],_=x[T];if(_>=f)continue;const D=g>1?(P-I)*(c-1)/(g-1):0,E=y>1?(F-N)*(o-1)/(y-1):0;for(let k=0;k<g;k++){const O=g>1?I*(c-1)+k*D:.5*(I+P)*(c-1);if(O<0||O>c-1){for(let M=0;M<y;M++)for(let z=0;z<d;z++){const G=z+M*S[2]+k*S[1]+T*S[0];$.values[G]=h}continue}if(u==="bilinear"){const M=Math.floor(O),z=Math.ceil(O),G=O-M;for(let j=0;j<y;j++){const K=y>1?N*(o-1)+j*E:.5*(N+F)*(o-1);if(K<0||K>o-1){for(let te=0;te<d;te++){const re=te+j*S[2]+k*S[1]+T*S[0];$.values[re]=h}continue}const X=Math.floor(K),Y=Math.ceil(K),J=K-X;for(let te=0;te<d;te++){let re=te+X*v[2]+M*v[1]+_*v[0];const ue=w[re];re=te+Y*v[2]+M*v[1]+_*v[0];const ie=w[re];re=te+X*v[2]+z*v[1]+_*v[0];const ce=w[re];re=te+Y*v[2]+z*v[1]+_*v[0];const se=w[re],xe=ue+(ie-ue)*J,me=ce+(se-ce)*J;re=te+j*S[2]+k*S[1]+T*S[0],$.values[re]=xe+(me-xe)*G}}}else for(let M=0;M<y;++M){const z=y>1?N*(o-1)+M*E:.5*(N+F)*(o-1);if(z<0||z>o-1){for(let K=0;K<d;K++){const X=K+M*S[2]+k*S[1]+T*S[0];$.values[X]=h}continue}const G=Math.round(z),j=Math.round(O);for(let K=0;K<d;K++){const X=K+G*v[2]+j*v[1]+_*v[0],Y=K+M*S[2]+k*S[1]+T*S[0];$.values[Y]=w[X]}}}}return t.makeTensorInfo($.shape,$.dtype,$.values)}const cropAndResizeConfig$2={kernelName:CropAndResize$1,backendName:"cpu",kernelFunc:cropAndResize$2};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumprod$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,exclusive:i,reverse:l}=r;assertNotComplex$2(s,"cumprod");const u=getAxesPermutation$1([a],s.shape.length);let h=s;u!=null&&(h=transpose$2({inputs:{x:s},backend:t,attrs:{perm:u}}));const f=getInnerMostAxes$1(1,s.shape.length)[0];if(f!==h.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${h.shape.length-1} but got axis=${f}`);const c=upcastType$1(h.dtype,"int32"),o=makeOnesTypedArray$1(sizeFromShape$1(h.shape),c),d=t.data.get(h.dataId).values,m=h.shape[h.shape.length-1],g=l?($,b)=>$+m-b-1:($,b)=>$+b;for(let $=0;$<d.length;$+=m)for(let b=0;b<m;b++){const x=g($,b);if(b===0)o[x]=i?1:d[x];else{const w=g($,b-1);o[x]=i?d[w]*o[w]:d[x]*o[w]}}const y=t.makeTensorInfo(h.shape,c,o);if(u!=null){const $=getUndoAxesPermutation$1(u),b=transpose$2({inputs:{x:y},backend:t,attrs:{perm:$}});return t.disposeIntermediateTensorInfo(y),t.disposeIntermediateTensorInfo(h),b}return y}const cumprodConfig$2={kernelName:Cumprod$1,backendName:"cpu",kernelFunc:cumprod$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumsum$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,exclusive:i,reverse:l}=r;assertNotComplex$2(s,"cumsum");const u=getAxesPermutation$1([a],s.shape.length);let h=s;u!=null&&(h=transpose$2({inputs:{x:s},backend:t,attrs:{perm:u}}));const f=getInnerMostAxes$1(1,s.shape.length)[0];if(f!==h.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${h.shape.length-1} but got axis=${f}`);const c=upcastType$1(h.dtype,"int32"),o=makeZerosTypedArray$1(sizeFromShape$1(h.shape),c),d=t.data.get(h.dataId).values,m=h.shape[h.shape.length-1],g=l?($,b)=>$+m-b-1:($,b)=>$+b;for(let $=0;$<d.length;$+=m)for(let b=0;b<m;b++){const x=g($,b);if(b===0)o[x]=i?0:d[x];else{const w=g($,b-1);o[x]=i?d[w]+o[w]:d[x]+o[w]}}const y=t.makeTensorInfo(h.shape,c,o);if(u!=null){const $=getUndoAxesPermutation$1(u),b=transpose$2({inputs:{x:y},backend:t,attrs:{perm:$}});return t.disposeIntermediateTensorInfo(y),t.disposeIntermediateTensorInfo(h),b}return y}const cumsumConfig$2={kernelName:Cumsum$1,backendName:"cpu",kernelFunc:cumsum$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function denseBincount$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,weights:a}=e,{size:i,binaryOutput:l}=r;if(s.shape.length===1){const u=t.data.get(s.dataId).values,h=t.data.get(a.dataId).values,f=bincountImpl$1(u,h,a.dtype,a.shape,i);return t.makeTensorInfo([i],a.dtype,f)}else if(s.shape.length===2){const u=t.bufferSync(s),h=t.bufferSync(a),f=bincountReduceImpl$1(u,h,i,l);return t.makeTensorInfo(f.shape,a.dtype,f.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}const denseBincountConfig$2={kernelName:DenseBincount$1,backendName:"cpu",kernelFunc:denseBincount$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthToSpace$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockSize:a,dataFormat:i}=r;assert$2(i==="NHWC",()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);const l=s.shape[0],u=s.shape[1],h=s.shape[2],f=s.shape[3],c=u*a,o=h*a,d=f/(a*a),m=t.data.get(s.dataId).values,g=new Float32Array(l*c*o*d);let y=0;for(let $=0;$<l;++$)for(let b=0;b<c;++b){const x=Math.floor(b/a),w=b%a;for(let v=0;v<o;++v){const S=Math.floor(v/a),T=v%a,C=(w*a+T)*d;for(let I=0;I<d;++I){const P=I+C+f*(S+h*(x+u*$));g[y++]=m[P]}}}return t.makeTensorInfo([l,c,o,d],s.dtype,g)}const depthToSpaceConfig$2={kernelName:DepthToSpace$1,backendName:"cpu",kernelFunc:depthToSpace$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNative$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a}=e,{strides:i,pad:l,dilations:u,dimRoundingMode:h}=r;assertNotComplex$2([s,a],"depthwiseConv2DNative");const f=computeStrides$1(s.shape),c=computeStrides$1(a.shape);let o=u;o==null&&(o=[1,1]),assert$2(eitherStridesOrDilationsAreOne$1(i,o),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${o}'`);const d=computeConv2DInfo$1(s.shape,a.shape,i,o,l,h,!0),{filterHeight:m,filterWidth:g,dilationHeight:y,dilationWidth:$,padInfo:b}=d,x=b.left,w=b.top,v=d.outChannels/d.inChannels,S=new TensorBuffer$1(d.outShape,s.dtype),T=t.data.get(s.dataId).values,C=t.data.get(a.dataId).values,I=S.values;for(let N=0;N<d.batchSize;++N){const P=N*f[0],F=N*S.strides[0];for(let _=0;_<d.outHeight;++_){const D=F+_*S.strides[1],E=_*d.strideHeight-w;for(let k=0;k<m;++k){const O=E+k*y;if(O<0||O>=d.inHeight)continue;const M=k*c[0],z=P+O*f[1];for(let G=0;G<d.outWidth;++G){const j=D+G*S.strides[2],K=G*d.strideWidth-x;for(let X=0;X<g;++X){const Y=K+X*$;if(Y<0||Y>=d.inWidth)continue;const J=M+X*c[1],te=z+Y*d.inChannels;let re=j,ue=J;for(let ie=0;ie<d.inChannels;++ie){const ce=T[te+ie];for(let se=0;se<v;++se)I[re+se]+=ce*C[ue+se];re+=v,ue+=v}}}}}}return t.makeTensorInfo(S.shape,S.dtype,S.values)}const depthwiseConv2dNativeConfig$2={kernelName:DepthwiseConv2dNative$1,backendName:"cpu",kernelFunc:depthwiseConv2dNative$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropFilter$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:a}=e,{strides:i,dilations:l,pad:u,dimRoundingMode:h,filterShape:f}=r;assertNotComplex$2([s,a],"depthwiseConv2dNativeBackpropFilter");const c=computeConv2DInfo$1(s.shape,f,i,l,u,h,!0),{strideHeight:o,strideWidth:d,filterHeight:m,filterWidth:g}=c,y=new TensorBuffer$1(c.filterShape,"float32"),$=c.padInfo.left,b=c.padInfo.top,x=c.outChannels/c.inChannels,w=t.data.get(s.dataId).values,v=new TensorBuffer$1(s.shape,s.dtype,w),S=t.data.get(a.dataId).values,T=new TensorBuffer$1(a.shape,a.dtype,S);for(let C=0;C<m;++C){const I=Math.max(0,Math.ceil((b-C)/o)),N=Math.min(c.outHeight,(c.inHeight+b-C)/o);for(let P=0;P<g;++P){const F=Math.max(0,Math.ceil(($-P)/d)),_=Math.min(c.outWidth,(c.inWidth+$-P)/d);for(let D=0;D<c.outChannels;++D){const E=Math.trunc(D/x),k=D%x;let O=0;for(let M=0;M<c.batchSize;++M)for(let z=I;z<N;++z){const G=C+z*o-b;for(let j=F;j<_;++j){const K=P+j*d-$;O+=v.get(M,G,K,E)*T.get(M,z,j,D)}}y.set(O,C,P,E,k)}}}return t.makeTensorInfo(y.shape,y.dtype,y.values)}const depthwiseConv2dNativeBackpropFilterConfig$2={kernelName:DepthwiseConv2dNativeBackpropFilter$1,backendName:"cpu",kernelFunc:depthwiseConv2dNativeBackpropFilter$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropInput$2(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:a}=e,{strides:i,dilations:l,pad:u,dimRoundingMode:h,inputShape:f}=r;assertNotComplex$2([s,a],"depthwiseConv2DNativeBackpropInput");const c=computeStrides$1(s.shape),o=computeStrides$1(a.shape),d=computeConv2DInfo$1(f,a.shape,i,l,u,h,!0),m=new TensorBuffer$1(d.inShape,"float32"),g=m.values,[y,$,b]=m.strides,x=t.data.get(s.dataId).values,[w,v,S]=c,T=t.data.get(a.dataId).values,[C,I,N]=o,{batchSize:P,filterHeight:F,filterWidth:_,inChannels:D,inHeight:E,inWidth:k,outChannels:O,outHeight:M,outWidth:z,strideHeight:G,strideWidth:j}=d,K=F-1-d.padInfo.top,X=_-1-d.padInfo.left,Y=O/D;for(let J=0;J<P;++J)for(let te=0;te<D;++te)for(let re=0;re<E;++re){const ue=re-K,ie=Math.max(0,Math.ceil(ue/G)),ce=Math.min(M,(F+ue)/G);for(let se=0;se<k;++se){const xe=se-X,me=Math.max(0,Math.ceil(xe/j)),$e=Math.min(z,(_+xe)/j);let Se=0;for(let ve=ie;ve<ce;++ve){const Ee=ve*G-ue;for(let Ae=me;Ae<$e;++Ae){const Fe=Ae*j-xe,ke=w*J+v*ve+S*Ae,Be=C*(F-1-Ee)+I*(_-1-Fe)+N*te;for(let Ne=0;Ne<Y;++Ne){const Ve=te*Y+Ne,Me=x[ke+Ve],Ue=T[Be+Ne];Se+=Me*Ue}}}g[y*J+$*re+b*se+te]=Se}}return t.makeTensorInfo(m.shape,m.dtype,m.values)}const depthwiseConv2dNativeBackpropInputConfig$2={kernelName:DepthwiseConv2dNativeBackpropInput$1,backendName:"cpu",kernelFunc:depthwiseConv2dNativeBackpropInput$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function diag$2(n){const{inputs:e,backend:t}=n,{x:r}=e,s=sizeFromShape$1(r.shape),a=t.data.get(r.dataId).values,i=buffer$1([s,s],r.dtype),l=i.values;for(let h=0;h<a.length;h++)l[h*s+h]=a[h];const u=[...r.shape,...r.shape];return t.makeTensorInfo(u,i.dtype,i.values)}const diagConfig$2={kernelName:Diag$1,backendName:"cpu",kernelFunc:diag$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const dilation2DConfig$2={kernelName:Dilation2D$1,backendName:"cpu",kernelFunc:({inputs:n,backend:e,attrs:t})=>{const{x:r,filter:s}=n,{strides:a,pad:i,dilations:l}=t,u=e,h=u.data.get(r.dataId).values,f=r.shape.length,c=u.data.get(s.dataId).values,o=s.shape.length,{batchSize:d,inHeight:m,inWidth:g,inChannels:y,outHeight:$,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:S,filterWidth:T,dilationHeight:C,dilationWidth:I,outShape:N}=computeDilation2DInfo$1(r.shape,s.shape,a,i,"NHWC",l),P=sizeFromShape$1(N),F=N.length,_=getArrayFromDType$1(r.dtype,P);for(let E=0;E<d;++E)for(let k=0;k<$;++k){const O=k*w-x.top;for(let M=0;M<b;++M){const z=M*v-x.left;for(let G=0;G<y;++G){let j=Number.MIN_SAFE_INTEGER;for(let X=0;X<S;++X){const Y=O+X*C;if(Y>=0&&Y<m)for(let J=0;J<T;++J){const te=z+J*I;if(te>=0&&te<g){const re=locToIndex$1([E,Y,te,G],f,computeStrides$1(r.shape)),ue=locToIndex$1([X,J,G],o,computeStrides$1(s.shape)),ie=h[re]+c[ue];ie>j&&(j=ie)}}}const K=locToIndex$1([E,k,M,G],F,computeStrides$1(N));_[K]=j}}}return{dataId:u.write(toTypedArray$1(_,r.dtype),N,r.dtype),shape:N,dtype:r.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const dilation2DBackpropFilterConfig$1={kernelName:Dilation2DBackpropFilter$1,backendName:"cpu",kernelFunc:({inputs:n,backend:e,attrs:t})=>{const{x:r,filter:s,dy:a}=n,{strides:i,pad:l,dilations:u}=t,h=e,f=toNestedArray$1(r.shape,h.data.get(r.dataId).values),c=toNestedArray$1(s.shape,h.data.get(s.dataId).values),{batchSize:o,inHeight:d,inWidth:m,inChannels:g,outHeight:y,outWidth:$,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:S,dilationHeight:T,dilationWidth:C,outShape:I}=computeDilation2DInfo$1(r.shape,s.shape,i,l,"NHWC",u);assert$2(a.rank===I.length,()=>`Error in ${Dilation2DBackpropFilter$1}, dy must have the same rank as output ${I.length}, but got ${a.rank}`);const N=toNestedArray$1(I,h.data.get(a.dataId).values),P=makeZerosNestedTypedArray(s.shape,s.dtype);for(let _=0;_<o;++_)for(let D=0;D<y;++D){const E=D*x-b.top;for(let k=0;k<$;++k){const O=k*w-b.left;for(let M=0;M<g;++M){let z=Number.MIN_SAFE_INTEGER,G=0,j=0;for(let K=0;K<v;++K){const X=E+K*T;if(X>=0&&X<d)for(let Y=0;Y<S;++Y){const J=O+Y*C;if(J>=0&&J<m){const te=f[_][X][J][M]+c[K][Y][M];te>z&&(z=te,G=K,j=Y)}}}P[G][j][M]+=N[_][D][k][M]}}}return{dataId:h.write(toTypedArray$1(P,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const dilation2DBackpropInputConfig$1={kernelName:Dilation2DBackpropInput$1,backendName:"cpu",kernelFunc:({inputs:n,backend:e,attrs:t})=>{const{x:r,filter:s,dy:a}=n,{strides:i,pad:l,dilations:u}=t,h=e,f=toNestedArray$1(r.shape,h.data.get(r.dataId).values),c=toNestedArray$1(s.shape,h.data.get(s.dataId).values),{batchSize:o,inHeight:d,inWidth:m,inChannels:g,outHeight:y,outWidth:$,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:S,dilationHeight:T,dilationWidth:C,outShape:I}=computeDilation2DInfo$1(r.shape,s.shape,i,l,"NHWC",u);assert$2(a.rank===I.length,()=>`Error in ${Dilation2DBackpropInput$1}, dy must have the same rank as output ${I.length}, but got ${a.rank}`);const N=toNestedArray$1(I,h.data.get(a.dataId).values),P=makeZerosNestedTypedArray(r.shape,r.dtype);for(let _=0;_<o;++_)for(let D=0;D<y;++D){const E=D*x-b.top;for(let k=0;k<$;++k){const O=k*w-b.left;for(let M=0;M<g;++M){let z=Number.MIN_SAFE_INTEGER,G=E<0?0:E,j=O<0?0:O;for(let K=0;K<v;++K){const X=E+K*T;if(X>=0&&X<d)for(let Y=0;Y<S;++Y){const J=O+Y*C;if(J>=0&&J<m){const te=f[_][X][J][M]+c[K][Y][M];te>z&&(z=te,G=X,j=J)}}}P[_][G][j][M]+=N[_][D][k][M]}}}return{dataId:h.write(toTypedArray$1(P,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function draw$1(n){const{inputs:e,backend:t,attrs:r}=n,{image:s}=e,{canvas:a,options:i}=r,{contextOptions:l,imageOptions:u}=i||{},h=u?.alpha||1,f=l?.contextType||"2d";if(f!=="2d")throw new Error(`Context type ${l.contextType} is not supported by the CPU backend.`);const c=a.getContext(f,l?.contextAttributes||{});if(c==null)throw new Error(`Could not get the context with ${f} type.`);const[o,d]=s.shape.slice(0,2),m=s.shape.length===2?1:s.shape[2],g=t.data.get(s.dataId).values,y=s.dtype==="float32"?255:1,$=new Uint8ClampedArray(d*o*4);for(let x=0;x<o*d;++x){const w=[0,0,0,255*h];for(let S=0;S<m;S++){const T=g[x*m+S];if(s.dtype==="float32"){if(T<0||T>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${T}.`)}else if(s.dtype==="int32"&&(T<0||T>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${T}.`);m===1?(w[0]=T*y,w[1]=T*y,w[2]=T*y):w[S]=T*y}const v=x*4;$[v+0]=Math.round(w[0]),$[v+1]=Math.round(w[1]),$[v+2]=Math.round(w[2]),$[v+3]=Math.round(w[3])}a.width=d,a.height=o;const b=new ImageData($,d,o);return c.putImageData(b,0,0),s}const drawConfig$1={kernelName:Draw$1,backendName:"cpu",kernelFunc:draw$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sum$3(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,keepDims:i}=r;assertNotComplex$2(s,"sum");let l;s.dtype==="bool"?l=cast$3({inputs:{x:s},backend:t,attrs:{dtype:"int32"}}):l=identity$2({inputs:{x:s},backend:t});const u=l.shape.length,h=parseAxisParam$1(a,l.shape),f=getAxesPermutation$1(h,u);let c=h,o=l;f!=null&&(o=transpose$2({inputs:{x:l},backend:t,attrs:{perm:f}}),c=getInnerMostAxes$1(c.length,u)),assertAxesAreInnerMostDims$1("sum",c,o.shape.length);const[d,m]=computeOutAndReduceShapes$1(o.shape,c),g=upcastType$1(o.dtype,"int32");let y=zeros$1(t,d,g);const $=sizeFromShape$1(m),b=t.data.get(y.dataId).values,x=t.data.get(o.dataId).values;for(let w=0;w<b.length;++w){const v=w*$;let S=0;for(let T=0;T<$;++T)S+=x[v+T];b[w]=S}if(i){const w=expandShapeToKeepDim$1(y.shape,h),v=y;y=reshape$4({inputs:{x:y},backend:t,attrs:{shape:w}}),t.disposeIntermediateTensorInfo(v)}return t.disposeIntermediateTensorInfo(l),f!=null&&t.disposeIntermediateTensorInfo(o),y}const sumConfig$2={kernelName:Sum$1,backendName:"cpu",kernelFunc:sum$3};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function einsum$2(n){const{inputs:e,backend:t,attrs:r}=n,{equation:s}=r,a=e,{allDims:i,summedDims:l,idDims:u}=decodeEinsumEquation$1(s,a.length);checkEinsumDimSizes$1(i.length,u,a);const{path:h,steps:f}=getEinsumComputePath$1(l,u),c=f.length;let o=null,d=i.length;const m=[];for(let g=0;g<c;++g){for(const y of f[g]){const{permutationIndices:$,expandDims:b}=getEinsumPermutation$1(d,u[y]);let x;isIdentityPermutation$1($)?x=a[y]:(x=transpose$2({inputs:{x:a[y]},backend:t,attrs:{perm:$}}),m.push(x));const w=x.shape.slice();for(let v=0;v<b.length;++v)w.splice(b[v],0,1);arraysEqual$1(x.shape,w)||(x=reshape$4({inputs:{x},backend:t,attrs:{shape:w}}),m.push(x)),o===null?o=x:(o=multiply$1({inputs:{a:x,b:o},backend:t}),m.push(o))}g<c-1&&(h[g]>=0&&(o=sum$3({inputs:{x:o},backend:t,attrs:{axis:h[g]-(i.length-d),keepDims:!1}}),m.push(o)),d--)}for(const g of m)g!==o&&t.disposeIntermediateTensorInfo(g);return o}const einsumConfig$2={kernelName:Einsum$1,backendName:"cpu",kernelFunc:einsum$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function eluGrad$2(n){const{inputs:e,backend:t}=n,{dy:r,y:s}=e;assertNotComplex$2([r,s],"eluGrad");const a=new Float32Array(sizeFromShape$1(s.shape)),i=t.data.get(s.dataId).values,l=t.data.get(r.dataId).values;for(let u=0;u<i.length;++u){const h=i[u];h>=0?a[u]=l[u]:a[u]=l[u]*(h+1)}return t.makeTensorInfo(s.shape,"float32",a)}const eluGradConfig$2={kernelName:EluGrad$1,backendName:"cpu",kernelFunc:eluGrad$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const p=ERF_P$1,a1=ERF_A1$1,a2=ERF_A2$1,a3=ERF_A3$1,a4=ERF_A4$1,a5=ERF_A5$1,erf$2=unaryKernelFunc$2(Erf$1,n=>{const e=Math.sign(n),t=Math.abs(n),r=1/(1+p*t);return e*(1-((((a5*r+a4)*r+a3)*r+a2)*r+a1)*r*Math.exp(-t*t))}),erfConfig$2={kernelName:Erf$1,backendName:"cpu",kernelFunc:erf$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function expandDims$2(n){const{inputs:e,backend:t,attrs:r}=n,{input:s}=e,{dim:a}=r,i=s.shape.length,l=s.shape.slice();let u=a;return a<0&&(assert$2(-(i+1)<=a,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),u=i+a+1),l.splice(u,0,1),reshape$4({inputs:{x:s},backend:t,attrs:{shape:l}})}const expandDimsConfig$2={kernelName:ExpandDims$1,backendName:"cpu",kernelFunc:expandDims$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const realDivImpl=createSimpleBinaryKernelImpl$1((n,e)=>n/e),div$1=binaryKernelFunc$2(RealDiv$1,realDivImpl),realDivConfig$2={kernelName:RealDiv$1,backendName:"cpu",kernelFunc:div$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fftBatch(n,e,t){const r=n.shape,s=r[0],a=r[1],i=t.data.get(n.dataId),l=i.complexTensorInfos.real,u=i.complexTensorInfos.imag,h=[s,a],f=sizeFromShape$1(h),c=getTypedArrayFromDType$1("float32",f),o=getTypedArrayFromDType$1("float32",f);for(let y=0;y<s;y++){const $=slice$2({inputs:{x:l},backend:t,attrs:{begin:[y,0],size:[1,a]}}),b=slice$2({inputs:{x:u},backend:t,attrs:{begin:[y,0],size:[1,a]}}),x=complex$3({inputs:{real:$,imag:b},backend:t}),{real:w,imag:v}=fftImpl$2(x,e,t),S=mergeRealAndImagArrays$1(w,v);for(let T=0;T<a;T++){const C=getComplexWithIndex(S,T);c[y*a+T]=C.real,o[y*a+T]=C.imag}t.disposeIntermediateTensorInfo($),t.disposeIntermediateTensorInfo(b),t.disposeIntermediateTensorInfo(x)}const d=t.makeTensorInfo(h,"float32",c),m=t.makeTensorInfo(h,"float32",o),g=complex$3({inputs:{real:d,imag:m},backend:t});return t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(m),g}function fftImpl$2(n,e,t){const r=sizeFromShape$1(n.shape),s=t.data.get(n.dataId),a=t.data.get(s.complexTensorInfos.real.dataId).values,i=t.data.get(s.complexTensorInfos.imag.dataId).values;if(isExponentOf2(r)){const l=fftRadix2(a,i,r,e,t),u=[n.shape[0],n.shape[1]];if(e){const h=t.makeTensorInfo(u,"float32",l.real),f=t.makeTensorInfo(u,"float32",l.imag),c=t.makeTensorInfo([],"float32",createScalarValue$1(r,"float32")),o=identity$2({inputs:{x:c},backend:t}),d=realDivConfig$2.kernelFunc({inputs:{a:h,b:c},backend:t}),m=realDivConfig$2.kernelFunc({inputs:{a:f,b:o},backend:t}),g=t.data.get(d.dataId).values,y=t.data.get(m.dataId).values;return t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(o),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(m),{real:g,imag:y}}return l}else{const l=mergeRealAndImagArrays$1(a,i),u=fourierTransformByMatmul(l,r,e);return splitRealAndImagArrays(u)}}function isExponentOf2(n){return(n&n-1)===0}function fftRadix2(n,e,t,r,s){if(t===1)return{real:n,imag:e};const a=mergeRealAndImagArrays$1(n,e),i=t/2,l=complexWithEvenIndex(a),u=l.real,h=l.imag,f=[u.length],c=s.makeTensorInfo(f,"float32",u),o=s.makeTensorInfo(f,"float32",h),d=complex$3({inputs:{real:c,imag:o},backend:s}),m=complexWithOddIndex(a),g=m.real,y=m.imag,$=[g.length],b=s.makeTensorInfo($,"float32",g),x=s.makeTensorInfo($,"float32",y),w=complex$3({inputs:{real:b,imag:x},backend:s}),v=fftRadix2(u,h,i,r,s),S=v.real,T=v.imag,C=[S.length],I=s.makeTensorInfo(C,"float32",S),N=s.makeTensorInfo(C,"float32",T),P=complex$3({inputs:{real:I,imag:N},backend:s}),F=fftRadix2(g,y,i,r,s),_=F.real,D=F.imag,E=[_.length],k=s.makeTensorInfo(E,"float32",_),O=s.makeTensorInfo(E,"float32",D),M=complex$3({inputs:{real:k,imag:O},backend:s}),z=exponents(t,r),G=[z.real.length],j=s.makeTensorInfo(G,"float32",z.real),K=s.makeTensorInfo(G,"float32",z.imag),X=complex$3({inputs:{real:j,imag:K},backend:s}),Y=multiply$1({inputs:{a:X,b:M},backend:s}),J=add$2({inputs:{a:P,b:Y},backend:s}),te=sub$3({inputs:{a:P,b:Y},backend:s}),re=real$2({inputs:{input:J},backend:s}),ue=real$2({inputs:{input:te},backend:s}),ie=imag$2({inputs:{input:J},backend:s}),ce=imag$2({inputs:{input:te},backend:s}),se=concat$2({inputs:[re,ue],backend:s,attrs:{axis:0}}),xe=concat$2({inputs:[ie,ce],backend:s,attrs:{axis:0}}),me=s.data.get(se.dataId).values,$e=s.data.get(xe.dataId).values;return s.disposeIntermediateTensorInfo(c),s.disposeIntermediateTensorInfo(o),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(I),s.disposeIntermediateTensorInfo(N),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(k),s.disposeIntermediateTensorInfo(O),s.disposeIntermediateTensorInfo(M),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(K),s.disposeIntermediateTensorInfo(X),s.disposeIntermediateTensorInfo(Y),s.disposeIntermediateTensorInfo(J),s.disposeIntermediateTensorInfo(te),s.disposeIntermediateTensorInfo(re),s.disposeIntermediateTensorInfo(ie),s.disposeIntermediateTensorInfo(ue),s.disposeIntermediateTensorInfo(ce),s.disposeIntermediateTensorInfo(se),s.disposeIntermediateTensorInfo(xe),{real:me,imag:$e}}function fourierTransformByMatmul(n,e,t){const r=new Float32Array(e*2);for(let s=0;s<e;s++){let a=0,i=0;for(let l=0;l<e;l++){const u=exponent(s*l,e,t),h=getComplexWithIndex(n,l);a+=h.real*u.real-h.imag*u.imag,i+=h.real*u.imag+h.imag*u.real}t&&(a/=e,i/=e),assignToTypedArray(r,a,i,s)}return r}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fft$2(n){const{inputs:e,backend:t}=n,{input:r}=e,s=sizeFromShape$1(r.shape),a=r.shape[r.shape.length-1],i=s/a,l=reshape$4({inputs:{x:r},backend:t,attrs:{shape:[i,a]}}),u=fftBatch(l,!1,t),h=reshape$4({inputs:{x:u},backend:t,attrs:{shape:r.shape}});return t.disposeIntermediateTensorInfo(l),t.disposeIntermediateTensorInfo(u),h}const fftConfig$2={kernelName:FFT$1,backendName:"cpu",kernelFunc:fft$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fill$3(n){const{backend:e,attrs:t}=n,{shape:r,value:s,dtype:a}=t,i=a||inferDtype$1(s),l=getArrayFromDType$1(i,sizeFromShape$1(r));return fillValues(l,s,i),e.makeTensorInfo(r,i,l)}const fillConfig$2={kernelName:Fill$1,backendName:"cpu",kernelFunc:fill$3};function fillValues(n,e,t){n.fill(e)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const flipLeftRightConfig$2={kernelName:FlipLeftRight$1,backendName:"cpu",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{image:r}=n,s=t,a=getTypedArrayFromDType$1(r.dtype,sizeFromShape$1(r.shape)),[i,l,u,h]=r.shape,f=s.data.get(r.dataId).values;for(let o=0;o<i;o++){const d=o*u*l*h;for(let m=0;m<l;m++){const g=m*(u*h);for(let y=0;y<u;y++){const $=y*h;for(let b=0;b<h;b++){const x=Math.round(u-y-1),w=d+g+$+b;let v=f[w];if(x>=0&&x<u){const S=x*h,T=d+g+S+b;v=f[T]}a[w]=v}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedConv2D(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a,bias:i,preluActivationWeights:l}=e,{strides:u,pad:h,dataFormat:f,dilations:c,dimRoundingMode:o,activation:d,leakyreluAlpha:m}=r;let g=conv2D({inputs:{x:s,filter:a},backend:t,attrs:{strides:u,pad:h,dataFormat:f,dilations:c,dimRoundingMode:o}});if(i){const y=g;if(f==="NCHW"&&i.shape.length===1&&i.shape[0]!==1){const $=reshape$4({inputs:{x:i},backend:t,attrs:{shape:[i.shape[0],1,1]}});g=add$2({inputs:{a:g,b:$},backend:t}),t.disposeIntermediateTensorInfo($)}else g=add$2({inputs:{a:g,b:i},backend:t});t.disposeIntermediateTensorInfo(y)}if(d){const y=g;if(f==="NCHW"&&d==="prelu"&&l.shape.length===1&&l.shape[0]!==1){const $=reshape$4({inputs:{x:l},backend:t,attrs:{shape:[l.shape[0],1,1]}});g=applyActivation(t,g,d,$,m),t.disposeIntermediateTensorInfo($)}else g=applyActivation(t,g,d,l,m);t.disposeIntermediateTensorInfo(y)}return g}const fusedConv2DConfig$2={kernelName:FusedConv2D$1,backendName:"cpu",kernelFunc:fusedConv2D};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedDepthwiseConv2D$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a,bias:i,preluActivationWeights:l}=e,{strides:u,pad:h,dataFormat:f,dilations:c,dimRoundingMode:o,activation:d,leakyreluAlpha:m}=r;let g=depthwiseConv2dNative$2({inputs:{x:s,filter:a},backend:t,attrs:{strides:u,pad:h,dataFormat:f,dilations:c,dimRoundingMode:o}});if(i){const y=g;g=add$2({inputs:{a:g,b:i},backend:t}),t.disposeIntermediateTensorInfo(y)}if(d){const y=g;g=applyActivation(t,g,d,l,m),t.disposeIntermediateTensorInfo(y)}return g}const fusedDepthwiseConv2DConfig$2={kernelName:FusedDepthwiseConv2D$1,backendName:"cpu",kernelFunc:fusedDepthwiseConv2D$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherNd$2(n){const{inputs:e,backend:t}=n,{params:r,indices:s}=e,a=sizeFromShape$1(r.shape),i=s.shape,l=i[i.length-1],[u,h,f,c]=prepareAndValidate$1(r,s);if(h===0)return t.makeTensorInfo(u,r.dtype,[]);const o=t.data.get(s.dataId).values,d=t.bufferSync(r),m=gatherNdImpl$1(o,d,r.dtype,h,l,f,c,r.shape,a);return t.makeTensorInfo(u,r.dtype,m.values)}const gatherNdConfig$2={kernelName:GatherNd$1,backendName:"cpu",kernelFunc:gatherNd$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherV2$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,indices:a}=e,{axis:i,batchDims:l}=r;assertNotComplex$2([s,a],"gatherV2");const u=parseAxisParam$1(i,s.shape)[0],h=t.data.get(a.dataId).values,f=s.shape[u];for(let w=0;w<h.length;++w){const v=h[w];assert$2(v<=f-1&&v>=0,()=>`GatherV2: the index value ${v} is not in [0, ${f-1}]`)}let c=l;l==null&&(c=0);const o=sizeFromShape$1(a.shape),d=collectGatherOpShapeInfo$1(s,a,u,c),m=reshape$4({inputs:{x:s},backend:t,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),g=reshape$4({inputs:{x:a},backend:t,attrs:{shape:[d.batchSize,o/d.batchSize]}}),y=[d.batchSize,d.outerSize,o/d.batchSize,d.sliceSize],$=t.bufferSync(g),b=t.bufferSync(m),x=gatherV2Impl$1(b,$,y);return t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(g),t.makeTensorInfo(d.outputShape,x.dtype,x.values)}const gatherV2Config$2={kernelName:GatherV2$1,backendName:"cpu",kernelFunc:gatherV2$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ifft$2(n){const{inputs:e,backend:t}=n,{input:r}=e,s=sizeFromShape$1(r.shape),a=r.shape[r.shape.length-1],i=s/a,l=reshape$4({inputs:{x:r},backend:t,attrs:{shape:[i,a]}}),u=fftBatch(l,!0,t),h=reshape$4({inputs:{x:u},backend:t,attrs:{shape:r.shape}});return t.disposeIntermediateTensorInfo(l),t.disposeIntermediateTensorInfo(u),h}const ifftConfig$2={kernelName:IFFT$1,backendName:"cpu",kernelFunc:ifft$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isFinite$3=unaryKernelFunc$2(IsFinite$1,n=>Number.isFinite(n)?1:0,"bool"),isFiniteConfig$2={kernelName:IsFinite$1,backendName:"cpu",kernelFunc:isFinite$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isInf$2=unaryKernelFunc$2(IsInf$1,n=>Math.abs(n)===1/0?1:0,"bool"),isInfConfig$2={kernelName:IsInf$1,backendName:"cpu",kernelFunc:isInf$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isNaN$3=unaryKernelFunc$2(IsNan$1,n=>Number.isNaN(n)?1:0,"bool"),isNaNConfig$2={kernelName:IsNan$1,backendName:"cpu",kernelFunc:isNaN$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linSpace$2(n){const{backend:e,attrs:t}=n,{start:r,stop:s,num:a}=t,i=linSpaceImpl$1(r,s,a);return e.makeTensorInfo([i.length],"float32",i)}const linSpaceConfig$2={kernelName:LinSpace$1,backendName:"cpu",kernelFunc:linSpace$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const log1p$2=unaryKernelFunc$2(Log1p$1,n=>Math.log1p(n)),log1pConfig$2={kernelName:Log1p$1,backendName:"cpu",kernelFunc:log1p$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logicalAndImpl=createSimpleBinaryKernelImpl$1((n,e)=>n&&e),logicalAnd$2=binaryKernelFunc$2(LogicalAnd$1,logicalAndImpl,null,"bool"),logicalAndConfig$2={kernelName:LogicalAnd$1,backendName:"cpu",kernelFunc:logicalAnd$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logicalNot$2=unaryKernelFunc$2(LogicalNot$1,n=>n?0:1,"bool"),logicalNotConfig$2={kernelName:LogicalNot$1,backendName:"cpu",kernelFunc:logicalNot$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logicalOrImpl=createSimpleBinaryKernelImpl$1((n,e)=>n||e),logicalOr$2=binaryKernelFunc$2(LogicalOr$1,logicalOrImpl,null,"bool"),logicalOrConfig$2={kernelName:LogicalOr$1,backendName:"cpu",kernelFunc:logicalOr$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lRN(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{depthRadius:a,bias:i,alpha:l,beta:u}=r;assertNotComplex$2(s,"LRN");const h=s.shape[3],f=h-1,c=t.data.get(s.dataId).values,o=sizeFromShape$1(s.shape),d=new Float32Array(o);function m(g){const y=g%h;let $=g-y+Math.max(0,y-a);const b=g-y+Math.min(y+a,f);let x=0;for(;$<=b;$++){const w=c[$];x+=w*w}return x}for(let g=0;g<o;g++){const y=m(g),$=c[g]*Math.pow(i+l*y,-u);d[g]=$}return t.makeTensorInfo(s.shape,s.dtype,d)}const LRNConfig$1={kernelName:LRN$1,backendName:"cpu",kernelFunc:lRN};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lRNGrad(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,y:a,dy:i}=e,{depthRadius:l,bias:u,alpha:h,beta:f}=r;assertNotComplex$2(i,"LRNGrad");const c=sizeFromShape$1(i.shape),o=i.shape[3],d=t.data.get(i.dataId).values,m=t.data.get(s.dataId).values,g=t.data.get(a.dataId).values,y=new Float32Array(c),$=c;for(let b=0;b<$;b++){const x=b%o,w=b-x+Math.max(0,x-l),v=b-x+Math.min(o,x+l+1);let S=0;for(let T=w;T<v;T++)S+=Math.pow(m[T],2);S=h*S+u;for(let T=w;T<v;T++){let C=-2*h*f*m[T]*g[b]/S;b===T&&(C+=Math.pow(S,-f)),C*=d[b],y[T]+=C}}return t.makeTensorInfo(i.shape,s.dtype,y)}const LRNGradConfig$1={kernelName:LRNGrad$1,backendName:"cpu",kernelFunc:lRNGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function max$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{reductionIndices:a,keepDims:i}=r,l=t;let u=s.shape;const h=u.length,f=parseAxisParam$1(a,u);let c=f;const o=getAxesPermutation$1(c,h);let d=l.data.get(s.dataId).values;if(o!=null){const w=new Array(h);for(let v=0;v<w.length;v++)w[v]=u[o[v]];d=transposeImpl$2(d,u,s.dtype,o,w),c=getInnerMostAxes$1(c.length,h),u=w}assertNotComplex$2(s,"max"),assertAxesAreInnerMostDims$1("max",c,h);const[m,g]=computeOutAndReduceShapes$1(u,c),y=sizeFromShape$1(g),$=maxImpl$2(d,y,m,s.dtype),b=l.write($,m,s.dtype);let x=m;return i&&(x=expandShapeToKeepDim$1(m,f)),{dataId:b,shape:x,dtype:s.dtype}}const maxConfig$2={kernelName:Max$1,backendName:"cpu",kernelFunc:max$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e;assertNotComplex$2(s,"maxPool");const{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=r,h=1;assert$2(eitherStridesOrDilationsAreOne$1(i,h),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${h}'`);const f=computePool2DInfo$1(s.shape,a,i,h,l,u);let c;if(f.filterWidth===1&&f.filterHeight===1&&arraysEqual$1(f.inShape,f.outShape))c=identity$2({inputs:{x:s},backend:t});else{const o=t.data.get(s.dataId).values,d=computeStrides$1(s.shape),m=pool(o,s.shape,s.dtype,d,f,"max");c=t.makeTensorInfo(f.outShape,s.dtype,m.values)}return c}const maxPoolConfig$2={kernelName:MaxPool$1,backendName:"cpu",kernelFunc:maxPool$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3D(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{filterSize:a,strides:i,pad:l,dimRoundingMode:u,dataFormat:h}=r;assertNotComplex$2(s,"maxPool3d");const f=computePool3DInfo$1(s.shape,a,i,1,l,u,h),c=t.data.get(s.dataId).values,o=pool3d(c,s.shape,s.dtype,computeStrides$1(s.shape),f,"max");return t.makeTensorInfo(o.shape,"float32",o.values)}const maxPool3DConfig$2={kernelName:MaxPool3D$1,backendName:"cpu",kernelFunc:maxPool3D};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3DGrad$2(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:a}=e,{filterSize:i,strides:l,pad:u,dimRoundingMode:h}=r;assertNotComplex$2([s,a],"maxPool3DGrad");const f=computePool3DInfo$1(a.shape,i,l,1,u,h),c=t.bufferSync(a),o=maxPool3dPositions(c,f),d=f.strideDepth,m=f.strideHeight,g=f.strideWidth,y=f.dilationDepth,$=f.dilationHeight,b=f.dilationWidth,x=f.effectiveFilterDepth,w=f.effectiveFilterHeight,v=f.effectiveFilterWidth,S=x-1-f.padInfo.front,T=v-1-f.padInfo.left,C=w-1-f.padInfo.top,I=buffer$1(a.shape,"float32"),N=t.bufferSync(s);for(let P=0;P<f.batchSize;++P)for(let F=0;F<f.inChannels;++F)for(let _=0;_<f.inDepth;++_)for(let D=0;D<f.inHeight;++D)for(let E=0;E<f.inWidth;++E){const k=_-S,O=D-C,M=E-T;let z=0;for(let G=0;G<x;G+=y){const j=(k+G)/d;if(!(j<0||j>=f.outDepth||Math.floor(j)!==j))for(let K=0;K<w;K+=$){const X=(O+K)/m;if(!(X<0||X>=f.outHeight||Math.floor(X)!==X))for(let Y=0;Y<v;Y+=b){const J=(M+Y)/g;if(J<0||J>=f.outWidth||Math.floor(J)!==J)continue;const te=x*w*v-1-o.get(P,j,X,J,F),re=G*w*v+K*v+Y,ue=te===re?1:0;if(ue===0)continue;const ie=N.get(P,j,X,J,F);z+=ie*ue}}}I.set(z,P,_,D,E,F)}return t.makeTensorInfo(I.shape,I.dtype,I.values)}const maxPool3DGradConfig$2={kernelName:MaxPool3DGrad$1,backendName:"cpu",kernelFunc:maxPool3DGrad$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolGrad$2(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:a,output:i}=e,l=a;assertNotComplex$2([a,i],"maxPoolGrad");const{filterSize:u,strides:h,pad:f,dimRoundingMode:c}=r,o=computePool2DInfo$1(l.shape,u,h,1,f,c),d=t.data.get(l.dataId).values,m=buffer$1(o.outShape,l.dtype,maxPoolPositions(d,l.shape,l.dtype,o).values),g=o.strideHeight,y=o.strideWidth,$=o.dilationHeight,b=o.dilationWidth,x=o.effectiveFilterHeight,w=o.effectiveFilterWidth,v=w-1-o.padInfo.left,S=x-1-o.padInfo.top,T=buffer$1(l.shape,"float32"),C=t.data.get(s.dataId).values,I=buffer$1(s.shape,"float32",C);for(let N=0;N<o.batchSize;++N)for(let P=0;P<o.inChannels;++P)for(let F=0;F<o.inHeight;++F)for(let _=0;_<o.inWidth;++_){const D=F-S,E=_-v;let k=0;for(let O=0;O<x;O+=$){const M=(D+O)/g;if(!(M<0||M>=o.outHeight||Math.floor(M)!==M))for(let z=0;z<w;z+=b){const G=(E+z)/y;if(G<0||G>=o.outWidth||Math.floor(G)!==G)continue;const j=x*w-1-m.get(N,M,G,P),K=O*w+z,X=j===K?1:0;if(X===0)continue;const Y=I.get(N,M,G,P);k+=Y*X}}T.set(k,N,F,_,P)}return t.makeTensorInfo(T.shape,T.dtype,T.values)}const maxPoolGradConfig$2={kernelName:MaxPoolGrad$1,backendName:"cpu",kernelFunc:maxPoolGrad$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolWithArgmaxImpl$1(n,e,t,r,s){const a=computeStrides$1(e),i=pool(n,e,t,a,s,"max"),l=maxPoolPositions(n,e,t,s,!0,r);return[i.values,l.values]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxPoolWithArgmaxConfig$2={kernelName:MaxPoolWithArgmax$1,backendName:"cpu",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{x:r}=n,{filterSize:s,strides:a,pad:i,includeBatchInIndex:l}=e,u=t;assertNotComplex$2(r,"MaxPoolWithArgmax");const h=u.data.get(r.dataId).values,f=computePool2DInfo$1(r.shape,s,a,[1,1],i),[c,o]=maxPoolWithArgmaxImpl$1(h,r.shape,r.dtype,l,f),d=u.write(c,f.outShape,r.dtype),m=u.write(o,f.outShape,r.dtype);return[{dataId:d,shape:f.outShape,dtype:r.dtype},{dataId:m,shape:f.outShape,dtype:"int32"}]}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mean$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,keepDims:i}=r,l=parseAxisParam$1(a,s.shape),h=computeOutAndReduceShapes$1(s.shape,l)[1],f=sizeFromShape$1(h),c=[],o=t.makeTensorInfo([],"float32",new Float32Array([f]));c.push(o);const d=cast$3({inputs:{x:s},backend:t,attrs:{dtype:"float32"}});c.push(d);const m=div$1({inputs:{a:d,b:o},backend:t});c.push(m);const g=sum$3({inputs:{x:m},backend:t,attrs:{axis:a,keepDims:i}});return c.forEach(y=>t.disposeIntermediateTensorInfo(y)),g}const meanConfig$2={kernelName:Mean$1,backendName:"cpu",kernelFunc:mean$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function min$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,keepDims:i}=r;assertNotComplex$2(s,"min");const l=parseAxisParam$1(a,s.shape);let u=l;const h=getAxesPermutation$1(u,s.shape.length);let f=s;h!=null&&(f=transpose$2({inputs:{x:s},backend:t,attrs:{perm:h}}),u=getInnerMostAxes$1(u.length,s.shape.length)),assertAxesAreInnerMostDims$1("min",u,f.shape.length);const[c,o]=computeOutAndReduceShapes$1(f.shape,u),d=sizeFromShape$1(o),m=makeZerosTypedArray$1(sizeFromShape$1(c),f.dtype),g=t.data.get(f.dataId).values;for(let $=0;$<m.length;++$){const b=$*d;let x=g[b];for(let w=0;w<d;++w){const v=g[b+w];(Number.isNaN(v)||v<x)&&(x=v)}m[$]=x}h!=null&&t.disposeIntermediateTensorInfo(f);const y=t.makeTensorInfo(c,f.dtype,m);if(i){const $=expandShapeToKeepDim$1(c,l),b=reshape$4({inputs:{x:y},backend:t,attrs:{shape:$}});return t.disposeIntermediateTensorInfo(y),b}return y}const minConfig$2={kernelName:Min$1,backendName:"cpu",kernelFunc:min$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mirrorPad(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{paddings:a,mode:i}=r;assertNotComplex$2(s,"mirrorPad");const l=a.map((x,w)=>x[0]+s.shape[w]+x[1]),u=a.map(x=>x[0]),h=a.map((x,w)=>x[0]+s.shape[w]),f=i==="reflect"?0:1,c=t.data.get(s.dataId).values,o=s.shape.length,d=computeStrides$1(s.shape),m=sizeFromShape$1(l),g=l.length,y=computeStrides$1(l),$=getTypedArrayFromDType$1(s.dtype,m);for(let x=0;x<m;x++){let w=indexToLoc$1(x,g,y);for(let S=0;S<g;S++)w[S]<u[S]?w[S]=u[S]*2-w[S]-f:w[S]>=h[S]&&(w[S]=(h[S]-1)*2-w[S]+f);w=w.map((S,T)=>S-u[T]);const v=locToIndex$1(w,o,d);$[x]=c[v]}return{dataId:t.write($,l,s.dtype),shape:l,dtype:s.dtype}}const mirrorPadConfig$2={kernelName:MirrorPad$1,backendName:"cpu",kernelFunc:mirrorPad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const modImpl=createSimpleBinaryKernelImpl$1((n,e)=>{const t=n%e;return n<0&&e<0||n>=0&&e>=0?t:(t+e)%e}),mod$2=binaryKernelFunc$2(Mod$1,modImpl),modConfig$2={kernelName:Mod$1,backendName:"cpu",kernelFunc:mod$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softmax$2(n){const{inputs:e,backend:t,attrs:r}=n,{logits:s}=e,{dim:a}=r,i=s.shape.length;let l=a;if(l===-1&&(l=i-1),l!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${l}`);const u=parseAxisParam$1([l],s.shape),h=max$2({inputs:{x:s},backend:t,attrs:{reductionIndices:u,keepDims:!1}}),f=expandShapeToKeepDim$1(h.shape,u),c=reshape$4({inputs:{x:h},backend:t,attrs:{shape:f}}),o=sub$3({inputs:{a:s,b:c},backend:t}),d=exp$2({inputs:{x:o},backend:t}),m=sum$3({inputs:{x:d},backend:t,attrs:{axis:u,keepDims:!1}}),g=reshape$4({inputs:{x:m},backend:t,attrs:{shape:f}}),y=div$1({inputs:{a:d,b:g},backend:t});return t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(o),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(g),y}const softmaxConfig$2={kernelName:Softmax$3,backendName:"cpu",kernelFunc:softmax$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function multinomial$2(n){const{inputs:e,backend:t,attrs:r}=n,{logits:s}=e,{numSamples:a,seed:i,normalized:l}=r;assertNotComplex$2(s,"multinomial");const u=l?s:softmax$2({inputs:{logits:s},backend:t,attrs:{dim:-1}}),h=u.shape[0],f=u.shape[1],c=t.data.get(u.dataId).values,o=[h,a],d=makeZerosTypedArray$1(sizeFromShape$1(o),"int32");for(let m=0;m<h;++m){const g=m*f,y=new Float32Array(f-1);y[0]=c[g];for(let x=1;x<y.length;++x)y[x]=y[x-1]+c[g+x];const $=seedrandom.alea(i.toString()),b=m*a;for(let x=0;x<a;++x){const w=$();d[b+x]=y.length;for(let v=0;v<y.length;v++)if(w<y[v]){d[b+x]=v;break}}}return l||t.disposeIntermediateTensorInfo(u),t.makeTensorInfo(o,"int32",d)}const multinomialConfig$2={kernelName:Multinomial$1,backendName:"cpu",kernelFunc:multinomial$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV3Impl$2=nonMaxSuppressionV3Impl$3;function nonMaxSuppressionV3$2(n){const{inputs:e,backend:t,attrs:r}=n,{boxes:s,scores:a}=e,{maxOutputSize:i,iouThreshold:l,scoreThreshold:u}=r;assertNotComplex$2(s,"NonMaxSuppression");const h=t.data.get(s.dataId).values,f=t.data.get(a.dataId).values,{selectedIndices:c}=nonMaxSuppressionV3Impl$2(h,f,i,l,u);return t.makeTensorInfo([c.length],"int32",new Int32Array(c))}const nonMaxSuppressionV3Config$2={kernelName:NonMaxSuppressionV3$1,backendName:"cpu",kernelFunc:nonMaxSuppressionV3$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV4Impl$1=nonMaxSuppressionV4Impl$2;function nonMaxSuppressionV4$1(n){const{inputs:e,backend:t,attrs:r}=n,{boxes:s,scores:a}=e,{maxOutputSize:i,iouThreshold:l,scoreThreshold:u,padToMaxOutputSize:h}=r;assertNotComplex$2(s,"NonMaxSuppressionPadded");const f=t.data.get(s.dataId).values,c=t.data.get(a.dataId).values,{selectedIndices:o,validOutputs:d}=nonMaxSuppressionV4Impl$1(f,c,i,l,u,h);return[t.makeTensorInfo([o.length],"int32",new Int32Array(o)),t.makeTensorInfo([],"int32",new Int32Array([d]))]}const nonMaxSuppressionV4Config$1={kernelName:NonMaxSuppressionV4,backendName:"cpu",kernelFunc:nonMaxSuppressionV4$1};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV5Impl$2=nonMaxSuppressionV5Impl$3;function nonMaxSuppressionV5$2(n){const{inputs:e,backend:t,attrs:r}=n,{boxes:s,scores:a}=e,{maxOutputSize:i,iouThreshold:l,scoreThreshold:u,softNmsSigma:h}=r;assertNotComplex$2(s,"NonMaxSuppressionWithScore");const f=t.data.get(s.dataId).values,c=t.data.get(a.dataId).values,o=i,d=l,m=u,g=h,{selectedIndices:y,selectedScores:$}=nonMaxSuppressionV5Impl$2(f,c,o,d,m,g);return[t.makeTensorInfo([y.length],"int32",new Int32Array(y)),t.makeTensorInfo([$.length],"float32",new Float32Array($))]}const nonMaxSuppressionV5Config$2={kernelName:NonMaxSuppressionV5$1,backendName:"cpu",kernelFunc:nonMaxSuppressionV5$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function oneHot$2(n){const{inputs:e,backend:t,attrs:r}=n,{indices:s}=e,{dtype:a,depth:i,onValue:l,offValue:u}=r;assertNotComplex$2(s,"oneHot");const h=sizeFromShape$1(s.shape),f=new Float32Array(h*i);f.fill(u);const c=t.data.get(s.dataId).values;for(let o=0;o<h;++o)c[o]>=0&&c[o]<i&&(f[o*i+c[o]]=l);return t.makeTensorInfo([...s.shape,i],a,f)}const oneHotConfig$2={kernelName:OneHot$1,backendName:"cpu",kernelFunc:oneHot$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zerosLike$3(n){const{inputs:e,backend:t}=n,{x:r}=e;if(r.dtype==="string")throw new Error("zerosLike is not supported for string tensors");if(r.dtype==="complex64"){const s=real$2({inputs:{input:r},backend:t}),a=zerosLike$3({inputs:{x:s},backend:t}),i=imag$2({inputs:{input:r},backend:t}),l=zerosLike$3({inputs:{x:i},backend:t}),u=complex$3({inputs:{real:a,imag:l},backend:t});return t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(l),u}else return fill$3({backend:t,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const zerosLikeConfig$2={kernelName:ZerosLike$1,backendName:"cpu",kernelFunc:zerosLike$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function onesLike$2(n){const{inputs:e,backend:t}=n,{x:r}=e;if(r.dtype==="string")throw new Error("onesLike is not supported for string tensors");if(r.dtype==="complex64"){const s=real$2({inputs:{input:r},backend:t}),a=onesLike$2({inputs:{x:s},backend:t}),i=imag$2({inputs:{input:r},backend:t}),l=zerosLike$3({inputs:{x:i},backend:t}),u=complex$3({inputs:{real:a,imag:l},backend:t});return t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(l),u}else return fill$3({backend:t,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}const onesLikeConfig$2={kernelName:OnesLike$1,backendName:"cpu",kernelFunc:onesLike$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pack$2(n){const{inputs:e,backend:t,attrs:r}=n,{axis:s}=r;if(e.length===1)return expandDims$2({inputs:{input:e[0]},backend:t,attrs:{dim:s}});const a=e[0].shape,i=e[0].dtype;e.forEach(f=>{assertShapesMatch$1(a,f.shape,"All tensors passed to stack must have matching shapes"),assert$2(i===f.dtype,()=>"All tensors passed to stack must have matching dtypes")});const l=[],u=e.map(f=>{const c=expandDims$2({inputs:{input:f},backend:t,attrs:{dim:s}});return l.push(c),c}),h=concat$2({inputs:u,backend:t,attrs:{axis:s}});return l.forEach(f=>t.disposeIntermediateTensorInfo(f)),h}const packConfig$2={kernelName:Pack$1,backendName:"cpu",kernelFunc:pack$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function padV2$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{paddings:a,constantValue:i}=r;assertNotComplex$2(s,"pad");const l=a.map((b,x)=>b[0]+s.shape[x]+b[1]),u=a.map(b=>b[0]),h=t.data.get(s.dataId).values,f=sizeFromShape$1(s.shape),c=s.shape.length,o=computeStrides$1(s.shape),d=sizeFromShape$1(l),m=l.length,g=computeStrides$1(l),y=getTypedArrayFromDType$1(s.dtype,d);i!==0&&y.fill(i);for(let b=0;b<f;b++){const w=indexToLoc$1(b,c,o).map((S,T)=>S+u[T]),v=locToIndex$1(w,m,g);y[v]=h[b]}return{dataId:t.write(y,l,s.dtype),shape:l,dtype:s.dtype}}const padV2Config$2={kernelName:PadV2$1,backendName:"cpu",kernelFunc:padV2$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const powImpl=createSimpleBinaryKernelImpl$1((n,e)=>Math.pow(n,e)),pow$3=binaryKernelFunc$2(Pow$1,powImpl),powConfig$2={kernelName:Pow$1,backendName:"cpu",kernelFunc:pow$3};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedGather$1(n){const{inputs:e,backend:t,attrs:r}=n,{paramsNestedSplits:s,paramsDenseValues:a,indices:i}=e,l=s.map(y=>t.data.get(y.dataId).values),u=s.map(y=>y.shape),h=t.data.get(a.dataId).values,f=t.data.get(i.dataId).values,[c,o,d]=raggedGatherImpl$1(l,u,h,a.shape,a.dtype,f,i.shape),m=c.map(y=>t.makeTensorInfo([y.length],"int32",y)),g=t.makeTensorInfo(d,a.dtype,o);return m.concat([g])}const raggedGatherConfig$1={kernelName:RaggedGather,backendName:"cpu",kernelFunc:raggedGather$1};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedRange$1(n){const{inputs:e,backend:t}=n,{starts:r,limits:s,deltas:a}=e,i=t.data.get(r.dataId).values,l=t.data.get(s.dataId).values,u=t.data.get(a.dataId).values,[h,f]=raggedRangeImpl$1(i,r.shape,r.dtype,l,s.shape,u,a.shape),c=t.makeTensorInfo([h.length],"int32",h),o=t.makeTensorInfo([f.length],r.dtype,f);return[c,o]}const raggedRangeConfig$1={kernelName:RaggedRange,backendName:"cpu",kernelFunc:raggedRange$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedTensorToTensor$1(n){const{inputs:e,backend:t,attrs:r}=n,{shape:s,values:a,defaultValue:i,rowPartitionTensors:l}=e,{rowPartitionTypes:u}=r,h=t.data.get(s.dataId).values,f=t.data.get(a.dataId).values,c=t.data.get(i.dataId).values,o=l.map(y=>t.data.get(y.dataId).values),d=l.map(y=>y.shape),[m,g]=raggedTensorToTensorImpl$1(h,s.shape,f,a.shape,a.dtype,c,i.shape,o,d,u);return t.makeTensorInfo(m,a.dtype,g)}const raggedTensorToTensorConfig$1={kernelName:RaggedTensorToTensor,backendName:"cpu",kernelFunc:raggedTensorToTensor$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function range$2(n){const{backend:e,attrs:t}=n,{start:r,stop:s,dtype:a,step:i}=t,l=rangeImpl$1(r,s,i,a);return e.makeTensorInfo([l.length],a,l)}const rangeConfig$2={kernelName:Range$1,backendName:"cpu",kernelFunc:range$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reciprocal$2=unaryKernelFunc$2(Reciprocal$1,n=>1/n),reciprocalConfig$2={kernelName:Reciprocal$1,backendName:"cpu",kernelFunc:reciprocal$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinear$2(n){const{inputs:e,backend:t,attrs:r}=n,{images:s}=e,{alignCorners:a,halfPixelCenters:i,size:l}=r;assertNotComplex$2(s,"resizeBilinear");const u=computeStrides$1(s.shape),[h,f]=l,[c,o,d,m]=s.shape,g=t.data.get(s.dataId).values,y=new Float32Array(sizeFromShape$1([c,h,f,m])),$=[a&&h>1?o-1:o,a&&f>1?d-1:d],b=[a&&h>1?h-1:h,a&&f>1?f-1:f];let x=0;const w=$[0]/b[0],v=$[1]/b[1];for(let S=0;S<c;S++)for(let T=0;T<h;T++){let C;i?C=w*(T+.5)-.5:C=w*T;const I=Math.max(0,Math.floor(C)),N=C-I,P=Math.min(o-1,Math.ceil(C)),F=S*u[0]+I*u[1],_=S*u[0]+P*u[1];for(let D=0;D<f;D++){let E;i?E=v*(D+.5)-.5:E=v*D;const k=Math.max(0,Math.floor(E)),O=E-k,M=Math.min(d-1,Math.ceil(E)),z=F+k*u[2],G=_+k*u[2],j=F+M*u[2],K=_+M*u[2];for(let X=0;X<m;X++){const Y=g[z+X],J=g[G+X],te=g[j+X],re=g[K+X],ue=Y+(te-Y)*O,ie=J+(re-J)*O,ce=ue+(ie-ue)*N;y[x++]=ce}}}return t.makeTensorInfo([c,h,f,m],"float32",y)}const resizeBilinearConfig$2={kernelName:ResizeBilinear$1,backendName:"cpu",kernelFunc:resizeBilinear$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinearGrad$2(n){const{inputs:e,backend:t,attrs:r}=n,{images:s,dy:a}=e,{alignCorners:i}=r;assertNotComplex$2([a,s],"resizeBilinearGrad");const l=computeStrides$1(s.shape),[u,h,f,c]=s.shape,[,o,d]=a.shape,m=new Float32Array(u*h*f*c),g=[i&&o>1?h-1:h,i&&d>1?f-1:f],y=[i&&o>1?o-1:o,i&&d>1?d-1:d],$=g[0]/y[0],b=g[1]/y[1],x=t.data.get(a.dataId).values;let w=0;for(let v=0;v<u;v++){const S=v*l[0];for(let T=0;T<o;T++){const C=T*$,I=Math.floor(C),N=Math.min(Math.ceil(C),h-1),P=S+I*l[1],F=S+N*l[1],_=C-I,D=1-_;for(let E=0;E<d;E++){const k=E*b,O=Math.floor(k),M=Math.min(Math.ceil(k),f-1),z=k-O,G=1-z,j=P+O*l[2],K=P+M*l[2],X=F+O*l[2],Y=F+M*l[2],J=D*G,te=D*z,re=_*G,ue=_*z;for(let ie=0;ie<c;ie++){const ce=x[w++];m[j+ie]+=ce*J,m[K+ie]+=ce*te,m[X+ie]+=ce*re,m[Y+ie]+=ce*ue}}}}return t.makeTensorInfo([u,f,h,c],"float32",m)}const resizeBilinearGradConfig$2={kernelName:ResizeBilinearGrad$1,backendName:"cpu",kernelFunc:resizeBilinearGrad$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighbor$2(n){const{inputs:e,backend:t,attrs:r}=n,{images:s}=e,{alignCorners:a,halfPixelCenters:i,size:l}=r;assertNotComplex$2(s,"resizeNearestNeighbor");const u=computeStrides$1(s.shape),[h,f]=l,[c,o,d,m]=s.shape,g=t.data.get(s.dataId).values,y=new Float32Array(c*h*f*m),$=[a&&h>1?o-1:o,a&&f>1?d-1:d],b=[a&&h>1?h-1:h,a&&f>1?f-1:f],x=$[0]/b[0],w=$[1]/b[1];let v=0;for(let S=0;S<c;S++){const T=S*u[0];for(let C=0;C<h;C++){const I=i?x*(C+.5):x*C;let N=Math.min(o-1,a?Math.round(I):Math.floor(I));i&&(N=Math.max(0,N));const P=T+N*u[1];for(let F=0;F<f;F++){const _=i?w*(F+.5):w*F;let D=Math.min(d-1,a?Math.round(_):Math.floor(_));i&&(D=Math.max(0,D));const E=P+D*u[2];for(let k=0;k<m;k++){const O=g[E+k];y[v++]=O}}}}return t.makeTensorInfo([c,h,f,m],s.dtype,y)}const resizeNearestNeighborConfig$2={kernelName:ResizeNearestNeighbor$1,backendName:"cpu",kernelFunc:resizeNearestNeighbor$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighborGrad$2(n){const{inputs:e,backend:t,attrs:r}=n,{images:s,dy:a}=e,{alignCorners:i}=r;assertNotComplex$2([a,s],"resizeNearestNeighborGrad");const l=computeStrides$1(s.shape),u=computeStrides$1(a.shape),[h,f,c,o]=s.shape,[,d,m]=a.shape,g=new Float32Array(h*f*c*o),y=t.data.get(a.dataId).values,$=[i&&d>1?f-1:f,i&&m>1?c-1:c],b=[i&&d>1?d-1:d,i&&m>1?m-1:m],x=$[0]/b[0],w=$[1]/b[1],v=1/x,S=1/w,T=Math.ceil(v)*2+2,C=Math.ceil(S)*2+2;for(let I=0;I<h;I++){const N=I*l[0];for(let P=0;P<f;P++){const F=N+P*l[1],_=Math.floor(P*v),D=Math.floor(_-T/2);for(let E=0;E<c;E++){const k=F+E*l[2],O=Math.floor(E*S),M=Math.floor(O-C/2);for(let z=0;z<o;z++){let G=0;for(let j=0;j<T;j++){const K=j+D;if(K<0||K>=d)continue;const X=N+K*u[1],Y=K*x,J=Math.min(f-1,i?Math.round(Y):Math.floor(Y));if(P===J)for(let te=0;te<C;te++){const re=te+M;if(re<0||re>=m)continue;const ue=X+re*u[2],ie=re*w,ce=Math.min(c-1,i?Math.round(ie):Math.floor(ie));E===ce&&(G+=y[ue+z])}}g[k+z]=G}}}}return t.makeTensorInfo(s.shape,s.dtype,g)}const resizeNearestNeighborGradConfig$2={kernelName:ResizeNearestNeighborGrad$1,backendName:"cpu",kernelFunc:resizeNearestNeighborGrad$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{dims:a}=r;assertNotComplex$2(s,"reverse");const i=s.shape.length,l=parseAxisParam$1(a,s.shape);if(i===0)return identity$2({inputs:{x:s},backend:t});const u=new TensorBuffer$1(s.shape,s.dtype),h=t.bufferSync(s);for(let f=0;f<u.size;f++){const c=u.indexToLoc(f),o=c.slice();l.forEach(d=>o[d]=s.shape[d]-1-o[d]),u.set(h.get(...o),...c)}return t.makeTensorInfo(u.shape,u.dtype,u.values)}const reverseConfig$2={kernelName:Reverse$1,backendName:"cpu",kernelFunc:reverse$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rotateWithOffsetConfig$2={kernelName:RotateWithOffset$1,backendName:"cpu",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{image:r}=n,{radians:s,fillValue:a,center:i}=e,l=t,u=getTypedArrayFromDType$1(r.dtype,sizeFromShape$1(r.shape)),[h,f,c,o]=r.shape,[d,m]=getImageCenter$1(i,f,c),g=255,y=Math.sin(s),$=Math.cos(s),b=l.data.get(r.dataId).values;for(let w=0;w<h;w++){const v=w*c*f*o;for(let S=0;S<f;S++){const T=S*(c*o);for(let C=0;C<c;C++){const I=C*o;for(let N=0;N<o;N++){const P=[h,S,C,N],F=P[2],_=P[1];let D=(F-d)*$-(_-m)*y,E=(F-d)*y+(_-m)*$;D=Math.round(D+d),E=Math.round(E+m);let k=a;if(typeof a!="number"&&(N===3?k=g:k=a[N]),D>=0&&D<c&&E>=0&&E<f){const M=E*(c*o),z=D*o,G=v+M+z+N;k=b[G]}const O=v+T+I+N;u[O]=k}}}}return{dataId:l.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const round$3=unaryKernelFunc$2(Round$1,n=>{const e=Math.floor(n);return n-e<.5?Math.floor(n):n-e>.5?Math.ceil(n):e%2===0?e:e+1}),roundConfig$2={kernelName:Round$1,backendName:"cpu",kernelFunc:round$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterNd$2(n){const{inputs:e,backend:t,attrs:r}=n,{indices:s,updates:a}=e,{shape:i}=r,{sliceRank:l,numUpdates:u,sliceSize:h,strides:f,outputSize:c}=calculateShapes$1(a,s,i),o=!0,d=t.bufferSync(s),m=t.bufferSync(a),g=scatterImpl$1(d,m,i,c,h,u,l,f,0,o);return t.makeTensorInfo(i,g.dtype,g.values)}const scatterNdConfig$2={kernelName:ScatterNd$1,backendName:"cpu",kernelFunc:scatterNd$2};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lowerBound(n,e){let t=0,r=n.length,s=0;for(;t<r;)s=Math.floor((t+r)/2),n[s]<e?t=s+1:r=s;return r}function upperBound(n,e){let t=0,r=n.length,s=0;for(;t<r;)s=Math.floor((t+r)/2),n[s]<=e?t=s+1:r=s;return r}function searchSortedImpl(n,e,t,r,s,a){const i=getArrayFromDType$1("int32",t*s);for(let l=0;l<t;++l){const u=n.slice(l*r,(l+1)*r),h=l*s;for(let f=0;f<s;++f)i[h+f]=a==="left"?lowerBound(u,e[f+h]):upperBound(u,e[f+h])}return i}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function searchSorted$2(n){const{inputs:e,backend:t,attrs:r}=n,{sortedSequence:s,values:a}=e,{side:i}=r,l=t.data.get(s.dataId).values,u=t.data.get(a.dataId).values,h=searchSortedImpl(l,u,s.shape[0],s.shape[1],a.shape[1],i);return t.makeTensorInfo(a.shape,"int32",h)}const searchSortedConfig$2={kernelName:SearchSorted$1,backendName:"cpu",kernelFunc:searchSorted$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function select$3(n){const{inputs:e,backend:t}=n,{condition:r,t:s,e:a}=e;assertNotComplex$2([r,s,a],"select");const i=r.shape.length,l=t.data.get(r.dataId).values,u=t.data.get(s.dataId).values,h=t.data.get(a.dataId).values,f=upcastType$1(s.dtype,a.dtype),c=makeZerosTypedArray$1(sizeFromShape$1(s.shape),f);let o=0;const d=i===0||i>1||s.shape.length===1?1:sizeFromShape$1(s.shape.slice(1));for(let m=0;m<l.length;m++)for(let g=0;g<d;g++)l[m]===1?c[o++]=u[m]:c[o++]=h[m];return t.makeTensorInfo(s.shape,f,c)}const selectConfig$2={kernelName:Select$1,backendName:"cpu",kernelFunc:select$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const scaleAlpha=SELU_SCALEALPHA$1,scale=SELU_SCALE$1,selu$2=unaryKernelFunc$2(Selu$2,n=>n>=0?scale*n:scaleAlpha*(Math.exp(n)-1)),seluConfig$2={kernelName:Selu$2,backendName:"cpu",kernelFunc:selu$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sign$2=unaryKernelFunc$2(Sign$1,n=>n<0?-1:n>0?1:0),signConfig$2={kernelName:Sign$1,backendName:"cpu",kernelFunc:sign$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sin$2=unaryKernelFunc$2(Sin$1,n=>Math.sin(n)),sinConfig$2={kernelName:Sin$1,backendName:"cpu",kernelFunc:sin$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sinh$2=unaryKernelFunc$2(Sinh$1,n=>Math.sinh(n)),sinhConfig$2={kernelName:Sinh$1,backendName:"cpu",kernelFunc:sinh$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const epsilon=11920928955078125e-23,threshold=Math.log(epsilon)+2,softplus$2=unaryKernelFunc$2(Softplus$2,n=>{const e=n>-threshold,t=n<threshold,r=Math.exp(n);let s;return t?s=r:e?s=n:s=Math.log(1+r),s}),softplusConfig$2={kernelName:Softplus$2,backendName:"cpu",kernelFunc:softplus$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function spaceToBatchND$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockShape:a,paddings:i}=r;assertNotComplex$2([s],"spaceToBatchND");const l=sizeFromShape$1(a),u=[[0,0]];u.push(...i);for(let S=1+a.length;S<s.shape.length;++S)u.push([0,0]);const h=padV2Config$2.kernelFunc({inputs:{x:s},backend:t,attrs:{paddings:u,constantValue:0}}),f=getReshaped$1(h.shape,a,l,!1),c=getPermuted$1(f.length,a.length,!1),o=getReshapedPermuted$1(h.shape,a,l,!1),g=reshape$4({inputs:{x:h},backend:t,attrs:{shape:f}}),b=transpose$2({inputs:{x:g},backend:t,attrs:{perm:c}}),v=reshape$4({inputs:{x:b},backend:t,attrs:{shape:o}});return t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(b),v}const spaceToBatchNDConfig$2={kernelName:SpaceToBatchND$1,backendName:"cpu",kernelFunc:spaceToBatchND$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseFillEmptyRows$1(n){const{inputs:e,backend:t}=n,{indices:r,values:s,denseShape:a,defaultValue:i}=e;if(a.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
        ${a.shape}`);if(r.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
        ${r.shape}`);if(s.shape.length!==1)throw new Error(`Values must be a vector, saw:
        ${s.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);const l=t.data.get(r.dataId).values,u=t.data.get(s.dataId).values,h=t.data.get(a.dataId).values,f=t.data.get(i.dataId).values[0],[c,o,d,m,g]=sparseFillEmptyRowsImpl$1(l,r.shape,r.dtype,u,s.dtype,h,f);return[t.makeTensorInfo(o,r.dtype,c),t.makeTensorInfo([o[0]],s.dtype,d),t.makeTensorInfo([m.length],"bool",new Uint8Array(m.map(y=>Number(y)))),t.makeTensorInfo([g.length],r.dtype,new Int32Array(g))]}const sparseFillEmptyRowsConfig$1={kernelName:SparseFillEmptyRows,backendName:"cpu",kernelFunc:sparseFillEmptyRows$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseReshape$1(n){const{inputs:e,backend:t}=n,{inputIndices:r,inputShape:s,newShape:a}=e;if(r.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape
        ${r.shape}`);if(s.shape.length!==1)throw new Error(`Input shape should be a vector but received shape
        ${s.shape}`);if(a.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(t.data.get(s.dataId).values),l=t.data.get(r.dataId).values,u=Array.from(t.data.get(a.dataId).values),[h,f,c]=sparseReshapeImpl$1(l,r.shape,r.dtype,i,u);return[t.makeTensorInfo(f,r.dtype,h),t.makeTensorInfo([c.length],a.dtype,new Int32Array(c))]}const sparseReshapeConfig$1={kernelName:SparseReshape,backendName:"cpu",kernelFunc:sparseReshape$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentMean$2(n){const{inputs:e,backend:t}=n,{data:r,indices:s,segmentIds:a}=e;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(s.shape.length!==1)throw new Error(`Indices should be a vector but received shape
          ${s.shape}`);if(a.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
          ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=t.data.get(r.dataId).values,l=t.data.get(s.dataId).values,u=t.data.get(a.dataId).values,[h,f]=sparseSegmentReductionImpl$1(i,r.shape,r.dtype,l,u,!0);return t.makeTensorInfo(f,r.dtype,h)}const sparseSegmentMeanConfig$2={kernelName:SparseSegmentMean$1,backendName:"cpu",kernelFunc:sparseSegmentMean$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentSum$2(n){const{inputs:e,backend:t}=n,{data:r,indices:s,segmentIds:a}=e;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(s.shape.length!==1)throw new Error(`Indices should be a vector but received shape
         ${s.shape}`);if(a.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
         ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=t.data.get(r.dataId).values,l=t.data.get(s.dataId).values,u=t.data.get(a.dataId).values,[h,f]=sparseSegmentReductionImpl$1(i,r.shape,r.dtype,l,u);return t.makeTensorInfo(f,r.dtype,h)}const sparseSegmentSumConfig$2={kernelName:SparseSegmentSum$1,backendName:"cpu",kernelFunc:sparseSegmentSum$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseToDense$2(n){const{inputs:e,backend:t,attrs:r}=n,{sparseIndices:s,sparseValues:a,defaultValue:i}=e,{outputShape:l}=r,{sliceRank:u,numUpdates:h,sliceSize:f,strides:c,outputSize:o}=calculateShapes$1(a,s,l),d=!1,m=t.bufferSync(s);let g;switch(a.dtype){case"bool":{const y=t.bufferSync(a),$=!!t.data.get(i.dataId).values[0];g=scatterImpl$1(m,y,l,o,f,h,u,c,$,d);break}case"float32":{const y=t.bufferSync(a),$=t.data.get(i.dataId).values[0];g=scatterImpl$1(m,y,l,o,f,h,u,c,$,d);break}case"int32":{const y=t.bufferSync(a),$=t.data.get(i.dataId).values[0];g=scatterImpl$1(m,y,l,o,f,h,u,c,$,d);break}case"string":{const y=t.bufferSync(a),$=decodeString$1(t.data.get(i.dataId).values[0]);g=scatterImpl$1(m,y,l,o,f,h,u,c,$,d);break}default:throw new Error(`Unsupported type ${a.dtype}`)}return t.makeTensorInfo(l,g.dtype,g.values)}const sparseToDenseConfig$2={kernelName:SparseToDense$1,backendName:"cpu",kernelFunc:sparseToDense$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function splitV$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{numOrSizeSplits:a,axis:i}=r,l=parseAxisParam$1(i,s.shape)[0],u=prepareSplitSize$1(s,a,l),h=new Array(s.shape.length).fill(0),f=s.shape.slice();return u.map(c=>{const o=[...f];o[l]=c;const d=slice$2({inputs:{x:s},backend:t,attrs:{begin:h,size:o}});return h[l]+=c,d})}const splitVConfig$2={kernelName:SplitV$1,backendName:"cpu",kernelFunc:splitV$2};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squareConfig$2={kernelName:Square$1,backendName:"cpu",kernelFunc:({inputs:n,backend:e})=>{const{x:t}=n,r=e;assertNotComplex$2(t,"square");const s=r.data.get(t.dataId).values,a=new Float32Array(s.length);for(let l=0;l<s.length;++l){const u=s[l];a[l]=u*u}return{dataId:r.write(a,t.shape,t.dtype),shape:t.shape,dtype:t.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const step$2=unaryKernelFunc$2(Step$1,(n,e)=>{const t=e;return isNaN(n)?NaN:n>0?1:t.alpha}),stepConfig$2={kernelName:Step$1,backendName:"cpu",kernelFunc:step$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSlice$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{begin:a,end:i,strides:l,beginMask:u,endMask:h,ellipsisMask:f,newAxisMask:c,shrinkAxisMask:o}=r;assertNotComplex$2(s,"stridedSlice");const{finalShapeSparse:d,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:$,begin:b,end:x,strides:w}=sliceInfo$1(s.shape,a,i,l,u,h,f,c,o);let v;if(g)v=reshape$4({inputs:{x:s},backend:t,attrs:{shape:m}});else if(y||$){assert$2(s.shape.length>=1,()=>`Input must have rank at least 1, got: ${s.shape.length}`);const S=computeOutShape$5(b,x,w),T=slice$2({inputs:{x:s},backend:t,attrs:{begin:b,size:S}});v=reshape$4({inputs:{x:T},backend:t,attrs:{shape:m}}),t.disposeIntermediateTensorInfo(T)}else{const S=t.bufferSync(s),T=stridedSliceImpl$1(d,S,w,b);v=t.makeTensorInfo(m,T.dtype,T.values)}return v}const stridedSliceConfig$2={kernelName:StridedSlice$1,backendName:"cpu",kernelFunc:stridedSlice$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringNGrams$2(n){const{inputs:e,backend:t,attrs:r}=n,{separator:s,nGramWidths:a,leftPad:i,rightPad:l,padWidth:u,preserveShortSequences:h}=r,{data:f,dataSplits:c}=e,o=t.data.get(f.dataId).values,d=t.data.get(c.dataId).values,[m,g]=stringNGramsImpl$1(o,d,s,a,i,l,u,h);return[t.makeTensorInfo([m.length],"string",m),t.makeTensorInfo(c.shape,"int32",g)]}const stringNGramsConfig$2={kernelName:StringNGrams$1,backendName:"cpu",kernelFunc:stringNGrams$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringSplit$1(n){const{inputs:e,backend:t,attrs:r}=n,{skipEmpty:s}=r,{input:a,delimiter:i}=e;if(a.dtype!=="string")throw new Error("Input must be of datatype string");if(a.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const l=t.data.get(a.dataId).values,u=t.data.get(i.dataId).values[0],[h,f,c]=stringSplitImpl$1(l,u,s),o=f.length;return[t.makeTensorInfo([o,2],"int32",h),t.makeTensorInfo([o],"string",f),t.makeTensorInfo([2],"int32",new Int32Array(c))]}const stringSplitConfig$1={kernelName:StringSplit,backendName:"cpu",kernelFunc:stringSplit$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringToHashBucketFast$1(n){const{inputs:e,backend:t,attrs:r}=n,{numBuckets:s}=r,{input:a}=e;if(a.dtype!=="string")throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const i=t.data.get(a.dataId).values,l=stringToHashBucketFastImpl$1(i,s);return t.makeTensorInfo(a.shape,"int32",l)}const stringToHashBucketFastConfig$1={kernelName:StringToHashBucketFast,backendName:"cpu",kernelFunc:stringToHashBucketFast$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tan$2=unaryKernelFunc$2(Tan$1,n=>Math.tan(n)),tanConfig$2={kernelName:Tan$1,backendName:"cpu",kernelFunc:tan$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tanh$2=unaryKernelFunc$2(Tanh$2,n=>Math.tanh(n)),tanhConfig$2={kernelName:Tanh$2,backendName:"cpu",kernelFunc:tanh$2};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensorScatterUpdate$2(n){const{inputs:e,backend:t}=n,{tensor:r,indices:s,updates:a}=e,{sliceRank:i,numUpdates:l,sliceSize:u,strides:h,outputSize:f}=calculateShapes$1(a,s,r.shape),c=!1,o=t.bufferSync(s),d=t.bufferSync(a),m=t.bufferSync(r),g=scatterImpl$1(o,d,r.shape,f,u,l,i,h,m,c);return t.makeTensorInfo(r.shape,g.dtype,g.values)}const tensorScatterUpdateConfig$2={kernelName:TensorScatterUpdate$1,backendName:"cpu",kernelFunc:tensorScatterUpdate$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tile$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{reps:a}=r;assertNotComplex$2(s,"tile");const i=tileImpl$1(t.bufferSync(s),a);return t.makeTensorInfo(i.shape,i.dtype,i.values)}const tileConfig$2={kernelName:Tile$1,backendName:"cpu",kernelFunc:tile$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function topK$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{k:a,sorted:i}=r;assertNotComplex$2(s,"topk");const l=t.data.get(s.dataId).values,[u,h]=topKImpl$1(l,s.shape,s.dtype,a,i);return[t.makeTensorInfo(u.shape,u.dtype,u.values),t.makeTensorInfo(h.shape,h.dtype,h.values)]}const topKConfig$2={kernelName:TopK$1,backendName:"cpu",kernelFunc:topK$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transform$2(n){const{inputs:e,attrs:t,backend:r}=n,{image:s,transforms:a}=e,{interpolation:i,fillMode:l,fillValue:u,outputShape:h}=t,[f,c,o,d]=s.shape,[m,g]=h??[c,o],y=[f,m,g,d],$=computeStrides$1(s.shape),b=$[0],x=$[1],w=$[2],v=computeStrides$1(y),S=v[0],T=v[1],C=v[2],I=getTypedArrayFromDType$1(s.dtype,sizeFromShape$1(y));I.fill(u);const N=r.data.get(s.dataId).values,P=r.data.get(a.dataId).values;for(let _=0;_<f;++_){const D=a.shape[0]===1?P:P.subarray(_*8,_*8+8);for(let E=0;E<m;++E)for(let k=0;k<g;++k)for(let O=0;O<d;++O){let M;const z=D[6]*k+D[7]*E+1;if(z===0)continue;const G=(D[0]*k+D[1]*E+D[2])/z,j=(D[3]*k+D[4]*E+D[5])/z,K=mapCoord(G,o,l),X=mapCoord(j,c,l);switch(i){case"nearest":M=nearestInterpolation(N,c,o,b,x,w,_,X,K,O,u);break;case"bilinear":M=bilinearInterpolation(N,c,o,b,x,w,_,X,K,O,u);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}const Y=_*S+E*T+k*C+O;I[Y]=M}return r.makeTensorInfo(y,s.dtype,I)}return{dataId:r.write(I,y,s.dtype),shape:s.shape,dtype:s.dtype}}const transformConfig$2={kernelName:Transform$1,backendName:"cpu",kernelFunc:transform$2};function mapCoord(n,e,t){switch(t){case"reflect":return mapCoordReflect(n,e);case"wrap":return mapCoordWrap(n,e);case"nearest":return mapCoordNearest(n,e);case"constant":default:return mapCoordConstant(n)}}function mapCoordReflect(n,e){let t=n;if(t<0)if(e<=1)t=0;else{const r=2*e;t<r&&(t=r*Math.trunc(-t/r)+t),t=t<-e?t+r:-t-1}else if(t>e-1)if(e<=1)t=0;else{const r=2*e;t-=r*Math.trunc(t/r),t>=e&&(t=r-t-1)}return clamp(0,t,e-1)}function mapCoordWrap(n,e){let t=n;if(t<0)if(e<=1)t=0;else{const r=e-1;t+=e*(Math.trunc(-t/r)+1)}else if(t>e-1)if(e<=1)t=0;else{const r=e-1;t-=e*Math.trunc(t/r)}return clamp(0,t,e-1)}function mapCoordConstant(n,e){return n}function mapCoordNearest(n,e){return clamp(0,n,e-1)}function readWithFillValue(n,e,t,r,s,a,i,l,u,h,f){const c=i*r+l*s+u*a+h;return 0<=l&&l<e&&0<=u&&u<t?n[c]:f}function nearestInterpolation(n,e,t,r,s,a,i,l,u,h,f){const c=Math.round(l),o=Math.round(u);return readWithFillValue(n,e,t,r,s,a,i,c,o,h,f)}function bilinearInterpolation(n,e,t,r,s,a,i,l,u,h,f){const c=Math.floor(l),o=Math.floor(u),d=c+1,m=o+1,g=(m-u)*readWithFillValue(n,e,t,r,s,a,i,c,o,h,f)+(u-o)*readWithFillValue(n,e,t,r,s,a,i,c,m,h,f),y=(m-u)*readWithFillValue(n,e,t,r,s,a,i,d,o,h,f)+(u-o)*readWithFillValue(n,e,t,r,s,a,i,d,m,h,f);return(d-l)*g+(l-c)*y}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unique$1(n){const{inputs:e,attrs:t,backend:r}=n,{axis:s}=t,{x:a}=e;assertNotComplex$2(a,"unique");const i=r.data.get(a.dataId).values,{outputValues:l,outputShape:u,indices:h}=uniqueImpl$1(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,l),r.makeTensorInfo([h.length],"int32",h)]}const uniqueConfig$1={kernelName:Unique,backendName:"cpu",kernelFunc:unique$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unpack$2(n){const{inputs:e,backend:t,attrs:r}=n,{value:s}=e;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s.shape.length,l=s.shape[a],u=new Array(i-1);let h=0;for(let d=0;d<i;d++)d!==a&&(u[h++]=s.shape[d]);const f=new Array(i).fill(0),c=s.shape.slice();c[a]=1;const o=new Array(l);for(let d=0;d<o.length;d++){f[a]=d;const m=slice$2({inputs:{x:s},backend:t,attrs:{begin:f,size:c}});o[d]=reshape$4({inputs:{x:m},backend:t,attrs:{shape:u}}),t.disposeIntermediateTensorInfo(m)}return o}const unpackConfig$2={kernelName:Unpack$1,backendName:"cpu",kernelFunc:unpack$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unsortedSegmentSum$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,segmentIds:a}=e,{numSegments:i}=r;assertNotComplex$2(s,"unsortedSegmentSum");const l=s.shape.length,u=a.shape.length,h=[],f=[],c=l-u;let o=a;for(let m=0;m<c;++m){const g=expandDims$2({inputs:{input:o},backend:t,attrs:{dim:m+1}});o=g,f.push(g)}for(let m=0;m<i;++m){const g=createScalarValue$1(m,"int32"),y=t.makeTensorInfo([],"int32",g),$=equal$2({inputs:{a:y,b:o},backend:t}),b=cast$3({inputs:{x:$},backend:t,attrs:{dtype:"float32"}}),x=multiply$1({inputs:{a:b,b:s},backend:t}),w=sum$3({inputs:{x},backend:t,attrs:{axis:0,keepDims:!1}});h.push(w),f.push(y),f.push($),f.push(b),f.push(x),f.push(w)}const d=pack$2({inputs:h,backend:t,attrs:{axis:0}});return f.forEach(m=>t.disposeIntermediateTensorInfo(m)),d}const unsortedSegmentSumConfig$2={kernelName:UnsortedSegmentSum$1,backendName:"cpu",kernelFunc:unsortedSegmentSum$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const kernelConfigs$2=[_fusedMatMulConfig$2,absConfig$2,acosConfig$2,acoshConfig$2,addConfig$2,addNConfig$2,allConfig$2,anyConfig$2,argMaxConfig$2,argMinConfig$2,asinConfig$2,asinhConfig$2,atanConfig$2,atan2Config$2,atanhConfig$2,avgPoolConfig$2,avgPool3DConfig$2,avgPool3DGradConfig$2,avgPoolGradConfig$2,batchMatMulConfig$2,batchNormConfig$1,batchToSpaceNDConfig$2,bincountConfig$2,bitwiseAndConfig$1,broadcastArgsConfig$2,castConfig$2,ceilConfig$2,clipByValueConfig$2,complexConfig$2,complexAbsConfig$2,concatConfig$2,conv2DConfig$2,conv2DBackpropFilterConfig$2,conv2DBackpropInputConfig$2,conv3DConfig$2,conv3DBackpropFilterV2Config$2,conv3DBackpropInputV2Config$1,cosConfig$2,coshConfig$2,cropAndResizeConfig$2,cumprodConfig$2,cumsumConfig$2,denseBincountConfig$2,depthToSpaceConfig$2,depthwiseConv2dNativeConfig$2,depthwiseConv2dNativeBackpropFilterConfig$2,depthwiseConv2dNativeBackpropInputConfig$2,diagConfig$2,dilation2DConfig$2,dilation2DBackpropFilterConfig$1,dilation2DBackpropInputConfig$1,drawConfig$1,einsumConfig$2,eluConfig$2,eluGradConfig$2,equalConfig$2,erfConfig$2,expConfig$2,expandDimsConfig$2,expm1Config$2,fftConfig$2,fillConfig$2,flipLeftRightConfig$2,floorConfig$2,floorDivConfig$2,fusedConv2DConfig$2,fusedDepthwiseConv2DConfig$2,gatherNdConfig$2,gatherV2Config$2,greaterConfig$2,greaterEqualConfig$2,identityConfig$2,ifftConfig$2,imagConfig$2,isFiniteConfig$2,isInfConfig$2,isNaNConfig$2,leakyReluConfig$2,lessConfig$2,lessEqualConfig$2,linSpaceConfig$2,logConfig$2,log1pConfig$2,logicalAndConfig$2,logicalNotConfig$2,logicalOrConfig$2,LRNConfig$1,LRNGradConfig$1,maxConfig$2,maximumConfig$2,maxPoolConfig$2,maxPool3DConfig$2,maxPool3DGradConfig$2,maxPoolGradConfig$2,maxPoolWithArgmaxConfig$2,meanConfig$2,minConfig$2,minimumConfig$2,mirrorPadConfig$2,modConfig$2,multinomialConfig$2,multiplyConfig$2,negConfig$2,nonMaxSuppressionV3Config$2,nonMaxSuppressionV4Config$1,nonMaxSuppressionV5Config$2,notEqualConfig$2,oneHotConfig$2,onesLikeConfig$2,packConfig$2,padV2Config$2,powConfig$2,preluConfig$2,prodConfig$2,raggedGatherConfig$1,raggedRangeConfig$1,raggedTensorToTensorConfig$1,rangeConfig$2,realConfig$2,realDivConfig$2,reciprocalConfig$2,reluConfig$2,relu6Config$2,reshapeConfig$2,resizeBilinearConfig$2,resizeBilinearGradConfig$2,resizeNearestNeighborConfig$2,resizeNearestNeighborGradConfig$2,reverseConfig$2,rotateWithOffsetConfig$2,roundConfig$2,rsqrtConfig$2,scatterNdConfig$2,searchSortedConfig$2,selectConfig$2,seluConfig$2,sigmoidConfig$2,signConfig$2,sinConfig$2,sinhConfig$2,sliceConfig$2,softmaxConfig$2,softplusConfig$2,spaceToBatchNDConfig$2,sparseFillEmptyRowsConfig$1,sparseReshapeConfig$1,sparseSegmentMeanConfig$2,sparseSegmentSumConfig$2,sparseToDenseConfig$2,splitVConfig$2,sqrtConfig$2,squareConfig$2,squaredDifferenceConfig$2,staticRegexReplaceConfig$1,stepConfig$2,stridedSliceConfig$2,stringNGramsConfig$2,stringSplitConfig$1,stringToHashBucketFastConfig$1,subConfig$2,sumConfig$2,tanConfig$2,tanhConfig$2,tensorScatterUpdateConfig$2,tileConfig$2,topKConfig$2,transformConfig$2,transposeConfig$2,uniqueConfig$1,unpackConfig$2,unsortedSegmentSumConfig$2,zerosLikeConfig$2];for(const n of kernelConfigs$2)registerKernel$1(n);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const contexts={},WEBGL_ATTRIBUTES={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function setWebGLContext(n,e){contexts[n]=e}function getWebGLContext(n,e){if(!(n in contexts)||e!=null){const r=getWebGLRenderingContext(n,e);if(r!==null)contexts[n]=r;else return console.log("Could not get context for WebGL version",n),null}const t=contexts[n];return t==null||t.isContextLost()?(delete contexts[n],getWebGLContext(n)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),contexts[n])}function createCanvas(n){if(!env$1().getBool("IS_SAFARI")&&typeof OffscreenCanvas<"u"&&n===2)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function getWebGLRenderingContext(n,e){if(n!==1&&n!==2)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=e??createCanvas(n);return t.addEventListener("webglcontextlost",r=>{r.preventDefault(),delete contexts[n]},!1),env$1().getBool("SOFTWARE_WEBGL_ENABLED")&&(WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat=!1),n===1?t.getContext("webgl",WEBGL_ATTRIBUTES)||t.getContext("experimental-webgl",WEBGL_ATTRIBUTES):t.getContext("webgl2",WEBGL_ATTRIBUTES)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var PackingScheme;(function(n){n[n.DENSE=0]="DENSE",n[n.SHARED_BATCH=1]="SHARED_BATCH"})(PackingScheme||(PackingScheme={}));var TextureUsage;(function(n){n[n.RENDER=0]="RENDER",n[n.UPLOAD=1]="UPLOAD",n[n.PIXELS=2]="PIXELS",n[n.DOWNLOAD=3]="DOWNLOAD"})(TextureUsage||(TextureUsage={}));var PhysicalTextureType;(function(n){n[n.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",n[n.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",n[n.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",n[n.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",n[n.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"})(PhysicalTextureType||(PhysicalTextureType={}));function getUnpackedMatrixTextureShapeWidthHeight(n,e){return[e,n]}function getUnpackedArraySizeFromMatrixSize(n,e){return n*e}function getDenseTexShape(n){const e=sizeFromShape$1(n),t=Math.ceil(e/4);return sizeToSquarishShape(t)}function getPackedMatrixTextureShapeWidthHeight(n,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(n/2))]}function getPackedRGBAArraySizeFromMatrixShape(n,e){const[t,r]=getPackedMatrixTextureShapeWidthHeight(n,e);return t*r*4}function getTextureConfig(n,e){const t=n;let r,s,a,i,l,u,h,f,c,o;return env$1().getNumber("WEBGL_VERSION")===2?(r=t.R32F,s=t.R16F,a=t.RGBA16F,i=t.RGBA32F,l=t.RED,h=4,f=1,c=t.HALF_FLOAT,o=t.FLOAT,u=t.RGBA8):(r=n.RGBA,s=n.RGBA,a=n.RGBA,i=t.RGBA,l=n.RGBA,h=4,f=4,c=e!=null?e.HALF_FLOAT_OES:null,o=n.FLOAT,u=n.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:l,downloadTextureFormat:u,downloadUnpackNumChannels:h,defaultNumChannels:f,textureTypeHalfFloat:c,textureTypeFloat:o}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function callAndCheck(n,e){const t=e();return env$1().getBool("DEBUG")&&checkWebGLError(n),t}function checkWebGLError(n){const e=n.getError();if(e!==n.NO_ERROR)throw new Error("WebGL Error: "+getWebGLErrorMessage(n,e))}const MIN_FLOAT16=596e-10,MAX_FLOAT16=65504;function canBeRepresented(n){return!!(env$1().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||n===0||MIN_FLOAT16<Math.abs(n)&&Math.abs(n)<MAX_FLOAT16)}function getWebGLErrorMessage(n,e){switch(e){case n.NO_ERROR:return"NO_ERROR";case n.INVALID_ENUM:return"INVALID_ENUM";case n.INVALID_VALUE:return"INVALID_VALUE";case n.INVALID_OPERATION:return"INVALID_OPERATION";case n.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case n.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case n.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${e}`}}function getExtensionOrThrow(n,e){return throwIfNull(n,()=>n.getExtension(e),'Extension "'+e+'" not supported on this browser.')}function createVertexShader$1(n,e){const t=throwIfNull(n,()=>n.createShader(n.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(callAndCheck(n,()=>n.shaderSource(t,e)),callAndCheck(n,()=>n.compileShader(t)),n.getShaderParameter(t,n.COMPILE_STATUS)===!1)throw console.log(n.getShaderInfoLog(t)),new Error("Failed to compile vertex shader.");return t}function createFragmentShader(n,e){const t=throwIfNull(n,()=>n.createShader(n.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(callAndCheck(n,()=>n.shaderSource(t,e)),callAndCheck(n,()=>n.compileShader(t)),env$1().get("ENGINE_COMPILE_ONLY"))return t;if(n.getShaderParameter(t,n.COMPILE_STATUS)===!1)throw logShaderSourceAndInfoLog(e,n.getShaderInfoLog(t)),new Error("Failed to compile fragment shader.");return t}const lineNumberRegex=/ERROR: [0-9]+:([0-9]+):/g;function logShaderSourceAndInfoLog(n,e){const t=lineNumberRegex.exec(e);if(t==null){console.log(`Couldn't parse line number in error: ${e}`),console.log(n);return}const r=+t[1],s=n.split(`
`),a=s.length.toString().length+2,i=s.map((c,o)=>rightPad$1((o+1).toString(),a)+c);let l=0;for(let c=0;c<i.length;c++)l=Math.max(i[c].length,l);const u=i.slice(0,r-1),h=i.slice(r-1,r),f=i.slice(r);console.log(u.join(`
`)),console.log(e.split(`
`)[0]),console.log(`%c ${rightPad$1(h[0],l)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(f.join(`
`))}function createProgram(n){return throwIfNull(n,()=>n.createProgram(),"Unable to create WebGLProgram.")}function linkProgram(n,e){if(callAndCheck(n,()=>n.linkProgram(e)),!env$1().get("ENGINE_COMPILE_ONLY")&&n.getProgramParameter(e,n.LINK_STATUS)===!1)throw console.log(n.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}function validateProgram(n,e){if(callAndCheck(n,()=>n.validateProgram(e)),n.getProgramParameter(e,n.VALIDATE_STATUS)===!1)throw console.log(n.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function createStaticVertexBuffer(n,e){const t=throwIfNull(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return callAndCheck(n,()=>n.bindBuffer(n.ARRAY_BUFFER,t)),callAndCheck(n,()=>n.bufferData(n.ARRAY_BUFFER,e,n.STATIC_DRAW)),t}function createStaticIndexBuffer(n,e){const t=throwIfNull(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return callAndCheck(n,()=>n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,t)),callAndCheck(n,()=>n.bufferData(n.ELEMENT_ARRAY_BUFFER,e,n.STATIC_DRAW)),t}function createTexture(n){return throwIfNull(n,()=>n.createTexture(),"Unable to create WebGLTexture.")}function validateTextureSize(n,e){const t=env$1().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n<=0||e<=0){const r=`[${n}x${e}]`;throw new Error("Requested texture size "+r+" is invalid.")}if(n>t||e>t){const r=`[${n}x${e}]`,s=`[${t}x${t}]`;throw new Error("Requested texture size "+r+" greater than WebGL maximum on this browser / GPU "+s+".")}}function createFramebuffer(n){return throwIfNull(n,()=>n.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function bindVertexBufferToProgramAttribute(n,e,t,r,s,a,i){const l=n.getAttribLocation(e,t);return l===-1?!1:(callAndCheck(n,()=>n.bindBuffer(n.ARRAY_BUFFER,r)),callAndCheck(n,()=>n.vertexAttribPointer(l,s,n.FLOAT,!1,a,i)),callAndCheck(n,()=>n.enableVertexAttribArray(l)),!0)}function bindTextureUnit(n,e,t){validateTextureUnit(n,t),callAndCheck(n,()=>n.activeTexture(n.TEXTURE0+t)),callAndCheck(n,()=>n.bindTexture(n.TEXTURE_2D,e))}function getProgramUniformLocationOrThrow(n,e,t){return throwIfNull(n,()=>n.getUniformLocation(e,t),'uniform "'+t+'" not present in program.')}function getProgramUniformLocation(n,e,t){return n.getUniformLocation(e,t)}function bindTextureToProgramUniformSampler(n,e,t,r){callAndCheck(n,()=>bindTextureUnit(n,e,r)),callAndCheck(n,()=>n.uniform1i(t,r))}function bindColorTextureToFramebuffer(n,e,t){callAndCheck(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,t)),callAndCheck(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,e,0))}function unbindColorTextureFromFramebuffer(n,e){callAndCheck(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,e)),callAndCheck(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,null,0))}function validateFramebuffer(n){const e=n.checkFramebufferStatus(n.FRAMEBUFFER);if(e!==n.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+getFramebufferErrorMessage(n,e))}function getFramebufferErrorMessage(n,e){switch(e){case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case n.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${e}`}}function throwIfNull(n,e,t){const r=callAndCheck(n,()=>e());if(r==null)throw new Error(t);return r}function validateTextureUnit(n,e){const t=n.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+n.TEXTURE0;if(r<n.TEXTURE0||r>t){const s=`[gl.TEXTURE0, gl.TEXTURE${t}]`;throw new Error(`textureUnit must be in ${s}.`)}}function getBatchDim(n,e=2){return sizeFromShape$1(n.slice(0,n.length-e))}function getRowsCols(n){if(n.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[n.length>1?n[n.length-2]:1,n[n.length-1]]}function getShapeAs3D(n){let e=[1,1,1];return n.length===0||n.length===1&&n[0]===1||(e=[getBatchDim(n),...getRowsCols(n)]),e}function getTextureShapeFromLogicalShape(n,e=!1){let t=env$1().getNumber("WEBGL_MAX_TEXTURE_SIZE"),r=env$1().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");r===1/0&&env$1().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(r=t/2),e&&(t=t*2,r=r*2,n=n.map((l,u)=>u>=n.length-2?nearestLargerEven(n[u]):n[u]),n.length===1&&(n=[2,n[0]])),n.length!==2&&(n=squeezeShape(n).newShape);let s=sizeFromShape$1(n),a=null;n.length<=1&&s<=t?a=[1,s]:n.length===2&&n[0]<=t&&n[1]<=t?a=n:n.length===3&&n[0]*n[1]<=t&&n[2]<=t?a=[n[0]*n[1],n[2]]:n.length===3&&n[0]<=t&&n[1]*n[2]<=t?a=[n[0],n[1]*n[2]]:n.length===4&&n[0]*n[1]*n[2]<=t&&n[3]<=t?a=[n[0]*n[1]*n[2],n[3]]:n.length===4&&n[0]<=t&&n[1]*n[2]*n[3]<=t&&(a=[n[0],n[1]*n[2]*n[3]]);const i=a!=null&&Math.max(...a)>r&&Math.min(...a)<=(e?2:1)&&Math.min(...a)>0;if(a==null||i)if(e){const l=getBatchDim(n);let u=2,h=2;n.length&&([u,h]=getRowsCols(n)),s=l*(u/2)*(h/2),a=sizeToSquarishShape(s).map(f=>f*2)}else a=sizeToSquarishShape(s);return a}function isEven(n){return n%2===0}function isReshapeFree(n,e){if(n=n.slice(-2),e=e.slice(-2),arraysEqual$1(n,e)||!n.length||!e.length||n[0]===0||n[1]===0||e[0]===0||e[1]===0)return!0;if(n.length!==e.length){const t=n[n.length-1],r=e[e.length-1];if(t===r||isEven(t)&&isEven(r)&&(n[0]===1||e[0]===1))return!0}return n[1]===e[1]&&isEven(n[0])&&isEven(e[0])}let MAX_TEXTURE_SIZE,MAX_TEXTURES_IN_SHADER;function getWebGLMaxTextureSize(n){if(MAX_TEXTURE_SIZE==null){const e=getWebGLContext(n);MAX_TEXTURE_SIZE=e.getParameter(e.MAX_TEXTURE_SIZE)}return MAX_TEXTURE_SIZE}function getMaxTexturesInShader(n){if(MAX_TEXTURES_IN_SHADER==null){const e=getWebGLContext(n);MAX_TEXTURES_IN_SHADER=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,MAX_TEXTURES_IN_SHADER)}function getWebGLDisjointQueryTimerVersion(n){if(n===0)return 0;let e;const t=getWebGLContext(n);return hasExtension(t,"EXT_disjoint_timer_query_webgl2")&&n===2?e=2:hasExtension(t,"EXT_disjoint_timer_query")?e=1:e=0,e}function hasExtension(n,e){return n.getExtension(e)!=null}function isWebGLVersionEnabled(n){try{if(getWebGLContext(n)!=null)return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function isCapableOfRenderingToFloatTexture(n){if(n===0)return!1;const e=getWebGLContext(n);if(n===1){if(!hasExtension(e,"OES_texture_float"))return!1}else if(!hasExtension(e,"EXT_color_buffer_float"))return!1;return createFloatTextureAndBindToFramebuffer(e)}function isDownloadFloatTextureEnabled(n){if(n===0)return!1;const e=getWebGLContext(n);if(n===1){if(!hasExtension(e,"OES_texture_float")||!hasExtension(e,"WEBGL_color_buffer_float"))return!1}else{if(hasExtension(e,"EXT_color_buffer_float"))return createFloatTextureAndBindToFramebuffer(e);const r="EXT_color_buffer_half_float";if(hasExtension(e,r)){const s=e.getExtension(r);return createHalfFloatTextureAndBindToFramebuffer(e,s)}return!1}return createFloatTextureAndBindToFramebuffer(e)}function createFloatTextureAndBindToFramebuffer(n){const e=getTextureConfig(n),t=n.createTexture();n.bindTexture(n.TEXTURE_2D,t);const r=1,s=1;n.texImage2D(n.TEXTURE_2D,0,e.internalFormatFloat,r,s,0,e.textureFormatFloat,e.textureTypeFloat,null);const a=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,a),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t,0);const i=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(t),n.deleteFramebuffer(a),i}function createHalfFloatTextureAndBindToFramebuffer(n,e){const t=getTextureConfig(n,e),r=n.createTexture();n.bindTexture(n.TEXTURE_2D,r);const s=1,a=1;n.texImage2D(n.TEXTURE_2D,0,t.internalFormatHalfFloat,s,a,0,t.textureFormatFloat,t.textureTypeHalfFloat,null);const i=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,i),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,r,0);const l=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(r),n.deleteFramebuffer(i),l}function isWebGLFenceEnabled(n){return n!==2?!1:getWebGLContext(n).fenceSync!=null}function assertNotComplex$1(n,e){Array.isArray(n)||(n=[n]),n.forEach(t=>{t!=null&&assert$2(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the WebGL backend.`)})}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV$3=env$1();ENV$3.registerFlag("HAS_WEBGL",()=>ENV$3.getNumber("WEBGL_VERSION")>0),ENV$3.registerFlag("WEBGL_VERSION",()=>isWebGLVersionEnabled(2)?2:isWebGLVersionEnabled(1)?1:0),ENV$3.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),ENV$3.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>ENV$3.get("WEBGL_VERSION")===2),ENV$3.registerFlag("WEBGL_CPU_FORWARD",()=>!0),ENV$3.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),ENV$3.registerFlag("WEBGL_PACK",()=>ENV$3.getBool("HAS_WEBGL")),ENV$3.registerFlag("WEBGL_PACK_NORMALIZATION",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_CLIP",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_REDUCE",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_LAZILY_UNPACK",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_CONV_IM2COL",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>getWebGLMaxTextureSize(ENV$3.getNumber("WEBGL_VERSION"))),ENV$3.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>getMaxTexturesInShader(ENV$3.getNumber("WEBGL_VERSION"))),ENV$3.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const n=ENV$3.getNumber("WEBGL_VERSION");return n===0?0:getWebGLDisjointQueryTimerVersion(n)}),ENV$3.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>ENV$3.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!isMobile()),ENV$3.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>isCapableOfRenderingToFloatTexture(ENV$3.getNumber("WEBGL_VERSION"))),ENV$3.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>ENV$3.getBool("WEBGL_FORCE_F16_TEXTURES")?!1:ENV$3.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),ENV$3.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>isDownloadFloatTextureEnabled(ENV$3.getNumber("WEBGL_VERSION"))),ENV$3.registerFlag("WEBGL_FENCE_API_ENABLED",()=>isWebGLFenceEnabled(ENV$3.getNumber("WEBGL_VERSION"))),ENV$3.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>ENV$3.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),ENV$3.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,n=>{if(typeof n!="number")throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${n}.`);if(n<0&&n!==-1)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`)}),ENV$3.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>isMobile()?1:-1,n=>{if(typeof n!="number")throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${n}.`);if(n<0&&n!==-1)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`)}),ENV$3.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),ENV$3.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),ENV$3.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),ENV$3.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),ENV$3.registerFlag("WEBGL_EXP_CONV",()=>!1),ENV$3.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>ENV$3.getBool("IS_TEST")),ENV$3.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),ENV$3.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),ENV$3.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),ENV$3.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getGlslDifferences(){let n,e,t,r,s,a,i,l,u,h;return env$1().getNumber("WEBGL_VERSION")===2?(n="#version 300 es",e="in",t="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",l=env$1().getBool("WEBGL2_ISNAN_CUSTOM")?`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `:"",u="",h=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(n="",e="attribute",t="varying",r="varying",s="texture2D",a="gl_FragColor",i="",l=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,u=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,h=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:n,attribute:e,varyingVs:t,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:l,defineSpecialInf:u,defineRound:h}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getLogicalCoordinatesFromFlatIndex(n,e,t="index"){const r=computeStrides$1(e);return r.map((s,a)=>{const i=`int ${n[a]} = ${t} / ${s}`,l=a===r.length-1?`int ${n[a+1]} = ${t} - ${n[a]} * ${s}`:`index -= ${n[a]} * ${s}`;return`${i}; ${l};`}).join("")}function getOutputLogicalCoordinatesFromFlatIndexByUniform(n,e,t="index"){const r=computeStrides$1(e);return r.map((s,a)=>{const i=`int ${n[a]} = ${t} / outShapeStrides[${a}]`,l=a===r.length-1?`int ${n[a+1]} = ${t} - ${n[a]} * outShapeStrides[${a}]`:`index -= ${n[a]} * outShapeStrides[${a}]`;return`${i}; ${l};`}).join("")}function symbolicallyComputeStrides$1(n,e){const t=n.length,r=n.map(a=>`${e}[${a}]`),s=new Array(t-1);s[t-2]=r[t-1];for(let a=t-3;a>=0;--a)s[a]=`(${s[a+1]} * ${r[a+1]})`;return s}function getLogicalCoordinatesFromFlatIndexByUniform(n,e,t="index"){const r=n.map((a,i)=>i),s=symbolicallyComputeStrides$1(r,e);return s.map((a,i)=>{const l=`int ${n[i]} = ${t} / ${s[i]}`,u=i===s.length-1?`int ${n[i+1]} = ${t} - ${n[i]} * ${s[i]}`:`index -= ${n[i]} * ${s[i]}`;return`${l}; ${u};`}).join("")}function getFlatIndexFrom3D(n){const e=computeStrides$1(n).map(t=>t.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;
  }
`}function getFlatIndexFrom3DOutput(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}const ENCODE_FLOAT_SNIPPET=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const{getBroadcastDims:getBroadcastDims$1}=backend_util;function makeShader$1(n,e,t){const r=[];if(n.forEach(d=>{const m=sizeFromShape$1(d.shapeInfo.logicalShape);if(d.shapeInfo.isUniform?r.push(`uniform float ${d.name}${m>1?`[${m}]`:""};`):(r.push(`uniform sampler2D ${d.name};`),r.push(`uniform int offset${d.name};`)),t.enableShapeUniforms){const{uniformShape:g}=getUniformInfoFromShape(t.packedInputs,d.shapeInfo.logicalShape,d.shapeInfo.texShape);switch(g.length){case 1:r.push(`uniform int ${d.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${d.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${d.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${d.name}Shape;`);break}r.push(`uniform ivec2 ${d.name}TexShape;`)}}),t.enableShapeUniforms){switch(e.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;");break}r.push("uniform ivec2 outTexShape;")}t.customUniforms&&t.customUniforms.forEach(d=>{r.push(`uniform ${d.type} ${d.name}${d.arrayIndex?`[${d.arrayIndex}]`:""};`)});const s=r.join(`
`),a=n.map(d=>getInputSamplingSnippet(d,e,t.packedInputs,t.enableShapeUniforms)).join(`
`),i=e.texShape,l=getGlslDifferences(),u=getFloatTextureSampleSnippet(l);let h,f,c=getShaderPrefix(l);return e.isPacked?(h=getPackedOutputSamplingSnippet(e.logicalShape,i,t.enableShapeUniforms),f=getFloatTextureSetRGBASnippet(l)):(h=getOutputSamplingSnippet(e.logicalShape,i,t.enableShapeUniforms),f=getFloatTextureSetRSnippet(l)),t.packedInputs&&(c+=SHADER_PACKED_PREFIX),[c,u,f,s,h,a,t.userCode].join(`
`)}function getSamplerFromInInfo(n,e=!1){const t=n.shapeInfo.logicalShape;switch(t.length){case 0:return getSamplerScalar(n,e);case 1:return getSampler1D(n,e);case 2:return getSampler2D(n,e);case 3:return getSampler3D(n,e);case 4:return getSampler4D(n,e);case 5:return getSampler5D(n);case 6:return getSampler6D(n);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function getPackedSamplerFromInInfo(n,e){switch(n.shapeInfo.logicalShape.length){case 0:return getPackedSamplerScalar(n);case 1:return getPackedSampler1D(n,e);case 2:return getPackedSampler2D(n,e);case 3:return getPackedSampler3D(n,e);default:return getPackedSamplerND(n,e)}}function getInputSamplingSnippet(n,e,t=!1,r){let s="";t?s+=getPackedSamplerFromInInfo(n,r):s+=getSamplerFromInInfo(n,r);const a=n.shapeInfo.logicalShape,i=e.logicalShape;return a.length<=i.length&&(t?s+=getPackedSamplerAtOutputCoords(n,e):s+=getSamplerAtOutputCoords(n,e)),s}function getPackedOutputSamplingSnippet(n,e,t){switch(n.length){case 0:return getOutputScalarCoords();case 1:return getOutputPacked1DCoords(n,e,t);case 2:return getOutputPacked2DCoords(n,e,t);case 3:return getOutputPacked3DCoords(n,e,t);default:return getOutputPackedNDCoords(n,e,t)}}function getOutputSamplingSnippet(n,e,t){switch(n.length){case 0:return getOutputScalarCoords();case 1:return getOutput1DCoords(n,e,t);case 2:return getOutput2DCoords(n,e,t);case 3:return getOutput3DCoords(n,e,t);case 4:return getOutput4DCoords(n,e,t);case 5:return getOutput5DCoords(n,e);case 6:return getOutput6DCoords(n,e);default:throw new Error(`${n.length}-D output sampling is not yet supported`)}}function getFloatTextureSampleSnippet(n){return`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${n.texture2D}(textureSampler, uv).r;
    }
  `}function getFloatTextureSetRSnippet(n){return`
    void setOutput(float val) {
      ${n.output} = vec4(val, 0, 0, 0);
    }
  `}function getFloatTextureSetRGBASnippet(n){return`
    void setOutput(vec4 val) {
      ${n.output} = val;
    }
  `}function getShaderPrefix(n){return`${n.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${n.varyingFs} vec2 resultUV;
    ${n.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${n.defineSpecialNaN}
    ${n.defineSpecialInf}
    ${n.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${SAMPLE_1D_SNIPPET}
    ${SAMPLE_2D_SNIPPET}
    ${SAMPLE_3D_SNIPPET}
  `}const SAMPLE_1D_SNIPPET=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,SAMPLE_2D_SNIPPET=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,SAMPLE_3D_SNIPPET=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,SHADER_PACKED_PREFIX=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function getOutputScalarCoords(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function getOutputPacked1DCoords(n,e,t){const r=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return r[0]===1?t?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${r[1]}.0);
      }
    `:r[1]===1?t?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${r[0]}.0);
      }
    `:t?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${r[0]}, ${r[1]}));
      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);
    }
  `}function getOutput1DCoords(n,e,t){return e[0]===1?t?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${e[1]}.0);
      }
    `:e[1]===1?t?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${e[0]}.0);
      }
    `:t?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      return resTexRC.x * ${e[1]} + resTexRC.y;
    }
  `}function getOutputPacked3DCoords(n,e,t){if(t)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;const r=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],s=Math.ceil(n[2]/2),a=s*Math.ceil(n[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${r[0]}, ${r[1]}));
      int index = resTexRC.x * ${r[1]} + resTexRC.y;

      int b = index / ${a};
      index -= b * ${a};

      int r = 2 * (index / ${s});
      int c = imod(index, ${s}) * 2;

      return ivec3(b, r, c);
    }
  `}function getOutput3DCoords(n,e,t){if(t)return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],n)}
    return ivec3(r, c, d);
  }
`;const r=getLogicalCoordinatesFromFlatIndex(["r","c","d"],n);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${r}
      return ivec3(r, c, d);
    }
  `}function getOutputPackedNDCoords(n,e,t){if(t)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;const r=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],s=Math.ceil(n[n.length-1]/2),a=s*Math.ceil(n[n.length-2]/2);let i=a,l="",u="b, r, c";for(let h=2;h<n.length-1;h++)i*=n[n.length-h-1],l=`
      int b${h} = index / ${i};
      index -= b${h} * ${i};
    `+l,u=`b${h}, `+u;return`
    ivec${n.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${r[0]}, ${r[1]}));
      int index = resTexRC.x * ${r[1]} + resTexRC.y;

      ${l}

      int b = index / ${a};
      index -= b * ${a};

      int r = 2 * (index / ${s});
      int c = imod(index, ${s}) * 2;

      return ivec${n.length}(${u});
    }
  `}function getOutput4DCoords(n,e,t){if(t)return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d","d2"],n)}
      return ivec4(r, c, d, d2);
    }
  `;const r=getLogicalCoordinatesFromFlatIndex(["r","c","d","d2"],n);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${r}
      return ivec4(r, c, d, d2);
    }
  `}function getOutput5DCoords(n,e){const t=getLogicalCoordinatesFromFlatIndex(["r","c","d","d2","d3"],n);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},
                             ${e[1]}));

      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}function getOutput6DCoords(n,e){const t=getLogicalCoordinatesFromFlatIndex(["r","c","d","d2","d3","d4"],n);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}function getOutputPacked2DCoords(n,e,t){const r=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(arraysEqual$1(n,e))return t?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));
      }
    `;const s=Math.ceil(n[1]/2);return t?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${r[0]}, ${r[1]}));

      int index = resTexRC.x * ${r[1]} + resTexRC.y;
      int r = 2 * (index / ${s});
      int c = imod(index, ${s}) * 2;

      return ivec2(r, c);
    }
  `}function getOutput2DCoords(n,e,t){return arraysEqual$1(n,e)?t?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));
      }
    `:n[1]===1?t?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:n[0]===1?t?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:t?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      int r = index / ${n[1]};
      int c = index - r * ${n[1]};
      return ivec2(r, c);
    }
  `}function getFlatOffsetUniformName(n){return`offset${n}`}function getPackedSamplerScalar(n){const e=n.name,t="get"+e.charAt(0).toUpperCase()+e.slice(1),r=getGlslDifferences();return`
    vec4 ${t}() {
      return ${r.texture2D}(${e}, halfCR);
    }
  `}function getSamplerScalar(n,e){const t=n.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1);if(n.shapeInfo.isUniform)return`float ${r}() {return ${t};}`;const[s,a]=n.shapeInfo.texShape;if(s===1&&a===1)return`
      float ${r}() {
        return sampleTexture(${t}, halfCR);
      }
    `;const i=getFlatOffsetUniformName(t);if(e)return`
    float ${r}() {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], ${i});
      return sampleTexture(${t}, uv);
    }
  `;const[l,u]=n.shapeInfo.texShape;return`
    float ${r}() {
      vec2 uv = uvFromFlat(${l}, ${u}, ${i});
      return sampleTexture(${t}, uv);
    }
  `}function getPackedSampler1D(n,e){const t=n.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1),s=n.shapeInfo.texShape,a=getGlslDifferences();if(e)return`
    vec4 ${r}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${a.texture2D}(${t}, uv);
    }
  `;const i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`
    vec4 ${r}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${a.texture2D}(${t}, uv);
    }
  `}function getSampler1D(n,e){const t=n.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1);if(n.shapeInfo.isUniform)return`
      float ${r}(int index) {
        ${getUniformSampler(n)}
      }
    `;const s=n.shapeInfo.texShape,a=s[0],i=s[1];if(i===1&&a===1)return`
      float ${r}(int index) {
        return sampleTexture(${t}, halfCR);
      }
    `;const l=getFlatOffsetUniformName(t);return i===1?e?`
      float ${r}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${l}) + 0.5) / float(${t}TexShape[0]));
        return sampleTexture(${t}, uv);
      }
    `:`
      float ${r}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${l}) + 0.5) / ${a}.0);
        return sampleTexture(${t}, uv);
      }
    `:a===1?e?`
      float ${r}(int index) {
        vec2 uv = vec2((float(index + ${l}) + 0.5) / float(${t}TexShape[1]), 0.5);
        return sampleTexture(${t}, uv);
      }
    `:`
      float ${r}(int index) {
        vec2 uv = vec2((float(index + ${l}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${t}, uv);
      }
    `:e?`
    float ${r}(int index) {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], index + ${l});
      return sampleTexture(${t}, uv);
    }
  `:`
    float ${r}(int index) {
      vec2 uv = uvFromFlat(${a}, ${i}, index + ${l});
      return sampleTexture(${t}, uv);
    }
  `}function getPackedSampler2D(n,e){const t=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n.shapeInfo.texShape,i=a[0],l=a[1],u=getGlslDifferences();if(a!=null&&arraysEqual$1(t,a))return e?`
      vec4 ${s}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);

        return ${u.texture2D}(${r}, uv);
      }
    `:`
      vec4 ${s}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${l}.0, ${i}.0);

        return ${u.texture2D}(${r}, uv);
      }
    `;if(e)return`
    vec4 ${s}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${u.texture2D}(${r}, uv);
    }
  `;const h=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],f=Math.ceil(t[1]/2);return`
    vec4 ${s}(int row, int col) {
      vec2 uv = packedUVfrom2D(${f}, ${h[0]}, ${h[1]}, row, col);
      return ${u.texture2D}(${r}, uv);
    }
  `}function getSampler2D(n,e){const t=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n.shapeInfo.texShape;if(a!=null&&arraysEqual$1(t,a)){if(e)return`
      float ${s}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);
        return sampleTexture(${r}, uv);
      }
    `;const o=a[0],d=a[1];return`
    float ${s}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${d}.0, ${o}.0);
      return sampleTexture(${r}, uv);
    }
  `}const{newShape:i,keptDims:l}=squeezeShape(t),u=i;if(u.length<t.length){const o=squeezeInputInfo(n,u),d=["row","col"];return`
      ${getSamplerFromInInfo(o,e)}
      float ${s}(int row, int col) {
        return ${s}(${getSqueezedParams(d,l)});
      }
    `}if(n.shapeInfo.isUniform)return`
      float ${s}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));
        ${getUniformSampler(n)}
      }
    `;const h=a[0],f=a[1],c=getFlatOffsetUniformName(r);return f===1?e?`
      float ${s}(int row, int col) {
        float index = dot(vec3(row, col, ${c}), vec3(${r}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));
        return sampleTexture(${r}, uv);
      }
    `:`
    float ${s}(int row, int col) {
      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${h}.0);
      return sampleTexture(${r}, uv);
    }
  `:h===1?e?`
      float ${s}(int row, int col) {
        float index = dot(vec3(row, col, ${c}), vec3(${r}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);
        return sampleTexture(${r}, uv);
      }
    `:`
    float ${s}(int row, int col) {
      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${f}.0, 0.5);
      return sampleTexture(${r}, uv);
    }
  `:e?`
      float ${s}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${r}Shape[1] + col + ${c};
        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);
        return sampleTexture(${r}, uv);
      }
    `:`
  float ${s}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${t[1]} + col + ${c};
    vec2 uv = uvFromFlat(${h}, ${f}, index);
    return sampleTexture(${r}, uv);
  }
`}function getPackedSampler3D(n,e){const t=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(t[0]===1){const o=t.slice(1),d=[1,2],m=squeezeInputInfo(n,o),g=["b","row","col"];return`
        ${getPackedSamplerFromInInfo(m,e)}
        vec4 ${s}(int b, int row, int col) {
          return ${s}(${getSqueezedParams(g,d)});
        }
      `}const l=getGlslDifferences();if(e)return`
    vec4 ${s}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${l.texture2D}(${r}, uv);
    }
  `;const u=i[0],h=i[1],f=Math.ceil(t[2]/2),c=f*Math.ceil(t[1]/2);return`
    vec4 ${s}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${u}, ${h}, ${c}, ${f}, b, row, col);
      return ${l.texture2D}(${r}, uv);
    }
  `}function getSampler3D(n,e){const t=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t[1]*t[2],i=t[2],{newShape:l,keptDims:u}=squeezeShape(t),h=l;if(h.length<t.length){const g=squeezeInputInfo(n,h),y=["row","col","depth"];return`
        ${getSamplerFromInInfo(g,e)}
        float ${s}(int row, int col, int depth) {
          return ${s}(${getSqueezedParams(y,u)});
        }
      `}if(n.shapeInfo.isUniform)return`
      float ${s}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${a}, ${i}, 1)));
        ${getUniformSampler(n)}
      }
    `;const f=n.shapeInfo.texShape,c=f[0],o=f[1],d=n.shapeInfo.flatOffset;if(o===a&&d==null)return e?`
      float ${s}(int row, int col, int depth) {
        int stride1 = ${r}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${r}TexShape[1], ${r}TexShape[0]);
        return sampleTexture(${r}, uv);
      }
    `:`
        float ${s}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${o}.0, ${c}.0);
          return sampleTexture(${r}, uv);
        }
      `;if(o===i&&d==null)return e?`
      float ${s}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);
        return sampleTexture(${r}, uv);
      }
    `:`
    float ${s}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}.0, ${c}.0);
      return sampleTexture(${r}, uv);
    }
  `;const m=getFlatOffsetUniformName(r);return e?`
    float ${s}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${r}Shape[1] * ${r}Shape[2];
      int stride1 = ${r}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${m};
      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);
      return sampleTexture(${r}, uv);
    }
    `:`
      float ${s}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${a} + col * ${i} + depth + ${m};
        vec2 uv = uvFromFlat(${c}, ${o}, index);
        return sampleTexture(${r}, uv);
      }
  `}function getPackedSamplerND(n,e){const t=n.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1),s=getGlslDifferences();if(e)return`
    vec4 ${r}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${t}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${t}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${t}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${t}, uv);
    }
  `;const a=n.shapeInfo.logicalShape,i=a.length,l=n.shapeInfo.texShape,u=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)],h=u[0],f=u[1],c=Math.ceil(a[i-1]/2);let o=c*Math.ceil(a[i-2]/2),d="int b, int row, int col",m=`b * ${o} + (row / 2) * ${c} + (col / 2)`;for(let g=2;g<i-1;g++)d=`int b${g}, `+d,o*=a[i-g-1],m=`b${g} * ${o} + `+m;return`
    vec4 ${r}(${d}) {
      int index = ${m};
      int texR = index / ${f};
      int texC = index - texR * ${f};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${f}, ${h});
      return ${s.texture2D}(${t}, uv);
    }
  `}function getSampler4D(n,e){const t=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t[3],i=t[2]*a,l=t[1]*i,{newShape:u,keptDims:h}=squeezeShape(t);if(u.length<t.length){const b=squeezeInputInfo(n,u),x=["row","col","depth","depth2"];return`
      ${getSamplerFromInInfo(b,e)}
      float ${s}(int row, int col, int depth, int depth2) {
        return ${s}(${getSqueezedParams(x,h)});
      }
    `}if(n.shapeInfo.isUniform)return`
      float ${s}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${l}, ${i}, ${a}, 1)));
        ${getUniformSampler(n)}
      }
    `;const f=n.shapeInfo.flatOffset,c=n.shapeInfo.texShape,o=c[0],d=c[1],m=`int stride2 = ${r}Shape[3];`,g=`int stride1 = ${r}Shape[2] * stride2;`,y=`int stride0 = ${r}Shape[1] * stride1;`;if(d===l&&f==null)return e?`
      float ${s}(int row, int col, int depth, int depth2) {
        ${m}
        ${g}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${r}TexShape[1], ${r}TexShape[0]);
        return sampleTexture(${r}, uv);
      }
    `:`
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${a}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${d}.0, ${o}.0);
        return sampleTexture(${r}, uv);
      }
    `;if(d===a&&f==null)return e?`
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${r}TexShape[1], ${r}TexShape[0]);
        return sampleTexture(${r}, uv);
      }
    `:`
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${t[1]*t[2]}, ${t[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${d}.0, ${o}.0);
        return sampleTexture(${r}, uv);
      }
    `;const $=getFlatOffsetUniformName(r);return e?`
    float ${s}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${m}
      ${g}
      ${y}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${$});
      return sampleTexture(${r}, uv);
    }
  `:`
    float ${s}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${l} + col * ${i} +
          depth * ${a} + depth2;
      vec2 uv = uvFromFlat(${o}, ${d}, index + ${$});
      return sampleTexture(${r}, uv);
    }
  `}function getSampler5D(n){const e=n.shapeInfo.logicalShape,t=n.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1),s=e[4],a=e[3]*s,i=e[2]*a,l=e[1]*i,{newShape:u,keptDims:h}=squeezeShape(e);if(u.length<e.length){const g=squeezeInputInfo(n,u),y=["row","col","depth","depth2","depth3"];return`
      ${getSamplerFromInInfo(g)}
      float ${r}(int row, int col, int depth, int depth2, int depth3) {
        return ${r}(${getSqueezedParams(y,h)});
      }
    `}if(n.shapeInfo.isUniform)return`
      float ${r}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${l}, ${i}, ${a}, ${s})) +
          depth3;
        ${getUniformSampler(n)}
      }
    `;const f=n.shapeInfo.flatOffset,c=n.shapeInfo.texShape,o=c[0],d=c[1];if(d===l&&f==null)return`
      float ${r}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${a}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${d}.0, ${o}.0);
        return sampleTexture(${t}, uv);
      }
    `;if(d===s&&f==null)return`
      float ${r}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${e[1]*e[2]*e[3]},
               ${e[2]*e[3]}, ${e[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${d}.0, ${o}.0);
        return sampleTexture(${t}, uv);
      }
    `;const m=getFlatOffsetUniformName(t);return`
    float ${r}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${l} + col * ${i} + depth * ${a} +
          depth2 * ${s} + depth3 + ${m};
      vec2 uv = uvFromFlat(${o}, ${d}, index);
      return sampleTexture(${t}, uv);
    }
  `}function getSampler6D(n){const e=n.shapeInfo.logicalShape,t=n.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1),{newShape:s,keptDims:a}=squeezeShape(e);if(s.length<e.length){const y=squeezeInputInfo(n,s),$=["row","col","depth","depth2","depth3","depth4"];return`
      ${getSamplerFromInInfo(y)}
      float ${r}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${r}(${getSqueezedParams($,a)});
      }
    `}const i=e[5],l=e[4]*i,u=e[3]*l,h=e[2]*u,f=e[1]*h;if(n.shapeInfo.isUniform)return`
      float ${r}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${f}, ${h}, ${u}, ${l})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${getUniformSampler(n)}
      }
    `;const c=n.shapeInfo.flatOffset,o=n.shapeInfo.texShape,d=o[0],m=o[1];if(m===f&&c==null)return`
      float ${r}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${h}, ${u}, ${l}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${m}.0, ${d}.0);
        return sampleTexture(${t}, uv);
      }
    `;if(m===i&&c==null)return`
      float ${r}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${e[1]*e[2]*e[3]*e[4]},
               ${e[2]*e[3]*e[4]},
               ${e[3]*e[4]},
               ${e[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${m}.0, ${d}.0);
        return sampleTexture(${t}, uv);
      }
    `;const g=getFlatOffsetUniformName(t);return`
    float ${r}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${f} + col * ${h} + depth * ${u} +
          depth2 * ${l} + depth3 * ${i} + depth4 + ${g};
      vec2 uv = uvFromFlat(${d}, ${m}, index);
      return sampleTexture(${t}, uv);
    }
  `}function getUniformSampler(n){const e=n.name,t=sizeFromShape$1(n.shapeInfo.logicalShape);return t<2?`return ${e};`:`
    for (int i = 0; i < ${t}; i++) {
      if (i == index) {
        return ${e}[i];
      }
    }
  `}function getPackedSamplerAtOutputCoords(n,e){const t=n.name,r=t.charAt(0).toUpperCase()+t.slice(1),s="get"+r+"AtOutCoords",a=n.shapeInfo.logicalShape.length,i=e.logicalShape.length,l=getBroadcastDims$1(n.shapeInfo.logicalShape,e.logicalShape),u=getCoordsDataType$1(i),h=i-a;let f;const c=["x","y","z","w","u","v"];a===0?f="":i<2&&l.length>=1?f="coords = 0;":f=l.map(b=>`coords.${c[b+h]} = 0;`).join(`
`);let o="";i<2&&a>0?o="coords":o=n.shapeInfo.logicalShape.map((b,x)=>`coords.${c[x+h]}`).join(", ");let d="return outputValue;";const g=sizeFromShape$1(n.shapeInfo.logicalShape)===1,$=sizeFromShape$1(e.logicalShape)===1;if(a===1&&!g&&!$)d=`
      return vec4(outputValue.xy, outputValue.xy);
    `;else if(g&&!$)i===1?d=`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:d=`
        return vec4(outputValue.x);
      `;else if(l.length){const b=a-2,x=a-1;l.indexOf(b)>-1&&l.indexOf(x)>-1?d="return vec4(outputValue.x);":l.indexOf(b)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":l.indexOf(x)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}return`
    vec4 ${s}() {
      ${u} coords = getOutputCoords();
      ${f}
      vec4 outputValue = get${r}(${o});
      ${d}
    }
  `}function getSamplerAtOutputCoords(n,e){const t=n.name,r=t.charAt(0).toUpperCase()+t.slice(1),s="get"+r+"AtOutCoords",a=e.texShape,i=n.shapeInfo.texShape,l=n.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!n.shapeInfo.isUniform&&l===u&&n.shapeInfo.flatOffset==null&&arraysEqual$1(i,a))return`
      float ${s}() {
        return sampleTexture(${t}, resultUV);
      }
    `;const h=getCoordsDataType$1(u),f=getBroadcastDims$1(n.shapeInfo.logicalShape,e.logicalShape),c=u-l;let o;const d=["x","y","z","w","u","v"];l===0?o="":u<2&&f.length>=1?o="coords = 0;":o=f.map(g=>`coords.${d[g+c]} = 0;`).join(`
`);let m="";return u<2&&l>0?m="coords":m=n.shapeInfo.logicalShape.map((g,y)=>`coords.${d[y+c]}`).join(", "),`
    float ${s}() {
      ${h} coords = getOutputCoords();
      ${o}
      return get${r}(${m});
    }
  `}function getCoordsDataType$1(n){if(n<=1)return"int";if(n===2)return"ivec2";if(n===3)return"ivec3";if(n===4)return"ivec4";if(n===5)return"ivec5";if(n===6)return"ivec6";throw Error(`GPU for rank ${n} is not yet supported`)}function getUniformInfoFromShape(n,e,t){const{newShape:r,keptDims:s}=squeezeShape(e),a=e.length,i=n&&a===3&&e[0]===1,l=i?e.slice(1):r,u=!n&&a>1&&!arraysEqual$1(e,t)&&r.length<a||i;return{useSqueezeShape:u,uniformShape:u?l:e,keptDims:s}}function squeezeInputInfo(n,e){const t=JSON.parse(JSON.stringify(n));return t.shapeInfo.logicalShape=e,t}function getSqueezedParams(n,e){return e.map(t=>n[t]).join(", ")}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function compileProgram$1(n,e,t,r){const s=t.map((f,c)=>{const o={logicalShape:f.shape,texShape:f.isUniform?null:f.texData.texShape,isUniform:f.isUniform,isPacked:f.isUniform?!1:f.texData.isPacked,flatOffset:null};return f.texData!=null&&f.texData.slice!=null&&f.texData.slice.flatOffset>0&&(o.flatOffset=f.texData.slice.flatOffset),{name:e.variableNames[c],shapeInfo:o}}),a=s.map(f=>f.shapeInfo),i={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},l=makeShader$1(s,i,e),u=createFragmentShader(n.gl,l),h=n.createProgram(u);return env$1().get("ENGINE_COMPILE_ONLY")?{program:e,fragmentShader:u,source:l,webGLProgram:h,inShapeInfos:a,outShapeInfo:i,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(n.buildVao(h),Object.assign({program:e,fragmentShader:u,source:l,webGLProgram:h,inShapeInfos:a,outShapeInfo:i},getUniformLocations(n,e,h)))}function getUniformLocations(n,e,t){const r=[],s=[];let a,i,l,u=null,h=null;h=n.getUniformLocation(t,"NAN",!1),env$1().getNumber("WEBGL_VERSION")===1&&(u=n.getUniformLocation(t,"INFINITY",!1));const f=!1;for(const c of e.variableNames){const o={name:c,uniform:n.getUniformLocation(t,c,f),offset:n.getUniformLocation(t,`offset${c}`,f)};e.enableShapeUniforms&&(o.shape=n.getUniformLocation(t,`${c}Shape`,f),o.texShape=n.getUniformLocation(t,`${c}TexShape`,f)),r.push(o)}if(e.enableShapeUniforms&&(a=n.getUniformLocation(t,"outShape",f),l=n.getUniformLocation(t,"outShapeStrides",f),i=n.getUniformLocation(t,"outTexShape",f)),e.customUniforms)for(const c of e.customUniforms)s.push(n.getUniformLocation(t,c.name,f));return{variablesLocations:r,customUniformLocations:s,infLoc:u,nanLoc:h,outShapeLocation:a,outShapeStridesLocation:l,outTexShapeLocation:i}}function validateBinaryAndProgram(n,e){if(n.length!==e.length)throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${e.length} inputs`);n.forEach((t,r)=>{const s=t.logicalShape,a=e[r],i=a.shape;if(!arraysEqual$1(s,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${i} must match`);if(t.isUniform&&a.isUniform)return;const l=t.texShape,u=a.isUniform?null:a.texData.texShape;if(!arraysEqual$1(l,u))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${l} and ${u} must match`)})}function runProgram(n,e,t,r,s){e.program.enableShapeUniforms||(validateBinaryAndProgram(e.inShapeInfos,t),validateBinaryAndProgram([e.outShapeInfo],[r]));const a=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?n.setOutputPackedMatrixTexture(a.texture,i[0],i[1]):n.setOutputMatrixTexture(a.texture,i[0],i[1]),n.setProgram(e.webGLProgram),n.bindVertexArray(e.webGLProgram.vao),env$1().getNumber("WEBGL_VERSION")===1&&e.infLoc!==null&&n.gl.uniform1f(e.infLoc,1/0),e.nanLoc!==null&&n.gl.uniform1f(e.nanLoc,NaN);for(let u=0;u<t.length;++u){const h=t[u],{uniform:f,offset:c,shape:o,texShape:d}=e.variablesLocations[u];if(o){const{uniformShape:m}=getUniformInfoFromShape(e.program.packedInputs,h.shape,h.texData.texShape);switch(m.length){case 1:n.gl.uniform1iv(o,new Int32Array(m));break;case 2:n.gl.uniform2iv(o,new Int32Array(m));break;case 3:n.gl.uniform3iv(o,new Int32Array(m));break;case 4:n.gl.uniform4iv(o,new Int32Array(m));break}}if(d&&n.gl.uniform2i(d,h.texData.texShape[0],h.texData.texShape[1]),f!=null){if(h.isUniform){if(sizeFromShape$1(h.shape)<2)n.gl.uniform1f(f,h.uniformValues[0]);else{let m=h.uniformValues;m instanceof Float32Array||(m=new Float32Array(m)),n.gl.uniform1fv(f,m)}continue}h.texData.slice!=null&&c!=null&&n.gl.uniform1i(c,h.texData.slice.flatOffset),n.setInputMatrixTexture(h.texData.texture.texture,f,u)}}const l=e.outShapeLocation;if(l)switch(r.shape.length){case 1:n.gl.uniform1iv(l,new Int32Array(r.shape));break;case 2:n.gl.uniform2iv(l,new Int32Array(r.shape));break;case 3:n.gl.uniform3iv(l,new Int32Array(r.shape));break;case 4:n.gl.uniform4iv(l,new Int32Array(r.shape));break}if(e.outShapeStridesLocation){const u=computeStrides$1(r.shape);switch(r.shape.length){case 2:n.gl.uniform1iv(e.outShapeStridesLocation,new Int32Array(u));break;case 3:n.gl.uniform2iv(e.outShapeStridesLocation,new Int32Array(u));break;case 4:n.gl.uniform3iv(e.outShapeStridesLocation,new Int32Array(u));break}}if(e.outTexShapeLocation&&n.gl.uniform2i(e.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),e.program.customUniforms&&s)for(let u=0;u<e.program.customUniforms.length;++u){const h=e.program.customUniforms[u],f=e.customUniformLocations[u],c=s[u];if(h.type==="float")n.gl.uniform1fv(f,c);else if(h.type==="vec2")n.gl.uniform2fv(f,c);else if(h.type==="vec3")n.gl.uniform3fv(f,c);else if(h.type==="vec4")n.gl.uniform4fv(f,c);else if(h.type==="int")n.gl.uniform1iv(f,c);else if(h.type==="ivec2")n.gl.uniform2iv(f,c);else if(h.type==="ivec3")n.gl.uniform3iv(f,c);else if(h.type==="ivec4")n.gl.uniform4iv(f,c);else throw Error(`uniform type ${h.type} is not supported yet.`)}n.executeProgram()}function makeShaderKey$1(n,e,t){let r="";e.concat(t).forEach(i=>{const l=i.texData!=null&&i.texData.slice!=null&&i.texData.slice.flatOffset>0;if(n.enableShapeUniforms&&!i.isUniform){const u=i.texData.texShape,{useSqueezeShape:h,uniformShape:f,keptDims:c}=getUniformInfoFromShape(n.packedInputs,i.shape,u);let o="",d="",m="";if(f.length===1&&n.packedInputs){const v=[Math.ceil(u[0]/2),Math.ceil(u[1]/2)];o=`${v[0]>1}_${v[1]>1}`}else if(f.length===2&&!n.packedInputs)d=`${f[0]>1}_${f[1]>1}`;else if(f.length>2&&!n.packedInputs){const v=computeStrides$1(f);m=`${v[0]===u[1]}_${v[v.length-1]===u[1]}`}const g=i.shape.length,y=f.length===2&&arraysEqual$1(i.shape,u),$=sizeFromShape$1(i.shape)===1,b=getBroadcastDims$2(i.shape,t.shape),x=!n.packedInputs&&g===t.shape.length&&arraysEqual$1(u,t.texData.texShape),w=n.packedInputs||f.length>2?"":`${u[0]>1}_${u[1]>1}`;r+=`${g}_${x}_${h?c:""}_${f.length}_${$}_${b}_${y}_${o}_${d}_${m}_${w}_${l}`}else{const u=i.isUniform?"uniform":i.texData.texShape;r+=`${i.shape}_${u}_${l}`}});const s=n.userCode;let a=n.constructor.name;return a+="_"+r+"_"+s+`${env$1().getNumber("WEBGL_VERSION")}`,a}function useShapeUniforms(n){return env$1().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&n<=4}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DecodeMatrixProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=PackingScheme.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=getGlslDifferences();this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],e):getLogicalCoordinatesFromFlatIndex(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DecodeMatrixPackedProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=PackingScheme.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=getGlslDifferences();this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],e):getLogicalCoordinatesFromFlatIndex(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class EncodeFloatProgram{constructor(e){this.variableNames=["A"],this.outTexUsage=TextureUsage.DOWNLOAD;const t=getGlslDifferences();this.outputShape=e,this.userCode=`
      ${ENCODE_FLOAT_SNIPPET}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class EncodeFloatPackedProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=TextureUsage.DOWNLOAD;const t=getGlslDifferences();this.outputShape=e,this.userCode=`
      ${ENCODE_FLOAT_SNIPPET}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHANNEL_CHAR_TO_INDEX_MAP={R:0,G:1,B:2,A:3};class EncodeMatrixProgram{constructor(e,t=!1,r="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=getGlslDifferences();this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);let a="result";t&&(a="floor(result * 255. + 0.5)");let i="";for(let l=0;l<r.length;l++){const u=r[l];i+=`
          if(offset == ${l}) {
            result = values[${CHANNEL_CHAR_TO_INDEX_MAP[u]}];
          }`}this.userCode=`
      ${this.enableShapeUniforms?getFlatIndexFrom3DOutput():getFlatIndexFrom3D(e)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${r.length});

        flatIndex = idiv(flatIndex, ${r.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${s.texture2D}(A, uv);
          ${i}
        }
        ${s.output} = vec4(${a}, 0., 0., 0.);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class EncodeMatrixPackedProgram{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=getGlslDifferences();this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);let s="",a="result";t&&(a="floor(result * 255. + 0.5)");for(let i=0;i<=1;i++)for(let l=0;l<=1;l++){const u=i*2+l;s+=`
          localCoords = coords;
          if(localCoords[2] + ${l} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {
          localCoords[2] += ${l};
          if (localCoords[1] + ${i} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${r.texture2D}(A, uv);

            if (offset == 0) {
              result[${u}] = values[0];
            } else if (offset == 1) {
              result[${u}] = values[1];
            } else if (offset == 2) {
              result[${u}] = values[2];
            } else {
              result[${u}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?getFlatIndexFrom3DOutput():getFlatIndexFrom3D(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${s}

          ${r.output} = ${a};
        }
    `}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createVertexShader(n){const e=getGlslDifferences(),t=`${e.version}
    precision highp float;
    ${e.attribute} vec3 clipSpacePos;
    ${e.attribute} vec2 uv;
    ${e.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return createVertexShader$1(n,t)}function createVertexBuffer(n){const e=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return createStaticVertexBuffer(n,e)}function createIndexBuffer(n){const e=new Uint16Array([0,1,2,2,1,3]);return createStaticIndexBuffer(n,e)}function createAndConfigureTexture(n,e,t,r,s,a){validateTextureSize(e,t);const i=createTexture(n),l=n.TEXTURE_2D;return callAndCheck(n,()=>n.bindTexture(l,i)),callAndCheck(n,()=>n.texParameteri(l,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE)),callAndCheck(n,()=>n.texParameteri(l,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE)),callAndCheck(n,()=>n.texParameteri(l,n.TEXTURE_MIN_FILTER,n.NEAREST)),callAndCheck(n,()=>n.texParameteri(l,n.TEXTURE_MAG_FILTER,n.NEAREST)),env$1().getNumber("WEBGL_VERSION")===1?callAndCheck(n,()=>n.texImage2D(l,0,r,e,t,0,s,a,null)):callAndCheck(n,()=>n.texStorage2D(l,1,r,e,t)),callAndCheck(n,()=>n.bindTexture(n.TEXTURE_2D,null)),{texture:i,texShape:[t,e]}}function getInternalFormatForFloat32MatrixTexture(n){return n.internalFormatFloat}function createFloat32MatrixTexture(n,e,t,r){const[s,a]=getUnpackedMatrixTextureShapeWidthHeight(e,t);return createAndConfigureTexture(n,s,a,getInternalFormatForFloat32MatrixTexture(r),r.textureFormatFloat,n.FLOAT)}function getInternalFormatForFloat16MatrixTexture(n){return n.internalFormatHalfFloat}function createFloat16MatrixTexture(n,e,t,r){const[s,a]=getUnpackedMatrixTextureShapeWidthHeight(e,t);return createAndConfigureTexture(n,s,a,getInternalFormatForFloat16MatrixTexture(r),r.textureFormatFloat,r.textureTypeHalfFloat)}function getInternalFormatForUnsignedBytesMatrixTexture(n){return n.downloadTextureFormat}function createUnsignedBytesMatrixTexture(n,e,t,r){const[s,a]=getUnpackedMatrixTextureShapeWidthHeight(e,t);return createAndConfigureTexture(n,s,a,getInternalFormatForUnsignedBytesMatrixTexture(r),n.RGBA,n.UNSIGNED_BYTE)}function getInternalFormatForPackedMatrixTexture(n){return n.internalFormatPackedFloat}function createPackedMatrixTexture(n,e,t,r){const[s,a]=getPackedMatrixTextureShapeWidthHeight(e,t);return createAndConfigureTexture(n,s,a,getInternalFormatForPackedMatrixTexture(r),n.RGBA,n.FLOAT)}function getInternalFormatForFloat16PackedMatrixTexture(n){return n.internalFormatPackedHalfFloat}function createFloat16PackedMatrixTexture(n,e,t,r){const[s,a]=getPackedMatrixTextureShapeWidthHeight(e,t);return createAndConfigureTexture(n,s,a,getInternalFormatForFloat16PackedMatrixTexture(r),n.RGBA,r.textureTypeHalfFloat)}function bindVertexProgramAttributeStreams(n,e,t){return callAndCheck(n,()=>n.bindBuffer(n.ARRAY_BUFFER,t)),bindVertexBufferToProgramAttribute(n,e,"clipSpacePos",t,3,20,0)&&bindVertexBufferToProgramAttribute(n,e,"uv",t,2,20,12)}function uploadDenseMatrixToTexture(n,e,t,r,s,a){callAndCheck(n,()=>n.bindTexture(n.TEXTURE_2D,e));let i,l,u;s instanceof Uint8Array?(i=new Uint8Array(t*r*4),l=n.UNSIGNED_BYTE,u=n.RGBA):(i=new Float32Array(t*r*4),l=n.FLOAT,u=a.internalFormatPackedFloat),i.set(s),env$1().getNumber("WEBGL_VERSION")===2?callAndCheck(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,t,r,n.RGBA,l,i)):callAndCheck(n,()=>n.texImage2D(n.TEXTURE_2D,0,u,t,r,0,n.RGBA,l,i)),callAndCheck(n,()=>n.bindTexture(n.TEXTURE_2D,null))}function uploadPixelDataToTexture(n,e,t){callAndCheck(n,()=>n.bindTexture(n.TEXTURE_2D,e)),t.data instanceof Uint8Array?env$1().getNumber("WEBGL_VERSION")===2?callAndCheck(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,t.width,t.height,n.RGBA,n.UNSIGNED_BYTE,t.data)):callAndCheck(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,t.width,t.height,0,n.RGBA,n.UNSIGNED_BYTE,t.data)):env$1().getNumber("WEBGL_VERSION")===2?callAndCheck(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,n.RGBA,n.UNSIGNED_BYTE,t)):callAndCheck(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,t)),callAndCheck(n,()=>n.bindTexture(n.TEXTURE_2D,null))}function createBufferFromOutputTexture(n,e,t,r){const s=n.createBuffer();callAndCheck(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,s));const l=4*4*e*t;return callAndCheck(n,()=>n.bufferData(n.PIXEL_PACK_BUFFER,l,n.STREAM_READ)),callAndCheck(n,()=>n.readPixels(0,0,t,e,n.RGBA,n.FLOAT,0)),callAndCheck(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,null)),s}function downloadFloat32MatrixFromBuffer(n,e,t){const r=n,s=new Float32Array(t);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}function downloadByteEncodedFloatMatrixFromOutputTexture(n,e,t,r){const[s,a]=getUnpackedMatrixTextureShapeWidthHeight(e,t),i=4,l=new Uint8Array(getUnpackedArraySizeFromMatrixSize(e*t,i));return callAndCheck(n,()=>n.readPixels(0,0,s,a,r.downloadTextureFormat,n.UNSIGNED_BYTE,l)),new Float32Array(l.buffer)}function downloadPackedMatrixFromBuffer(n,e,t,r,s,a,i,l){const u=n,h=new Float32Array(getPackedRGBAArraySizeFromMatrixShape(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,h),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),h}function downloadMatrixFromPackedOutputTexture(n,e,t){const r=new Float32Array(e*t*4);return callAndCheck(n,()=>n.readPixels(0,0,t,e,n.RGBA,n.FLOAT,r)),r}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class GPGPUContext{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const t=env$1().getNumber("WEBGL_VERSION");if(e!=null?(this.gl=e,setWebGLContext(t,e)):this.gl=getWebGLContext(t),e=this.gl,env$1().getNumber("WEBGL_VERSION")===2){const a=e;this.createVertexArray=()=>callAndCheck(a,()=>a.createVertexArray()),this.bindVertexArray=i=>callAndCheck(a,()=>a.bindVertexArray(i)),this.deleteVertexArray=i=>callAndCheck(a,()=>a.deleteVertexArray(i)),this.getVertexArray=()=>callAndCheck(a,()=>a.getParameter(a.VERTEX_ARRAY_BINDING))}else if(e!=null){const a=e.getExtension("OES_vertex_array_object");if(a==null)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>callAndCheck(e,()=>a.createVertexArrayOES()),this.bindVertexArray=i=>callAndCheck(e,()=>a.bindVertexArrayOES(i)),this.deleteVertexArray=i=>callAndCheck(e,()=>a.deleteVertexArrayOES(i)),this.getVertexArray=()=>callAndCheck(e,()=>e.getParameter(a.VERTEX_ARRAY_BINDING_OES))}let r="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),env$1().getNumber("WEBGL_VERSION")===1){const a="OES_texture_float",i="OES_texture_half_float";if(this.textureFloatExtension=getExtensionOrThrow(this.gl,a),hasExtension(this.gl,i))this.textureHalfFloatExtension=getExtensionOrThrow(this.gl,i);else if(env$1().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(r),hasExtension(this.gl,s))this.colorBufferHalfFloatExtension=getExtensionOrThrow(this.gl,s);else if(env$1().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(r="EXT_color_buffer_float",hasExtension(this.gl,r))this.colorBufferFloatExtension=this.gl.getExtension(r);else if(hasExtension(this.gl,s))this.colorBufferHalfFloatExtension=this.gl.getExtension(s);else throw new Error("GL context does not support color renderable floats");this.vertexBuffer=createVertexBuffer(this.gl),this.indexBuffer=createIndexBuffer(this.gl),this.framebuffer=createFramebuffer(this.gl),this.textureConfig=getTextureConfig(this.gl,this.textureHalfFloatExtension)}get debug(){return env$1().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program!=null&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),this.outputTexture!=null&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;callAndCheck(e,()=>e.finish()),callAndCheck(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),callAndCheck(e,()=>e.deleteFramebuffer(this.framebuffer)),callAndCheck(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),callAndCheck(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),callAndCheck(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),createFloat32MatrixTexture(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),createFloat16MatrixTexture(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),createUnsignedBytesMatrixTexture(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),uploadPixelDataToTexture(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,r,s){this.throwIfDisposed(),uploadDenseMatrixToTexture(this.gl,e,t,r,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),createFloat16PackedMatrixTexture(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),createPackedMatrixTexture(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(unbindColorTextureFromFramebuffer(this.gl,this.framebuffer),this.outputTexture=null),callAndCheck(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,r){return this.downloadMatrixDriver(e,()=>downloadByteEncodedFloatMatrixFromOutputTexture(this.gl,t,r,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,r,s,a,i){return downloadPackedMatrixFromBuffer(this.gl,e,t,r,s,a,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return downloadFloat32MatrixFromBuffer(this.gl,e,t)}createBufferFromTexture(e,t,r){this.bindTextureToFrameBuffer(e);const s=createBufferFromOutputTexture(this.gl,t,r,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,r;if(env$1().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,a=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),r=()=>{const i=s.clientWaitSync(a,0,0);return i===s.ALREADY_SIGNALED||i===s.CONDITION_SATISFIED},t=a}else env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),r=()=>this.isQueryAvailable(t,env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):r=()=>!0;return{query:t,isFencePassed:r}}downloadMatrixFromPackedTexture(e,t,r){return this.downloadMatrixDriver(e,()=>downloadMatrixFromPackedOutputTexture(this.gl,t,r))}createProgram(e){this.throwIfDisposed();const t=this.gl;this.vertexShader==null&&(this.vertexShader=createVertexShader(t));const r=createProgram(t);callAndCheck(t,()=>t.attachShader(r,this.vertexShader)),callAndCheck(t,()=>t.attachShader(r,e)),linkProgram(t,r);const s=Object.assign(r,{vao:this.createVertexArray()});return this.debug&&validateProgram(t,s),s}buildVao(e){this.setProgram(e),this.bindVertexArray(e.vao);const t=this.gl;callAndCheck(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),bindVertexProgramAttributeStreams(t,e,this.vertexBuffer)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),e!=null&&(callAndCheck(this.gl,()=>this.gl.deleteProgram(e)),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,this.program!=null&&this.debug&&validateProgram(this.gl,this.program),callAndCheck(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,r=!0){return this.throwIfDisposed(),r?getProgramUniformLocationOrThrow(this.gl,e,t):getProgramUniformLocation(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),callAndCheck(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,r){this.throwIfDisposed(),this.throwIfNoProgram(),bindTextureToProgramUniformSampler(this.gl,e,t,r)}setOutputMatrixTexture(e,t,r){this.setOutputMatrixTextureDriver(e,r,t)}setOutputPackedMatrixTexture(e,t,r){this.throwIfDisposed();const[s,a]=getPackedMatrixTextureShapeWidthHeight(t,r);this.setOutputMatrixTextureDriver(e,s,a)}setOutputMatrixWriteRegion(e,t,r,s){this.setOutputMatrixWriteRegionDriver(r,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,r,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){this.program!=null&&validateProgram(this.gl,this.program),validateFramebuffer(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;if(this.debug){const t=this.getVertexArray();console.assert(t===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}callAndCheck(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),callAndCheck(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return this.disjointQueryTimerExtension==null&&(this.disjointQueryTimerExtension=getExtensionOrThrow(this.gl,env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){const r=this.gl,s=this.getQueryTimerExtensionWebGL2(),a=r.createQuery();return r.beginQuery(s.TIME_ELAPSED_EXT,a),a}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){const t=this.gl,r=this.getQueryTimerExtensionWebGL2();t.endQuery(r.TIME_ELAPSED_EXT);return}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await repeatedTry(()=>this.disposed||this.isQueryAvailable(e,env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(t===0)return null;if(t===2){const r=this.gl;return r.getQueryParameter(e,r.QUERY_RESULT)/1e6}else{const r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(e,r.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(t===0)return!0;if(t===2){const r=this.gl,s=this.getQueryTimerExtensionWebGL2(),a=r.getQueryParameter(e,r.QUERY_RESULT_AVAILABLE);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(s.GPU_DISJOINT_EXT)),a&&!this.disjoint}else{const r=this.getQueryTimerExtensionWebGL1(),s=r.getQueryObjectEXT(e,r.QUERY_RESULT_AVAILABLE_EXT);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),s&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=linearSearchLastTrue(this.itemsToPoll.map(t=>t.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:r}=this.itemsToPoll[t];r()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let r;"setTimeoutCustom"in env$1().platform&&(r=env$1().platform.setTimeoutCustom.bind(env$1().platform)),repeatedTry(()=>(this.pollItems(),this.itemsToPoll.length===0),()=>0,null,r)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),bindColorTextureToFramebuffer(this.gl,e,this.framebuffer),this.debug&&validateFramebuffer(this.gl)}unbindTextureToFrameBuffer(){this.outputTexture!=null?(bindColorTextureToFramebuffer(this.gl,this.outputTexture,this.framebuffer),this.debug&&validateFramebuffer(this.gl)):unbindColorTextureFromFramebuffer(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const r=t();return this.unbindTextureToFrameBuffer(),r}setOutputMatrixTextureDriver(e,t,r){this.throwIfDisposed();const s=this.gl;bindColorTextureToFramebuffer(s,e,this.framebuffer),this.debug&&validateFramebuffer(s),this.outputTexture=e,callAndCheck(s,()=>s.viewport(0,0,t,r)),callAndCheck(s,()=>s.scissor(0,0,t,r))}setOutputMatrixWriteRegionDriver(e,t,r,s){this.throwIfDisposed(),callAndCheck(this.gl,()=>this.gl.scissor(e,t,r,s))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(this.program==null)throw new Error("No GPU program is currently set.")}}function linearSearchLastTrue(n){let e=0;for(;e<n.length&&n[e]();++e);return e-1}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const{addImpl:addImplCPU$1,bincountImpl:bincountImplCPU,bincountReduceImpl:bincountReduceImplCPU,bitwiseAndImpl:bitwiseAndImplCPU,castImpl:castImplCPU$1,ceilImpl:ceilImplCPU$1,concatImpl:concatImplCPU$1,equalImpl:equalImplCPU$1,expImpl:expImplCPU$1,expm1Impl:expm1ImplCPU$1,floorImpl:floorImplCPU$1,gatherNdImpl:gatherNdImplCPU$1,gatherV2Impl:gatherV2ImplCPU$1,greaterImpl:greaterImplCPU$1,greaterEqualImpl:greaterEqualImplCPU$1,lessImpl:lessImplCPU$1,lessEqualImpl:lessEqualImplCPU$1,linSpaceImpl:linSpaceImplCPU,logImpl:logImplCPU$1,maxImpl:maxImplCPU$1,maximumImpl:maximumImplCPU$1,minimumImpl:minimumImplCPU$1,multiplyImpl:multiplyImplCPU$1,negImpl:negImplCPU$1,notEqualImpl:notEqualImplCPU$1,prodImpl:prodImplCPU$1,raggedGatherImpl:raggedGatherImplCPU,raggedRangeImpl:raggedRangeImplCPU,raggedTensorToTensorImpl:raggedTensorToTensorImplCPU,rangeImpl:rangeImplCPU$1,rsqrtImpl:rsqrtImplCPU$1,scatterImpl:scatterImplCPU$1,sigmoidImpl:sigmoidImplCPU,simpleAbsImpl:simpleAbsImplCPU$1,sliceImpl:sliceImplCPU$1,sparseFillEmptyRowsImpl:sparseFillEmptyRowsImplCPU,sparseReshapeImpl:sparseReshapeImplCPU,sparseSegmentReductionImpl:sparseSegmentReductionImplCPU,sqrtImpl:sqrtImplCPU,staticRegexReplaceImpl:staticRegexReplaceImplCPU,stridedSliceImpl:stridedSliceImplCPU$1,stringNGramsImpl:stringNGramsImplCPU$1,stringSplitImpl:stringSplitImplCPU,stringToHashBucketFastImpl:stringToHashBucketFastImplCPU,subImpl:subImplCPU$1,tileImpl:tileImplCPU$1,topKImpl:topKImplCPU$1,transposeImpl:transposeImplCPU$1,uniqueImpl:uniqueImplCPU$1}=shared$1;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getVecChannels(n,e){return["x","y","z","w","u","v"].slice(0,e).map(t=>`${n}.${t}`)}function getChannels(n,e){return e===1?[n]:getVecChannels(n,e)}function getSourceCoords$4(n,e){if(n===1)return"rc";let t="";for(let r=0;r<n;r++)t+=e[r],r<n-1&&(t+=",");return t}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class PackProgram{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.rank===0)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{const t=getChannels("rc",this.rank),r=getCoordsDataType$1(this.rank),s=this.getOutOfBoundsCondition(t),a=this.getSetup(t),i=this.getOutput(t);this.userCode=`
        void main() {
          ${r} rc = getOutputCoords();

          if(${s}) {
            setOutput(vec4(0));
          } else {
            ${a}

            setOutput(vec4(${i}));
          }
        }
      `}}getSourceCoordsArr(e){const t=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${r===0?"r":"rp1"}, ${s===0?"c":"cp1"}`;for(let i=2;i<this.rank;i++)a=`${e[e.length-1-i]},`+a;t.push(a)}return t}getOutOfBoundsCondition(e){if(this.rank===1)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let r=this.rank-2;r<this.rank;r++)t+=`${e[r]} >= ${this.enableShapeUniforms?`outShape[${r}]`:this.outputShape[r]}`,r<this.rank-1&&(t+="||");return t}getSetup(e){if(this.rank===1)return"";const t=e.slice(-2),r=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${r};
      bool rEdge = rp1 >= ${s};
    `}getOutput(e){const t=this.getSourceCoordsArr(e);return this.rank===1?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ReshapePackedProgram{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);let r="";for(let s=0;s<4;s++){let a="thisRC = rc;";s%2===1&&(a+="thisRC.z += 1;"),s>1&&(a+="thisRC.y += 1;"),r+=`
        ${a}
        ${s>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${s}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${s>0?"}":""}
      `}this.userCode=`
      ${getReshapedInputCoords(t,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?getFlatIndexFrom3DOutput():getFlatIndexFrom3D(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};

        ${r}

        setOutput(result);
      }
    `}}function getReshapedInputCoords(n,e){return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${e?getLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],"inputShape"):getLogicalCoordinatesFromFlatIndex(["r","c","d"],n)}
      return ivec3(r, c, d);
    }
  `}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let TextureManager$1=class{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,r){const s=getPhysicalFromLogicalTextureType(t,r),a=getKeyFromTextureShape(e,s,r);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const i=computeBytes(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,r);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();const u=this.freeTextures[a].pop();return this.usedTextures[a].push(u),u}let l;return s===PhysicalTextureType.PACKED_2X2_FLOAT32?l=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===PhysicalTextureType.PACKED_2X2_FLOAT16?l=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===PhysicalTextureType.UNPACKED_FLOAT32?l=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===PhysicalTextureType.UNPACKED_FLOAT16?l=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE&&(l=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(l),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),l}releaseTexture(e,t,r,s){if(this.freeTextures==null)return;const a=getPhysicalFromLogicalTextureType(r,s),i=getKeyFromTextureShape(t,a,s);i in this.freeTextures||(this.freeTextures[i]=[]);const l=computeBytes(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,s),u=env$1().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");u!==-1&&this._numBytesAllocated>u?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=l):(this.freeTextures[i].push(e),this.numFreeTextures++,this._numBytesFree+=l),this.numUsedTextures--;const h=this.usedTextures[i],f=h&&h.indexOf(e);if(f==null||f<0)throw new Error("Cannot release a texture that was never provided by this texture manager");h[f]=h[h.length-1],h.pop(),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(const e in this.freeTextures)this.freeTextures[e].forEach(t=>{this.gpgpu.deleteMatrixTexture(t.texture)});for(const e in this.usedTextures)this.usedTextures[e].forEach(t=>{this.gpgpu.deleteMatrixTexture(t.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}};function numBytesForInternalFormat(n,e){const t=n;if(e===t.R32F)return 4;if(e===t.R16F)return 2;if(e===t.RGBA32F)return 16;if(e===n.RGBA)return 16;if(e===t.RGBA16F)return 8;if(e===t.RGBA8)return 4;throw new Error(`Unknown internal format ${e}`)}function computeBytes(n,e,t,r,s){const a=internalFormatForPhysicalTexType(e,r);let i;if(s){const[u,h]=getPackedMatrixTextureShapeWidthHeight(n[0],n[1]);i=u*h}else{const[u,h]=getUnpackedMatrixTextureShapeWidthHeight(n[0],n[1]);i=u*h}const l=numBytesForInternalFormat(t,a);return i*l}function internalFormatForPhysicalTexType(n,e){switch(n){case PhysicalTextureType.PACKED_2X2_FLOAT32:return getInternalFormatForPackedMatrixTexture(e);case PhysicalTextureType.PACKED_2X2_FLOAT16:return getInternalFormatForFloat16PackedMatrixTexture(e);case PhysicalTextureType.UNPACKED_FLOAT32:return getInternalFormatForFloat32MatrixTexture(e);case PhysicalTextureType.UNPACKED_FLOAT16:return getInternalFormatForFloat16MatrixTexture(e);case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:return getInternalFormatForUnsignedBytesMatrixTexture(e);default:throw new Error(`Unknown physical texture type ${n}`)}}function getPhysicalTextureForRendering(n){return env$1().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?n?PhysicalTextureType.PACKED_2X2_FLOAT32:PhysicalTextureType.UNPACKED_FLOAT32:n?PhysicalTextureType.PACKED_2X2_FLOAT16:PhysicalTextureType.UNPACKED_FLOAT16}function getPhysicalFromLogicalTextureType(n,e){if(n===TextureUsage.UPLOAD)return PhysicalTextureType.PACKED_2X2_FLOAT32;if(n===TextureUsage.RENDER||n==null)return getPhysicalTextureForRendering(e);if(n===TextureUsage.DOWNLOAD||n===TextureUsage.PIXELS)return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${n}`)}function getKeyFromTextureShape(n,e,t){return`${n[0]}_${n[1]}_${e}_${t}`}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let UnaryOpProgram$1=class{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}};const CHECK_NAN_SNIPPET$1="if (isnan(x)) return x;",LINEAR$2="return x;",ABS$2="return abs(x);",ELU$3="return (x >= 0.0) ? x : (exp(x) - 1.0);",RELU$3=CHECK_NAN_SNIPPET$1+`
  return (x < 0.0) ? 0.0 : x;
`,RELU6$3=CHECK_NAN_SNIPPET$1+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,CLONE="return x;",SIGMOID$3="return 1.0 / (1.0 + exp(-1.0 * x));";/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LINEAR$1="return x;",ELU$2=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,RELU$2=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,RELU6$2=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,SIGMOID$2="return 1.0 / (1.0 + exp(-1.0 * x));";class UnaryOpPackedProgram{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class UnpackProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const t=e.length,r=getChannels("rc",t),s=getCoordsDataType$1(t),a=getSourceCoords$4(t,r),i=r.slice(-2),l=t<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`
      void main() {
        ${s} rc = getOutputCoords();
        vec4 packedInput = getA(${a});

        setOutput(getChannel(packedInput, ${l}));
      }
    `}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const whereImpl=whereImpl$2,EPSILON_FLOAT32$1=1e-7,EPSILON_FLOAT16$1=1e-4,binaryCaches={};function getBinaryCache(n){return n in binaryCaches||(binaryCaches[n]={}),binaryCaches[n]}const CPU_HANDOFF_SIZE_THRESHOLD$1=env$1().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),BEFORE_PAGING_CONSTANT=600;function numMBBeforeWarning(){return env$1().global.screen==null?1024:env$1().global.screen.height*env$1().global.screen.width*window.devicePixelRatio*BEFORE_PAGING_CONSTANT/1024/1024}class MathBackendWebGL extends KernelBackend$1{nextDataId(){return MathBackendWebGL.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!env$1().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(e!=null){if(e instanceof GPGPUContext)t=e;else{const r=getWebGLContext(env$1().getNumber("WEBGL_VERSION"),e);t=new GPGPUContext(r)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const r=getWebGLContext(env$1().getNumber("WEBGL_VERSION"));t=new GPGPUContext(r),this.binaryCache=getBinaryCache(env$1().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new TextureManager$1(this.gpgpu),this.numMBBeforeWarning=numMBBeforeWarning(),this.texData=new DataStorage$1(this,engine$1())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,r,s,a,i){const l=this.makeTensorInfo(t,r),u=this.texData.get(l.dataId);u.isPacked=!1,u.texture={texture:e,texShape:[s,a]},u.texShape=[s,a];const h=getShapeAs3D(t),f=new EncodeMatrixProgram(h,!1,i),c=this.runWebGLProgram(f,[l],r,[[s,a]]);return c.shape=t,u.texture=null,this.disposeIntermediateTensorInfo(l),c.dataId}write(e,t,r){if((env$1().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||env$1().getBool("DEBUG"))&&this.checkNumericalProblems(e),r==="complex64"&&e!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:r,values:e,usage:TextureUsage.UPLOAD,refCount:1}),s}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){const t=this.texData.get(e);t.refCount++}decRef(e){if(this.texData.has(e)){const t=this.texData.get(e);t.refCount--}}move(e,t,r,s,a){if(env$1().getBool("DEBUG")&&this.checkNumericalProblems(t),s==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:s,values:t,usage:TextureUsage.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:r,dtype:s,complexTensorInfos:a,slice:i,shape:l,isPacked:u}=t;if(i!=null){let o;u?o=new UnaryOpPackedProgram(l,CLONE):o=new UnaryOpProgram$1(l,CLONE);const d=this.runWebGLProgram(o,[{dataId:e,shape:l,dtype:s}],s),m=this.readSync(d.dataId);return this.disposeIntermediateTensorInfo(d),m}if(r!=null)return this.convertAndCacheOnCPU(e);if(s==="string")return r;const h=this.activeTimers!=null;let f;h&&(f=now$1());let c;if(s==="complex64"){const o=this.readSync(a.real.dataId),d=this.readSync(a.imag.dataId);c=mergeRealAndImagArrays$1(o,d)}else c=this.getValuesFromTexture(e);return h&&(this.downloadWaitMs+=now$1()-f),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const m=this.pendingRead.get(e);return new Promise(g=>m.push(g))}const t=this.texData.get(e),{values:r,shape:s,slice:a,dtype:i,complexTensorInfos:l,isPacked:u}=t;if(a!=null){let m;u?m=new UnaryOpPackedProgram(s,CLONE):m=new UnaryOpProgram$1(s,CLONE);const g=this.runWebGLProgram(m,[{dataId:e,shape:s,dtype:i}],i),y=this.read(g.dataId);return this.disposeIntermediateTensorInfo(g),y}if(r!=null)return this.convertAndCacheOnCPU(e);if(env$1().getBool("DEBUG")&&!env$1().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&env$1().getNumber("WEBGL_VERSION")===2)throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let h=null,f;if(i!=="complex64"&&env$1().get("WEBGL_BUFFER_SUPPORTED")){f=this.decode(e);const m=this.texData.get(f.dataId);h=this.gpgpu.createBufferFromTexture(m.texture.texture,...getDenseTexShape(s))}this.pendingRead.set(e,[]),i!=="complex64"&&await this.gpgpu.createAndWaitForFence();let c;if(i==="complex64"){const m=await Promise.all([this.read(l.real.dataId),this.read(l.imag.dataId)]),g=m[0],y=m[1];c=mergeRealAndImagArrays$1(g,y)}else if(h==null)c=this.getValuesFromTexture(e);else{const m=sizeFromShape$1(s);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,m)}if(f!=null&&this.disposeIntermediateTensorInfo(f),h!=null){const m=this.gpgpu.gl;callAndCheck(m,()=>m.deleteBuffer(h))}const o=this.convertAndCacheOnCPU(e,c),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach(m=>m(o)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&engine$1().removeDataId(e,this),this.pendingDeletes--),o}readToGPU(e,t={}){const r=this.texData.get(e),{values:s,shape:a,slice:i,dtype:l,isPacked:u,texture:h}=r;if(l==="complex64")throw new Error("Does not support reading texture for complex64 dtype.");if(i!=null){let d;u?d=new UnaryOpPackedProgram(a,CLONE):d=new UnaryOpProgram$1(a,CLONE);const m=this.runWebGLProgram(d,[{dataId:e,shape:a,dtype:l}],l),g=this.readToGPU(m,t);return this.disposeIntermediateTensorInfo(m),g}if(h==null)throw s!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const f=this.decode(e,t.customTexShape),c=engine$1().makeTensorFromTensorInfo(f),o=this.texData.get(f.dataId);return Object.assign({tensorRef:c},o.texture)}bufferSync(e){const t=this.readSync(e.dataId);if(e.dtype==="string")try{const r=t.map(s=>decodeString$1(s));return buffer$1(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return buffer$1(e.shape,e.dtype,t)}checkNumericalProblems(e){if(e!=null)for(let t=0;t<e.length;t++){const r=e[t];if(!canBeRepresented(r))throw env$1().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${r} cannot be represented on this device.`)}}getValuesFromTexture(e){const{shape:t,dtype:r,isPacked:s}=this.texData.get(e),a=sizeFromShape$1(t);if(env$1().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const o=this.decode(e),d=this.texData.get(o.dataId),m=this.gpgpu.downloadMatrixFromPackedTexture(d.texture.texture,...getDenseTexShape(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(o),m}const i=env$1().getBool("WEBGL_PACK")&&s===!0,l=i?getShapeAs3D(t):t,u=i?new EncodeFloatPackedProgram(l):new EncodeFloatProgram(l),h=this.runWebGLProgram(u,[{shape:l,dtype:r,dataId:e}],"float32"),f=this.texData.get(h.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(f.texture.texture,f.texShape[0],f.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(h),c}timerAvailable(){return env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,r=[];let s=!1;this.programTimersStack==null?(this.programTimersStack=r,s=!0):this.activeTimers.push(r),this.activeTimers=r,e();const a=flatten$2(this.activeTimers.map(u=>u.query)).filter(u=>u!=null),i=flatten$2(this.activeTimers.map(u=>u.name)).filter(u=>u!=null);this.activeTimers=t,s&&(this.programTimersStack=null);const l={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const u=await Promise.all(a);l.kernelMs=sum$5(u),l.getExtraProfileInfo=()=>u.map((h,f)=>({name:i[f],ms:h})).map(h=>`${h.name}: ${h.ms}`).join(", ")}else l.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,l})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:now$1(),endMs:null}}endTimer(e){return env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=now$1(),e)}async getQueryTime(e){if(env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:r}=this.texData.get(e);return r!=null&&(this.disposeData(r.real.dataId,t),this.disposeData(r.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:r,texShape:s,usage:a,isPacked:i,slice:l}=this.texData.get(e),u=l&&l.origDataId||e,h=this.dataRefCount.get(u);h>1?this.dataRefCount.set(u,h-1):(this.dataRefCount.delete(u),t!=null&&(this.numBytesInGPU-=this.computeBytes(s,r),this.textureManager.releaseTexture(t,s,a,i)));const f=this.texData.get(e);f.texture=null,f.texShape=null,f.isPacked=!1,f.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=CPU_HANDOFF_SIZE_THRESHOLD$1){return env$1().getBool("WEBGL_CPU_FORWARD")&&e.every(r=>this.texData.get(r.dataId).texture==null&&sizeFromShape$1(r.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){warn$1("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return whereImpl(e.shape,t)}packedUnaryOp(e,t,r){const s=new UnaryOpPackedProgram(e.shape,t),a=this.compileAndRun(s,[e],r);return engine$1().makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&e.dtype!=="complex64"){const s=simpleAbsImplCPU$1(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,s)}if(env$1().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,ABS$2,e.dtype);const t=new UnaryOpProgram$1(e.shape,ABS$2),r=this.compileAndRun(t,[e]);return engine$1().makeTensorFromTensorInfo(r)}makeTensorInfo(e,t,r){let s;if(t==="string"&&r!=null&&r.length>0&&isString$1(r[0])){const a=r.map(i=>encodeString$1(i));s=this.write(a,e,t)}else s=this.write(r,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,r){return engine$1().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,r),this)}unpackTensor(e){const t=new UnpackProgram(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new PackProgram(e.shape),r=!0;return this.runWebGLProgram(t,[e],e.dtype,null,r)}packedReshape(e,t){const r=[getBatchDim(e.shape),...getRowsCols(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[getBatchDim(t),...getRowsCols(t)],i=new ReshapePackedProgram(a,r),l=!0,u=[r],h=this.runWebGLProgram(i,[s],e.dtype,u,l);return{dataId:h.dataId,shape:t,dtype:h.dtype}}decode(e,t){const r=this.texData.get(e),{isPacked:s,shape:a,dtype:i}=r;if(t!=null){const o=sizeFromShape$1(a),d=t[0]*t[1]*4;assert$2(o<=d,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}const l=getShapeAs3D(a);let u;s?u=new DecodeMatrixPackedProgram(l):u=new DecodeMatrixProgram(l);const h=!0,f=[t??getDenseTexShape(l)],c=this.runWebGLProgram(u,[{shape:l,dtype:i,dataId:e}],i,f,h,t);return{dtype:i,shape:a,dataId:c.dataId}}runWebGLProgram(e,t,r,s,a=!1,i){const l=this.makeTensorInfo(e.outputShape,r),u=this.texData.get(l.dataId);if(e.packedOutput&&(u.isPacked=!0),e.outPackingScheme===PackingScheme.DENSE){const $=i??getDenseTexShape(e.outputShape);u.texShape=$.map(b=>b*2)}if(e.outTexUsage!=null&&(u.usage=e.outTexUsage),sizeFromShape$1(l.shape)===0)return u.values=getTypedArrayFromDType$1(l.dtype,0),l;const h=[],f=t.map($=>{if($.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get($.dataId);if(b.texture==null){if(!e.packedInputs&&sizeFromShape$1($.shape)<=env$1().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:$.shape,texData:null,isUniform:!0,uniformValues:b.values};e.packedInputs&&(b.isPacked=!0,b.shape=$.shape)}if(this.uploadToGPU($.dataId),!!b.isPacked!=!!e.packedInputs)$=b.isPacked?this.unpackTensor($):this.packTensor($),h.push($),b=this.texData.get($.dataId);else if(b.isPacked&&!isReshapeFree(b.shape,$.shape)){const x=$,w=$.shape;$.shape=b.shape,$=this.packedReshape($,w),h.push($),b=this.texData.get($.dataId),x.shape=w}return{shape:$.shape,texData:b,isUniform:!1}});this.uploadToGPU(l.dataId);const c={shape:l.shape,texData:u,isUniform:!1},o=makeShaderKey$1(e,f,c),d=this.getAndSaveBinary(o,()=>compileProgram$1(this.gpgpu,e,f,c)),m=this.activeTimers!=null;let g;m&&(g=this.startTimer()),env$1().get("ENGINE_COMPILE_ONLY")||runProgram(this.gpgpu,d,f,c,s),h.forEach($=>this.disposeIntermediateTensorInfo($)),m&&(g=this.endTimer(g),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(g)}));const y=env$1().getNumber("WEBGL_FLUSH_THRESHOLD");if(y>0){const $=now$1();$-this.lastGlFlushTime>y&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=$)}if(!env$1().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&a===!1){const $=this.unpackTensor(l);return this.disposeIntermediateTensorInfo(l),$}return l}compileAndRun(e,t,r,s,a=!1){return r=r||t[0].dtype,this.runWebGLProgram(e,t,r,s,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(env$1().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]}),this.textureManager.dispose(),this.canvas!=null&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return this.floatPrecisionValue==null&&(this.floatPrecisionValue=tidy$1(()=>{if(!env$1().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=env$1().getBool("DEBUG");env$1().set("DEBUG",!1);const t=this.abs(scalar$1(1e-8)).dataSync()[0];if(env$1().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return this.floatPrecision()===32?EPSILON_FLOAT32$1:EPSILON_FLOAT16$1}uploadToGPU(e){const t=this.texData.get(e),{shape:r,dtype:s,values:a,texture:i,usage:l,isPacked:u}=t;if(i!=null)return;const h=this.activeTimers!=null;let f;h&&(f=now$1());let c=t.texShape;if(c==null&&(c=getTextureShapeFromLogicalShape(r,u),t.texShape=c),a!=null){const o=getShapeAs3D(r);let d,m=c[1],g=c[0];const y=a instanceof Uint8Array||a instanceof Uint8ClampedArray;(u||!y)&&([m,g]=getPackedMatrixTextureShapeWidthHeight(c[0],c[1])),u?d=new EncodeMatrixPackedProgram(o,y):d=new EncodeMatrixProgram(o,y);const $=y?[g,m]:c,b=this.makeTensorInfo($,s),x=this.texData.get(b.dataId);y?x.usage=TextureUsage.PIXELS:x.usage=TextureUsage.UPLOAD,x.texShape=$,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),m,g,a);const w=[[g,m]],v=!0,S=this.runWebGLProgram(d,[b],s,w,v),T=this.texData.get(S.dataId);t.texShape=T.texShape,t.isPacked=T.isPacked,t.usage=T.usage,env$1().get("ENGINE_COMPILE_ONLY")?this.disposeData(S.dataId):(t.texture=T.texture,t.values=null,this.texData.delete(S.dataId)),this.disposeIntermediateTensorInfo(b),h&&(this.uploadWaitMs+=now$1()-f)}else{const o=this.acquireTexture(c,l,s,u);t.texture=o}}convertAndCacheOnCPU(e,t){const r=this.texData.get(e),{dtype:s}=r;return t!=null&&(r.values=float32ToTypedArray(t,s)),r.values}acquireTexture(e,t,r,s){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>this.numMBBeforeWarning*1024*1024){const a=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${a} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*bytesPerElement$1(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}else{for(const[,t]of Object.entries(this.binaryCache)){const r=new Promise(s=>{try{this.checkCompletion_(t),s(!0)}catch(a){throw a}});e.push(r)}return Promise.all(e)}}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await nextFrame(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)===!1)throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)===!1?(logShaderSourceAndInfoLog(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:t,customUniformLocations:r,infLoc:s,nanLoc:a,outShapeLocation:i,outShapeStridesLocation:l,outTexShapeLocation:u}=getUniformLocations(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=r,e.infLoc=s,e.nanLoc=a,e.outShapeLocation=i,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}createTensorFromGPUData(e,t,r){e.channels=e.channels||"RGBA";const{texture:s,height:a,width:i,channels:l}=e,u=engine$1().backend;if(!u.gpgpu.gl.isTexture(s))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const h=u.writeTexture(s,t,r,a,i,l);return engine$1().makeTensorFromDataId(h,t,r,u)}}MathBackendWebGL.nextDataId=0;function float32ToTypedArray(n,e){if(e==="float32"||e==="complex64")return n;if(e==="int32"||e==="bool"){const t=e==="int32"?new Int32Array(n.length):new Uint8Array(n.length);for(let r=0;r<t.length;++r)t[r]=Math.round(n[r]);return t}else throw new Error(`Unknown dtype ${e}`)}/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */isBrowser$1()&&registerBackend$1("webgl",()=>new MathBackendWebGL,2);/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHECK_NAN_SNIPPET=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;let BinaryOpProgram$1=class{constructor(e,t,r){this.variableNames=["A","B"],this.outputShape=assertAndGetBroadcastShape$1(t,r),this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHECK_NAN_SNIPPET_PACKED=`
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;class BinaryOpPackedProgram{constructor(e,t,r,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=assertAndGetBroadcastShape$1(t,r);const a=this.outputShape.length;this.enableShapeUniforms=useShapeUniforms(a);let i="";if(s)if(a===0||sizeFromShape$1(this.outputShape)===1)i=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else if(i=`
          ${getCoordsDataType$1(a)} coords = getOutputCoords();
        `,a===1)this.enableShapeUniforms?i+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:i+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{const u=getChannels("coords",a);this.enableShapeUniforms?i+=`
            bool nextRowOutOfBounds =
              (${u[a-2]} + 1) >= outShape[${a} - 2];
            bool nextColOutOfBounds =
              (${u[a-1]} + 1) >= outShape[${a} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:i+=`
            bool nextRowOutOfBounds =
              (${u[a-2]} + 1) >= ${this.outputShape[a-2]};
            bool nextColOutOfBounds =
              (${u[a-1]} + 1) >= ${this.outputShape[a-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function identity$1(n){const{inputs:e,backend:t}=n,{x:r}=e;return t.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const identityConfig$1={kernelName:Identity$2,backendName:"webgl",kernelFunc:identity$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function complex$2(n){const{inputs:e,backend:t}=n,{real:r,imag:s}=e,a=t.makeTensorInfo(r.shape,"complex64"),i=t.texData.get(a.dataId),l=identity$1({inputs:{x:r},backend:t}),u=identity$1({inputs:{x:s},backend:t});return i.complexTensorInfos={real:l,imag:u},a}const complexConfig$1={kernelName:Complex$1,backendName:"webgl",kernelFunc:complex$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LEAKYRELU$1="return (a < 0.) ? b * a : a;",LEAKYRELU_PACKED=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function leakyRelu$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{alpha:a}=r,i=t.makeTensorInfo([],"float32",createScalarValue$1(a,"float32")),l=env$1().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BinaryOpPackedProgram(LEAKYRELU_PACKED,s.shape,i.shape):new BinaryOpProgram$1(LEAKYRELU$1,s.shape,i.shape),u=t.runWebGLProgram(l,[s,i],"float32");return t.disposeIntermediateTensorInfo(i),u}const leakyReluConfig$1={kernelName:LeakyRelu$1,backendName:"webgl",kernelFunc:leakyRelu$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PRELU$1="return (a < 0.) ? b * a : a;",PRELU_PACKED=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function prelu$1(n){const{inputs:e,backend:t}=n,{x:r,alpha:s}=e,a=env$1().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BinaryOpPackedProgram(PRELU_PACKED,r.shape,s.shape):new BinaryOpProgram$1(PRELU$1,r.shape,s.shape);return t.runWebGLProgram(a,[r,s],"float32")}const preluConfig$1={kernelName:Prelu$1,backendName:"webgl",kernelFunc:prelu$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHECK_NAN_SNIPPET_UNARY="if (isnan(x)) return x;";function unaryKernelFunc$1({opSnippet:n,packedOpSnippet:e,cpuKernelImpl:t,dtype:r}){return({inputs:s,backend:a})=>{const{x:i}=s,l=a,u=r||i.dtype;if(l.shouldExecuteOnCPU([i])&&t!=null){const c=l.texData.get(i.dataId),o=t(c.values,u);return l.makeTensorInfo(i.shape,u,o)}const h=env$1().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&e!=null;let f;return h?f=new UnaryOpPackedProgram(i.shape,e):f=new UnaryOpProgram$1(i.shape,n),l.runWebGLProgram(f,[i],u)}}function binaryKernelFunc$1({opSnippet:n,packedOpSnippet:e,checkOutOfBounds:t=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:i,backend:l})=>{const{a:u,b:h}=i,f=l;if(r&&u.dtype==="complex64"){const m=f.texData.get(u.dataId),g=f.texData.get(h.dataId),[y,$]=[[m.complexTensorInfos.real,g.complexTensorInfos.real],[m.complexTensorInfos.imag,g.complexTensorInfos.imag]].map(x=>{const[w,v]=x,S={dataId:w.dataId,dtype:w.dtype,shape:u.shape},T={dataId:v.dataId,dtype:v.dtype,shape:h.shape},C=new BinaryOpProgram$1(n,u.shape,h.shape);return f.runWebGLProgram(C,[S,T],upcastType$1(w.dtype,v.dtype))}),b=complex$2({inputs:{real:y,imag:$},backend:f});return f.disposeIntermediateTensorInfo(y),f.disposeIntermediateTensorInfo($),b}const c=a||upcastType$1(u.dtype,h.dtype);if((u.dtype==="string"||h.dtype==="string"||f.shouldExecuteOnCPU([u,h]))&&s!=null){const m=f.texData.get(u.dataId).values,g=f.texData.get(h.dataId).values,y=u.dtype==="string"?fromUint8ToStringArray$1(m):m,$=u.dtype==="string"?fromUint8ToStringArray$1(g):g,[b,x]=s(u.shape,h.shape,y,$,c),w=f.makeTensorInfo(x,c),v=f.texData.get(w.dataId);return v.values=b,w}const o=env$1().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&e!=null;let d;return o?d=new BinaryOpPackedProgram(e,u.shape,h.shape,t):d=new BinaryOpProgram$1(n,u.shape,h.shape),f.runWebGLProgram(d,[u,h],c)}}function mapActivationToShaderProgram(n,e=!1){if(n==="linear")return e?LINEAR$1:LINEAR$2;if(n==="relu")return e?RELU$2:RELU$3;if(n==="elu")return e?ELU$2:ELU$3;if(n==="relu6")return e?RELU6$2:RELU6$3;if(n==="prelu")return e?PRELU_PACKED:PRELU$1;if(n==="leakyrelu")return e?LEAKYRELU_PACKED:LEAKYRELU$1;if(n==="sigmoid")return e?SIGMOID$2:SIGMOID$3;throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let MatMulPackedProgram$1=class{constructor(e,t,r,s=!1,a=!1,i=!1,l=null,u=!1,h=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=r,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const f=s?e[1]:e[2],c=Math.ceil(f/2),o=s?"i * 2, rc.y":"rc.y, i * 2",d=a?"rc.z, i * 2":"i * 2, rc.z",m=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],g=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let y="",$="";l&&(u?y=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${l}
        }`:h?y=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${l}
        }`:y=`vec4 activation(vec4 x) {
          ${l}
        }`,$="result = activation(result);");const b=i?"result += getBiasAtOutCoords();":"";i&&this.variableNames.push("bias"),u&&this.variableNames.push("preluActivationWeights"),h&&this.variableNames.push("leakyreluAlpha");let x="rc.x",w="rc.x";e[0]<t[0]?x=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(w=`imod(rc.x, ${t[0]})`),this.userCode=`
      ${y}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${c}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${x};
        int batchB = ${w};
        for (int i = 0; i < ${c}; i++) {
          vec4 a = getMatrixA(batchA, ${o});
          vec4 b = getMatrixB(batchB, ${d});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${m[0]} * ${g[0]});
          result += (${m[1]} * ${g[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${$}

        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const COMPLEX_MULTIPLY={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};let BinaryOpComplexProgram$1=class{constructor(e,t,r){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=assertAndGetBroadcastShape$1(t,r),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MUL$1="return a * b;";function multiply(n){const{inputs:e,backend:t}=n,{a:r,b:s}=e,a=upcastType$1(r.dtype,s.dtype);if(r.dtype==="complex64"){const l=t.texData.get(r.dataId),u=t.texData.get(s.dataId),h=new BinaryOpComplexProgram$1(COMPLEX_MULTIPLY.REAL,r.shape,s.shape),f=new BinaryOpComplexProgram$1(COMPLEX_MULTIPLY.IMAG,r.shape,s.shape),c=[{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:r.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:u.complexTensorInfos.real.dataId,dtype:u.complexTensorInfos.real.dtype,shape:s.shape},{dataId:u.complexTensorInfos.imag.dataId,dtype:u.complexTensorInfos.imag.dtype,shape:s.shape}],o=t.runWebGLProgram(h,c,"float32"),d=t.runWebGLProgram(f,c,"float32"),m=complex$2({inputs:{real:o,imag:d},backend:t});return t.disposeIntermediateTensorInfo(o),t.disposeIntermediateTensorInfo(d),m}if(t.shouldExecuteOnCPU([r,s])){const l=t.texData.get(r.dataId),u=t.texData.get(s.dataId),[h,f]=multiplyImplCPU$1(r.shape,s.shape,l.values,u.values,a),c=t.makeTensorInfo(f,a),o=t.texData.get(c.dataId);return o.values=h,c}let i;return env$1().getBool("WEBGL_PACK_BINARY_OPERATIONS")?i=new BinaryOpPackedProgram(MUL$1,r.shape,s.shape):i=new BinaryOpProgram$1(MUL$1,r.shape,s.shape),t.runWebGLProgram(i,[r,s],a)}const multiplyConfig$1={kernelName:Multiply$2,backendName:"webgl",kernelFunc:multiply};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function packedReshape(n,e,t){const r=[getBatchDim(n.shape),...getRowsCols(n.shape)],s={dtype:n.dtype,shape:r,dataId:n.dataId},a=[getBatchDim(e),...getRowsCols(e)],i=new ReshapePackedProgram(a,r),l=!0,u=[r],h=t.runWebGLProgram(i,[s],n.dtype,u,l);return{dataId:h.dataId,shape:e,dtype:h.dtype}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reshape$3(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{shape:a}=r,i=t,l=sizeFromShape$1(s.shape),u=inferFromImplicitShape$1(a,l),h=sizeFromShape$1(u);assert$2(l===h,()=>`The new shape (${u}) has ${h} elements and the old shape (${s.shape}) has ${l} elements. The new shape and old shape must have the same number of elements.`);const f=i.texData.get(s.dataId);return f.isPacked&&!isReshapeFree(s.shape,u)&&!(f.texture!==null&&isReshapeFree(f.shape,u))?packedReshape(s,u,i):(i.incRef(s.dataId),{dataId:s.dataId,shape:u,dtype:s.dtype})}const reshapeConfig$1={kernelName:Reshape$2,backendName:"webgl",kernelFunc:reshape$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MeanProgram{constructor(e,t){this.variableNames=["x"];const{windowSize:r,batchSize:s,inSize:a,outSize:i}=e;this.outputShape=[s,i];const l=Math.floor(r/4)*4,u=r%4;let h="sumValue += dot(values, ones);";if(t!=null){const c=1/t;h=`sumValue += dot(values * ${isInt$1(c)?c.toPrecision(2):c}, ones);`}let f="";a%r>0&&(f=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        float sumValue = 0.0;

        for (int i = 0; i < ${l}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${h}
        }

        int inIdx = inOffset + ${l};
        if (${u===1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${h}
        } else if (${u===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${h}
        } else if (${u===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${h}
        }
        setOutput(sumValue);
      }
    `}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ReduceProgram$1=class{constructor(e,t){this.variableNames=["x"];const{windowSize:r,batchSize:s,inSize:a,outSize:i}=e;this.outputShape=[s,i];let l="0.0",u="";t==="prod"?l="1.0":t==="min"?(l="1.0 / 1e-20",u="min"):t==="max"&&(l="-1.0 / 1e-20",u="max");let h=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="sum"?h="sumValue":t==="prod"?h="prodValue":t==="all"?h="allValue":t==="any"&&(h="anyValue");const f=Math.floor(r/4)*4,c=r%4;let o=`
      if (${t==="sum"}) {
        sumValue += dot(values, ones);
      } else if (${t==="prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${u}(values, minMaxValue);
        if (${t==="min"} || ${t==="max"}) {
          minMaxValue = ${u}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,d="vec4";t==="all"?(l="1.0",o=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,d="bvec4"):t==="any"&&(l="0.0",o=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,d="bvec4");let m="";a%r>0&&(m=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${l};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${m}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        vec4 minMaxValue = vec4(${l});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${f}; i += 4) {
          int inIdx = inOffset + i;
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${o}
        }

        int inIdx = inOffset + ${f};
        if (${c===1}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${o}
        } else if (${c===2}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${o}
        } else if (${c===3}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${o}
        }
        setOutput(${h});
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getReductionStages(n){const e=[];for(;e.length===0||e[e.length-1].outSize!==1;){const t=e.length?e[e.length-1].outSize:n[1],r=computeOptimalWindowSize(t);e.push({inSize:t,windowSize:r,outSize:Math.ceil(t/r)})}return e}function reduce$1(n,e,t,r){const s=getReductionStages(n.shape);let a=n;for(let i=0;i<s.length;i++){const{inSize:l,windowSize:u,outSize:h}=s[i];let f,c;t==="mean"?f=i===0?new MeanProgram({windowSize:u,inSize:l,batchSize:n.shape[0],outSize:h},l):new MeanProgram({windowSize:u,inSize:l,batchSize:n.shape[0],outSize:h}):f=new ReduceProgram$1({windowSize:u,inSize:l,batchSize:n.shape[0],outSize:h},t),c=a,a=r.runWebGLProgram(f,[a],e),c.dataId!==n.dataId&&r.disposeIntermediateTensorInfo(c)}return a}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let TransposeProgram$1=class{constructor(e,t){this.variableNames=["A"];const r=new Array(e.length);for(let i=0;i<r.length;i++)r[i]=e[t[i]];this.outputShape=r,this.rank=r.length;const s=getCoordsDataType$1(this.rank),a=getSwitchedCoords$1(t);this.userCode=`
    void main() {
      ${s} resRC = getOutputCoords();
      setOutput(getA(${a}));
    }
    `}};function getSwitchedCoords$1(n){const e=n.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const t=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let s=0;s<n.length;s++)r[n[s]]=t[s];return r.join()}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TransposePackedProgram{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const r=new Array(e.length);for(let f=0;f<r.length;f++)r[f]=e[t[f]];if(this.outputShape=r,this.rank=r.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=getCoordsDataType$1(this.rank),a=getVecChannels("rc",this.rank),i=new Array(this.rank);for(let f=0;f<t.length;f++)i[t[f]]=a[f];const l=`vec2(${i.slice(-2).join()})`,u=`++${a[this.rank-1]} < ${r[this.rank-1]}`,h=`getChannel(getA(${i.join()}), ${l})`;this.userCode=`
    void main() {
      ${s} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${h};
      if(${u}) {
        result[1] = ${h};
      }
      --${a[this.rank-1]};
      if(++${a[this.rank-2]} < ${r[this.rank-2]}) {
        result[2] = ${h};
        if(${u}) {
          result[3] = ${h};
        }
      }
      setOutput(result);
    }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transposeImpl$1(n,e,t){const r=env$1().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new TransposePackedProgram(n.shape,e):new TransposeProgram$1(n.shape,e);return t.runWebGLProgram(r,[n],n.dtype)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sumImpl(n,e,t,r){const s=e,a=n.shape.length,i=parseAxisParam$1(s,n.shape);let l=i;const u=getAxesPermutation$1(l,a),h=u!=null;let f=n;h&&(f=transposeImpl$1(n,u,r),l=getInnerMostAxes$1(l.length,a)),assertAxesAreInnerMostDims$1("sum",l,a);const[c,o]=computeOutAndReduceShapes$1(f.shape,l);let d=c;t&&(d=expandShapeToKeepDim$1(c,i));const m=sizeFromShape$1(o),y=sizeFromShape$1(n.shape)/m,$=reshape$3({inputs:{x:f},attrs:{shape:[y,m]},backend:r}),b=sumOutType$1(n.dtype),x=reduce$1($,b,"sum",r),w=reshape$3({inputs:{x},attrs:{shape:d},backend:r});return r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(x),h&&r.disposeIntermediateTensorInfo(f),w}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sum$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,keepDims:i}=r;return sumImpl(s,a,i,t)}const sumConfig$1={kernelName:Sum$1,backendName:"webgl",kernelFunc:sum$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transpose$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{perm:a}=r,i=t,l=s.shape.length,u=new Array(l);for(let f=0;f<u.length;f++)u[f]=s.shape[a[f]];let h;if(i.shouldExecuteOnCPU([s])){const c=i.texData.get(s.dataId).values,o=transposeImplCPU$1(c,s.shape,s.dtype,a,u);h=i.makeTensorInfo(u,s.dtype);const d=i.texData.get(h.dataId);d.values=o}else h=transposeImpl$1(s,a,i);return h}const transposeConfig$1={kernelName:Transpose$1,backendName:"webgl",kernelFunc:transpose$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MATMUL_SHARED_DIM_THRESHOLD=1e3;function batchMatMulImpl$1({a:n,b:e,transposeA:t,transposeB:r,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:l=0,activation:u=null}){const h=n.shape.length,f=e.shape.length,c=t?n.shape[h-2]:n.shape[h-1],o=r?e.shape[f-1]:e.shape[f-2],d=t?n.shape[h-1]:n.shape[h-2],m=r?e.shape[f-2]:e.shape[f-1],g=n.shape.slice(0,-2),y=e.shape.slice(0,-2),$=sizeFromShape$1(g),b=sizeFromShape$1(y),w=assertAndGetBroadcastShape$1(n.shape.slice(0,-2),e.shape.slice(0,-2)).concat([d,m]);assert$2(c===o,()=>`Error in matMul: inner shapes (${c}) and (${o}) of Tensors with shapes ${n.shape} and ${e.shape} and transposeA=${t} and transposeB=${r} must match.`);const v=t?[$,c,d]:[$,d,c],S=r?[b,m,o]:[b,o,m],T=reshape$3({inputs:{x:n},backend:s,attrs:{shape:v}}),C=reshape$3({inputs:{x:e},backend:s,attrs:{shape:S}}),I=[T,C],N=Math.max($,b),P=t?T.shape[1]:T.shape[2],F=a!=null,_=i!=null,D=u==="leakyrelu",E=u!=null?mapActivationToShaderProgram(u,!0):null,k=F||_||D||E!=null;let O;if((d===1||m===1)&&P>MATMUL_SHARED_DIM_THRESHOLD&&k===!1){let z=T,G=C;t&&(z=transpose$1({inputs:{x:T},backend:s,attrs:{perm:[0,2,1]}}),I.push(z)),r&&(G=transpose$1({inputs:{x:C},backend:s,attrs:{perm:[0,2,1]}}),I.push(G));const j=m!==1,K=m===1;let X=z;j&&(X=reshape$3({inputs:{x:z},backend:s,attrs:{shape:[N,P,1]}}),I.push(X));const Y=m===1?2:1;let J=G;K&&(J=reshape$3({inputs:{x:G},backend:s,attrs:{shape:[N,1,P]}}),I.push(J));const te=multiply({inputs:{a:X,b:J},backend:s});O=sum$2({inputs:{x:te},backend:s,attrs:{axis:Y,keepDims:!0}}),I.push(te)}else{const z=upcastType$1(n.dtype,e.dtype),G=new MatMulPackedProgram$1(v,S,[N,d,m],t,r,F,E,_,D),j=[T,C];if(a!=null&&j.push(a),_&&j.push(i),D){const K=s.makeTensorInfo([],"float32",createScalarValue$1(l,"float32"));j.push(K),I.push(K)}O=s.runWebGLProgram(G,j,z)}const M=reshape$3({inputs:{x:O},backend:s,attrs:{shape:w}});I.push(O);for(const z of I)s.disposeIntermediateTensorInfo(z);return M}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function _fusedMatMul$1(n){const{inputs:e,backend:t,attrs:r}=n,{a:s,b:a,bias:i,preluActivationWeights:l}=e,{transposeA:u,transposeB:h,activation:f,leakyreluAlpha:c}=r;return batchMatMulImpl$1({a:s,b:a,transposeA:u,transposeB:h,backend:t,bias:i,preluActivationWeights:l,leakyreluAlpha:c,activation:f})}const _fusedMatMulConfig$1={kernelName:_FusedMatMul$1,backendName:"webgl",kernelFunc:_fusedMatMul$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ABS$1="return abs(x);";function abs$2(n){const{inputs:e,backend:t}=n,{x:r}=e;if(t.shouldExecuteOnCPU([r])&&r.dtype!=="complex64"){const a=t.texData.get(r.dataId),i=simpleAbsImplCPU$1(a.values);return t.makeTensorInfo(r.shape,r.dtype,i)}let s;return env$1().getBool("WEBGL_PACK_UNARY_OPERATIONS")?s=new UnaryOpPackedProgram(r.shape,ABS$1):s=new UnaryOpProgram$1(r.shape,ABS$1),t.runWebGLProgram(s,[r],r.dtype)}const absConfig$1={kernelName:Abs$1,backendName:"webgl",kernelFunc:abs$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ACOS$1=CHECK_NAN_SNIPPET$1+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,acos$1=unaryKernelFunc$1({opSnippet:ACOS$1}),acosConfig$1={kernelName:Acos$1,backendName:"webgl",kernelFunc:acos$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ACOSH$1=CHECK_NAN_SNIPPET$1+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,acosh$1=unaryKernelFunc$1({opSnippet:ACOSH$1}),acoshConfig$1={kernelName:Acosh$1,backendName:"webgl",kernelFunc:acosh$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ADD$1="return a + b;",addKernelFunc$1=binaryKernelFunc$1({opSnippet:ADD$1,packedOpSnippet:ADD$1,supportsComplex:!0,cpuKernelImpl:addImplCPU$1}),addConfig$1={kernelName:Add$2,backendName:"webgl",kernelFunc:addKernelFunc$1};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AddNProgram{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((a,i)=>`T${i}`);const r=[];this.variableNames.forEach(a=>{r.push(`float v${a} = get${a}AtOutCoords();`)});const s=this.variableNames.map(a=>`v${a}`).join(" + ");this.userCode=`
      void main() {
        ${r.join(`
        `)}

        float result = ${s};
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let AddNPackedProgram$1=class{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((a,i)=>`T${i}`);const r=[];this.variableNames.forEach(a=>{r.push(`vec4 v${a} = get${a}AtOutCoords();`)});const s=this.variableNames.map(a=>`v${a}`).join(" + ");this.userCode=`
      void main() {
        ${r.join(`
        `)}

        vec4 result = ${s};
        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function addN$1(n){const{inputs:e,backend:t}=n,r=e;if(r.length===1)return identity$1({inputs:{x:r[0]},backend:t});if(r.length>env$1().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const u=Math.floor(r.length/2),h=addN$1({inputs:r.slice(0,u),backend:t}),f=addN$1({inputs:r.slice(u),backend:t});return addN$1({inputs:[h,f],backend:t})}const s=r.map(u=>u.dtype).reduce((u,h)=>upcastType$1(u,h)),a=r.map(u=>u.shape),l=env$1().getBool("WEBGL_PACK")?new AddNPackedProgram$1(r[0].shape,a):new AddNProgram(r[0].shape,a);return t.runWebGLProgram(l,r,s)}const addNConfig$1={kernelName:AddN$1,backendName:"webgl",kernelFunc:addN$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function all$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,keepDims:i}=r,l=s.shape.length,u=parseAxisParam$1(a,s.shape);let h=u;const f=getAxesPermutation$1(h,l);let c=s;f!=null&&(c=transpose$1({inputs:{x:s},backend:t,attrs:{perm:f}}),h=getInnerMostAxes$1(h.length,l)),assertAxesAreInnerMostDims$1("all",h,l);const[o,d]=computeOutAndReduceShapes$1(c.shape,h),m=sizeFromShape$1(d),g=reshape$3({inputs:{x:c},backend:t,attrs:{shape:[-1,m]}}),y=reduce$1(g,g.dtype,"all",t);let $;if(i){const b=expandShapeToKeepDim$1(o,u);$=reshape$3({inputs:{x:y},backend:t,attrs:{shape:b}})}else $=reshape$3({inputs:{x:y},backend:t,attrs:{shape:o}});return t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(y),f!=null&&t.disposeIntermediateTensorInfo(c),$}const allConfig$1={kernelName:All$1,backendName:"webgl",kernelFunc:all$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function any$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,keepDims:i}=r,l=s.shape.length,u=parseAxisParam$1(a,s.shape);let h=u;const f=getAxesPermutation$1(h,l);let c=s;f!=null&&(c=transpose$1({inputs:{x:s},backend:t,attrs:{perm:f}}),h=getInnerMostAxes$1(h.length,l)),assertAxesAreInnerMostDims$1("any",h,l);const[o,d]=computeOutAndReduceShapes$1(c.shape,h),m=sizeFromShape$1(d),g=reshape$3({inputs:{x:c},backend:t,attrs:{shape:[-1,m]}}),y=reduce$1(g,g.dtype,"any",t);let $;if(i){const b=expandShapeToKeepDim$1(o,u);$=reshape$3({inputs:{x:y},backend:t,attrs:{shape:b}})}else $=reshape$3({inputs:{x:y},backend:t,attrs:{shape:o}});return t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(y),f!=null&&t.disposeIntermediateTensorInfo(c),$}const anyConfig$1={kernelName:Any$1,backendName:"webgl",kernelFunc:any$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ArgMinMaxProgram$1=class{constructor(e,t,r){this.variableNames=["A"];const{windowSize:s,batchSize:a,outSize:i}=e;r||this.variableNames.push("bestIndicesA"),this.outputShape=[a,i];const l=t==="max"?">":"<",u=r?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${s}; i++) {
          int inIdx = ${u};
          float candidate = getA(batch, inIdx);
          if (candidate ${l} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ArgMinMaxPackedProgram{constructor(e,t,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,assert$2(e.length>2,()=>`Packed arg${r.charAt(0).toUpperCase()+r.slice(1)} supports only inputs with rank above 2.`);const a=e[e.length-1],i=Math.ceil(a/t);this.outputShape=e.slice(0,-1),i>1&&this.outputShape.push(i),s||this.variableNames.push("bestIndicesA");const l=this.outputShape,u=l.length,h=getCoordsDataType$1(u),f=getChannels("coords",u);let c,o;if(i===1){o=u+1;const C=getCoordsDataType$1(o);c=`
        ${C} sourceLocR = ${C}(${f.join()}, 0);
        ++${f[u-1]};
        ${C} sourceLocG = ${C}(${f.join()}, 0);
        ++${f[u-2]};
        ${C} sourceLocA = ${C}(${f.join()}, 0);
        --${f[u-1]};
        ${C} sourceLocB = ${C}(${f.join()}, 0);
        --${f[u-2]};`}else o=u,c=`
        ${h} sourceLocR = coords;
        ++${f[u-1]};
        ${h} sourceLocG = coords;
        ++${f[u-2]};
        ${h} sourceLocA = coords;
        --${f[u-1]};
        ${h} sourceLocB = coords;
        --${f[u-2]};`;const d=["x","y","z","w","u","v"].slice(0,o),m="."+d[o-1],g=d.map(C=>"int "+C),y=getChannels("sourceLocR",o-1).concat("inIdx.r"),$=getChannels("sourceLocG",o-1).concat("inIdx.g"),b=getChannels("sourceLocB",o-1).concat("inIdx.b"),x=getChannels("sourceLocA",o-1).concat("inIdx.a"),w=r==="max"?"greaterThan":"lessThan",v=s?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${y.join()}),
                             getBestIndicesAChannel(${$.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${x.join()})));`,S=`vec4(
            getAChannel(${y.join()}),
            hasNextCol ? getAChannel(${$.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,T=s?"":`
      float getBestIndicesAChannel(${g.join()}) {
        return getChannel(getBestIndicesA(${d.join()}),
                                          vec2(${d.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${g.join()}) {
        return getChannel(getA(${d.join()}),
                               vec2(${d.slice(-2).join()}));
      }
      ${T}
      void main() {
        ${h} coords = getOutputCoords();
        bool hasNextCol = ${f[u-1]} < ${l[u-1]-1};
        bool hasNextRow = ${f[u-2]} < ${l[u-2]-1};
        ${c}
        ivec4 srcIdx = ivec4(sourceLocR${m}, sourceLocG${m},
          sourceLocB${m}, sourceLocA${m}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${S};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${v}
          vec4 candidate = ${S};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argReduce(n,e,t,r=null){let s=e.shape[0],a=e.shape[1];r!=null&&(s=r.shape[0],a=r.shape[1]);const i=computeOptimalWindowSize(a),l={windowSize:i,inSize:a,batchSize:s,outSize:Math.ceil(a/i)},u=new ArgMinMaxProgram$1(l,t,r==null),h=[e];r!=null&&h.push(r);const f=n.runWebGLProgram(u,h,"int32");if(f.shape[1]===1)return f;const c=argReduce(n,e,t,f);return n.disposeIntermediateTensorInfo(f),c}function argReducePacked(n,e,t,r=null){const s=r!=null?r.shape:e.shape,a=s[s.length-1],i=computeOptimalWindowSize(a),l=new ArgMinMaxPackedProgram(s,i,t,r==null),u=r==null?[e]:[e,r],h=n.runWebGLProgram(l,u,"int32");if(h.shape.length===e.shape.length){const f=argReducePacked(n,e,t,h);return n.disposeIntermediateTensorInfo(h),f}return h}function argMinMaxReduce(n,e,t,r){const s=[t];if(assertAxesAreInnerMostDims$1("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,e.shape.length),!env$1().getBool("WEBGL_PACK_REDUCE")||e.shape.length<=2){const a=[],i=n.texData.get(e.dataId),l=i!==null&&i.isPacked;let u=e;l&&(u=n.unpackTensor(e),a.push(u));const[h,f]=computeOutAndReduceShapes$1(u.shape,s),c=sizeFromShape$1(f),o=reshape$3({inputs:{x:u},backend:n,attrs:{shape:[-1,c]}});a.push(o);const d=argReduce(n,o,r);a.push(d);const m=reshape$3({inputs:{x:d},backend:n,attrs:{shape:h}});return a.forEach(g=>n.disposeIntermediateTensorInfo(g)),m}return argReducePacked(n,e,r)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMax$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a}=r;let i=parseAxisParam$1(a,s.shape);const l=getAxesPermutation$1(i,s.shape.length);let u=s;const h=[];l!=null&&(u=transpose$1({inputs:{x:s},backend:t,attrs:{perm:l}}),h.push(u),i=getInnerMostAxes$1(i.length,u.shape.length)),assertAxesAreInnerMostDims$1("argMax",[i[0]],u.shape.length);const f=argMinMaxReduce(t,u,i[0],"max");return h.forEach(c=>t.disposeIntermediateTensorInfo(c)),f}const argMaxConfig$1={kernelName:ArgMax$1,backendName:"webgl",kernelFunc:argMax$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMin$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a}=r;let i=parseAxisParam$1(a,s.shape);const l=getAxesPermutation$1(i,s.shape.length);let u=s;const h=[];l!=null&&(u=transpose$1({inputs:{x:s},backend:t,attrs:{perm:l}}),h.push(u),i=getInnerMostAxes$1(i.length,u.shape.length)),assertAxesAreInnerMostDims$1("argMin",[i[0]],u.shape.length);const f=argMinMaxReduce(t,u,i[0],"min");return h.forEach(c=>t.disposeIntermediateTensorInfo(c)),f}const argMinConfig$1={kernelName:ArgMin$1,backendName:"webgl",kernelFunc:argMin$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ASIN$1=CHECK_NAN_SNIPPET$1+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,asin$1=unaryKernelFunc$1({opSnippet:ASIN$1}),asinConfig$1={kernelName:Asin$1,backendName:"webgl",kernelFunc:asin$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ASINH$1=CHECK_NAN_SNIPPET$1+"return log(x + sqrt(x * x + 1.0));",asinh$1=unaryKernelFunc$1({opSnippet:ASINH$1}),asinhConfig$1={kernelName:Asinh$1,backendName:"webgl",kernelFunc:asinh$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ATAN$1=CHECK_NAN_SNIPPET$1+`
  return atan(x);
`,atan$1=unaryKernelFunc$1({opSnippet:ATAN$1}),atanConfig$1={kernelName:Atan$1,backendName:"webgl",kernelFunc:atan$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ATAN2$1=CHECK_NAN_SNIPPET+`
  return atan(a, b);
`,ATAN2_PACKED=`
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,atan2$1=binaryKernelFunc$1({opSnippet:ATAN2$1,packedOpSnippet:ATAN2_PACKED}),atan2Config$1={kernelName:Atan2$1,backendName:"webgl",kernelFunc:atan2$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ATANH$1=CHECK_NAN_SNIPPET$1+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,atanh$1=unaryKernelFunc$1({opSnippet:ATANH$1}),atanhConfig$1={kernelName:Atanh$1,backendName:"webgl",kernelFunc:atanh$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let Pool2DProgram$1=class{constructor(e,t,r,s=!1,a=!1){if(this.variableNames=["x"],t==="avg"&&r)throw new Error("Cannot compute positions for average pool.");const i=e.filterWidth,l=e.strideHeight,u=e.strideWidth,h=e.dilationHeight,f=e.dilationWidth,c=e.effectiveFilterHeight,o=e.effectiveFilterWidth,d=e.padInfo.top,m=e.padInfo.left;this.outputShape=e.outShape;const g=t==="avg",y=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,$=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let b="0.0";if(g||(b="-1.0 / 1e-20"),r){const C=">=";this.userCode=`
        const ivec2 strides = ivec2(${l}, ${u});
        const ivec2 pads = ivec2(${d}, ${m});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${c};
              wR += ${h}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${o};
                wC += ${f}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${C} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${s?a?y:$:`wR * ${o} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}const x="max";let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="avg"&&(w="avgValue / max(count, 1.0)");const v=Math.floor(i/4)*4,S=i%4,T=`
      if (${g}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${x}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${l}, ${u});
      const ivec2 pads = ivec2(${d}, ${m});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${c};
            wR += ${h}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${v}; wC += 4) {
            int xC = xCCorner + wC * ${f};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${f}, d),
              getValue(batch, xR, xC + 2 * ${f}, d),
              getValue(batch, xR, xC + 3 * ${f}, d)
            );

            ${T}
          }

          int xC = xCCorner + ${v};
          if (${S===1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${T}
          } else if (${S===2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${f}, d),
              initializationValue,
              initializationValue
            );

            ${T}
          } else if (${S===3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${f}, d),
              getValue(batch, xR, xC + 2 * ${f}, d),
              initializationValue
            );

            ${T}
          }
        }
        setOutput(${w});
      }
    `}},Pool3DProgram$1=class{constructor(e,t,r,s=!1,a=!1){if(this.variableNames=["x"],t==="avg"&&r)throw new Error("Cannot compute positions for average pool.");const i=e.filterWidth,l=e.strideDepth,u=e.strideHeight,h=e.strideWidth,f=e.dilationDepth,c=e.dilationHeight,o=e.dilationWidth,d=e.effectiveFilterDepth,m=e.effectiveFilterHeight,g=e.effectiveFilterWidth,y=e.padInfo.front,$=e.padInfo.top,b=e.padInfo.left;this.outputShape=e.outShape;const x=t==="avg";let w="0.0";if(x||(w="-1.0 / 1e-20"),r){const N=">=";this.userCode=`
        const ivec3 strides =
            ivec3(${l}, ${u}, ${h});
        const ivec3 pads = ivec3(${y}, ${$}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${d};
              wD += ${f}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${m};
                wR += ${c}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${g};
                  wC += ${o}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${N} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${s?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${m} * ${g} +
                      wR * ${g} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}const v="max";let S=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="avg"&&(S="avgValue / max(count, 1.0)");const T=Math.floor(i/4)*4,C=i%4,I=`
      if (${x}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${v}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${l}, ${u}, ${h});
      const ivec3 pads = ivec3(${y}, ${$}, ${b});
      const float initializationValue = ${w};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${w});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${d};
            wD += ${f}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${m};
            wR += ${c}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${T}; wC += 4) {
              int xC = xCCorner + wC * ${o};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${o}, ch),
                getValue(batch, xD, xR, xC + 2 * ${o}, ch),
                getValue(batch, xD, xR, xC + 3 * ${o}, ch)
              );

              ${I}
            }

            int xC = xCCorner + ${T};
            if (${C===1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${I}
            } else if (${C===2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${o}, ch),
                initializationValue,
                initializationValue
              );

              ${I}
            } else if (${C===3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${o}, ch),
                getValue(batch, xD, xR, xC + 2 * ${o}, ch),
                initializationValue
              );

              ${I}
            }
          }
        }
        setOutput(${S});
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e;assertNotComplex$1(s,"avgPool");const{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=r,h=1;assert$2(eitherStridesOrDilationsAreOne$1(i,h),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${h}'`);const f=computePool2DInfo$1(s.shape,a,i,h,l,u);if(f.filterWidth===1&&f.filterHeight===1&&arraysEqual$1(f.inShape,f.outShape))return identity$1({inputs:{x:s},backend:t});const c=new Pool2DProgram$1(f,"avg",!1);return t.runWebGLProgram(c,[s],"float32")}const avgPoolConfig$1={kernelName:AvgPool$1,backendName:"webgl",kernelFunc:avgPool$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3D$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{filterSize:a,strides:i,pad:l,dimRoundingMode:u,dataFormat:h}=r,f=[1,1,1],c=computePool3DInfo$1(s.shape,a,i,f,l,u,h),o=new Pool3DProgram$1(c,"avg",!1);return t.runWebGLProgram(o,[s],"float32")}const avgPool3DConfig$1={kernelName:AvgPool3D$1,backendName:"webgl",kernelFunc:avgPool3D$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let AvgPool2DBackpropProgram$1=class{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,r=e.filterWidth,s=e.strideHeight,a=e.strideWidth,i=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=u-1-e.padInfo.top,c=h-1-e.padInfo.left,o=1/(t*r);this.userCode=`
      const ivec2 pads = ivec2(${f}, ${c});
      const float avgMultiplier = float(${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${u};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${h};
            wC+= ${l}) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}},AvgPool3DBackpropProgram$1=class{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,r=e.filterHeight,s=e.filterWidth,a=e.strideDepth,i=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,h=e.dilationHeight,f=e.dilationWidth,c=e.effectiveFilterDepth,o=e.effectiveFilterHeight,d=e.effectiveFilterWidth,m=c-1-e.padInfo.front,g=o-1-e.padInfo.top,y=d-1-e.padInfo.left,$=1/(t*r*s);this.userCode=`
      const ivec3 pads = ivec3(${m}, ${g}, ${y});
      const float avgMultiplier = float(${$});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${c};
            wD += ${u}) {
          float dyD = float(dyDCorner + wD) / ${a}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${o};
              wR += ${h}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${d};
                wC += ${f}) {
              float dyC = float(dyCCorner + wC) / ${l}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3DGrad$1(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:a}=e,i=a,{filterSize:l,strides:u,pad:h,dimRoundingMode:f}=r,c=[1,1,1],o=computePool3DInfo$1(i.shape,l,u,c,h,f),d=new AvgPool3DBackpropProgram$1(o);return t.runWebGLProgram(d,[s],i.dtype)}const avgPool3DGradConfig$1={kernelName:AvgPool3DGrad$1,backendName:"webgl",kernelFunc:avgPool3DGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPoolGrad$1(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:a}=e,i=a;assertNotComplex$1([s,a],"avgPoolGrad");const{filterSize:l,strides:u,pad:h}=r,f=computePool2DInfo$1(i.shape,l,u,1,h),c=new AvgPool2DBackpropProgram$1(f);return t.runWebGLProgram(c,[s],i.dtype)}const avgPoolGradConfig$1={kernelName:AvgPoolGrad$1,backendName:"webgl",kernelFunc:avgPoolGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchMatMul$1(n){const{inputs:e,backend:t,attrs:r}=n,{a:s,b:a}=e,{transposeA:i,transposeB:l}=r;return batchMatMulImpl$1({a:s,b:a,transposeA:i,transposeB:l,backend:t})}const batchMatMulConfig$1={kernelName:BatchMatMul$1,backendName:"webgl",kernelFunc:batchMatMul$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let BatchNormProgram$1=class{constructor(e,t,r,s,a,i){this.outputShape=[],this.variableNames=["x","mean","variance"],assertAndGetBroadcastShape$1(e,t),assertAndGetBroadcastShape$1(e,r);let l="0.0";s!=null&&(assertAndGetBroadcastShape$1(e,s),this.variableNames.push("offset"),l="getOffsetAtOutCoords()");let u="1.0";a!=null&&(assertAndGetBroadcastShape$1(e,a),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${l};
        float scale = ${u};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class BatchNormPackedProgram{constructor(e,t,r,s,a,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],assertAndGetBroadcastShape$1(e,t),assertAndGetBroadcastShape$1(e,r);let l="vec4(0.0)";s!=null&&(assertAndGetBroadcastShape$1(e,s),this.variableNames.push("offset"),l="getOffsetAtOutCoords()");let u="vec4(1.0)";a!=null&&(assertAndGetBroadcastShape$1(e,a),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        vec4 offset = ${l};
        vec4 scale = ${u};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchNorm=({inputs:n,backend:e,attrs:t})=>{const{x:r,mean:s,variance:a,offset:i,scale:l}=n;assert$2(s.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),assert$2(i==null||s.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),assert$2(l==null||s.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:u}=t;u==null&&(u=.001);const h=[r,s,a];let f=null;i!=null&&(f=i.shape,h.push(i));let c=null;l!=null&&(c=l.shape,h.push(l));const o=env$1().getBool("WEBGL_PACK_NORMALIZATION")?new BatchNormPackedProgram(r.shape,s.shape,a.shape,f,c,u):new BatchNormProgram$1(r.shape,s.shape,a.shape,f,c,u);return e.runWebGLProgram(o,h,h[0].dtype)},batchNormConfig={kernelName:FusedBatchNorm$1,backendName:"webgl",kernelFunc:batchNorm};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let SliceProgram$1=class{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=getCoordsDataType$1(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const r=getCoords$3(this.rank);let s;const a=e.map((i,l)=>`sourceLoc.${coords$1[l]} = start[${l}] + coords.${coords$1[l]};`);s=`
        ${t} sourceLoc;
        ${t} coords = getOutputCoords();
        ${a.join(`
`)}
      `,this.userCode=`
      void main() {
        ${s}
        setOutput(getSource(${r}));
      }
    `}};const coords$1=["x","y","z","w","u","v"];function getCoords$3(n){if(n===1)return"sourceLoc";if(n<=6)return coords$1.slice(0,n).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${n} is not yet supported`)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SlicePackedProgram{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=getCoordsDataType$1(this.rank),r=getChannels("coords",this.rank),s=getChannels("sourceLoc",this.rank),a=this.rank===1?"sourceLoc":`vec2(${s.slice(-2).join()})`,i=`getChannel(getSource(${s.join()}), ${a})`,l=`
      result.x = ${i};
      if (++${r[this.rank-1]} < ${e[this.rank-1]}) {
        ++${s[this.rank-1]};
        result.y = ${i};
        --${s[this.rank-1]};
      }
    `,u=this.rank===1?"":`
      --${r[this.rank-1]};
      if (++${r[this.rank-2]} < ${e[this.rank-2]}) {
        ++${s[this.rank-2]};
        result.z = ${i};
        if (++${r[this.rank-1]} < ${e[this.rank-1]}) {
          ++${s[this.rank-1]};
          result.w = ${i};
        }
      }
    `,h=this.rank<=4?`sourceLoc = coords +
            ${t}(${e.map((f,c)=>`start[${c}]`).join()});`:e.map((f,c)=>`${s[c]} = ${r[c]} + start[${c}];`).join(`
`);this.userCode=`
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${h}
        vec4 result = vec4(0.);
        ${l}
        ${u}
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function shallowSlice(n,e,t,r){const s=r.texData.get(n.dataId),a=r.makeTensorInfo(t,n.dtype),i=r.texData.get(a.dataId);Object.assign(i,s),i.refCount=1,i.shape=t,i.dtype=n.dtype;let l=computeFlatOffset$1(e,computeStrides$1(n.shape));s.slice&&(l+=s.slice.flatOffset),i.slice={flatOffset:l,origDataId:s.slice&&s.slice.origDataId||n.dataId};const u=r.dataRefCount.get(i.slice.origDataId)||1;return r.dataRefCount.set(i.slice.origDataId,u+1),a}function slice$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{begin:a,size:i}=r,[l,u]=parseSliceParams$1(s,a,i);if(assertParamsValid$1(s,l,u),sizeFromShape$1(u)===0)return t.makeTensorInfo(u,s.dtype,[]);if(t.shouldExecuteOnCPU([s])||s.dtype==="string"){const c=t.texData.get(s.dataId),o=sliceImplCPU$1(c.values,l,u,s.shape,s.dtype);return t.makeTensorInfo(u,s.dtype,o)}const{isPacked:h}=t.texData.get(s.dataId),f=isSliceContinous$1(s.shape,l,u);if(h||!f){const c=env$1().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new SlicePackedProgram(u):new SliceProgram$1(u),o=[l];return t.runWebGLProgram(c,[s],s.dtype,o)}return t.uploadToGPU(s.dataId),shallowSlice(s,l,u,t)}const sliceConfig$1={kernelName:Slice$1,backendName:"webgl",kernelFunc:slice$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchToSpaceND$1=n=>{const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockShape:a,crops:i}=r;assert$2(s.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const l=a.reduce((b,x)=>b*x),u=getReshaped$1(s.shape,a,l),h=getPermuted$1(u.length,a.length),f=getReshapedPermuted$1(s.shape,a,l),c=getSliceBeginCoords$1(i,a.length),o=getSliceSize$1(f,i,a.length),d=[],m=reshape$3({inputs:{x:s},backend:t,attrs:{shape:u}}),g=transpose$1({inputs:{x:m},backend:t,attrs:{perm:h}}),y=reshape$3({inputs:{x:g},backend:t,attrs:{shape:f}}),$=slice$1({inputs:{x:y},backend:t,attrs:{begin:c,size:o}});return d.push(m),d.push(g),d.push(y),d.forEach(b=>t.disposeIntermediateTensorInfo(b)),$},batchToSpaceNDConfig$1={kernelName:BatchToSpaceND$1,backendName:"webgl",kernelFunc:batchToSpaceND$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincount$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,weights:a}=e,{size:i}=r,l=t.readSync(s.dataId),u=t.readSync(a.dataId),h=bincountImplCPU(l,u,a.dtype,a.shape,i);return t.makeTensorInfo([i],a.dtype,h)}const bincountConfig$1={kernelName:Bincount$1,backendName:"webgl",kernelFunc:bincount$1};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const BITWISEAND=`
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`,BITWISEAND_UNPACKED=`
  return float(int(a.r) & int(b.r));
`;function bitwiseAnd(n){const{inputs:e,backend:t}=n,{a:r,b:s}=e,a=env$1().getBool("WEBGL_PACK_BINARY_OPERATIONS"),i=env$1().getNumber("WEBGL_VERSION");if(t.shouldExecuteOnCPU([r,s])||i===1){const u=t.texData.get(r.dataId).values,h=t.texData.get(s.dataId).values,[f,c]=bitwiseAndImplCPU(r.shape,s.shape,u,h,r.dtype),o=t.makeTensorInfo(c,r.dtype),d=t.texData.get(o.dataId);return d.values=f,o}let l;return a?l=new BinaryOpPackedProgram(BITWISEAND,r.shape,s.shape,!1):l=new BinaryOpProgram$1(BITWISEAND_UNPACKED,r.shape,s.shape),t.runWebGLProgram(l,[r,s],r.dtype)}const bitwiseAndConfig={kernelName:BitwiseAnd,backendName:"webgl",kernelFunc:bitwiseAnd};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastArgs$1(n){const{inputs:e,backend:t}=n,{s0:r,s1:s}=e,a=t.readSync(r.dataId),i=t.readSync(s.dataId),l=assertAndGetBroadcastShape$1(Array.from(a),Array.from(i));return t.makeTensorInfo([l.length],"int32",Int32Array.from(l))}const broadcastArgsConfig$1={kernelName:BroadcastArgs$1,backendName:"webgl",kernelFunc:broadcastArgs$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NOT_EQUAL$1="return float(a != b);",notEqual$1=binaryKernelFunc$1({opSnippet:NOT_EQUAL$1,cpuKernelImpl:notEqualImplCPU$1,dtype:"bool"}),notEqualConfig$1={kernelName:NotEqual$1,backendName:"webgl",kernelFunc:notEqual$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function real$1(n){const{inputs:e,backend:t}=n,{input:r}=e,s=t.texData.get(r.dataId);return identity$1({inputs:{x:s.complexTensorInfos.real},backend:t})}const realConfig$1={kernelName:Real$1,backendName:"webgl",kernelFunc:real$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TO_INT$1="return float(int(x));";function int$1(n,e){const t=new UnaryOpProgram$1(n.shape,TO_INT$1),r=e.runWebGLProgram(t,[n],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cast$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{dtype:a}=r;if(a==="complex64"){if(s.dtype==="complex64")return identity$1({inputs:{x:s},backend:t});const i=zeros$2(s.shape),l=cast$2({inputs:{x:s},backend:t,attrs:{dtype:"float32"}}),u=complex$2({inputs:{real:l,imag:i},backend:t});return i.dispose(),t.disposeIntermediateTensorInfo(l),u}if(s.dtype==="complex64"){const i=real$1({inputs:{input:s},backend:t}),l=cast$2({inputs:{x:i},backend:t,attrs:{dtype:a}});return t.disposeIntermediateTensorInfo(i),l}if(!hasEncodingLoss$1(s.dtype,a)){const i=identity$1({inputs:{x:s},backend:t});return{dataId:i.dataId,shape:i.shape,dtype:a}}if(t.shouldExecuteOnCPU([s])){const i=t.texData.get(s.dataId).values,[l,u,h]=castImplCPU$1(i,s.shape,s.dtype,a);return t.makeTensorInfo(l,u,h)}if(a==="int32")return int$1(s,t);if(a==="bool"){const i=t.makeTensorInfo([],"bool",getTypedArrayFromDType$1("bool",1)),u=notEqual$1({inputs:{a:s,b:i},backend:t});return t.disposeIntermediateTensorInfo(i),u}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${a}`)}const castConfig$1={kernelName:Cast$1,backendName:"webgl",kernelFunc:cast$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CEIL$1="return ceil(x);",ceil$1=unaryKernelFunc$1({opSnippet:CEIL$1,packedOpSnippet:CEIL$1,cpuKernelImpl:ceilImplCPU$1}),ceilConfig$1={kernelName:Ceil$1,backendName:"webgl",kernelFunc:ceil$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ClipProgram$1=class{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ClipPackedProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function clipByValue$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{clipValueMin:a,clipValueMax:i}=r;let l;env$1().getBool("WEBGL_PACK_CLIP")?l=new ClipPackedProgram(s.shape):l=new ClipProgram$1(s.shape);const u=[[a],[i]];return t.runWebGLProgram(l,[s],s.dtype,u)}const clipByValueConfig$1={kernelName:ClipByValue$1,backendName:"webgl",kernelFunc:clipByValue$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ComplexAbsProgram$1=class{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeComplexComponentTensorInfo$1(n,e){return{dataId:e.dataId,dtype:e.dtype,shape:n.shape}}function complexAbs$1(n){const{inputs:e,backend:t}=n,{x:r}=e,s=t.texData.get(r.dataId),a=new ComplexAbsProgram$1(r.shape),i=[makeComplexComponentTensorInfo$1(r,s.complexTensorInfos.real),makeComplexComponentTensorInfo$1(r,s.complexTensorInfos.imag)];return t.runWebGLProgram(a,i,i[0].dtype)}const complexAbsConfig$1={kernelName:ComplexAbs$1,backendName:"webgl",kernelFunc:complexAbs$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ConcatProgram$1=class{constructor(e){this.outputShape=[],this.outputShape=computeOutShape$4(e,1),this.variableNames=e.map((i,l)=>`T${l}`);const t=new Array(e.length-1);t[0]=e[0][1];for(let i=1;i<t.length;i++)t[i]=t[i-1]+e[i][1];const r=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<t.length;i++){const l=t[i-1];r.push(`else if (yC < ${t[i]}) setOutput(getT${i}(yR, yC-${l}));`)}const s=t.length,a=t[t.length-1];r.push(`else setOutput(getT${s}(yR, yC-${a}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${r.join(`
        `)}
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ConcatPackedProgram{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=computeOutShape$4(e,t);const r=this.outputShape,s=r.length,a=getCoordsDataType$1(s),i=getChannels("coords",s),l=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map((g,y)=>`T${y}`);const u=new Array(e.length-1);u[0]=e[0][t];for(let g=1;g<u.length;g++)u[g]=u[g-1]+e[g][t];const h=l[t],f=l.slice(-2),c=l.join();let o=`if (${h} < ${u[0]}) {
        return getChannel(
            getT0(${c}), vec2(${f.join()}));
        }`;for(let g=1;g<u.length;g++){const y=u[g-1];o+=`
        if (${h} < ${u[g]}  && ${h} >= ${u[g-1]}) {
          return getChannel(
            getT${g}(${shiftedChannels(l,h,y)}),
            vec2(${shiftedChannels(f,h,y)}));
        }`}const d=u.length,m=u[u.length-1];o+=`
        return getChannel(
          getT${d}(${shiftedChannels(l,h,m)}),
          vec2(${shiftedChannels(f,h,m)}));`,this.userCode=`
      float getValue(${l.map(g=>"int "+g)}) {
        ${o}
      }

      void main() {
        ${a} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[s-1]} = ${i[s-1]} + 1;
        if (${i[s-1]} < ${r[s-1]}) {
          result.g = getValue(${i});
        }

        ${i[s-2]} = ${i[s-2]} + 1;
        if (${i[s-2]} < ${r[s-2]}) {
          result.a = getValue(${i});
        }

        ${i[s-1]} = ${i[s-1]} - 1;
        if (${i[s-2]} < ${r[s-2]} &&
            ${i[s-1]} < ${r[s-1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `}}function shiftedChannels(n,e,t){const r=n.indexOf(e);return n.map((a,i)=>i===r?`${a} - ${t}`:a).join()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function imag$1(n){const{inputs:e,backend:t}=n,{input:r}=e,s=t.texData.get(r.dataId);return identity$1({inputs:{x:s.complexTensorInfos.imag},backend:t})}const imagConfig$1={kernelName:Imag$1,backendName:"webgl",kernelFunc:imag$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concatImpl$2(n,e,t){const r=n[0].dtype;if(r==="complex64"){const d=n.map(b=>real$1({inputs:{input:b},backend:t})),m=n.map(b=>imag$1({inputs:{input:b},backend:t})),g=concatImpl$2(d,e,t),y=concatImpl$2(m,e,t),$=complex$2({inputs:{real:g,imag:y},backend:t});return d.forEach(b=>t.disposeIntermediateTensorInfo(b)),m.forEach(b=>t.disposeIntermediateTensorInfo(b)),t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(y),$}let s=t.shouldExecuteOnCPU(n);if(r==="string"&&(s=!0),s){const d=n.map(w=>{const S=[-1,sizeFromShape$1(w.shape.slice(e))];return reshape$3({inputs:{x:w},backend:t,attrs:{shape:S}})}),m=d.map(w=>({vals:t.readSync(w.dataId),shape:w.shape})),g=computeOutShape$4(d.map(w=>w.shape),1),y=d[0].shape[0]===1,$=concatImplCPU$1(m,g,r,y),b=computeOutShape$4(n.map(w=>w.shape),e),x=t.makeTensorInfo(b,r,$);return d.forEach(w=>t.disposeIntermediateTensorInfo(w)),x}const a=n.filter(d=>sizeFromShape$1(d.shape)>0),i=env$1().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&a[0].shape.length>1;if(a.length===1){const d=i?new UnaryOpProgram$1(n[0].shape,CLONE):new UnaryOpPackedProgram(n[0].shape,CLONE);return t.runWebGLProgram(d,n,r)}const l=env$1().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(a.length>l){const d=[];for(let g=0;g<a.length;g+=l){const y=a.slice(g,g+l);d.push(concatImpl$2(y,e,t))}const m=concatImpl$2(d,e,t);for(const g of d)t.disposeIntermediateTensorInfo(g);return m}if(i){const d=new ConcatPackedProgram(a.map(m=>m.shape),e);return t.runWebGLProgram(d,a,r)}const{tensors2D:u,outShape:h}=computeTensors2D$1(a,e,t),f=new ConcatProgram$1(u.map(d=>d.shape)),c=t.runWebGLProgram(f,u,r);u.forEach(d=>t.disposeIntermediateTensorInfo(d));const o=reshape$3({inputs:{x:c},attrs:{shape:h},backend:t});return t.disposeIntermediateTensorInfo(c),o}function computeTensors2D$1(n,e,t){const r=computeOutShape$4(n.map(a=>a.shape),e);return{tensors2D:n.map(a=>reshape$3({inputs:{x:a},attrs:{shape:[-1,sizeFromShape$1(a.shape.slice(e))]},backend:t})),outShape:r}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concat$1(n){const{inputs:e,backend:t,attrs:r}=n,{axis:s}=r,a=parseAxisParam$1(s,e[0].shape)[0],i=e.map(h=>h.shape);assertParamsConsistent$1(i,a);const l=computeOutShape$4(e.map(h=>h.shape),a);if(sizeFromShape$1(l)===0)return t.makeTensorInfo(l,e[0].dtype,[]);const u=e.filter(h=>sizeFromShape$1(h.shape)>0);return u.length===1?identity$1({inputs:{x:u[0]},backend:t}):concatImpl$2(u,a,t)}const concatConfig$1={kernelName:Concat$1,backendName:"webgl",kernelFunc:concat$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Conv2DProgram{constructor(e,t=!1,r=null,s=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const i=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,h=e.strideWidth,f=e.dilationHeight,c=e.dilationWidth,o=e.filterHeight,d=e.filterWidth,m=Math.floor(e.inChannels/4)*4,g=e.inChannels%4,y=e.dataFormat==="channelsLast",$=y?1:2,b=y?2:3,x=y?3:1;let w="",v="";r&&(s?w=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:a?w=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:w=`
          float activation(float x) {
            ${r}
          }
        `,v="result = activation(result);");const S=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${w}

      const ivec2 strides = ivec2(${u}, ${h});
      const ivec2 pads = ivec2(${i}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${x}];

        ivec2 xRCCorner =
            ivec2(coords[${$}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${o}; wR++) {
          int xR = xRCorner + wR * ${f};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${d}; wC++) {
            int xC = xCCorner + wC * ${c};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${m}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${y}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${g===1}) {

              if (${y}) {
                dotProd +=
                    getX(batch, xR, xC, ${m}) *
                    getW(wR, wC, ${m}, d2);
              } else {
                dotProd +=
                    getX(batch, ${m}, xR, xC) *
                    getW(wR, wC, ${m}, d2);
              }

            } else if (${g===2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${m}, d2),
                getW(wR, wC, ${m} + 1, d2)
              );

              if (${y}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${m}),
                  getX(batch, xR, xC, ${m} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${m}, xR, xC),
                  getX(batch, ${m} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${g===3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${m}, d2),
                getW(wR, wC, ${m} + 1, d2),
                getW(wR, wC, ${m} + 2, d2)
              );

              if (${y}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${m}),
                  getX(batch, xR, xC, ${m} + 1),
                  getX(batch, xR, xC, ${m} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${m}, xR, xC),
                  getX(batch, ${m} + 1, xR, xC),
                  getX(batch, ${m} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${S}
        ${v}
        setOutput(result);
      }
    `}}class Conv3DProgram{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,r=e.padInfo.top,s=e.padInfo.left,a=e.strideDepth,i=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,h=e.dilationHeight,f=e.dilationWidth,c=e.filterDepth,o=e.filterHeight,d=e.filterWidth,m=Math.floor(e.inChannels/4)*4,g=e.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${a}, ${i}, ${l});
      const ivec3 pads = ivec3(${t}, ${r}, ${s});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${c}; wF++) {
          int xF = xFCorner + wF * ${u};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${o}; wR++) {
            int xR = xRCorner + wR * ${h};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d}; wC++) {
              int xC = xCCorner + wC * ${f};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${m}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${g===1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${m}) *
                  getW(wF, wR, wC, ${m}, d2);
              } else if (${g===2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${m}),
                  getX(batch, xF, xR, xC, ${m} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${m}, d2),
                  getW(wF, wR, wC, ${m} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${g===3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${m}),
                  getX(batch, xF, xR, xC, ${m} + 1),
                  getX(batch, xF, xR, xC, ${m} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${m}, d2),
                  getW(wF, wR, wC, ${m} + 1, d2),
                  getW(wF, wR, wC, ${m} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Conv2DPackedProgram{constructor(e,t=!1,r=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const i=e.padInfo.left,l=e.strideWidth,u=e.dilationWidth,h=e.filterHeight,f=e.filterWidth,c=f;let o=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let y=0;y<f;y++)o+=`
           vec4 xTexelC${y*2};
           int xTexelC${y*2}Ready;
           vec4 xTexelC${y*2+1};
           int xTexelC${y*2+1}Ready;
           vec4 xC${y};`;o+=`
     for (int r = 0; r < ${h}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;for(let y=0;y<f;y++)o+=`
           xTexelC${y*2} = vec4(0.0);
           xTexelC${y*2}Ready = 0;
           xTexelC${y*2+1} = vec4(0.0);
           xTexelC${y*2+1}Ready = 0;
           xC${y} = vec4(0.0);`;o+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let y=0;y<(c+1)/2;y++){const $=y*2;if(o+=`
           xC = xCCorner + ${$*u};
           `,l===1){if($<f&&(i%2===1?(o+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${$}Ready == 0) {
                   xTexelC${$} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${$}.zw = vec2(0.0);
                   }
                   xTexelC${$}Ready = 1;
                 }
               `,u===1&&$>0?o+=`
                 xC${$} = vec4(xTexelC${$-2}.zw, xTexelC${$}.xy);
                 `:o+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${$} = vec4(previous.zw, xTexelC${$}.xy);
                   } else {
                     xC${$} = vec4(0.0, 0.0, xTexelC${$}.xy);
                   }
                   `):o+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${$}Ready == 0) {
                   xTexelC${$} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${$}.zw = vec2(0.0);
                   }
                   xTexelC${$}Ready = 1;
                 }

                 xC${$} = xTexelC${$};
                 `,$+1<f)){const b=i%2===0?nearestLargerEven(u):u;u%2===0&&i%2===1||u%2!==0&&i%2!==1?(o+=`
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${$+1}Ready == 0) {
                     xTexelC${$+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${$+1}.zw = vec2(0.0);
                     }
                     xTexelC${$+1}Ready = 1;
                   }
                   `,u>1?o+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${$+1} = vec4(previous.zw, xTexelC${$+1}.xy);
                     } else {
                      xC${$+1} = vec4(0.0, 0.0, xTexelC${$+1}.xy);
                     }
                     `:o+=`
                     xC${$+1} = vec4(xTexelC${$}.zw, xTexelC${$+1}.xy);
                     `):b===1?o+=`
                     xC${$+1} = xTexelC${$};
                     `:o+=`
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${$+1}Ready == 0) {
                       xTexelC${$+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${$+1}.zw = vec2(0.0);
                       }
                       xTexelC${$+1}Ready = 1;
                     }

                     xC${$+1} = xTexelC${$+1};
                     `}}else $<f&&(i%2===1?(o+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${$}Ready == 0) {
                   xTexelC${$} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${$}.zw = vec2(0.0);
                   }
                   xTexelC${$}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${$+1}Ready == 0) {
                   xTexelC${$+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${$+1}.zw = vec2(0.0);
                   }
                   xTexelC${$+1}Ready = 1;
                 }

                 xC${$} = vec4(xTexelC${$}.zw, xTexelC${$+1}.zw);
               `,$+1<f&&(o+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${$+1} = vec4(xTexelC${$+1}.xy, final.xy);
                 `)):(o+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${$}Ready == 0) {
                   xTexelC${$} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${$}.zw = vec2(0.0);
                   }
                   xTexelC${$}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${$+1}Ready == 0) {
                   xTexelC${$+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${$+1}.zw = vec2(0.);
                   }
                   xTexelC${$+1}Ready = 1;
                 }

                 xC${$} = vec4(
                   xTexelC${$}.xy, xTexelC${$+1}.xy);
               `,$+1<f&&(o+=`
                   xC${$+1} = vec4(xTexelC${$}.zw, xTexelC${$+1}.zw);
                 `)));$<f&&(o+=`
             wTexel = getW(r, ${$}, d1, d2);
             dotProd += xC${$}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${$}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,$+1<f&&(o+=`
               wTexel = getW(r, ${$+1}, d1, d2);
               dotProd += xC${$+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${$+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}o+=`
     }
   `,o+=`
     }
   `,o+=`
     }
   `;let d="",m="";r&&(s?d=`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${r}
         }`:a?d=`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${r}
         }`:d=`vec4 activation(vec4 x) {
           ${r}
         }`,m="result = activation(result);");const g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${d}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${o}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${g}
         ${m}
         setOutput(result);
       }
     `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Im2ColPackedProgram{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const{dataFormat:r}=t,s=getGlslDifferences(),a=r==="channelsLast",i=a?1:2,l=a?2:3,u=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let h="";for(let f=0;f<=1;f++)for(let c=0;c<=1;c++)h+=`
          blockIndex = rc.z + ${c};
          pos = rc.y + ${f};

          ${u}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${l}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${a}) {
                  innerDims = vec2(d1, ch);
                  result[${f*2+c}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${f*2+c}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${h}

        ${s.output} = result;
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getShapeForBatchMatMul$1(n,e){const t=n.length;return t>=3?e?[...n.slice(0,-3),n[t-3]*n[t-2],n[t-1]]:[...n.slice(0,-3),n[t-3],n[t-2]*n[t-1]]:!e&&t===1&&n[0]>1?[n[0],1]:null}function conv2dByMatMul$1({x:n,filter:e,convInfo:t,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:l=null}){const u=n.shape,h=r.texData.get(n.dataId),f=t.inChannels,c=u[0]*u[1]*u[2],o=t.outChannels,d=t.dataFormat==="channelsLast",m=!1,g=!1;let y;const $=[];if(a!=null){const w=getShapeForBatchMatMul$1(a.shape,d);w!=null&&(a=reshape$3({inputs:{x:a},backend:r,attrs:{shape:w}}),$.push(a))}if(s!=null){const w=getShapeForBatchMatMul$1(s.shape,d);w!=null&&(s=reshape$3({inputs:{x:s},backend:r,attrs:{shape:w}}),$.push(s))}if(!((c===1||o===1)&&f>MATMUL_SHARED_DIM_THRESHOLD)&&h.isPacked&&d&&h.texture!=null&&u[2]%2!==0&&arraysEqual$1(h.shape.slice(-3),u.slice(-3))){const w=u[0]*u[1]*(u[2]+1),v={dataId:n.dataId,shape:[1,w,t.inChannels],dtype:n.dtype},S=h.shape;h.shape=h.shape.slice(),h.shape[h.shape.length-2]++,assert$2(isReshapeFree(h.shape,v.shape),()=>`packed reshape ${h.shape} to ${v.shape} isn't free`);const T=reshape$3({inputs:{x:e},backend:r,attrs:{shape:[1,t.inChannels,t.outChannels]}});$.push(T);const C=batchMatMulImpl$1({a:v,b:T,backend:r,transposeA:m,transposeB:g,bias:s,activation:l,preluActivationWeights:a,leakyreluAlpha:i}),I=r.texData.get(C.dataId);assert$2(I.isPacked,()=>"batchMatMul result is expected to be packed"),h.shape=S,I.shape=t.outShape,y=identity$1({inputs:{x:C},backend:r}),y.shape=t.outShape,$.push(C)}else{const w=t.outHeight*t.outWidth,v=reshape$3({inputs:{x:n},backend:r,attrs:{shape:d?[t.batchSize,w,t.inChannels]:[t.batchSize,t.inChannels,w]}}),S=reshape$3({inputs:{x:e},backend:r,attrs:{shape:[1,t.inChannels,t.outChannels]}}),T=batchMatMulImpl$1({a:d?v:S,b:d?S:v,transposeA:!d,transposeB:g,backend:r,bias:s,activation:l,preluActivationWeights:a,leakyreluAlpha:i});y=reshape$3({inputs:{x:T},backend:r,attrs:{shape:t.outShape}}),$.push(v),$.push(S),$.push(T)}for(const w of $)r.disposeIntermediateTensorInfo(w);return y}function conv2dWithIm2Row({x:n,filter:e,convInfo:t,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:l=null}){const{filterWidth:u,filterHeight:h,inChannels:f,outWidth:c,outHeight:o,dataFormat:d}=t,m=d==="channelsLast",g=u*h*f,y=o*c,$=[t.batchSize,g,y],b=!0,x=!1,w=[];if(a!=null){const M=getShapeForBatchMatMul$1(a.shape,m);M!=null&&(a=reshape$3({inputs:{x:a},backend:r,attrs:{shape:M}}),w.push(a))}if(s!=null){const M=getShapeForBatchMatMul$1(s.shape,m);M!=null&&(s=reshape$3({inputs:{x:s},backend:r,attrs:{shape:M}}),w.push(s))}const v=reshape$3({inputs:{x:e},backend:r,attrs:{shape:[1,g,sizeFromShape$1(e.shape)/g]}});w.push(v);const S=new Im2ColPackedProgram($,t),T=[n.shape,[t.padInfo.top,t.padInfo.left],[t.strideHeight,t.strideWidth],[t.dilationHeight,t.dilationWidth],[t.inChannels],[t.filterWidth*t.inChannels],[t.outWidth]],C=r.runWebGLProgram(S,[n],"float32",T),I=reshape$3({inputs:{x:C},backend:r,attrs:{shape:$}});w.push(C),w.push(I);const N=s!=null,P=a!=null,F=l==="leakyrelu",_=l?mapActivationToShaderProgram(l,!0):null,D=new MatMulPackedProgram$1(m?I.shape:v.shape,m?v.shape:I.shape,m?[t.batchSize,y,t.outChannels]:[t.batchSize,t.outChannels,y],b,x,N,_,P,F),E=m?[I,v]:[v,I];if(s&&E.push(s),P&&E.push(a),F){const M=r.makeTensorInfo([],"float32",createScalarValue$1(i,"float32"));E.push(M),w.push(M)}const k=r.runWebGLProgram(D,E,"float32"),O=reshape$3({inputs:{x:k},backend:r,attrs:{shape:t.outShape}});w.push(k);for(const M of w)r.disposeIntermediateTensorInfo(M);return O}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2d$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a}=e,{strides:i,pad:l,dataFormat:u,dilations:h,dimRoundingMode:f}=r,c=convertConv2DDataFormat$1(u),o=computeConv2DInfo$1(s.shape,a.shape,i,h,l,f,!1,c);let d;if(o.filterHeight===1&&o.filterWidth===1&&o.dilationHeight===1&&o.dilationWidth===1&&o.strideHeight===1&&o.strideWidth===1&&(o.padInfo.type==="SAME"||o.padInfo.type==="VALID"))d=conv2dByMatMul$1({x:s,filter:a,convInfo:o,backend:t});else if(o.strideWidth<=2&&c==="channelsLast"&&env$1().getBool("WEBGL_EXP_CONV")){const g=new Conv2DPackedProgram(o),y=[[o.padInfo.top,o.padInfo.left],[o.strideHeight,o.strideWidth],[o.dilationHeight,o.dilationWidth],[o.inHeight,o.inWidth]];d=t.runWebGLProgram(g,[s,a],"float32",y)}else if(env$1().getBool("WEBGL_CONV_IM2COL"))d=conv2dWithIm2Row({x:s,filter:a,convInfo:o,backend:t});else{const g=new Conv2DProgram(o);d=t.runWebGLProgram(g,[s,a],"float32")}const m=reshape$3({inputs:{x:d},backend:t,attrs:{shape:o.outShape}});return t.disposeIntermediateTensorInfo(d),m}const conv2DConfig$1={kernelName:Conv2D$2,backendName:"webgl",kernelFunc:conv2d$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let Conv2DDerFilterProgram$1=class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,r=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,i=e.dataFormat==="channelsLast";this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${s};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${r} - ${a};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              ${i?`float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);`:`float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `}},Conv2DDerInputProgram$1=class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,r=e.filterWidth,s=e.strideHeight,a=e.strideWidth,i=e.dataFormat==="channelsLast",l=t-1-e.padInfo.top,u=r-1-e.padInfo.left,h=i?1:2,f=i?2:3,c=i?3:1;this.userCode=`
      const ivec2 pads = ivec2(${l}, ${u});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${c}];

        ivec2 dyCorner = ivec2(coords[${h}], coords[${f}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${r}; wC++) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${r} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},Conv3DDerFilterProgram$1=class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,r=e.strideHeight,s=e.strideWidth,a=e.padInfo.front,i=e.padInfo.top,l=e.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${a};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${r} - ${i};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${s} - ${l};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}},Conv3DDerInputProgram$1=class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,r=e.filterHeight,s=e.filterWidth,a=e.strideDepth,i=e.strideHeight,l=e.strideWidth,u=t-1-e.padInfo.front,h=r-1-e.padInfo.top,f=s-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${u}, ${h}, ${f});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${a}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${r}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${r} - 1 - wR;

            for (int wC = 0; wC < ${s}; wC++) {
              float dyC = float(dyCCorner + wC) / ${l}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${s} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropFilter$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:a}=e,{strides:i,pad:l,dataFormat:u,dimRoundingMode:h,filterShape:f}=r,c=convertConv2DDataFormat$1(u),o=computeConv2DInfo$1(s.shape,f,i,1,l,h,!1,c),d=new Conv2DDerFilterProgram$1(o);return t.runWebGLProgram(d,[s,a],"float32")}const conv2DBackpropFilterConfig$1={kernelName:Conv2DBackpropFilter$1,backendName:"webgl",kernelFunc:conv2DBackpropFilter$1};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Conv2DDerInputPackedProgram{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const t=e.filterHeight,r=e.filterWidth,s=t-1-e.padInfo.top,a=r-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${s}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${r}; wC++) {
            int wCPerm = ${r} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropInput$1(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:a}=e,{inputShape:i,strides:l,pad:u,dataFormat:h,dimRoundingMode:f}=r,c=convertConv2DDataFormat$1(h),o=computeConv2DInfo$1(i,a.shape,l,1,u,f,!1,c);if(env$1().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&c==="channelsLast"){const d=[[o.strideHeight,o.strideWidth]],m=new Conv2DDerInputPackedProgram(o);return t.runWebGLProgram(m,[s,a],"float32",d)}else{const d=new Conv2DDerInputProgram$1(o);return t.runWebGLProgram(d,[s,a],"float32")}}const conv2DBackpropInputConfig$1={kernelName:Conv2DBackpropInput$1,backendName:"webgl",kernelFunc:conv2DBackpropInput$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3D$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a}=e,{strides:i,pad:l,dilations:u}=r,h=computeConv3DInfo$1(s.shape,a.shape,i,u,l),f=new Conv3DProgram(h);return t.runWebGLProgram(f,[s,a],"float32")}const conv3DConfig$1={kernelName:Conv3D$2,backendName:"webgl",kernelFunc:conv3D$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropFilterV2$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:a}=e,{strides:i,pad:l,filterShape:u}=r,h=computeConv3DInfo$1(s.shape,u,i,1,l),f=new Conv3DDerFilterProgram$1(h);return t.runWebGLProgram(f,[s,a],"float32")}const conv3DBackpropFilterV2Config$1={kernelName:Conv3DBackpropFilterV2$1,backendName:"webgl",kernelFunc:conv3DBackpropFilterV2$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropInput(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:a}=e,{pad:i,strides:l,inputShape:u}=r,h=computeConv3DInfo$1(u,a.shape,l,1,i),f=new Conv3DDerInputProgram$1(h);return t.runWebGLProgram(f,[s,a],"float32")}const conv3DBackpropInputConfig={kernelName:Conv3DBackpropInputV2$1,backendName:"webgl",kernelFunc:conv3DBackpropInput};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const COS$1=CHECK_NAN_SNIPPET_UNARY+`
  return cos(x);
`,COS_PACKED=`
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${CHECK_NAN_SNIPPET_PACKED}
  return result;
`,cos$1=unaryKernelFunc$1({opSnippet:COS$1,packedOpSnippet:COS_PACKED}),cosConfig$1={kernelName:Cos$1,backendName:"webgl",kernelFunc:cos$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const COSH$1=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,cosh$1=unaryKernelFunc$1({opSnippet:COSH$1}),coshConfig$1={kernelName:Cosh$1,backendName:"webgl",kernelFunc:cosh$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let CropAndResizeProgram$1=class{constructor(e,t,r,s,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[i,l,u,h]=e,[f]=t,[c,o]=r;this.outputShape=[f,c,o,h];const d=s==="bilinear"?1:0,[m,g]=[`${l-1}.0`,`${u-1}.0`],[y,$,b]=c>1?[`${(l-1)/(c-1)}`,"(y2-y1) * height_ratio",`y1*${m} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${m}`],[x,w,v]=o>1?[`${(u-1)/(o-1)}`,"(x2-x1) * width_ratio",`x1*${g} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${g}`];this.userCode=`
      const float height_ratio = float(${y});
      const float width_ratio = float(${x});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${$};
        float width_scale = ${w};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${m} ) {
          setOutput(float(${a}));
          return;
        }
        float in_x = ${v};
        if( in_x < 0.0 || in_x > ${g} ) {
          setOutput(float(${a}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${d} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cropAndResize$1=n=>{const{inputs:e,backend:t,attrs:r}=n,{image:s,boxes:a,boxInd:i}=e,{cropSize:l,method:u,extrapolationValue:h}=r,f=new CropAndResizeProgram$1(s.shape,a.shape,l,u,h);return t.runWebGLProgram(f,[s,a,i],"float32")},cropAndResizeConfig$1={kernelName:CropAndResize$1,backendName:"webgl",kernelFunc:cropAndResize$1};var CumOpType$1;(function(n){n.Prod="*",n.Sum="+"})(CumOpType$1||(CumOpType$1={}));let CumProgram$1=class{constructor(e,t,r,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const a=this.outputShape.length,i=this.op===CumOpType$1.Prod?"1.0":"0.0",l=r?i:`getX(${getCoords$2(a,"coords",this.op)})`,u=this.outputShape[this.outputShape.length-1];let h="",f="";r?(h=s?`end != ${u-1}`:"end != 0",f=s?"end + 1":"end - 1"):(h=s?`end + pow2 < ${u}`:"end >= pow2",f=s?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${getCoordsDataType$1(a)} coords = getOutputCoords();
        int end = ${getFinalCoord$1(a,"coords",this.op)};
        float val = ${l};
        int pow2 = int(pow(2.0, index));
        if (${h}) {
          int idx = ${f};
          ${getFinalCoord$1(a,"coords",this.op)} = idx;
          val ${this.op}= getX(${getCoords$2(a,"coords",this.op)});
        }
        setOutput(val);
      }
    `}};function getCoords$2(n,e,t){if(n===1)return`${e}`;if(n===2)return`${e}.x, ${e}.y`;if(n===3)return`${e}.x, ${e}.y, ${e}.z`;if(n===4)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw new Error(`Cumulative ${t} for rank ${n} is not yet supported`)}function getFinalCoord$1(n,e,t){if(n===1)return`${e}`;if(n===2)return`${e}.y`;if(n===3)return`${e}.z`;if(n===4)return`${e}.w`;throw new Error(`Cumulative ${t} for rank ${n} is not yet supported`)}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumImpl$1(n,e,t,r,s,a){const i=e.shape.length,l=getAxesPermutation$1([r],i);let u=e;l!=null&&(u=transpose$1({inputs:{x:e},backend:t,attrs:{perm:l}}));const h=getInnerMostAxes$1(1,i)[0];if(h!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${e.shape.length-1} but got axis=${r}`);const f=u.shape[h];let c=identity$1({inputs:{x:u},backend:t});for(let o=0;o<=Math.ceil(Math.log2(f))-1;o++){const d=new CumProgram$1(n,u.shape,!1,a),m=[[o]],g=c;c=t.runWebGLProgram(d,[c],c.dtype,m),t.disposeIntermediateTensorInfo(g)}if(s){const o=new CumProgram$1(n,u.shape,s,a),d=c;c=t.runWebGLProgram(o,[c],c.dtype),t.disposeIntermediateTensorInfo(d)}if(l!=null){const o=getUndoAxesPermutation$1(l),d=transpose$1({inputs:{x:c},backend:t,attrs:{perm:o}});return t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(u),d}return c}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumprod$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,exclusive:i,reverse:l}=r;return cumImpl$1(CumOpType$1.Prod,s,t,a,i,l)}const cumprodConfig$1={kernelName:Cumprod$1,backendName:"webgl",kernelFunc:cumprod$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumsum$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,exclusive:i,reverse:l}=r;return cumImpl$1(CumOpType$1.Sum,s,t,a,i,l)}const cumsumConfig$1={kernelName:Cumsum$1,backendName:"webgl",kernelFunc:cumsum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function denseBincount$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,weights:a}=e,{size:i,binaryOutput:l}=r;if(s.shape.length===1){const u=t.readSync(s.dataId),h=t.readSync(a.dataId),f=bincountImplCPU(u,h,a.dtype,a.shape,i);return t.makeTensorInfo([i],a.dtype,f)}else if(s.shape.length===2){const u=t.bufferSync(s),h=t.bufferSync(a),f=bincountReduceImplCPU(u,h,i,l);return t.makeTensorInfo(f.shape,a.dtype,f.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}const denseBincountConfig$1={kernelName:DenseBincount$1,backendName:"webgl",kernelFunc:denseBincount$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let DepthToSpaceProgram$1=class{constructor(e,t,r){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=r,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthToSpace$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockSize:a,dataFormat:i}=r,l=s.shape[0],u=i==="NHWC"?s.shape[1]:s.shape[2],h=i==="NHWC"?s.shape[2]:s.shape[3],f=i==="NHWC"?s.shape[3]:s.shape[1],c=u*a,o=h*a,d=f/(a*a),m=i==="NHWC"?[l,c,o,d]:[l,d,c,o],g=new DepthToSpaceProgram$1(m,a,i);return t.runWebGLProgram(g,[s],s.dtype)}const depthToSpaceConfig$1={kernelName:DepthToSpace$1,backendName:"webgl",kernelFunc:depthToSpace$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let DepthwiseConv2DProgram$1=class{constructor(e,t=!1,r=null,s=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const i=e.filterHeight,l=e.filterWidth,u=e.outChannels/e.inChannels;let h="",f="";r&&(s?h=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:a?h=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:h=`
          float activation(float x) {
            ${r}
          }
        `,f="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${h}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${u};
        int q = d2 - d1 * ${u};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${l}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${c}
        ${f}
        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DepthwiseConvPacked2DProgram{constructor(e,t=!1,r=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const i=e.outChannels/e.inChannels,l=e.padInfo.left,u=e.strideWidth,h=e.dilationWidth,f=e.filterHeight,c=e.filterWidth,o=c;let d=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let $=0;$<c;$++)d+=`
          vec4 xTexelC${$*2};
          int xTexelC${$*2}Ready;
          vec4 xTexelC${$*2+1};
          int xTexelC${$*2+1}Ready;
          vec4 xC${$};`;d+=`
    for (int r = 0; r < ${f}; r++) {
      `;for(let $=0;$<c;$++)d+=`
          xTexelC${$*2} = vec4(0.0);
          xTexelC${$*2}Ready = 0;
          xTexelC${$*2+1} = vec4(0.0);
          xTexelC${$*2+1}Ready = 0;
          xC${$} = vec4(0.0);`;d+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let $=0;$<(o+1)/2;$++){const b=$*2;if(d+=`
          xC = xCCorner + ${b*h};
          `,u===1){if(b<c&&(l%2===1?(d+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `,h===1&&b>0?d+=`
                xC${b} = vec4(xTexelC${b-2}.zw, xTexelC${b}.xy);
                `:d+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `):d+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `,b+1<c)){const x=l%2===0?nearestLargerEven(h):h;h%2===0&&l%2===1||h%2!==0&&l%2!==1?(d+=`
                  xCOffset = xC + imod(pads[1], 2) + ${x};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                    xTexelC${b+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b+1}.zw = vec2(0.0);
                    }
                    xTexelC${b+1}Ready = 1;
                  }
                  `,h>1?d+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b+1} = vec4(previous.zw, xTexelC${b+1}.xy);
                    } else {
                     xC${b+1} = vec4(0.0, 0.0, xTexelC${b+1}.xy);
                    }
                    `:d+=`
                    xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.xy);
                    `):x===1?d+=`
                    xC${b+1} = xTexelC${b};
                    `:d+=`
                    xCOffset = xC + ${x};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                      xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b+1}.zw = vec2(0.0);
                      }
                      xTexelC${b+1}Ready = 1;
                    }

                    xC${b+1} = xTexelC${b+1};
                    `}}else b<c&&(l%2===1?(d+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.0);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
              `,b+1<c&&(d+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b+1} = vec4(xTexelC${b+1}.xy, final.xy);
                `)):(d+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b+1}.xy);
              `,b+1<c&&(d+=`
                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
                `)));b<c&&(d+=`
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `,b+1<c&&(d+=`
              wTexel = getW(r, ${b+1}, d1, q);
              dotProd += xC${b+1} * vec4(wTexel.xz, wTexel.xz);
            `))}d+=`
    }
  `,d+=`
      }
    `;let m="",g="";r&&(s?m=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:a?m=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:m=`vec4 activation(vec4 x) {
          ${r}
        }`,g="result = activation(result);");const y=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${m}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${d}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${y}
        ${g}
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNative$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a}=e,{strides:i,pad:l,dilations:u,dimRoundingMode:h}=r;let f=u;f==null&&(f=[1,1]),assert$2(eitherStridesOrDilationsAreOne$1(i,f),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${f}'`);const c=computeConv2DInfo$1(s.shape,a.shape,i,f,l,h,!0);let o;env$1().getBool("WEBGL_PACK_DEPTHWISECONV")&&c.strideWidth<=2&&c.outChannels/c.inChannels===1?o=new DepthwiseConvPacked2DProgram(c):o=new DepthwiseConv2DProgram$1(c);const d=[[c.padInfo.top,c.padInfo.left],[c.strideHeight,c.strideWidth],[c.dilationHeight,c.dilationWidth],[c.inHeight,c.inWidth]];return t.runWebGLProgram(o,[s,a],"float32",d)}const depthwiseConv2dNativeConfig$1={kernelName:DepthwiseConv2dNative$1,backendName:"webgl",kernelFunc:depthwiseConv2dNative$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let DepthwiseConv2DDerFilterProgram$1=class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,r=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${s};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${r} - ${a};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}},DepthwiseConv2DDerInputProgram$1=class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,r=e.filterWidth,s=e.strideHeight,a=e.strideWidth,i=t-1-e.padInfo.top,l=r-1-e.padInfo.left,u=e.outChannels/e.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${r}; wC++) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${r} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${u}; dm++) {
              int d2 = d1 * ${u} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropFilter$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:a}=e,{strides:i,dilations:l,pad:u,dimRoundingMode:h,filterShape:f}=r,c=computeConv2DInfo$1(s.shape,f,i,l,u,h,!0),o=new DepthwiseConv2DDerFilterProgram$1(c);return t.runWebGLProgram(o,[s,a],"float32")}const depthwiseConv2dNativeBackpropFilterConfig$1={kernelName:DepthwiseConv2dNativeBackpropFilter$1,backendName:"webgl",kernelFunc:depthwiseConv2dNativeBackpropFilter$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropInput$1(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:a}=e,{strides:i,dilations:l,pad:u,dimRoundingMode:h,inputShape:f}=r,c=computeConv2DInfo$1(f,a.shape,i,l,u,h,!0),o=new DepthwiseConv2DDerInputProgram$1(c);return t.runWebGLProgram(o,[s,a],"float32")}const depthwiseConv2dNativeBackpropInputConfig$1={kernelName:DepthwiseConv2dNativeBackpropInput$1,backendName:"webgl",kernelFunc:depthwiseConv2dNativeBackpropInput$1};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let DiagProgram$1=class{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function diag$1(n){const{inputs:e,backend:t}=n,{x:r}=e,s=[...r.shape,...r.shape],a=sizeFromShape$1(r.shape),i=reshape$3({inputs:{x:r},backend:t,attrs:{shape:[a]}}),l=new DiagProgram$1(a),u=t.runWebGLProgram(l,[i],i.dtype),h=reshape$3({inputs:{x:u},backend:t,attrs:{shape:s}});return t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(u),h}const diagConfig$1={kernelName:Diag$1,backendName:"webgl",kernelFunc:diag$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let Dilation2DProgram$1=class{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:r,padInfo:s,strideHeight:a,strideWidth:i,filterHeight:l,filterWidth:u,dilationHeight:h,dilationWidth:f}=e,{top:c,left:o}=s;this.userCode=`
      const ivec2 strides = ivec2(${a}, ${i});
      const ivec2 pads = ivec2(${c}, ${o});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${l}; h++) {
          int hIn = hBeg + h * ${h};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${u}; w++) {
              int wIn = wBeg + w * ${f};

              if (wIn >= 0 && wIn < ${r}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dilation2D$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a}=e,{strides:i,pad:l,dilations:u}=r,h=computeDilation2DInfo$1(s.shape,a.shape,i,l,"NHWC",u);let f;const c=new Dilation2DProgram$1(h);f=t.runWebGLProgram(c,[s,a],"float32");const o=reshape$3({inputs:{x:f},backend:t,attrs:{shape:h.outShape}});return t.disposeIntermediateTensorInfo(f),o}const dilation2DConfig$1={kernelName:Dilation2D$1,backendName:"webgl",kernelFunc:dilation2D$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function einsum$1(n){const{inputs:e,backend:t,attrs:r}=n,{equation:s}=r,a=e,{allDims:i,summedDims:l,idDims:u}=decodeEinsumEquation$1(s,a.length);checkEinsumDimSizes$1(i.length,u,a);const{path:h,steps:f}=getEinsumComputePath$1(l,u),c=f.length;let o=null,d=i.length;const m=[];for(let g=0;g<c;++g){for(const y of f[g]){const{permutationIndices:$,expandDims:b}=getEinsumPermutation$1(d,u[y]);let x;isIdentityPermutation$1($)?x=a[y]:(x=transpose$1({inputs:{x:a[y]},backend:t,attrs:{perm:$}}),m.push(x));const w=x.shape.slice();for(let v=0;v<b.length;++v)w.splice(b[v],0,1);arraysEqual$1(x.shape,w)||(x=reshape$3({inputs:{x},backend:t,attrs:{shape:w}}),m.push(x)),o===null?o=x:(o=multiply({inputs:{a:x,b:o},backend:t}),m.push(o))}g<c-1&&(h[g]>=0&&(o=sum$2({inputs:{x:o},backend:t,attrs:{axis:h[g]-(i.length-d),keepDims:!1}}),m.push(o)),d--)}for(const g of m)g!==o&&t.disposeIntermediateTensorInfo(g);return o}const einsumConfig$1={kernelName:Einsum$1,backendName:"webgl",kernelFunc:einsum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ELU$1="return (x >= 0.0) ? x : (exp(x) - 1.0);",ELU_PACKED=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,elu$1=unaryKernelFunc$1({opSnippet:ELU$1,packedOpSnippet:ELU_PACKED}),eluConfig$1={kernelName:Elu$2,backendName:"webgl",kernelFunc:elu$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ELU_DER$1="return (b >= 0.0) ? a : a * (b + 1.0);",ELU_DER_PACKED=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,eluGrad$1=n=>{const{inputs:e,backend:t}=n,{dy:r,y:s}=e,a=env$1().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BinaryOpPackedProgram(ELU_DER_PACKED,r.shape,s.shape):new BinaryOpProgram$1(ELU_DER$1,r.shape,s.shape);return t.runWebGLProgram(a,[r,s],r.dtype)},eluGradConfig$1={kernelName:EluGrad$1,backendName:"webgl",kernelFunc:eluGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PACKED_EQUAL=`
  return vec4(equal(a, b));
`,EQUAL$1="return float(a == b);",equal$1=binaryKernelFunc$1({opSnippet:EQUAL$1,packedOpSnippet:PACKED_EQUAL,dtype:"bool",cpuKernelImpl:equalImplCPU$1}),equalConfig$1={kernelName:Equal$1,backendName:"webgl",kernelFunc:equal$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ERF$1=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${ERF_P$1};
  float a1 = ${ERF_A1$1};
  float a2 = ${ERF_A2$1};
  float a3 = ${ERF_A3$1};
  float a4 = ${ERF_A4$1};
  float a5 = ${ERF_A5$1};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,erf$1=unaryKernelFunc$1({opSnippet:ERF$1}),erfConfig$1={kernelName:Erf$1,backendName:"webgl",kernelFunc:erf$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const EXP$1=CHECK_NAN_SNIPPET_UNARY+`
  return exp(x);
`,EXP_PACKED=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,exp$1=unaryKernelFunc$1({opSnippet:EXP$1,packedOpSnippet:EXP_PACKED,cpuKernelImpl:expImplCPU$1,dtype:"float32"}),expConfig$1={kernelName:Exp$1,backendName:"webgl",kernelFunc:exp$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function expandDims$1(n){const{inputs:e,attrs:t,backend:r}=n,{dim:s}=t,{input:a}=e,i=a.shape.length,l=a.shape.slice();let u=s;return s<0&&(assert$2(-(i+1)<=s,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),u=i+s+1),l.splice(u,0,1),reshape$3({inputs:{x:a},backend:r,attrs:{shape:l}})}const expandDimsConfig$1={kernelName:ExpandDims$1,backendName:"webgl",kernelFunc:expandDims$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const EXPM1$1="return exp(x) - 1.0;",expm1$1=unaryKernelFunc$1({opSnippet:EXPM1$1,packedOpSnippet:EXPM1$1,cpuKernelImpl:expm1ImplCPU$1}),expm1Config$1={kernelName:Expm1$1,backendName:"webgl",kernelFunc:expm1$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let FFTProgram$1=class{constructor(e,t,r){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const a=r?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=r?`${s}.0`:"1.0";let l;if(e==="real")l="return real * expR - imag * expI;";else if(e==="imag")l="return real * expI + imag * expR;";else throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);this.userCode=`
      const float exponentMultiplier = ${a};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${l}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${s});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${s}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fftImpl$1(n,e,t){const r=t.texData.get(n.dataId),s=sizeFromShape$1(n.shape),a=n.shape[n.shape.length-1],i=s/a,l=reshape$3({inputs:{x:n},backend:t,attrs:{shape:[i,a]}}),u=l.shape,h=new FFTProgram$1("real",u,e),f=new FFTProgram$1("imag",u,e),c=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:u},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:u}],o=t.runWebGLProgram(h,c,"float32"),d=t.runWebGLProgram(f,c,"float32"),m=complex$2({inputs:{real:o,imag:d},backend:t});t.disposeIntermediateTensorInfo(o),t.disposeIntermediateTensorInfo(d);const g=reshape$3({inputs:{x:m},backend:t,attrs:{shape:n.shape}});return t.disposeIntermediateTensorInfo(l),t.disposeIntermediateTensorInfo(m),g}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fft$1(n){const{inputs:e,backend:t}=n,{input:r}=e;return fftImpl$1(r,!1,t)}const fftConfig$1={kernelName:FFT$1,backendName:"webgl",kernelFunc:fft$1};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let FillProgram$1=class{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fill$2(n){const{backend:e,attrs:t}=n,{shape:r,value:s}=t;let{dtype:a}=t;if(a=a||inferDtype$1(s),a==="string"){const i=getArrayFromDType$1(a,sizeFromShape$1(r));return i.fill(s),e.makeTensorInfo(r,a,i)}else{const i=new FillProgram$1(r,s),l=[[s]];return e.runWebGLProgram(i,[],a,l)}}const fillConfig$1={kernelName:Fill$1,backendName:"webgl",kernelFunc:fill$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let FlipLeftRightProgram$1=class{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const flipLeftRightConfig$1={kernelName:FlipLeftRight$1,backendName:"webgl",kernelFunc:({inputs:n,backend:e})=>{const{image:t}=n,r=e,s=new FlipLeftRightProgram$1(t.shape);return r.runWebGLProgram(s,[t],t.dtype)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const FLOOR$1="return floor(x);",floor$1=unaryKernelFunc$1({opSnippet:FLOOR$1,packedOpSnippet:FLOOR$1,cpuKernelImpl:floorImplCPU$1}),floorConfig$1={kernelName:Floor$1,backendName:"webgl",kernelFunc:floor$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const INT_DIV=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,INT_DIV_PACKED=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,floorDiv$2=binaryKernelFunc$1({opSnippet:INT_DIV,packedOpSnippet:INT_DIV_PACKED,dtype:"int32"}),floorDivConfig$1={kernelName:FloorDiv$1,backendName:"webgl",kernelFunc:floorDiv$2};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let FromPixelsProgram$1=class{constructor(e){this.variableNames=["A"];const t=getGlslDifferences(),[r,s]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${r}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FromPixelsPackedProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=getGlslDifferences(),[r,s]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${s}.0, ${r}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const fromPixelsConfig$1={kernelName:FromPixels$1,backendName:"webgl",kernelFunc:fromPixels$1};let fromPixels2DContext$1,willReadFrequently$1=env$1().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function fromPixels$1(n){const{inputs:e,backend:t,attrs:r}=n;let{pixels:s}=e;const{numChannels:a}=r,i=typeof HTMLVideoElement<"u"&&s instanceof HTMLVideoElement,l=typeof HTMLImageElement<"u"&&s instanceof HTMLImageElement,[u,h]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],f=[h,u],c=[h,u,a];if(l||i){const g=env$1().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(fromPixels2DContext$1==null||g!==willReadFrequently$1)&&(willReadFrequently$1=g,fromPixels2DContext$1=document.createElement("canvas").getContext("2d",{willReadFrequently:willReadFrequently$1})),fromPixels2DContext$1.canvas.width=u,fromPixels2DContext$1.canvas.height=h,fromPixels2DContext$1.drawImage(s,0,0,u,h),s=fromPixels2DContext$1.canvas}const o=t.makeTensorInfo(f,"int32");t.texData.get(o.dataId).usage=TextureUsage.PIXELS,t.gpgpu.uploadPixelDataToTexture(t.getTexture(o.dataId),s);const d=env$1().getBool("WEBGL_PACK")?new FromPixelsPackedProgram(c):new FromPixelsProgram$1(c),m=t.runWebGLProgram(d,[o],"int32");return t.disposeData(o.dataId),m}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedConv2d$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a,bias:i,preluActivationWeights:l}=e,{strides:u,pad:h,dataFormat:f,dilations:c,dimRoundingMode:o,activation:d,leakyreluAlpha:m}=r,g=convertConv2DDataFormat$1(f),y=computeConv2DInfo$1(s.shape,a.shape,u,c,h,o,!1,g);let $;const b=[],x=i!=null,w=l!=null,v=d==="leakyrelu",S=()=>{const C=[s,a],I=(N,P)=>{if(P==="NCHW"&&N.shape.length===1&&N.shape[0]!==1){const F=reshape$3({inputs:{x:N},backend:t,attrs:{shape:[N.shape[0],1,1]}});return b.push(F),F}return N};if(x&&C.push(I(i,f)),w&&C.push(I(l,f)),v){const N=t.makeTensorInfo([],"float32",createScalarValue$1(m,"float32"));C.push(N),b.push(N)}return C};if(y.filterHeight===1&&y.filterWidth===1&&y.dilationHeight===1&&y.dilationWidth===1&&y.strideHeight===1&&y.strideWidth===1&&(y.padInfo.type==="SAME"||y.padInfo.type==="VALID"))$=conv2dByMatMul$1({x:s,filter:a,convInfo:y,backend:t,bias:i,activation:d,preluActivationWeights:l,leakyreluAlpha:m});else if(y.strideWidth<=2&&g==="channelsLast"&&env$1().getBool("WEBGL_EXP_CONV")){const C=d?mapActivationToShaderProgram(d,!0):null,I=new Conv2DPackedProgram(y,x,C,w,v),N=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],P=S();$=t.runWebGLProgram(I,P,"float32",N)}else if(env$1().getBool("WEBGL_CONV_IM2COL"))$=conv2dWithIm2Row({x:s,filter:a,convInfo:y,backend:t,bias:i,activation:d,preluActivationWeights:l,leakyreluAlpha:m});else{const C=d?mapActivationToShaderProgram(d,!1):null,I=new Conv2DProgram(y,x,C,w,v),N=S();$=t.runWebGLProgram(I,N,"float32")}const T=reshape$3({inputs:{x:$},backend:t,attrs:{shape:y.outShape}});return b.push($),b.forEach(C=>t.disposeIntermediateTensorInfo(C)),T}const fusedConv2DConfig$1={kernelName:FusedConv2D$1,backendName:"webgl",kernelFunc:fusedConv2d$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedDepthwiseConv2D$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a,bias:i,preluActivationWeights:l}=e,{strides:u,pad:h,dilations:f,dimRoundingMode:c,activation:o,leakyreluAlpha:d}=r,m=[];let g=f;g==null&&(g=[1,1]),assert$2(eitherStridesOrDilationsAreOne$1(u,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${g}'`);const y=computeConv2DInfo$1(s.shape,a.shape,u,g,h,c,!0),$=env$1().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels===1,b=o?mapActivationToShaderProgram(o,$):null,x=[s,a],w=i!=null,v=l!=null,S=o==="leakyrelu";if(w&&x.push(i),v&&x.push(l),S){const N=t.makeTensorInfo([],"float32",createScalarValue$1(d,"float32"));x.push(N),m.push(N)}let T;$?T=new DepthwiseConvPacked2DProgram(y,w,b,v,S):T=new DepthwiseConv2DProgram$1(y,w,b,v,S);const C=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],I=t.runWebGLProgram(T,x,"float32",C);return m.forEach(N=>t.disposeIntermediateTensorInfo(N)),I}const fusedDepthwiseConv2DConfig$1={kernelName:FusedDepthwiseConv2D$1,backendName:"webgl",kernelFunc:fusedDepthwiseConv2D$1};let GatherNDProgram$1=class{constructor(e,t,r,s){this.sliceDim=e,this.strides=t,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=r;const a=getCoordsDataType$1(r.length);let i=`
    int index;`;for(let l=0;l<this.sliceDim;l++)i+=`
          index = round(getIndices(coords[0], ${l}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[l]};
          flattenIndex += index * ${this.strides[l]};`;this.userCode=`
         void main() {
          ${a} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${i}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherNd$1(n){const{inputs:e,backend:t}=n,{params:r,indices:s}=e,a=s.shape,i=a[a.length-1],l=sizeFromShape$1(r.shape),[u,h,f,c]=prepareAndValidate$1(r,s),o=reshape$3({inputs:{x:s},backend:t,attrs:{shape:[h,i]}}),d=reshape$3({inputs:{x:r},backend:t,attrs:{shape:[sizeFromShape$1(r.shape)/f,f]}});if(t.shouldExecuteOnCPU([r,s])||r.dtype==="string"){const $=t.readSync(s.dataId),b=t.bufferSync(r),x=gatherNdImplCPU$1($,b,r.dtype,h,i,f,c,r.shape,l);return t.makeTensorInfo(u,r.dtype,x.values)}const m=new GatherNDProgram$1(i,c,[h,f],r.shape),g=t.runWebGLProgram(m,[d,o],d.dtype),y=reshape$3({inputs:{x:g},backend:t,attrs:{shape:u}});return t.disposeIntermediateTensorInfo(o),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(g),y}const gatherNdConfig$1={kernelName:GatherNd$1,backendName:"webgl",kernelFunc:gatherNd$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let GatherProgram$1=class{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const r=getCoordsDataType$1(this.rank),s=getSourceCoords$3(e);this.userCode=`
      void main() {
        ${r} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${s}));
      }
    `}};function getSourceCoords$3(n,e){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let s=0;s<n.length;s++)s===2?r.push("index"):r.push(`${t[s]}`);return r.join()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherV2$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,indices:a}=e,{axis:i,batchDims:l}=r,u=parseAxisParam$1(i,s.shape)[0];if(env$1().get("DEBUG")){const b=t.readSync(a.dataId),x=s.shape[u];for(let w=0;w<b.length;++w){const v=b[w];assert$2(v<=x-1&&v>=0,()=>`GatherV2: the index value ${v} is not in [0, ${x-1}]`)}}const h=collectGatherOpShapeInfo$1(s,a,u,l),f=sizeFromShape$1(a.shape),c=[],o=reshape$3({inputs:{x:s},backend:t,attrs:{shape:[h.batchSize,h.outerSize,h.dimSize,h.sliceSize]}}),d=reshape$3({inputs:{x:a},backend:t,attrs:{shape:[h.batchSize,f/h.batchSize]}});c.push(o),c.push(d);const m=[h.batchSize,h.outerSize,f/h.batchSize,h.sliceSize];if(t.shouldExecuteOnCPU([s,a])||s.dtype==="string"){const b=t.bufferSync(d),x=t.bufferSync(o),w=gatherV2ImplCPU$1(x,b,m);return c.forEach(v=>t.disposeIntermediateTensorInfo(v)),t.makeTensorInfo(h.outputShape,w.dtype,w.values)}const g=new GatherProgram$1(o.shape,m),y=t.runWebGLProgram(g,[o,d],o.dtype);c.push(y);const $=reshape$3({inputs:{x:y},backend:t,attrs:{shape:h.outputShape}});return c.forEach(b=>t.disposeIntermediateTensorInfo(b)),$}const gatherV2Config$1={kernelName:GatherV2$1,backendName:"webgl",kernelFunc:gatherV2$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const GREATER$1="return float(a > b);",GREATER_PACKED=`
  return vec4(greaterThan(a, b));
`,greater$1=binaryKernelFunc$1({opSnippet:GREATER$1,packedOpSnippet:GREATER_PACKED,cpuKernelImpl:greaterImplCPU$1,dtype:"bool"}),greaterConfig$1={kernelName:Greater$1,backendName:"webgl",kernelFunc:greater$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const GREATER_EQUAL$1="return float(a >= b);",GREATER_EQUAL_PACKED=`
  return vec4(greaterThanEqual(a, b));
`,greaterEqual$1=binaryKernelFunc$1({opSnippet:GREATER_EQUAL$1,packedOpSnippet:GREATER_EQUAL_PACKED,dtype:"bool",cpuKernelImpl:greaterEqualImplCPU$1}),greaterEqualConfig$1={kernelName:GreaterEqual$1,backendName:"webgl",kernelFunc:greaterEqual$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ifft$1(n){const{inputs:e,backend:t}=n,{input:r}=e;return fftImpl$1(r,!0,t)}const ifftConfig$1={kernelName:IFFT$1,backendName:"webgl",kernelFunc:ifft$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const IS_FINITE$1="return float(!isnan(x) && !isinf(x));",isFinite$2=unaryKernelFunc$1({opSnippet:IS_FINITE$1,dtype:"bool"}),isFiniteConfig$1={kernelName:IsFinite$1,backendName:"webgl",kernelFunc:isFinite$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const IS_INF$1="return float(isinf(x));",isInf$1=unaryKernelFunc$1({opSnippet:IS_INF$1,dtype:"bool"}),isInfConfig$1={kernelName:IsInf$1,backendName:"webgl",kernelFunc:isInf$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const IS_NAN$1="return float(isnan(x));",isNaN$2=unaryKernelFunc$1({opSnippet:IS_NAN$1,dtype:"bool"}),isNaNConfig$1={kernelName:IsNan$1,backendName:"webgl",kernelFunc:isNaN$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LESS$1="return float(a < b);",LESS_PACKED=`
  return vec4(lessThan(a, b));
`,less$1=binaryKernelFunc$1({opSnippet:LESS$1,packedOpSnippet:LESS_PACKED,cpuKernelImpl:lessImplCPU$1,dtype:"bool"}),lessConfig$1={kernelName:Less$1,backendName:"webgl",kernelFunc:less$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LESS_EQUAL$1="return float(a <= b);",LESS_EQUAL_PACKED=`
  return vec4(lessThanEqual(a, b));
`,lessEqual$1=binaryKernelFunc$1({opSnippet:LESS_EQUAL$1,packedOpSnippet:LESS_EQUAL_PACKED,cpuKernelImpl:lessEqualImplCPU$1,dtype:"bool"}),lessEqualConfig$1={kernelName:LessEqual$1,backendName:"webgl",kernelFunc:lessEqual$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linSpace$1(n){const{backend:e,attrs:t}=n,{start:r,stop:s,num:a}=t,i=linSpaceImplCPU(r,s,a);return e.makeTensorInfo([i.length],"float32",i)}const linSpaceConfig$1={kernelName:LinSpace$1,backendName:"webgl",kernelFunc:linSpace$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOG$1=CHECK_NAN_SNIPPET_UNARY+`
  return x < 0.0 ? 0./0. : log(x);
`,LOG_PACKED=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,log$1=unaryKernelFunc$1({opSnippet:LOG$1,packedOpSnippet:LOG_PACKED,cpuKernelImpl:logImplCPU$1}),logConfig$1={kernelName:Log$1,backendName:"webgl",kernelFunc:log$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOG1P$1=CHECK_NAN_SNIPPET_UNARY+`
  return log(1.0 + x);
`,log1p$1=unaryKernelFunc$1({opSnippet:LOG1P$1}),log1pConfig$1={kernelName:Log1p$1,backendName:"webgl",kernelFunc:log1p$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOGICAL_AND$1="return float(a >= 1.0 && b >= 1.0);",LOGICAL_AND_PACKED=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,logicalAnd$1=binaryKernelFunc$1({opSnippet:LOGICAL_AND$1,packedOpSnippet:LOGICAL_AND_PACKED,dtype:"bool"}),logicalAndConfig$1={kernelName:LogicalAnd$1,backendName:"webgl",kernelFunc:logicalAnd$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOGICAL_NOT$1="return float(!(x >= 1.0));",logicalNot$1=unaryKernelFunc$1({opSnippet:LOGICAL_NOT$1}),logicalNotConfig$1={kernelName:LogicalNot$1,backendName:"webgl",kernelFunc:logicalNot$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOGICAL_OR$1="return float(a >= 1.0 || b >= 1.0);",LOGICAL_OR_PACKED=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,logicalOr$1=binaryKernelFunc$1({opSnippet:LOGICAL_OR$1,packedOpSnippet:LOGICAL_OR_PACKED,dtype:"bool"}),logicalOrConfig$1={kernelName:LogicalOr$1,backendName:"webgl",kernelFunc:logicalOr$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let LRNProgram$1=class{constructor(e,t,r,s,a){this.variableNames=["x"],this.outputShape=[];const i=t,l=e[3]-1;this.outputShape=e;let u;const h=`float(${r}) + float(${s}) * sum`;a===.5?u=`inversesqrt(${h})`:a===1?u=`1.0/(${h})`:u=`exp(log(${h}) * float(-${a}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${l}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${u};
        setOutput(val);
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class LRNPackedProgram{constructor(e,t,r,s,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const i=t,l=e[3]-1;this.outputShape=e;let u;const h=`float(${r}) + float(${s}) * sum`;a===.5?u=`inversesqrt(${h})`:a===1?u=`1.0/(${h})`:u=`exp(log(${h}) * float(-${a}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${l}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${u};
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lrn$1=n=>{const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{depthRadius:a,bias:i,alpha:l,beta:u}=r,h=env$1().getBool("WEBGL_PACK_NORMALIZATION")?new LRNPackedProgram(s.shape,a,i,l,u):new LRNProgram$1(s.shape,a,i,l,u);return t.runWebGLProgram(h,[s],s.dtype)},LRNConfig={kernelName:LRN$1,backendName:"webgl",kernelFunc:lrn$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let LRNGradProgram$1=class{constructor(e,t,r,s,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=r,this.alpha=s,this.beta=a,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${s}) * norm + float(${r});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${s})
                * float(${a})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${a});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lrnGrad$1=n=>{const{inputs:e,backend:t,attrs:r}=n,{x:s,y:a,dy:i}=e,{depthRadius:l,bias:u,alpha:h,beta:f}=r,c=new LRNGradProgram$1(s.shape,l,u,h,f);return t.runWebGLProgram(c,[s,a,i],s.dtype)},LRNGradConfig={kernelName:LRNGrad$1,backendName:"webgl",kernelFunc:lrnGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxImpl$1(n,e,t,r){const s=sizeFromShape$1(e),i=sizeFromShape$1(n.shape)/s,l=reshape$3({inputs:{x:n},attrs:{shape:[i,s]},backend:r}),u=reduce$1(l,n.dtype,"max",r),h=reshape$3({inputs:{x:u},attrs:{shape:t},backend:r});return r.disposeIntermediateTensorInfo(l),r.disposeIntermediateTensorInfo(u),h}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function max$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{reductionIndices:a,keepDims:i}=r,l=s.shape.length,u=parseAxisParam$1(a,s.shape);let h=u;const f=getAxesPermutation$1(h,l),c=f!=null,o=t.shouldExecuteOnCPU([s]);let d=s;if(c){if(o){const x=t.texData.get(d.dataId).values,w=new Array(l);for(let T=0;T<w.length;T++)w[T]=s.shape[f[T]];const v=transposeImplCPU$1(x,s.shape,s.dtype,f,w);d=t.makeTensorInfo(w,s.dtype);const S=t.texData.get(d.dataId);S.values=v}else d=transposeImpl$1(s,f,t);h=getInnerMostAxes$1(h.length,l)}assertAxesAreInnerMostDims$1("max",h,l);const[m,g]=computeOutAndReduceShapes$1(d.shape,h);let y=m;i&&(y=expandShapeToKeepDim$1(m,u));let $;if(o){const x=t.texData.get(d.dataId).values,w=maxImplCPU$1(x,sizeFromShape$1(g),y,s.dtype);$=t.makeTensorInfo(y,s.dtype);const v=t.texData.get($.dataId);v.values=w}else $=maxImpl$1(d,g,y,t);return c&&t.disposeIntermediateTensorInfo(d),$}const maxConfig$1={kernelName:Max$1,backendName:"webgl",kernelFunc:max$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MAXIMUM=CHECK_NAN_SNIPPET+`
  return max(a, b);
`,MAXIMUM_PACKED=`
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,maximum$2=binaryKernelFunc$1({opSnippet:MAXIMUM,packedOpSnippet:MAXIMUM_PACKED,cpuKernelImpl:maximumImplCPU$1}),maximumConfig$1={kernelName:Maximum$2,backendName:"webgl",kernelFunc:maximum$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e;assertNotComplex$1(s,"maxPool");const{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=r,h=1;assert$2(eitherStridesOrDilationsAreOne$1(i,h),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${h}'`);const f=computePool2DInfo$1(s.shape,a,i,h,l,u);if(f.filterWidth===1&&f.filterHeight===1&&arraysEqual$1(f.inShape,f.outShape))return identity$1({inputs:{x:s},backend:t});const c=new Pool2DProgram$1(f,"max",!1);return t.runWebGLProgram(c,[s],s.dtype)}const maxPoolConfig$1={kernelName:MaxPool$1,backendName:"webgl",kernelFunc:maxPool$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3d$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{filterSize:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:h}=r,f=[1,1,1],c=computePool3DInfo$1(s.shape,a,i,f,l,h,u),o=new Pool3DProgram$1(c,"max",!1);return t.runWebGLProgram(o,[s],s.dtype)}const maxPool3DConfig$1={kernelName:MaxPool3D$1,backendName:"webgl",kernelFunc:maxPool3d$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let MaxPool2DBackpropProgram$1=class{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,r=e.strideWidth,s=e.dilationHeight,a=e.effectiveFilterHeight,i=e.effectiveFilterWidth,l=a-1-e.padInfo.top,u=i-1-e.padInfo.left,h=a*i-1;this.userCode=`
      const ivec2 pads = ivec2(${l}, ${u});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${a};
          wR += ${s}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${h} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}},MaxPool3DBackpropProgram$1=class{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,r=e.strideHeight,s=e.strideWidth,a=e.dilationDepth,i=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,h=e.effectiveFilterHeight,f=e.effectiveFilterWidth,c=u-1-e.padInfo.front,o=h-1-e.padInfo.top,d=f-1-e.padInfo.left,m=u*h*f-1;this.userCode=`
      const ivec3 pads = ivec3(${c}, ${o}, ${d});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${u};
           wD += ${a}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${h};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${r}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${f};
                wC += ${l}) {
              float dyC = float(dyCCorner + wC) / ${s}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${m} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${h} * ${f} +
                  wR * ${f} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3DGrad$1(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:a}=e,i=a,{filterSize:l,strides:u,pad:h,dimRoundingMode:f}=r,c=[1,1,1],o=computePool3DInfo$1(i.shape,l,u,c,h,f),d=new Pool3DProgram$1(o,"max",!0),m=t.runWebGLProgram(d,[i],i.dtype),g=new MaxPool3DBackpropProgram$1(o),y=t.runWebGLProgram(g,[s,m],i.dtype);return t.disposeIntermediateTensorInfo(m),y}const maxPool3DGradConfig$1={kernelName:MaxPool3DGrad$1,backendName:"webgl",kernelFunc:maxPool3DGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolGrad$1(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:a,output:i}=e,l=a;assertNotComplex$1([a,i],"maxPoolGrad");const{filterSize:u,strides:h,pad:f,dimRoundingMode:c}=r,o=computePool2DInfo$1(l.shape,u,h,1,f,c),d=!0,m=new Pool2DProgram$1(o,"max",d),g=t.runWebGLProgram(m,[l],l.dtype),y=new MaxPool2DBackpropProgram$1(o),$=t.runWebGLProgram(y,[s,g],l.dtype);return t.disposeIntermediateTensorInfo(g),$}const maxPoolGradConfig$1={kernelName:MaxPoolGrad$1,backendName:"webgl",kernelFunc:maxPoolGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolWithArgmaxImpl(n,e,t,r){let s=new Pool2DProgram$1(t,"max",!1);const a=r.runWebGLProgram(s,[n],"float32");s=new Pool2DProgram$1(t,"max",!0,!0,e);const i=r.runWebGLProgram(s,[n],"float32");return[a,i]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxPoolWithArgmaxConfig$1={kernelName:MaxPoolWithArgmax$1,backendName:"webgl",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{x:r}=n,{filterSize:s,strides:a,pad:i,includeBatchInIndex:l}=e,u=t;assert$2(r.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);const h=[1,1];assert$2(eitherStridesOrDilationsAreOne$1(a,h),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${h}'`);const f=computePool2DInfo$1(r.shape,s,a,h,i),[c,o]=maxPoolWithArgmaxImpl(r,l,f,u);return[c,o]}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function meanImpl(n,e,t,r){const s=sizeFromShape$1(e),i=sizeFromShape$1(n.shape)/s,l=reshape$3({inputs:{x:n},attrs:{shape:[i,s]},backend:r}),u=reduce$1(l,"float32","mean",r),h=reshape$3({inputs:{x:u},attrs:{shape:t},backend:r});return r.disposeIntermediateTensorInfo(l),r.disposeIntermediateTensorInfo(u),h}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const meanConfig$1={kernelName:Mean$1,backendName:"webgl",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{x:r}=n,{keepDims:s,axis:a}=e,i=t,l=r.shape.length,u=parseAxisParam$1(a,r.shape);let h=u;const f=getAxesPermutation$1(h,l),c=f!=null,o=i.shouldExecuteOnCPU([r]),d=[];let m=r;if(c){if(o){const w=i.texData.get(m.dataId).values,v=new Array(l);for(let C=0;C<v.length;C++)v[C]=r.shape[f[C]];const S=transposeImplCPU$1(w,r.shape,r.dtype,f,v);m=i.makeTensorInfo(v,r.dtype);const T=i.texData.get(m.dataId);T.values=S}else m=transposeImpl$1(r,f,i);d.push(m),h=getInnerMostAxes$1(h.length,l)}assertAxesAreInnerMostDims$1("sum",h,l);const[g,y]=computeOutAndReduceShapes$1(m.shape,h);let $=g;s&&($=expandShapeToKeepDim$1(g,u));const b=meanImpl(m,y,$,i);for(const x of d)i.disposeIntermediateTensorInfo(x);return b}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function min$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,keepDims:i}=r,l=s.shape.length,u=parseAxisParam$1(a,s.shape);let h=u;const f=getAxesPermutation$1(h,l);let c=s;f!=null&&(c=transpose$1({inputs:{x:s},backend:t,attrs:{perm:f}}),h=getInnerMostAxes$1(h.length,s.shape.length)),assertAxesAreInnerMostDims$1("min",h,l);const[o,d]=computeOutAndReduceShapes$1(c.shape,h),m=sizeFromShape$1(d),g=reshape$3({inputs:{x:c},backend:t,attrs:{shape:[-1,m]}}),y=reduce$1(g,g.dtype,"min",t);let $;if(i){const b=expandShapeToKeepDim$1(o,u);$=reshape$3({inputs:{x:y},backend:t,attrs:{shape:b}})}else $=reshape$3({inputs:{x:y},backend:t,attrs:{shape:o}});return t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(y),f!=null&&t.disposeIntermediateTensorInfo(c),$}const minConfig$1={kernelName:Min$1,backendName:"webgl",kernelFunc:min$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MINIMUM=CHECK_NAN_SNIPPET+`
  return min(a, b);
`,MINIMUM_PACKED=`
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,minimum$1=binaryKernelFunc$1({opSnippet:MINIMUM,packedOpSnippet:MINIMUM_PACKED,cpuKernelImpl:minimumImplCPU$1}),minimumConfig$1={kernelName:Minimum$2,backendName:"webgl",kernelFunc:minimum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let MirrorPadProgram$1=class{constructor(e,t,r){this.variableNames=["x"],this.outputShape=t.map((f,c)=>f[0]+e[c]+f[1]);const s=e.length,a=getCoordsDataType$1(s),i=t.map(f=>f[0]).join(","),l=t.map((f,c)=>f[0]+e[c]).join(","),u=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),h=r==="reflect"?0:1;if(s===1){this.userCode=`
        int start = ${i};
        int end = ${l};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${h};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${h};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${a} start = ${a}(${i});
      ${a} end = ${a}(${l});

      void main() {
        ${a} outC = getOutputCoords();
        for (int i = 0; i < ${s}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${h};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${h};
          }
        }
        ${a} coords = outC - start;
        setOutput(getX(${u}));
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MirrorPadPackedProgram{constructor(e,t,r){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((m,g)=>m[0]+e[g]+m[1]);const s=e.length,a=getCoordsDataType$1(s),i=t.map(m=>m[0]).join(","),l=t.map((m,g)=>m[0]+e[g]).join(","),u=getChannels("rc",s),h=getChannels("source",s),f=`${u[s-1]} < ${this.outputShape[s-1]}`,c=s===1?"source":`vec2(${h.slice(-2).join()})`,o=r==="reflect"?0:1;let d="";if(s===1){const m=`
        ${a} source = rc;
        if (source < start) {
          source = start * 2 - source - ${o};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${o};
        }
        source -= start;
      `;d=`
        ${a} rc = outputLoc;
        ${m}
        result[0] = getChannel(getX(${h.join()}), ${c});
        ${u[s-1]} += 1;
        if(${f}) {
          ${m}
          result[1] = getChannel(getX(${h.join()}), ${c});
        }
      `}else{const m=`
        ${a} source = rc;
        ${a} lt = ${a}(lessThan(source, start));
        ${a} gte = ${a}(greaterThanEqual(source, end));
        ${a} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${o}) +
                gte * ((end - 1) * 2 - source + ${o});
        source -= start;
      `;d=`
        ${a} rc = outputLoc;
        ${m}
        result[0] = getChannel(getX(${h.join()}), ${c});
        ${u[s-1]} += 1;
        if(${f}) {
          ${m}
          result[1] = getChannel(getX(${h.join()}), ${c});
        }
        rc = outputLoc;
        ${u[s-2]} += 1;
        if(${u[s-2]} < ${this.outputShape[s-2]}) {
          ${m}
          result[2] = getChannel(getX(${h.join()}), ${c});
          ${u[s-1]} += 1;
          if(${f}) {
            ${m}
            result[3] = getChannel(getX(${h.join()}), ${c});
          }
        }
      `}this.userCode=`
      const ${a} start = ${a}(${i});
      const ${a} end = ${a}(${l});

      void main() {
        ${a} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${d}
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const mirrorPadKernelFunc=({inputs:n,backend:e,attrs:t})=>{const{x:r}=n,{paddings:s,mode:a}=t,i=env$1().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new MirrorPadPackedProgram(r.shape,s,a):new MirrorPadProgram$1(r.shape,s,a);return e.runWebGLProgram(i,[r],r.dtype)},mirrorPadConfig$1={kernelName:MirrorPad$1,backendName:"webgl",kernelFunc:mirrorPadKernelFunc};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MOD$1=`if (b == 0.0) return NAN;
  return mod(a, b);`,MOD_PACKED=`
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,mod$1=binaryKernelFunc$1({opSnippet:MOD$1,packedOpSnippet:MOD_PACKED}),modConfig$1={kernelName:Mod$1,backendName:"webgl",kernelFunc:mod$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let MultinomialProgram$1=class{constructor(e,t,r){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,r],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t-1}));
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const DIV$1=`
if (a == b) {
  return 1.0;
};
return a / b;`,DIV_PACKED=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,realDiv$1=binaryKernelFunc$1({opSnippet:DIV$1,packedOpSnippet:DIV_PACKED,checkOutOfBounds:!0}),realDivConfig$1={kernelName:RealDiv$1,backendName:"webgl",kernelFunc:realDiv$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SUB$1="return a - b;",sub$2=binaryKernelFunc$1({opSnippet:SUB$1,packedOpSnippet:SUB$1,supportsComplex:!0,cpuKernelImpl:subImplCPU$1}),subConfig$1={kernelName:Sub$1,backendName:"webgl",kernelFunc:sub$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softmax$1(n){const{inputs:e,backend:t,attrs:r}=n,{logits:s}=e,{dim:a}=r,i=parseAxisParam$1([a],s.shape),l=max$1({inputs:{x:s},backend:t,attrs:{reductionIndices:i,keepDims:!1}}),u=expandShapeToKeepDim$1(l.shape,i),h=reshape$3({inputs:{x:l},backend:t,attrs:{shape:u}}),f=sub$2({inputs:{a:s,b:h},backend:t}),c=exp$1({inputs:{x:f},backend:t}),o=sum$2({inputs:{x:c},backend:t,attrs:{axis:i,keepDims:!1}}),d=reshape$3({inputs:{x:o},backend:t,attrs:{shape:u}}),m=realDiv$1({inputs:{a:c,b:d},backend:t});return t.disposeIntermediateTensorInfo(l),t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(o),t.disposeIntermediateTensorInfo(d),m}const softmaxConfig$1={kernelName:Softmax$3,backendName:"webgl",kernelFunc:softmax$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function multinomial$1(n){const{inputs:e,backend:t,attrs:r}=n,{logits:s}=e,{numSamples:a,seed:i,normalized:l}=r,u=l?s:softmax$1({inputs:{logits:s},backend:t,attrs:{dim:s.shape.length-1}}),h=u.shape[0],f=u.shape[1],c=new MultinomialProgram$1(h,f,a),o=[[i]],d=t.runWebGLProgram(c,[u],"int32",o);return l||t.disposeIntermediateTensorInfo(u),d}const multinomialConfig$1={kernelName:Multinomial$1,backendName:"webgl",kernelFunc:multinomial$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NEG$1=CHECK_NAN_SNIPPET$1+`
  return -x;
`,NEG_PACKED=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;function neg$1(n){const{inputs:e,backend:t}=n,{x:r}=e;if(t.shouldExecuteOnCPU([r])){const a=t.texData.get(r.dataId),[i,l]=negImplCPU$1(a.values,r.shape,r.dtype);return t.makeTensorInfo(l,r.dtype,i)}let s;return env$1().getBool("WEBGL_PACK_UNARY_OPERATIONS")?s=new UnaryOpPackedProgram(r.shape,NEG_PACKED):s=new UnaryOpProgram$1(r.shape,NEG$1),t.runWebGLProgram(s,[r],r.dtype)}const negConfig$1={kernelName:Neg$1,backendName:"webgl",kernelFunc:neg$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV3Impl$1=nonMaxSuppressionV3Impl$3;function nonMaxSuppressionV3$1(n){warn$1("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:t,attrs:r}=n,{boxes:s,scores:a}=e,{maxOutputSize:i,iouThreshold:l,scoreThreshold:u}=r,h=t.readSync(s.dataId),f=t.readSync(a.dataId),{selectedIndices:c}=nonMaxSuppressionV3Impl$1(h,f,i,l,u);return t.makeTensorInfo([c.length],"int32",new Int32Array(c))}const nonMaxSuppressionV3Config$1={kernelName:NonMaxSuppressionV3$1,backendName:"webgl",kernelFunc:nonMaxSuppressionV3$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV4Impl=nonMaxSuppressionV4Impl$2;function nonMaxSuppressionV4(n){warn$1("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:t,attrs:r}=n,{boxes:s,scores:a}=e,{maxOutputSize:i,iouThreshold:l,scoreThreshold:u,padToMaxOutputSize:h}=r,f=t.readSync(s.dataId),c=t.readSync(a.dataId),{selectedIndices:o,validOutputs:d}=nonMaxSuppressionV4Impl(f,c,i,l,u,h);return[t.makeTensorInfo([o.length],"int32",new Int32Array(o)),t.makeTensorInfo([],"int32",new Int32Array([d]))]}const nonMaxSuppressionV4Config={kernelName:NonMaxSuppressionV4,backendName:"webgl",kernelFunc:nonMaxSuppressionV4};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV5Impl$1=nonMaxSuppressionV5Impl$3;function nonMaxSuppressionV5$1(n){warn$1("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:t,attrs:r}=n,{boxes:s,scores:a}=e,{maxOutputSize:i,iouThreshold:l,scoreThreshold:u,softNmsSigma:h}=r,f=t.readSync(s.dataId),c=t.readSync(a.dataId),o=i,d=l,m=u,g=h,{selectedIndices:y,selectedScores:$}=nonMaxSuppressionV5Impl$1(f,c,o,d,m,g);return[t.makeTensorInfo([y.length],"int32",new Int32Array(y)),t.makeTensorInfo([$.length],"float32",new Float32Array($))]}const nonMaxSuppressionV5Config$1={kernelName:NonMaxSuppressionV5$1,backendName:"webgl",kernelFunc:nonMaxSuppressionV5$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let OneHotProgram$1=class{constructor(e,t,r,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${s}), float(${r}),
                      float(index == coords.y)));
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const oneHot$1=n=>{const{inputs:e,backend:t,attrs:r}=n,{indices:s}=e,{dtype:a,depth:i,onValue:l,offValue:u}=r,h=sizeFromShape$1(s.shape),f=new OneHotProgram$1(h,i,l,u),c=reshape$3({inputs:{x:s},backend:t,attrs:{shape:[h]}}),o=t.runWebGLProgram(f,[c],a);t.disposeIntermediateTensorInfo(c);const d=[...s.shape,i],m=reshape$3({inputs:{x:o},backend:t,attrs:{shape:d}});return t.disposeIntermediateTensorInfo(o),m},oneHotConfig$1={kernelName:OneHot$1,backendName:"webgl",kernelFunc:oneHot$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zerosLike$2(n){const{inputs:e,backend:t}=n,{x:r}=e;if(r.dtype==="complex64"){const s=real$1({inputs:{input:r},backend:t}),a=zerosLike$2({inputs:{x:s},backend:t}),i=imag$1({inputs:{input:r},backend:t}),l=zerosLike$2({inputs:{x:i},backend:t}),u=complex$2({inputs:{real:a,imag:l},backend:t});return t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(l),u}else return fill$2({attrs:{shape:r.shape,dtype:r.dtype,value:r.dtype==="string"?"":0},backend:t})}const zerosLikeConfig$1={kernelName:ZerosLike$1,backendName:"webgl",kernelFunc:zerosLike$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function onesLike$1(n){const{inputs:e,backend:t}=n,{x:r}=e;if(r.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(r.dtype==="complex64"){const s=real$1({inputs:{input:r},backend:t}),a=onesLike$1({inputs:{x:s},backend:t}),i=imag$1({inputs:{input:r},backend:t}),l=zerosLike$2({inputs:{x:i},backend:t}),u=complex$2({inputs:{real:a,imag:l},backend:t});return t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(l),u}else return fill$2({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:t})}const onesLikeConfig$1={kernelName:OnesLike$1,backendName:"webgl",kernelFunc:onesLike$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pack$1(n){const{inputs:e,backend:t,attrs:r}=n,{axis:s}=r;if(e.length===1)return expandDims$1({inputs:{input:e[0]},backend:t,attrs:{dim:s}});const a=e[0].shape,i=e[0].dtype;e.forEach(f=>{assertShapesMatch$1(a,f.shape,"All tensors passed to stack must have matching shapes"),assert$2(i===f.dtype,()=>"All tensors passed to stack must have matching dtypes")});const l=[],u=e.map(f=>{const c=expandDims$1({inputs:{input:f},backend:t,attrs:{dim:s}});return l.push(c),c}),h=concat$1({inputs:u,backend:t,attrs:{axis:s}});return l.forEach(f=>t.disposeIntermediateTensorInfo(f)),h}const packConfig$1={kernelName:Pack$1,backendName:"webgl",kernelFunc:pack$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let PadProgram$1=class{constructor(e,t,r){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((h,f)=>h[0]+e[f]+h[1]);const s=e.length,a=getCoordsDataType$1(s),i=t.map(h=>h[0]).join(","),l=t.map((h,f)=>h[0]+e[f]).join(","),u=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);if(s===1){this.userCode=`
        int start = ${i};
        int end = ${l};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${a} start = ${a}(${i});
      ${a} end = ${a}(${l});

      void main() {
        ${a} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${a} coords = outC - start;
          setOutput(getX(${u}));
        }
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class PadPackedProgram{constructor(e,t,r){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((g,y)=>g[0]+e[y]+g[1]);const s=e.length,a=getCoordsDataType$1(s),i=t.map(g=>g[0]).join(","),l=t.map((g,y)=>g[0]+e[y]).join(","),u=getChannels("rc",s),h=getChannels("source",s),f=`${u[s-1]} < ${this.outputShape[s-1]}`,c=s===1?"source":`vec2(${h.slice(-2).join()})`,o=[`${a} rc = outputLoc;`,`${u[s-1]} += 1;
       if(${f}) {
      `,s===1?"":`}
       rc = outputLoc;
       ${u[s-2]} += 1;
       if(${u[s-2]} < ${this.outputShape[s-2]}) {`,s===1?"":`  ${u[s-1]} += 1;
         if(${f}) {`],d=s===1?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let m="";for(let g=0,y=s===1?2:4;g<y;g++)m+=`
        ${o[g]}
        if (${d}) {
          result[${g}] = float(value);
        } else {
          ${a} source = rc - start;
          result[${g}] = getChannel(getX(${h.join()}), ${c});
        }
      `;m+=s===1?"} ":"}}",this.userCode=`
      const ${a} start = ${a}(${i});
      const ${a} end = ${a}(${l});

      void main() {
        ${a} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${m}
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const padV2$1=n=>{const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{paddings:a,constantValue:i}=r;if(sizeFromShape$1(s.shape)===0){const h=a.map((f,c)=>f[0]+s.shape[c]+f[1]);return fill$2({backend:t,attrs:{shape:h,value:i,dtype:s.dtype}})}const l=env$1().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new PadPackedProgram(s.shape,a,i):new PadProgram$1(s.shape,a,i),u=[[i]];return t.runWebGLProgram(l,[s],s.dtype,u)},padV2Config$1={kernelName:PadV2$1,backendName:"webgl",kernelFunc:padV2$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const POW$1=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,POW_PACKED=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,pow$2=binaryKernelFunc$1({opSnippet:POW$1,packedOpSnippet:POW_PACKED}),powConfig$1={kernelName:Pow$1,backendName:"webgl",kernelFunc:pow$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prod$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,keepDims:i}=r,l=s.shape.length,u=[],h=parseAxisParam$1(a,s.shape);let f=h;const c=getAxesPermutation$1(f,l);let o=s;c!=null&&(o=transpose$1({inputs:{x:s},backend:t,attrs:{perm:c}}),f=getInnerMostAxes$1(f.length,l),u.push(o)),assertAxesAreInnerMostDims$1("prod",f,l);let d;if(t.shouldExecuteOnCPU([o])){const m=t.texData.get(o.dataId).values,{outVals:g,outShape:y,outDtype:$}=prodImplCPU$1(o.shape,o.dtype,m,f);d=t.makeTensorInfo(y,$,g)}else{const[m,g]=computeOutAndReduceShapes$1(o.shape,f),y=sizeFromShape$1(g),$=reshape$3({inputs:{x:o},backend:t,attrs:{shape:[-1,y]}}),b=sumOutType$1(s.dtype),x=reduce$1($,b,"prod",t);d=reshape$3({inputs:{x},backend:t,attrs:{shape:m}}),u.push($),u.push(x)}if(i){u.push(d);const m=expandShapeToKeepDim$1(d.shape,h);d=reshape$3({inputs:{x:d},backend:t,attrs:{shape:m}})}return u.forEach(m=>t.disposeIntermediateTensorInfo(m)),d}const prodConfig$1={kernelName:Prod$1,backendName:"webgl",kernelFunc:prod$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedGather(n){const{inputs:e,backend:t,attrs:r}=n,{paramsNestedSplits:s,paramsDenseValues:a,indices:i}=e,{outputRaggedRank:l}=r,u=s.map($=>t.readSync($.dataId)),h=s.map($=>$.shape),f=t.readSync(a.dataId),c=t.readSync(i.dataId),[o,d,m]=raggedGatherImplCPU(u,h,f,a.shape,a.dtype,c,i.shape,l),g=o.map($=>t.makeTensorInfo([$.length],"int32",$)),y=t.makeTensorInfo(m,a.dtype,d);return g.concat([y])}const raggedGatherConfig={kernelName:RaggedGather,backendName:"webgl",kernelFunc:raggedGather};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedRange(n){const{inputs:e,backend:t}=n,{starts:r,limits:s,deltas:a}=e,i=t.readSync(r.dataId),l=t.readSync(s.dataId),u=t.readSync(a.dataId),[h,f]=raggedRangeImplCPU(i,r.shape,r.dtype,l,s.shape,u,a.shape),c=t.makeTensorInfo([h.length],"int32",h),o=t.makeTensorInfo([f.length],r.dtype,f);return[c,o]}const raggedRangeConfig={kernelName:RaggedRange,backendName:"webgl",kernelFunc:raggedRange};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedTensorToTensor(n){const{inputs:e,backend:t,attrs:r}=n,{shape:s,values:a,defaultValue:i,rowPartitionTensors:l}=e,{rowPartitionTypes:u}=r,h=t.readSync(s.dataId),f=t.readSync(a.dataId),c=t.readSync(i.dataId),o=l.map(y=>t.readSync(y.dataId)),d=l.map(y=>y.shape),[m,g]=raggedTensorToTensorImplCPU(h,s.shape,f,a.shape,a.dtype,c,i.shape,o,d,u);return t.makeTensorInfo(m,a.dtype,g)}const raggedTensorToTensorConfig={kernelName:RaggedTensorToTensor,backendName:"webgl",kernelFunc:raggedTensorToTensor};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const range$1=n=>{const{backend:e,attrs:t}=n,{start:r,stop:s,step:a,dtype:i}=t,l=rangeImplCPU$1(r,s,a,i);return e.makeTensorInfo([l.length],i,l)},rangeConfig$1={kernelName:Range$1,backendName:"webgl",kernelFunc:range$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RECIPROCAL$1="return 1.0 / x;",reciprocal$1=unaryKernelFunc$1({opSnippet:RECIPROCAL$1}),reciprocalConfig$1={kernelName:Reciprocal$1,backendName:"webgl",kernelFunc:reciprocal$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RELU$1=CHECK_NAN_SNIPPET$1+`
  return (x < 0.0) ? 0.0 : x;
`,RELU_PACKED=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,relu$1=unaryKernelFunc$1({opSnippet:RELU$1,packedOpSnippet:RELU_PACKED}),reluConfig$1={kernelName:Relu$2,backendName:"webgl",kernelFunc:relu$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RELU6$1=CHECK_NAN_SNIPPET$1+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,RELU6_PACKED=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,relu6$1=unaryKernelFunc$1({opSnippet:RELU6$1,packedOpSnippet:RELU6_PACKED}),relu6Config$1={kernelName:Relu6$2,backendName:"webgl",kernelFunc:relu6$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ResizeBilinearProgram$1=class{constructor(e,t,r,s,a){this.variableNames=["A"],this.outputShape=[];const[i,l,u,h]=e;this.outputShape=[i,t,r,h];const f=[s&&t>1?l-1:l,s&&r>1?u-1:u],c=[s&&t>1?t-1:t,s&&r>1?r-1:r];let o;a?o="(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":o="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${f[0]/c[0]},
          ${f[1]/c[1]});
      const vec2 inputShapeRC = vec2(${l}.0, ${u}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${o};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeBilinearPackedProgram{constructor(e,t,r,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[i,l,u,h]=e;this.outputShape=[i,t,r,h];const f=[s&&t>1?l-1:l,s&&r>1?u-1:u],c=[s&&t>1?t-1:t,s&&r>1?r-1:r];let o;a?o="(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":o="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${f[0]/c[0]},
          ${f[1]/c[1]},
          ${f[1]/c[1]});
      const vec3 inputShapeRC = vec3(${l}.0, ${u}.0,
                                     ${u}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${o};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${h-1};
        bool hasNextRow = coords.z < ${r-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinear$1(n){const{inputs:e,backend:t,attrs:r}=n,{images:s}=e,{alignCorners:a,halfPixelCenters:i,size:l}=r,[u,h]=l,f=env$1().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ResizeBilinearPackedProgram(s.shape,u,h,a,i):new ResizeBilinearProgram$1(s.shape,u,h,a,i);return t.runWebGLProgram(f,[s],"float32")}const resizeBilinearConfig$1={kernelName:ResizeBilinear$1,backendName:"webgl",kernelFunc:resizeBilinear$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ResizeBilinearBackpropProgram$1=class{constructor(e,t,r){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,i,l]=e,u=[r&&i>1?s-1:s,r&&l>1?a-1:a],h=[r&&i>1?i-1:i,r&&l>1?l-1:l],f=u[0]/h[0],c=u[1]/h[1],o=1/f,d=1/c,m=Math.ceil(o)*2+2,g=Math.ceil(d)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${f});
        const float widthScale = float(${c});

        const float invHeightScale = float(${o});
        const float invWidthScale = float(${d});

        const int winHeight = int(${m});
        const int winWidth = int(${g});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${l}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinearGrad$1(n){const{inputs:e,backend:t,attrs:r}=n,{images:s,dy:a}=e,{alignCorners:i}=r,l=new ResizeBilinearBackpropProgram$1(a.shape,s.shape,i);return t.runWebGLProgram(l,[a],a.dtype)}const resizeBilinearGradConfig$1={kernelName:ResizeBilinearGrad$1,backendName:"webgl",kernelFunc:resizeBilinearGrad$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ResizeNearestNeighborProgram$1=class{constructor(e,t,r,s,a){this.variableNames=["A"],this.outputShape=[];const[i,l,u,h]=e;this.outputShape=[i,t,r,h];const f=[s&&t>1?l-1:l,s&&r>1?u-1:u],c=[s&&t>1?t-1:t,s&&r>1?r-1:r],o=s?"0.5":"0.0";let d;a?d="max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":d="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${f[0]/c[0]},
          ${f[1]/c[1]});
      const vec2 inputShapeRC = vec2(${l}.0, ${u}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${o})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeNearestNeighborPackedProgram{constructor(e,t,r,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[i,l,u,h]=e;this.outputShape=[i,t,r,h];const f=[s&&t>1?l-1:l,s&&r>1?u-1:u],c=[s&&t>1?t-1:t,s&&r>1?r-1:r],o=s?"0.5":"0.0";let d;a?d="max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":d="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${f[0]/c[0]},
          ${f[1]/c[1]},
          ${f[1]/c[1]});
      const vec3 inputShapeRC = vec3(${l}.0, ${u}.0,
                                     ${u}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${o})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${h-1};
        bool hasNextRow = coords.z < ${r-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighbor$1(n){const{inputs:e,backend:t,attrs:r}=n,{images:s}=e,{alignCorners:a,halfPixelCenters:i,size:l}=r,[u,h]=l,f=env$1().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ResizeNearestNeighborPackedProgram(s.shape,u,h,a,i):new ResizeNearestNeighborProgram$1(s.shape,u,h,a,i);return t.runWebGLProgram(f,[s],s.dtype)}const resizeNearestNeighborConfig$1={kernelName:ResizeNearestNeighbor$1,backendName:"webgl",kernelFunc:resizeNearestNeighbor$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ResizeNearestNeigborBackpropProgram$1=class{constructor(e,t,r){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,i,l]=e,u=[r&&i>1?s-1:s,r&&l>1?a-1:a],h=[r&&i>1?i-1:i,r&&l>1?l-1:l],f=u[0]/h[0],c=u[1]/h[1],o=1/f,d=1/c,m=Math.ceil(o)*2+2,g=Math.ceil(d)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${f});
        const float widthScale = float(${c});

        const float invHeightScale = float(${o});
        const float invWidthScale = float(${d});

        const int winHeight = int(${m});
        const int winWidth = int(${g});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${l}) {
              continue;
            }

            float sourceFracRow =
              float(${u[0]}) *
                (float(dyR) / float(${h[0]}));

            float sourceFracCol =
                float(${u[1]}) *
                  (float(dyC) / float(${h[1]}));

            int sourceNearestRow = int(min(
                float(int(${s}) - 1),
                ${r} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${a}) - 1),
                ${r} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighborGrad$1(n){const{inputs:e,backend:t,attrs:r}=n,{images:s,dy:a}=e,{alignCorners:i}=r,l=new ResizeNearestNeigborBackpropProgram$1(a.shape,s.shape,i);return t.runWebGLProgram(l,[a],a.dtype)}const resizeNearestNeighborGradConfig$1={kernelName:ResizeNearestNeighborGrad$1,backendName:"webgl",kernelFunc:resizeNearestNeighborGrad$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ReverseProgram$1=class{constructor(e,t){this.variableNames=["x"];const r=e.length;if(r>4)throw new Error(`WebGL backend: Reverse of rank-${r} tensor is not yet supported`);if(this.outputShape=e,r===1){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;return}const s=l=>t.indexOf(l)!==-1&&e[l]!==1?`${e[l]} - coords[${l}] - 1`:`coords[${l}]`,a=e.map((l,u)=>s(u)).join(","),i=getCoordsDataType$1(r);this.userCode=`
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ReversePackedProgram{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const r=e.length;if(r>4)throw new Error(`WebGL backend: Reverse of rank-${r} tensor is not yet supported`);this.outputShape=e;const s=getChannels("rc",r),a=`${s[r-1]} + 1 < ${this.outputShape[r-1]}`,i=`${s[r-2]} + 1 < ${this.outputShape[r-2]}`,l=getCoordsDataType$1(r);r===1?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${a}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${l} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${u(s.slice())};
          if(${a}){
            result.g = ${h(s.slice())};
          }
          if(${i}) {
            result.b = ${f(s.slice())};
            if(${a}) {
              result.a = ${c(s.slice())};
            }
          }
          setOutput(result);
        }
    `;function u(m){return o(m)}function h(m){return m[r-1]="("+m[r-1]+" + 1)",o(m)}function f(m){return m[r-2]="("+m[r-2]+" + 1)",o(m)}function c(m){return m[r-1]="("+m[r-1]+" + 1)",m[r-2]="("+m[r-2]+" + 1)",o(m)}function o(m){const g=e.map((b,x)=>d(x,m)),y=g.join(","),$=g.slice(-2).join(",");return`getChannel(getX(${y}), vec2(${$}))`}function d(m,g){return t.indexOf(m)!==-1&&e[m]!==1?`${e[m]} - ${g[m]} - 1`:`${g[m]}`}}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{dims:a}=r,i=s.shape.length,l=parseAxisParam$1(a,s.shape);if(i===0)return identity$1({inputs:{x:s},backend:t});const u=env$1().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ReversePackedProgram(s.shape,l):new ReverseProgram$1(s.shape,l);return t.runWebGLProgram(u,[s],s.dtype)}const reverseConfig$1={kernelName:Reverse$1,backendName:"webgl",kernelFunc:reverse$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let RotateProgram$1=class{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const r=e[1],s=e[2];this.outputShape=e;let a="";typeof t=="number"?a=`float outputValue = ${t.toFixed(2)};`:a=`
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${a}
          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${r}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rotateWithOffsetConfig$1={kernelName:RotateWithOffset$1,backendName:"webgl",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{image:r}=n,{radians:s,fillValue:a,center:i}=e,l=t,u=new RotateProgram$1(r.shape,a),[h,f]=getImageCenter$1(i,r.shape[1],r.shape[2]),c=[[h,f,Math.sin(s),Math.cos(s)]];return l.runWebGLProgram(u,[r],r.dtype,c)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ROUND$1=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,round$2=unaryKernelFunc$1({opSnippet:ROUND$1}),roundConfig$1={kernelName:Round$1,backendName:"webgl",kernelFunc:round$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RSQRT$1="return inversesqrt(x);",rsqrt$1=unaryKernelFunc$1({opSnippet:RSQRT$1,cpuKernelImpl:rsqrtImplCPU$1}),rsqrtConfig$1={kernelName:Rsqrt$1,backendName:"webgl",kernelFunc:rsqrt$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ScatterProgram$1=class{constructor(e,t,r,s,a,i,l=!0,u=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;const h=getCoordsDataType$1(a.length),f=getCoordsDataType$1(i.length);let c="";r===1?c="i":r===2&&(c="i, j");const o=`getIndices(${c})`;let d="";s===1?d="i":s===2&&(d="i, coords[1]");const m=`getUpdates(${d})`;let g="";u&&(g="coords[0], coords[1]");const y=`getDefaultValue(${g})`,$=t>1?"strides[j]":"strides";this.userCode=`
        ${h} strides = ${h}(${a});

        void main() {
          ${f} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${o});
              flattenedIndex += index * ${$};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${m};
              found = true;
            }
          }
          setOutput(mix(${y}, sum, float(found)));
        }
      `}};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ScatterPackedProgram{constructor(e,t,r,s,a,i,l=!0,u=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=i;const h=getCoordsDataType$1(a.length),f=getCoordsDataType$1(i.length);let c="";r===1?c="i":r===2&&(c="i, j");const o=`getIndices(${c})`;let d="";s===1?d="i":s===2&&(d="i, coords[1]");const m=`getUpdates(${d})`;let g="";u&&(g="coords[0], coords[1]");const y=`getDefaultValue(${g})`,$=t>1?"strides[j]":"strides",b=t>1?"strides[j + 1]":"strides";this.userCode=`
        ${h} strides = ${h}(${a});

        void main() {
          ${f} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${e}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${t}; j+=2) {
              ivec4 index = round(${o});
              flattenedIndex += index.xz * ${$};
              if (j + 1 < ${t}) {
                flattenedIndex += index.yw * ${b};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${m};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${y}, sum, found));
        }
      `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterNd$1(n){const{inputs:e,backend:t,attrs:r}=n,{indices:s,updates:a}=e,{shape:i}=r,{sliceRank:l,numUpdates:u,sliceSize:h,strides:f,outputSize:c}=calculateShapes$1(a,s,i),o=[c/h,h];if(c===0)return t.makeTensorInfo(i,s.dtype);const d=reshape$3({inputs:{x:s},backend:t,attrs:{shape:[u,l]}}),m=reshape$3({inputs:{x:a},backend:t,attrs:{shape:[u,h]}}),g=t.makeTensorInfo([],"float32",new Float32Array([0]));let y;env$1().getBool("WEBGL_PACK")?y=new ScatterPackedProgram(u,l,d.shape.length,m.shape.length,f,o):y=new ScatterProgram$1(u,l,d.shape.length,m.shape.length,f,o);const $=t.runWebGLProgram(y,[m,d,g],m.dtype),b=reshape$3({inputs:{x:$},backend:t,attrs:{shape:i}});return t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo($),t.disposeIntermediateTensorInfo(g),b}const scatterNdConfig$1={kernelName:ScatterNd$1,backendName:"webgl",kernelFunc:scatterNd$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let SearchSortedProgram$1=class{constructor(e,t,r,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,r];const a="while (left < right) {",i=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,l=env$1().getNumber("WEBGL_VERSION")===2?a:i,u=s==="left"?"<":"<=";this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${l}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${u} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function searchSorted$1(n){const{inputs:e,backend:t,attrs:r}=n,{sortedSequence:s,values:a}=e,{side:i}=r,l=new SearchSortedProgram$1(s.shape[0],s.shape[1],a.shape[1],i),u=[[s.shape[1]]];return t.runWebGLProgram(l,[s,a],"int32",u)}const searchSortedConfig$1={kernelName:SearchSorted$1,backendName:"webgl",kernelFunc:searchSorted$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let SelectProgram$1=class{constructor(e,t,r){this.variableNames=["c","a","b"],this.outputShape=t;let s,a;if(r>4)throw Error(`Where for rank ${r} is not yet supported`);if(r===1)a="resRC",s="resRC";else{const l=["resRC.x","resRC.y","resRC.z","resRC.w"],u=[],h=[];for(let f=0;f<t.length;f++)h.push(`${l[f]}`),f<e&&u.push(`${l[f]}`);s=u.join(),a=h.join()}const i=getCoordsDataType$1(r);this.userCode=`
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${s});
        if (cVal >= 1.0) {
          setOutput(getA(${a}));
        } else {
          setOutput(getB(${a}));
        }
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function select$2(n){const{inputs:e,backend:t}=n,{condition:r,t:s,e:a}=e,i=new SelectProgram$1(r.shape.length,s.shape,s.shape.length);return t.runWebGLProgram(i,[r,s,a],upcastType$1(s.dtype,a.dtype))}const selectConfig$1={kernelName:Select$1,backendName:"webgl",kernelFunc:select$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SELU$1=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${SELU_SCALEALPHA$1};
  float scale = ${SELU_SCALE$1};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,selu$1=unaryKernelFunc$1({opSnippet:SELU$1}),seluConfig$1={kernelName:Selu$2,backendName:"webgl",kernelFunc:selu$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SIGMOID$1=CHECK_NAN_SNIPPET_UNARY+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,SIGMOID_PACKED=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,sigmoid$1=unaryKernelFunc$1({opSnippet:SIGMOID$1,packedOpSnippet:SIGMOID_PACKED,cpuKernelImpl:sigmoidImplCPU}),sigmoidConfig$1={kernelName:Sigmoid$2,backendName:"webgl",kernelFunc:sigmoid$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SIGN$1=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,sign$1=unaryKernelFunc$1({opSnippet:SIGN$1}),signConfig$1={kernelName:Sign$1,backendName:"webgl",kernelFunc:sign$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SIN$1=CHECK_NAN_SNIPPET_UNARY+`
  return sin(x);
`,SIN_PACKED=`
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${CHECK_NAN_SNIPPET_PACKED}
  return result;
`,sin$1=unaryKernelFunc$1({opSnippet:SIN$1,packedOpSnippet:SIN_PACKED}),sinConfig$1={kernelName:Sin$1,backendName:"webgl",kernelFunc:sin$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SINH$1=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,sinh$1=unaryKernelFunc$1({opSnippet:SINH$1}),sinhConfig$1={kernelName:Sinh$1,backendName:"webgl",kernelFunc:sinh$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SOFTPLUS$1=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,softplus$1=unaryKernelFunc$1({opSnippet:SOFTPLUS$1}),softplusConfig$1={kernelName:Softplus$2,backendName:"webgl",kernelFunc:softplus$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const spaceToBatchND$1=n=>{const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockShape:a,paddings:i}=r;assert$2(s.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const l=a.reduce(($,b)=>$*b),u=[[0,0]];u.push(...i);for(let $=1+a.length;$<s.shape.length;++$)u.push([0,0]);const h=[],f=padV2$1({inputs:{x:s},backend:t,attrs:{paddings:u,constantValue:0}}),c=getReshaped$1(f.shape,a,l,!1),o=getPermuted$1(c.length,a.length,!1),d=getReshapedPermuted$1(f.shape,a,l,!1),m=reshape$3({inputs:{x:f},backend:t,attrs:{shape:c}}),g=transpose$1({inputs:{x:m},backend:t,attrs:{perm:o}}),y=reshape$3({inputs:{x:g},backend:t,attrs:{shape:d}});return h.push(f),h.push(m),h.push(g),h.forEach($=>t.disposeIntermediateTensorInfo($)),y},spaceToBatchNDConfig$1={kernelName:SpaceToBatchND$1,backendName:"webgl",kernelFunc:spaceToBatchND$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseFillEmptyRows(n){const{inputs:e,backend:t}=n,{indices:r,values:s,denseShape:a,defaultValue:i}=e;if(a.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
         ${a.shape}`);if(r.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
         ${r.shape}`);if(s.shape.length!==1)throw new Error(`Values must be a vector, saw:
         ${s.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);const l=t.readSync(r.dataId),u=t.readSync(s.dataId),h=t.readSync(a.dataId),f=t.readSync(i.dataId)[0],[c,o,d,m,g]=sparseFillEmptyRowsImplCPU(l,r.shape,r.dtype,u,s.dtype,h,f);return[t.makeTensorInfo(o,r.dtype,c),t.makeTensorInfo([o[0]],s.dtype,d),t.makeTensorInfo([m.length],"bool",new Uint8Array(m.map(y=>Number(y)))),t.makeTensorInfo([g.length],r.dtype,new Int32Array(g))]}const sparseFillEmptyRowsConfig={kernelName:SparseFillEmptyRows,backendName:"webgl",kernelFunc:sparseFillEmptyRows};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseReshape(n){const{inputs:e,backend:t}=n,{inputIndices:r,inputShape:s,newShape:a}=e;if(r.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(s.shape.length!==1)throw new Error(`Input shape should be a vector but received shape ${s.shape}`);if(a.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(t.readSync(s.dataId)),l=t.readSync(r.dataId),u=Array.from(t.readSync(a.dataId)),[h,f,c]=sparseReshapeImplCPU(l,r.shape,r.dtype,i,u);return[t.makeTensorInfo(f,r.dtype,h),t.makeTensorInfo([c.length],a.dtype,new Int32Array(c))]}const sparseReshapeConfig={kernelName:SparseReshape,backendName:"webgl",kernelFunc:sparseReshape};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentMean$1(n){const{inputs:e,backend:t}=n,{data:r,indices:s,segmentIds:a}=e;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(s.shape.length!==1)throw new Error(`Indices should be a vector but received shape
              ${s.shape}`);if(a.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
              ${a.shape}`);const i=t.readSync(r.dataId),l=t.readSync(s.dataId),u=t.readSync(a.dataId),[h,f]=sparseSegmentReductionImplCPU(i,r.shape,r.dtype,l,u,!0);return t.makeTensorInfo(f,r.dtype,h)}const sparseSegmentMeanConfig$1={kernelName:SparseSegmentMean$1,backendName:"webgl",kernelFunc:sparseSegmentMean$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentSum$1(n){const{inputs:e,backend:t}=n,{data:r,indices:s,segmentIds:a}=e;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(s.shape.length!==1)throw new Error(`Indices should be a vector but received shape
             ${s.shape}`);if(a.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
             ${a.shape}`);const i=t.readSync(r.dataId),l=t.readSync(s.dataId),u=t.readSync(a.dataId),[h,f]=sparseSegmentReductionImplCPU(i,r.shape,r.dtype,l,u);return t.makeTensorInfo(f,r.dtype,h)}const sparseSegmentSumConfig$1={kernelName:SparseSegmentSum$1,backendName:"webgl",kernelFunc:sparseSegmentSum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseToDense$1(n){const{inputs:e,backend:t,attrs:r}=n,{sparseIndices:s,sparseValues:a,defaultValue:i}=e,{outputShape:l}=r,{sliceRank:u,numUpdates:h,sliceSize:f,strides:c,outputSize:o}=calculateShapes$1(a,s,l),d=!1;if(a.dtype==="string"){const $=t.bufferSync(s),b=t.bufferSync(a),x=decodeString$1(t.readSync(i.dataId)[0]),w=scatterImplCPU$1($,b,l,o,f,h,u,c,x,d);return t.makeTensorInfo(l,w.dtype,w.values)}const m=new ScatterProgram$1(h,u,s.shape.length,a.shape.length,c,[o,1],d),g=t.runWebGLProgram(m,[a,s,i],a.dtype),y=reshape$3({inputs:{x:g},backend:t,attrs:{shape:l}});return t.disposeIntermediateTensorInfo(g),y}const sparseToDenseConfig$1={kernelName:SparseToDense$1,backendName:"webgl",kernelFunc:sparseToDense$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function splitV$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{numOrSizeSplits:a,axis:i}=r,l=parseAxisParam$1(i,s.shape)[0],u=prepareSplitSize$1(s,a,l),h=s.shape.length,f=new Array(h).fill(0),c=s.shape.slice();return u.map(o=>{const d=[...c];d[l]=o;const m=slice$1({inputs:{x:s},backend:t,attrs:{begin:f,size:d}});return f[l]+=o,m})}const splitVConfig$1={kernelName:SplitV$1,backendName:"webgl",kernelFunc:splitV$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SQRT$1="return sqrt(x);",sqrt$2=unaryKernelFunc$1({opSnippet:SQRT$1,packedOpSnippet:SQRT$1,cpuKernelImpl:sqrtImplCPU}),sqrtConfig$1={kernelName:Sqrt$1,backendName:"webgl",kernelFunc:sqrt$2};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SQUARE$1="return x * x;",square$1=unaryKernelFunc$1({opSnippet:SQUARE$1}),squareConfig$1={kernelName:Square$1,backendName:"webgl",kernelFunc:square$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SQUARED_DIFFERENCE$1="return (a - b) * (a - b);",squaredDifference$1=binaryKernelFunc$1({opSnippet:SQUARED_DIFFERENCE$1,packedOpSnippet:SQUARED_DIFFERENCE$1}),squaredDifferenceConfig$1={kernelName:SquaredDifference$1,backendName:"webgl",kernelFunc:squaredDifference$1};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function staticRegexReplace(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e;if(s.dtype!=="string")throw new Error("Input must be of datatype string");const a=t.readSync(s.dataId),i=fromUint8ToStringArray$1(a),l=staticRegexReplaceImplCPU(i,"string",r);return t.makeTensorInfo(s.shape,"string",l)}const staticRegexReplaceConfig={kernelName:StaticRegexReplace,backendName:"webgl",kernelFunc:staticRegexReplace};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function step$1({inputs:n,attrs:e,backend:t}){const{x:r}=n,s=CHECK_NAN_SNIPPET$1+`
    return x > 0.0 ? 1.0 : float(${e.alpha});
  `,a=new UnaryOpProgram$1(r.shape,s);return t.runWebGLProgram(a,[r],r.dtype)}const stepConfig$1={kernelName:Step$1,backendName:"webgl",kernelFunc:step$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let StridedSliceProgram$1=class{constructor(e,t,r){this.variableNames=["x"],this.outputShape=r;const s=r.length,a=getCoordsDataType$1(r.length),i=getCoordsDataType$1(r.length);let l="";if(s===1)l="coords * strides + begin";else{let u=0;l=r.map((h,f)=>(u++,r.length===1?`coords * strides[${f}] + begin[${f}]`:`coords[${u-1}] * strides[${f}] + begin[${f}]`)).join(",")}this.userCode=`
      ${a} begin = ${a}(${e});
      ${a} strides = ${a}(${t});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${l}));
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSlice$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{begin:a,end:i,strides:l,beginMask:u,endMask:h,ellipsisMask:f,newAxisMask:c,shrinkAxisMask:o}=r,{finalShapeSparse:d,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:$,begin:b,end:x,strides:w}=sliceInfo$1(s.shape,a,i,l,u,h,f,c,o);let v;if(g)v=reshape$3({inputs:{x:s},backend:t,attrs:{shape:m}});else if(y||$){assert$2(s.shape.length>=1,()=>`Input must have rank at least 1, got: ${s.shape.length}`);const T=computeOutShape$5(b,x,w),C=slice$1({inputs:{x:s},backend:t,attrs:{begin:b,size:T}});v=reshape$3({inputs:{x:C},backend:t,attrs:{shape:m}}),t.disposeIntermediateTensorInfo(C)}else if(t.shouldExecuteOnCPU([s])){const C=t.readSync(s.dataId),I=buffer$1(s.shape,s.dtype,C),N=stridedSliceImplCPU$1(d,I,w,b);v=t.makeTensorInfo(m,s.dtype,N.values)}else{const C=new StridedSliceProgram$1(b,w,d);v=t.runWebGLProgram(C,[s],s.dtype)}const S=reshape$3({inputs:{x:v},backend:t,attrs:{shape:m}});return t.disposeIntermediateTensorInfo(v),S}const stridedSliceConfig$1={kernelName:StridedSlice$1,backendName:"webgl",kernelFunc:stridedSlice$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringNGrams$1(n){const{inputs:e,backend:t,attrs:r}=n,{separator:s,nGramWidths:a,leftPad:i,rightPad:l,padWidth:u,preserveShortSequences:h}=r,{data:f,dataSplits:c}=e,o=t.readSync(f.dataId),d=t.readSync(c.dataId),[m,g]=stringNGramsImplCPU$1(o,d,s,a,i,l,u,h);return[t.makeTensorInfo([m.length],"string",m),t.makeTensorInfo(c.shape,"int32",g)]}const stringNGramsConfig$1={kernelName:StringNGrams$1,backendName:"webgl",kernelFunc:stringNGrams$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringSplit(n){const{inputs:e,backend:t,attrs:r}=n,{skipEmpty:s}=r,{input:a,delimiter:i}=e;if(a.dtype!=="string")throw new Error("Input must be of datatype string");if(a.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const l=t.readSync(a.dataId),u=t.readSync(i.dataId)[0],[h,f,c]=stringSplitImplCPU(l,u,s),o=f.length;return[t.makeTensorInfo([o,2],"int32",h),t.makeTensorInfo([o],"string",f),t.makeTensorInfo([2],"int32",new Int32Array(c))]}const stringSplitConfig={kernelName:StringSplit,backendName:"webgl",kernelFunc:stringSplit};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringToHashBucketFast(n){const{inputs:e,backend:t,attrs:r}=n,{numBuckets:s}=r,{input:a}=e;if(a.dtype!=="string")throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const i=t.readSync(a.dataId),l=stringToHashBucketFastImplCPU(i,s);return t.makeTensorInfo(a.shape,"int32",l)}const stringToHashBucketFastConfig={kernelName:StringToHashBucketFast,backendName:"webgl",kernelFunc:stringToHashBucketFast};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TAN$1="return tan(x);",tan$1=unaryKernelFunc$1({opSnippet:TAN$1}),tanConfig$1={kernelName:Tan$1,backendName:"webgl",kernelFunc:tan$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TANH$1=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,tanh$1=unaryKernelFunc$1({opSnippet:TANH$1}),tanhConfig$1={kernelName:Tanh$2,backendName:"webgl",kernelFunc:tanh$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensorScatterUpdate$1(n){const{inputs:e,backend:t,attrs:r}=n,{tensor:s,indices:a,updates:i}=e,{sliceRank:l,numUpdates:u,sliceSize:h,strides:f,outputSize:c}=calculateShapes$1(i,a,s.shape),o=[c/h,h];if(c===0)return t.makeTensorInfo(s.shape,a.dtype);const d=reshape$3({inputs:{x:a},backend:t,attrs:{shape:[u,l]}}),m=reshape$3({inputs:{x:i},backend:t,attrs:{shape:[u,h]}}),g=reshape$3({inputs:{x:s},backend:t,attrs:{shape:o}}),y=new ScatterProgram$1(u,l,d.shape.length,m.shape.length,f,o,!1,!0),$=t.runWebGLProgram(y,[m,d,g],g.dtype),b=reshape$3({inputs:{x:$},backend:t,attrs:{shape:s.shape}});return t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo($),b}const tensorScatterUpdateConfig$1={kernelName:TensorScatterUpdate$1,backendName:"webgl",kernelFunc:tensorScatterUpdate$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let TileProgram$1=class{constructor(e,t){this.variableNames=["A"];const r=new Array(e.length);for(let i=0;i<r.length;i++)r[i]=e[i]*t[i];this.outputShape=r,this.rank=r.length;const s=getCoordsDataType$1(this.rank),a=getSourceCoords$2(e);this.userCode=`
      void main() {
        ${s} resRC = getOutputCoords();
        setOutput(getA(${a}));
      }
    `}};function getSourceCoords$2(n){const e=n.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(e===1)return`imod(resRC, ${n[0]})`;const t=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let s=0;s<n.length;s++)r.push(`imod(${t[s]}, ${n[s]})`);return r.join()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tile$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{reps:a}=r;if(s.dtype==="string"||s.shape.length>5){const u=t.readSync(s.dataId),h=s.dtype==="string"?u.map(o=>decodeString$1(o)):u,f=buffer$1(s.shape,s.dtype,h),c=tileImplCPU$1(f,a);return t.makeTensorInfo(c.shape,c.dtype,c.values)}const i=new TileProgram$1(s.shape,a);return t.runWebGLProgram(i,[s],s.dtype)}const tileConfig$1={kernelName:Tile$1,backendName:"webgl",kernelFunc:tile$1};let SwapProgram$1=class{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}},MergeProgram$1=class{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function disposeIntermediateTensorInfoOrNull$1(n,e){e!==null&&n.disposeIntermediateTensorInfo(e)}function roundUpToPow2$1(n){let e=1;for(;e<n;)e*=2;return e}function topK$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{k:a,sorted:i}=r,l=env$1().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),u=env$1().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),h=s.shape,f=h[h.length-1];if(t.shouldExecuteOnCPU([s])||f<l||a>u){const N=t.readSync(s.dataId),[P,F]=topKImplCPU$1(N,h,s.dtype,a,i);return[t.makeTensorInfo(P.shape,P.dtype,P.values),t.makeTensorInfo(F.shape,F.dtype,F.values)]}if(a===0)return h[h.length-1]=0,[t.makeTensorInfo(h,s.dtype,[]),t.makeTensorInfo(h,"int32",[])];if(f===1)return[s,fill$2({attrs:{shape:h,dtype:"int32",value:0},backend:t})];const c=t.texData.get(s.dataId),o=c!==null&&c.isPacked,d=o?t.unpackTensor(s):s,g=sizeFromShape$1(h)/f,y=reshape$3({inputs:{x:d},attrs:{shape:[g,f]},backend:t});o&&disposeIntermediateTensorInfoOrNull$1(t,d);const $=roundUpToPow2$1(a),b=roundUpToPow2$1(f);let x=null;const w=()=>x===null?[y,y]:[y,x],v=(N,P,F)=>{const _=w(),D=new SwapProgram$1(F),k=[[f],[x===null?1:0],[Number.NEGATIVE_INFINITY],[N],[P]],O=x;x=t.runWebGLProgram(D,_,"int32",k),disposeIntermediateTensorInfoOrNull$1(t,O)};for(let N=1;N<$;N*=2){const P=N*2;for(let F=N;F>=1;F/=2)v(P,F,[g,b])}for(let N=b;N>$;N/=2){const P=w(),F=new MergeProgram$1([g,N/2]),D=[[f],[x===null?1:0],[$]],E=x;x=t.runWebGLProgram(F,P,"int32",D),disposeIntermediateTensorInfoOrNull$1(t,E);const k=$/2,O=k*2;for(let M=k;M>=1;M/=2)v(O,M,x.shape)}let S=x;x=slice$1({inputs:{x},backend:t,attrs:{begin:0,size:[g,a]}}),disposeIntermediateTensorInfoOrNull$1(t,S);let T=gatherV2$1({inputs:{x:y,indices:x},backend:t,attrs:{axis:1,batchDims:1}});disposeIntermediateTensorInfoOrNull$1(t,y);const C=h.slice(0,-1);C.push(a),S=x,x=reshape$3({inputs:{x},attrs:{shape:C},backend:t}),disposeIntermediateTensorInfoOrNull$1(t,S);const I=T;return T=reshape$3({inputs:{x:T},attrs:{shape:C},backend:t}),disposeIntermediateTensorInfoOrNull$1(t,I),[T,x]}const topKConfig$1={kernelName:TopK$1,backendName:"webgl",kernelFunc:topK$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let TransformProgram$1=class{constructor(e,t,r,s,a,i){this.variableNames=["Image","Transforms"],this.outputShape=i;const l=r==="nearest"?1:2;let u;switch(s){case"constant":u=1;break;case"reflect":u=2;break;case"wrap":u=3;break;case"nearest":u=4;break;default:u=1;break}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${u} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${u} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${u} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${a});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${a});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${l} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transform$1(n){const{inputs:e,backend:t,attrs:r}=n,{image:s,transforms:a}=e,{interpolation:i,fillMode:l,fillValue:u,outputShape:h}=r,[f,c,o,d]=s.shape,[m,g]=h??[c,o],y=[f,m,g,d],$=new TransformProgram$1(c,o,i,l,u,y);return t.runWebGLProgram($,[s,a],"float32")}const transformConfig$1={kernelName:Transform$1,backendName:"webgl",kernelFunc:transform$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unique(n){const{inputs:e,attrs:t,backend:r}=n,{axis:s}=t,{x:a}=e;assertNotComplex$1(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=r.readSync(a.dataId),{outputValues:l,outputShape:u,indices:h}=uniqueImplCPU$1(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,l),r.makeTensorInfo([h.length],"int32",h)]}const uniqueConfig={kernelName:Unique,backendName:"webgl",kernelFunc:unique};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unpack$1(n){const{inputs:e,backend:t,attrs:r}=n,{value:s}=e;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s,l=i.shape.length,u=s.shape[a],h=new Array(l-1);let f=0;for(let g=0;g<l;g++)g!==a&&(h[f++]=i.shape[g]);const c=[],o=new Array(l).fill(0),d=i.shape.slice();d[a]=1;const m=new Array(u);for(let g=0;g<m.length;g++){o[a]=g;const y=slice$1({inputs:{x:i},backend:t,attrs:{begin:o,size:d}}),$=reshape$3({inputs:{x:y},backend:t,attrs:{shape:h}});m[g]=$,c.push(y)}return c.forEach(g=>t.disposeIntermediateTensorInfo(g)),m}const unpackConfig$1={kernelName:Unpack$1,backendName:"webgl",kernelFunc:unpack$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SegmentOpProgram{constructor(e,t){this.variableNames=["x","segmentIds"];const r=e.windowSize,s=e.batchSize,a=e.inSize,i=e.numSegments,l=i*Math.ceil(a/r);this.outputShape=[s,l];const u="0.0",h="sumValue",f=Math.floor(r/4)*4,c=r%4,o=`
        sumValue += dot(values, segFilter);
    `;let d="";a%r>0&&(d=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return initializationValue;
        }
      `);let m="";a%r>0&&(m=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = ${u};

      float getValue(int batch, int inIdx) {
        ${d}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${m}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${r}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${f}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${o}
        }

        int inIdx = inOffset + ${f};
        if (${c===1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${o}
        } else if (${c===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${o}
        } else if (${c===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${o}
        }
        setOutput(${h});
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unsortedSegmentSum$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,segmentIds:a}=e,{numSegments:i}=r,l=s.shape.length,u=[];let h=0;const f=getAxesPermutation$1([h],l);let c=s;f!=null&&(c=transpose$1({inputs:{x:s},backend:t,attrs:{perm:f}}),u.push(c),h=getInnerMostAxes$1(1,l)[0]);const o=computeOutShape$3(c.shape,h,i),d=sizeFromShape$1([c.shape[h]]),m=reshape$3({inputs:{x:c},backend:t,attrs:{shape:[-1,d]}});u.push(m);const g=sumOutType$1(s.dtype),y=(w,v,S,T,C)=>{const I=w.shape[0],N=w.shape[1],P=segOpComputeOptimalWindowSize(N,C),F={windowSize:P,inSize:N,batchSize:I,numSegments:C},_=new SegmentOpProgram(F,v),D=t.compileAndRun(_,[w,S],T);if(u.push(D),D.shape[1]===C)return D;const E=range$1({backend:t,attrs:{start:0,stop:C,step:1,dtype:"float32"}}),k=tile$1({inputs:{x:E},backend:t,attrs:{reps:[N/P]}});return u.push(E),u.push(k),y(D,v,k,T,C)},$=y(m,"unsortedSegmentSum",a,g,i),b=reshape$3({inputs:{x:$},backend:t,attrs:{shape:o}});let x=b;if(f!=null){u.push(b);const w=getUndoAxesPermutation$1(f);x=transpose$1({inputs:{x},backend:t,attrs:{perm:w}})}return u.forEach(w=>t.disposeIntermediateTensorInfo(w)),x}const unsortedSegmentSumConfig$1={kernelName:UnsortedSegmentSum$1,backendName:"webgl",kernelFunc:unsortedSegmentSum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const kernelConfigs$1=[_fusedMatMulConfig$1,absConfig$1,acosConfig$1,acoshConfig$1,addConfig$1,addNConfig$1,allConfig$1,anyConfig$1,argMaxConfig$1,argMinConfig$1,asinConfig$1,asinhConfig$1,atanConfig$1,atan2Config$1,atanhConfig$1,avgPoolConfig$1,avgPool3DConfig$1,avgPool3DGradConfig$1,avgPoolGradConfig$1,batchMatMulConfig$1,batchNormConfig,batchToSpaceNDConfig$1,bincountConfig$1,bitwiseAndConfig,broadcastArgsConfig$1,castConfig$1,ceilConfig$1,clipByValueConfig$1,complexConfig$1,complexAbsConfig$1,concatConfig$1,conv2DConfig$1,conv2DBackpropFilterConfig$1,conv2DBackpropInputConfig$1,conv3DConfig$1,conv3DBackpropFilterV2Config$1,conv3DBackpropInputConfig,cosConfig$1,coshConfig$1,cropAndResizeConfig$1,cumprodConfig$1,cumsumConfig$1,denseBincountConfig$1,depthToSpaceConfig$1,depthwiseConv2dNativeConfig$1,depthwiseConv2dNativeBackpropFilterConfig$1,depthwiseConv2dNativeBackpropInputConfig$1,diagConfig$1,dilation2DConfig$1,einsumConfig$1,eluConfig$1,eluGradConfig$1,equalConfig$1,erfConfig$1,expConfig$1,expandDimsConfig$1,expm1Config$1,fftConfig$1,fillConfig$1,flipLeftRightConfig$1,floorConfig$1,floorDivConfig$1,fromPixelsConfig$1,fusedConv2DConfig$1,fusedDepthwiseConv2DConfig$1,gatherNdConfig$1,gatherV2Config$1,greaterConfig$1,greaterEqualConfig$1,identityConfig$1,ifftConfig$1,imagConfig$1,isFiniteConfig$1,isInfConfig$1,isNaNConfig$1,leakyReluConfig$1,lessConfig$1,lessEqualConfig$1,linSpaceConfig$1,logConfig$1,log1pConfig$1,logicalAndConfig$1,logicalNotConfig$1,logicalOrConfig$1,LRNConfig,LRNGradConfig,maxConfig$1,maximumConfig$1,maxPoolConfig$1,maxPool3DConfig$1,maxPool3DGradConfig$1,maxPoolGradConfig$1,maxPoolWithArgmaxConfig$1,meanConfig$1,minConfig$1,minimumConfig$1,mirrorPadConfig$1,modConfig$1,multinomialConfig$1,multiplyConfig$1,negConfig$1,nonMaxSuppressionV3Config$1,nonMaxSuppressionV4Config,nonMaxSuppressionV5Config$1,notEqualConfig$1,oneHotConfig$1,onesLikeConfig$1,packConfig$1,padV2Config$1,powConfig$1,preluConfig$1,prodConfig$1,raggedGatherConfig,raggedRangeConfig,raggedTensorToTensorConfig,rangeConfig$1,realConfig$1,realDivConfig$1,reciprocalConfig$1,reluConfig$1,relu6Config$1,reshapeConfig$1,resizeBilinearConfig$1,resizeBilinearGradConfig$1,resizeNearestNeighborConfig$1,resizeNearestNeighborGradConfig$1,reverseConfig$1,rotateWithOffsetConfig$1,roundConfig$1,rsqrtConfig$1,scatterNdConfig$1,searchSortedConfig$1,selectConfig$1,seluConfig$1,sigmoidConfig$1,signConfig$1,sinConfig$1,sinhConfig$1,sliceConfig$1,softmaxConfig$1,softplusConfig$1,spaceToBatchNDConfig$1,sparseFillEmptyRowsConfig,sparseReshapeConfig,sparseSegmentMeanConfig$1,sparseSegmentSumConfig$1,sparseToDenseConfig$1,splitVConfig$1,sqrtConfig$1,squareConfig$1,squaredDifferenceConfig$1,staticRegexReplaceConfig,stepConfig$1,stridedSliceConfig$1,stringNGramsConfig$1,stringSplitConfig,stringToHashBucketFastConfig,subConfig$1,sumConfig$1,tanConfig$1,tanhConfig$1,tensorScatterUpdateConfig$1,tileConfig$1,topKConfig$1,transformConfig$1,transposeConfig$1,uniqueConfig,unpackConfig$1,unsortedSegmentSumConfig$1,zerosLikeConfig$1];for(const n of kernelConfigs$1)registerKernel$1(n);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const EPSILON_FLOAT32=1e-7,EPSILON_FLOAT16=1e-4;class DataStorage{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class KernelBackend{refCount(e){return notYetImplemented("refCount")}incRef(e){return notYetImplemented("incRef")}timerAvailable(){return!0}time(e){return notYetImplemented("time")}read(e){return notYetImplemented("read")}readSync(e){return notYetImplemented("readSync")}readToGPU(e,t){return notYetImplemented("readToGPU")}numDataIds(){return notYetImplemented("numDataIds")}disposeData(e,t){return notYetImplemented("disposeData")}write(e,t,r){return notYetImplemented("write")}move(e,t,r,s,a){return notYetImplemented("move")}createTensorFromGPUData(e,t,r){return notYetImplemented("createTensorFromGPUData")}memory(){return notYetImplemented("memory")}floatPrecision(){return notYetImplemented("floatPrecision")}epsilon(){return this.floatPrecision()===32?EPSILON_FLOAT32:EPSILON_FLOAT16}dispose(){return notYetImplemented("dispose")}}function notYetImplemented(n){throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function swap(n,e,t){const r=n[e];n[e]=n[t],n[t]=r}function sum$1(n){let e=0;for(let t=0;t<n.length;t++)e+=n[t];return e}function assert(n,e){if(!n)throw new Error(typeof e=="string"?e:e())}function assertShapesMatch(n,e,t=""){assert(arraysEqual(n,e),()=>t+` Shapes ${n} and ${e} must match`)}function sizeFromShape(n){if(n.length===0)return 1;let e=n[0];for(let t=1;t<n.length;t++)e*=n[t];return e}function isScalarShape(n){return n.length===0}function arraysEqual(n,e){if(n===e)return!0;if(n==null||e==null||n.length!==e.length)return!1;for(let t=0;t<n.length;t++)if(n[t]!==e[t])return!1;return!0}function isInt(n){return n%1===0}function rightPad(n,e){return e<=n.length?n:n+" ".repeat(e-n.length)}function inferFromImplicitShape(n,e){let t=1,r=-1;for(let a=0;a<n.length;++a)if(n[a]>=0)t*=n[a];else if(n[a]===-1){if(r!==-1)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${a}`);r=a}else if(n[a]<0)throw Error(`Shapes can not be < 0. Found ${n[a]} at dim ${a}`);if(r===-1){if(e>0&&e!==t)throw Error(`Size(${e}) must match the product of shape ${n}`);return n}if(t===0)throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);if(e%t!==0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${t}`);const s=n.slice();return s[r]=e/t,s}function parseAxisParam(n,e){const t=e.length;return n=n==null?e.map((r,s)=>s):[].concat(n),assert(n.every(r=>r>=-t&&r<t),()=>`All values in axis param must be in range [-${t}, ${t}) but got axis ${n}`),assert(n.every(r=>isInt(r)),()=>`All values in axis param must be integers but got axis ${n}`),n.map(r=>r<0?t+r:r)}function getTypedArrayFromDType(n,e){return getArrayFromDType(n,e)}function getArrayFromDType(n,e){let t=null;if(n==null||n==="float32")t=new Float32Array(e);else if(n==="int32")t=new Int32Array(e);else if(n==="bool")t=new Uint8Array(e);else if(n==="string")t=new Array(e);else throw new Error(`Unknown data type ${n}`);return t}function checkConversionForErrors(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}function isValidDtype(n){return n==="bool"||n==="complex64"||n==="float32"||n==="int32"||n==="string"}function hasEncodingLoss(n,e){return!(e==="complex64"||e==="float32"&&n!=="complex64"||e==="int32"&&n!=="float32"&&n!=="complex64"||e==="bool"&&n==="bool")}function bytesPerElement(n){if(n==="float32"||n==="int32")return 4;if(n==="complex64")return 8;if(n==="bool")return 1;throw new Error(`Unknown dtype ${n}`)}function bytesFromStringArray(n){if(n==null)return 0;let e=0;return n.forEach(t=>e+=t.length),e}function isString(n){return typeof n=="string"||n instanceof String}function isBoolean(n){return typeof n=="boolean"}function isNumber(n){return typeof n=="number"}function inferDtype(n){return Array.isArray(n)?inferDtype(n[0]):n instanceof Float32Array?"float32":n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray?"int32":isNumber(n)?"float32":isString(n)?"string":isBoolean(n)?"bool":"float32"}function isFunction(n){return!!(n&&n.constructor&&n.call&&n.apply)}function computeStrides(n){const e=n.length;if(e<2)return[];const t=new Array(e-1);t[e-2]=n[e-1];for(let r=e-3;r>=0;--r)t[r]=t[r+1]*n[r+1];return t}function createNestedArray(n,e,t,r=!1){const s=new Array;if(e.length===1){const a=e[0]*(r?2:1);for(let i=0;i<a;i++)s[i]=t[n+i]}else{const a=e[0],i=e.slice(1),l=i.reduce((u,h)=>u*h)*(r?2:1);for(let u=0;u<a;u++)s[u]=createNestedArray(n+u*l,i,t,r)}return s}function toNestedArray(n,e,t=!1){if(n.length===0)return e[0];const r=n.reduce((s,a)=>s*a)*(t?2:1);if(r===0)return[];if(r!==e.length)throw new Error(`[${n}] does not match the input size ${e.length}${t?" for a complex tensor":""}.`);return createNestedArray(0,n,e,t)}function convertBackendValuesAndArrayBuffer(n,e){if(Array.isArray(n))return n;if(e==="float32")return n instanceof Float32Array?n:new Float32Array(n);if(e==="int32")return n instanceof Int32Array?n:new Int32Array(n);if(e==="bool"||e==="string")return Uint8Array.from(new Int32Array(n));throw new Error(`Unknown dtype ${e}`)}function makeOnesTypedArray(n,e){const t=makeZerosTypedArray(n,e);for(let r=0;r<t.length;r++)t[r]=1;return t}function makeZerosTypedArray(n,e){if(e==null||e==="float32"||e==="complex64")return new Float32Array(n);if(e==="int32")return new Int32Array(n);if(e==="bool")return new Uint8Array(n);throw new Error(`Unknown data type ${e}`)}function assertNonNegativeIntegerDimensions(n){n.forEach(e=>{assert(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${n}].`)})}function locToIndex(n,e,t){if(e===0)return 0;if(e===1)return n[0];let r=n[n.length-1];for(let s=0;s<n.length-1;++s)r+=t[s]*n[s];return r}function indexToLoc(n,e,t){if(e===0)return[];if(e===1)return[n];const r=new Array(e);for(let s=0;s<r.length-1;++s)r[s]=Math.floor(n/t[s]),n-=r[s]*t[s];return r[r.length-1]=n,r}function isPromise(n){return n&&n.then&&typeof n.then=="function"}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TENSORFLOWJS_FLAGS_PREFIX="tfjsflags";class Environment{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=getQueryParams,this.populateURLFlags()}setPlatform(e,t){this.platform!=null&&(env().getBool("IS_TEST")||env().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,r){if(this.flagRegistry[e]={evaluationFn:t,setHook:r},this.urlFlags[e]!=null){const s=this.urlFlags[e];env().getBool("IS_TEST")||env().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${s}.`),this.set(e,s)}}async getAsync(e){return e in this.flags?this.flags[e]:(this.flags[e]=await this.evaluateFlag(e),this.flags[e])}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(isPromise(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(this.flagRegistry[e]==null)throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,this.flagRegistry[e].setHook!=null&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(this.flagRegistry[e]==null)throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;const e=this.getQueryParams(this.global.location.search);TENSORFLOWJS_FLAGS_PREFIX in e&&e[TENSORFLOWJS_FLAGS_PREFIX].split(",").forEach(r=>{const[s,a]=r.split(":");this.urlFlags[s]=parseValue(s,a)})}}function getQueryParams(n){const e={};return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...r)=>(decodeParam(e,r[0],r[1]),r.join("="))),e}function decodeParam(n,e,t){n[decodeURIComponent(e)]=decodeURIComponent(t||"")}function parseValue(n,e){const t=e.toLowerCase();return t==="true"||t==="false"?t==="true":`${+t}`===t?+t:e}function env(){return ENV$2}let ENV$2=null;function setEnvironmentGlobal(n){ENV$2=n}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let globalNameSpace;function getGlobalNamespace(){if(globalNameSpace==null){let n;if(typeof window<"u")n=window;else if(typeof global<"u")n=global;else if(typeof process<"u")n=process;else if(typeof self<"u")n=self;else throw new Error("Could not find a global object");globalNameSpace=n}return globalNameSpace}function getGlobalMap(){const n=getGlobalNamespace();return n._tfGlobals==null&&(n._tfGlobals=new Map),n._tfGlobals}function getGlobal(n,e){const t=getGlobalMap();if(t.has(n))return t.get(n);{const r=e();return t.set(n,r),t.get(n)}}const Abs="Abs",Acos="Acos",Acosh="Acosh",Add="Add",AddN="AddN",All="All",Any="Any",ArgMax="ArgMax",ArgMin="ArgMin",Asin="Asin",Asinh="Asinh",Atan="Atan",Atanh="Atanh",Atan2="Atan2",AvgPool="AvgPool",AvgPoolGrad="AvgPoolGrad",AvgPool3D="AvgPool3D",AvgPool3DGrad="AvgPool3DGrad",BatchMatMul="BatchMatMul",BatchToSpaceND="BatchToSpaceND",Bincount="Bincount",BroadcastArgs="BroadcastArgs",Cast="Cast",Ceil="Ceil",ClipByValue="ClipByValue",Complex="Complex",ComplexAbs="ComplexAbs",Concat="Concat",Conv2D="Conv2D",Conv2DBackpropFilter="Conv2DBackpropFilter",Conv2DBackpropInput="Conv2DBackpropInput",Conv3D="Conv3D",Conv3DBackpropFilterV2="Conv3DBackpropFilterV2",Conv3DBackpropInputV2="Conv3DBackpropInputV2",Cos="Cos",Cosh="Cosh",Cumprod="Cumprod",Cumsum="Cumsum",CropAndResize="CropAndResize",DenseBincount="DenseBincount",DepthToSpace="DepthToSpace",DepthwiseConv2dNative="DepthwiseConv2dNative",DepthwiseConv2dNativeBackpropFilter="DepthwiseConv2dNativeBackpropFilter",DepthwiseConv2dNativeBackpropInput="DepthwiseConv2dNativeBackpropInput",Diag="Diag",Dilation2D="Dilation2D",Dilation2DBackpropInput="Dilation2DBackpropInput",Dilation2DBackpropFilter="Dilation2DBackpropFilter",Draw="Draw",RealDiv="RealDiv",Einsum="Einsum",Elu="Elu",EluGrad="EluGrad",Erf="Erf",Equal="Equal",Exp="Exp",ExpandDims="ExpandDims",Expm1="Expm1",FFT="FFT",Fill="Fill",FlipLeftRight="FlipLeftRight",Floor="Floor",FloorDiv="FloorDiv",FusedBatchNorm="FusedBatchNorm",GatherV2="GatherV2",GatherNd="GatherNd",Greater="Greater",GreaterEqual="GreaterEqual",Identity="Identity",IFFT="IFFT",Imag="Imag",IsFinite="IsFinite",IsInf="IsInf",IsNan="IsNan",LeakyRelu="LeakyRelu",Less="Less",LessEqual="LessEqual",LinSpace="LinSpace",Log="Log",Log1p="Log1p",LogicalAnd="LogicalAnd",LogicalNot="LogicalNot",LogicalOr="LogicalOr",LRN="LRN",LRNGrad="LRNGrad",Max="Max",Maximum="Maximum",MaxPool="MaxPool",MaxPoolGrad="MaxPoolGrad",MaxPool3D="MaxPool3D",MaxPool3DGrad="MaxPool3DGrad",MaxPoolWithArgmax="MaxPoolWithArgmax",Mean="Mean",Min="Min",Minimum="Minimum",MirrorPad="MirrorPad",Mod="Mod",Multinomial="Multinomial",Multiply="Multiply",Neg="Neg",NotEqual="NotEqual",NonMaxSuppressionV3="NonMaxSuppressionV3",NonMaxSuppressionV5="NonMaxSuppressionV5",OnesLike="OnesLike",OneHot="OneHot",Pack="Pack",PadV2="PadV2",Pow="Pow",Prelu="Prelu",Prod="Prod",Range="Range",Real="Real",Reciprocal="Reciprocal",Relu="Relu",Reshape="Reshape",ResizeNearestNeighbor="ResizeNearestNeighbor",ResizeNearestNeighborGrad="ResizeNearestNeighborGrad",ResizeBilinear="ResizeBilinear",ResizeBilinearGrad="ResizeBilinearGrad",Relu6="Relu6",Reverse="Reverse",Round="Round",Rsqrt="Rsqrt",ScatterNd="ScatterNd",TensorScatterUpdate="TensorScatterUpdate",SearchSorted="SearchSorted",Select="Select",Selu="Selu",Slice="Slice",Sin="Sin",Sinh="Sinh",Sign="Sign",Sigmoid="Sigmoid",Softplus="Softplus",Sqrt="Sqrt",Sum="Sum",SpaceToBatchND="SpaceToBatchND",SplitV="SplitV",Softmax="Softmax",SparseSegmentMean="SparseSegmentMean",SparseSegmentSum="SparseSegmentSum",SparseToDense="SparseToDense",SquaredDifference="SquaredDifference",Square="Square",StridedSlice="StridedSlice",StringNGrams="StringNGrams",Sub="Sub",Tan="Tan",Tanh="Tanh",Tile="Tile",TopK="TopK",Transform="Transform",Transpose="Transpose",Unpack="Unpack",UnsortedSegmentSum="UnsortedSegmentSum",ZerosLike="ZerosLike",Step="Step",FromPixels="FromPixels",RotateWithOffset="RotateWithOffset",_FusedMatMul="_FusedMatMul",FusedConv2D="FusedConv2D",FusedDepthwiseConv2D="FusedDepthwiseConv2D";/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function warn(...n){env().getBool("IS_TEST")||env().getBool("PROD")||console.warn(...n)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const kernelRegistry=getGlobal("kernelRegistry",()=>new Map),gradRegistry=getGlobal("gradRegistry",()=>new Map);function getKernel(n,e){const t=makeKey(n,e);return kernelRegistry.get(t)}function getGradient(n){return gradRegistry.get(n)}function getKernelsForBackend(n){const e=kernelRegistry.entries(),t=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[a,i]=s,[l]=a.split("_");l===n&&t.push(i)}return t}function registerKernel(n){const{kernelName:e,backendName:t}=n,r=makeKey(e,t);kernelRegistry.has(r)&&warn(`The kernel '${e}' for backend '${t}' is already registered`),kernelRegistry.set(r,n)}function makeKey(n,e){return`${e}_${n}`}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isTypedArrayBrowser(n){return n instanceof Float32Array||n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const Long=long$1||LongExports;function hexToLong(n){return Long.fromString(n,!0,16)}const k0=hexToLong("c3a5c85c97cb3127"),k1=hexToLong("b492b66fbe98f273"),k2=hexToLong("9ae16a3b2f90404f");function shiftMix(n){return n.xor(n.shru(47))}function fetch$1(n,e,t){const r=n.slice(e,e+t);return Long.fromBytes(Array.from(r),!0,!0)}function fetch64(n,e){return fetch$1(n,e,8)}function fetch32(n,e){return fetch$1(n,e,4)}function rotate64(n,e){return e===0?n:n.shru(e).or(n.shl(64-e))}function hashLen16(n,e,t=hexToLong("9ddfea08eb382d69")){let r=n.xor(e).mul(t);r=r.xor(r.shru(47));let s=e.xor(r).mul(t);return s=s.xor(s.shru(47)),s=s.mul(t),s}function weakHashLen32WithSeeds(n,e,t,r,s,a){s=s.add(n),a=rotate64(a.add(s).add(r),21);const i=s;return s=s.add(e),s=s.add(t),a=a.add(rotate64(s,44)),[s.add(r),a.add(i)]}function weakHashLen32WithSeedsStr(n,e,t,r){return weakHashLen32WithSeeds(fetch64(n,e),fetch64(n,e+8),fetch64(n,e+16),fetch64(n,e+24),t,r)}function hashLen0to16(n,e=n.length){if(e>=8){const t=k2.add(e*2),r=fetch64(n,0).add(k2),s=fetch64(n,e-8),a=rotate64(s,37).mul(t).add(r),i=rotate64(r,25).add(s).mul(t);return hashLen16(a,i,t)}if(e>=4){const t=k2.add(e*2),r=fetch32(n,0);return hashLen16(r.shl(3).add(e),fetch32(n,e-4),t)}if(e>0){const t=n[0],r=n[e>>1],s=n[e-1],a=t+(r<<8),i=e+(s<<2);return shiftMix(k2.mul(a).xor(k0.mul(i))).mul(k2)}return k2}function hashLen17to32(n,e=n.length){const t=k2.add(e*2),r=fetch64(n,0).mul(k1),s=fetch64(n,8),a=fetch64(n,e-8).mul(t),i=fetch64(n,e-16).mul(k2);return hashLen16(rotate64(r.add(s),43).add(rotate64(a,30)).add(i),r.add(rotate64(s.add(k2),18)).add(a),t)}function hashLen33to64(n,e=n.length){const t=k2.add(e*2),r=fetch64(n,0).mul(k2),s=fetch64(n,8),a=fetch64(n,e-8).mul(t),i=fetch64(n,e-16).mul(k2),l=rotate64(r.add(s),43).add(rotate64(a,30)).add(i),u=hashLen16(l,r.add(rotate64(s.add(k2),18)).add(a),t),h=fetch64(n,16).mul(t),f=fetch64(n,24),c=l.add(fetch64(n,e-32)).mul(t),o=u.add(fetch64(n,e-24)).mul(t);return hashLen16(rotate64(h.add(f),43).add(rotate64(c,30)).add(o),h.add(rotate64(f.add(r),18)).add(c),t)}function fingerPrint64(n,e=n.length){const t=Long.fromNumber(81,!0);if(e<=32)return e<=16?hashLen0to16(n,e):hashLen17to32(n,e);if(e<=64)return hashLen33to64(n,e);let r=t,s=t.mul(k1).add(113),a=shiftMix(s.mul(k2).add(113)).mul(k2),i=[Long.UZERO,Long.UZERO],l=[Long.UZERO,Long.UZERO];r=r.mul(k2).add(fetch64(n,0));let u=0;const h=(e-1>>6)*64,f=h+(e-1&63)-63;do r=rotate64(r.add(s).add(i[0]).add(fetch64(n,u+8)),37).mul(k1),s=rotate64(s.add(i[1]).add(fetch64(n,u+48)),42).mul(k1),r=r.xor(l[1]),s=s.add(i[0]).add(fetch64(n,u+40)),a=rotate64(a.add(l[0]),33).mul(k1),i=weakHashLen32WithSeedsStr(n,u,i[1].mul(k1),r.add(l[0])),l=weakHashLen32WithSeedsStr(n,u+32,a.add(l[1]),s.add(fetch64(n,u+16))),[a,r]=[r,a],u+=64;while(u!==h);const c=k1.add(a.and(255).shl(1));return u=f,l[0]=l[0].add(e-1&63),i[0]=i[0].add(l[0]),l[0]=l[0].add(i[0]),r=rotate64(r.add(s).add(i[0]).add(fetch64(n,u+8)),37).mul(c),s=rotate64(s.add(i[1]).add(fetch64(n,u+48)),42).mul(c),r=r.xor(l[1].mul(9)),s=s.add(i[0].mul(9).add(fetch64(n,u+40))),a=rotate64(a.add(l[0]),33).mul(c),i=weakHashLen32WithSeedsStr(n,u,i[1].mul(c),r.add(l[0])),l=weakHashLen32WithSeedsStr(n,u+32,a.add(l[1]),s.add(fetch64(n,u+16))),[a,r]=[r,a],hashLen16(hashLen16(i[0],l[0],c).add(shiftMix(s).mul(k0)).add(a),hashLen16(i[1],l[1],c).add(r),c)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createScalarValue(n,e){return e==="string"?encodeString(n):toTypedArray([n],e)}function noConversionNeeded(n,e){return n instanceof Float32Array&&e==="float32"||n instanceof Int32Array&&e==="int32"||n instanceof Uint8Array&&e==="bool"}function toTypedArray(n,e){if(e==="string")throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(n)&&(n=flatten(n)),env().getBool("DEBUG")&&checkConversionForErrors(n,e),noConversionNeeded(n,e))return n;if(e==null||e==="float32"||e==="complex64")return new Float32Array(n);if(e==="int32")return new Int32Array(n);if(e==="bool"){const t=new Uint8Array(n.length);for(let r=0;r<t.length;++r)Math.round(n[r])!==0&&(t[r]=1);return t}else throw new Error(`Unknown data type ${e}`)}function now(){return env().platform.now()}function encodeString(n,e="utf-8"){return e=e||"utf-8",env().platform.encode(n,e)}function decodeString(n,e="utf-8"){return e=e||"utf-8",env().platform.decode(n,e)}function isTypedArray(n){return env().platform.isTypedArray!=null?env().platform.isTypedArray(n):isTypedArrayBrowser(n)}function flatten(n,e=[],t=!1){if(e==null&&(e=[]),typeof n=="boolean"||typeof n=="number"||typeof n=="string"||isPromise(n)||n==null||isTypedArray(n)&&t)e.push(n);else if(Array.isArray(n)||isTypedArray(n))for(let r=0;r<n.length;++r)flatten(n[r],e,t);else{let r=-1;for(const s of Object.keys(n))/^([1-9]+[0-9]*|0)$/.test(s)&&(r=Math.max(r,Number(s)));for(let s=0;s<=r;s++)flatten(n[s],e,t)}return e}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Profiler{constructor(e,t){this.backendTimer=e,this.logger=t,t==null&&(this.logger=new Logger)}profileKernel(e,t,r){let s;const a=()=>{s=r()};let i;const l=now();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(a);else{a();for(const h of s)h.dataSync();i=Promise.resolve({kernelMs:now()-l})}if(env().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let h=0;h<s.length;h++){const f=s[h];f.data().then(c=>{checkComputationForErrors(c,f.dtype,e)})}return{kernelName:e,outputs:s,inputs:t,timeMs:i.then(h=>h.kernelMs),extraInfo:i.then(h=>h.getExtraProfileInfo!=null?h.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:r,timeMs:s,inputs:a,extraInfo:i}=e;r.forEach(l=>{Promise.all([l.data(),s,i]).then(u=>{this.logger.logKernelProfile(t,l,u[0],u[1],a,u[2])})})}}function checkComputationForErrors(n,e,t){if(e!=="float32")return!1;for(let r=0;r<n.length;r++){const s=n[r];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${t}'`),!0}return!1}class Logger{logKernelProfile(e,t,r,s,a,i){const l=typeof s=="number"?rightPad(`${s}ms`,9):s.error,u=rightPad(e,25),h=t.rank,f=t.size,c=rightPad(t.shape.toString(),14);let o="";for(const d in a){const m=a[d];if(m!=null){const g=m.shape||t.shape,y=g.length;o+=`${d}: ${y}D ${y>0?g:""} `}}console.log(`%c${u}	%c${l}	%c${h}D ${c}	%c${f}	%c${o}	%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getFilteredNodesXToY(n,e,t){const r={},s={};for(let u=0;u<e.length;u++)r[e[u].id]=!0;for(let u=0;u<n.length;u++){const h=n[u],f=h.inputs;for(const c in f){const o=f[c];let d=!1;for(let m=0;m<e.length;m++)if(r[o.id]){h.outputs.forEach(g=>r[g.id]=!0),d=!0,s[h.id]=!0;break}if(d)break}}const a={};a[t.id]=!0;const i={};for(let u=n.length-1;u>=0;u--){const h=n[u],f=h.inputs;for(let c=0;c<h.outputs.length;c++)if(a[h.outputs[c].id]){for(const o in f)a[f[o].id]=!0,i[h.id]=!0;break}}const l=[];for(let u=0;u<n.length;u++){const h=n[u];if(s[h.id]&&i[h.id]){const f={};for(const o in h.inputs){const d=h.inputs[o];r[d.id]&&(f[o]=d)}const c=Object.assign({},h);c.inputs=f,c.outputs=h.outputs,l.push(c)}}return l}function backpropagateGradients(n,e,t,r){for(let s=e.length-1;s>=0;s--){const a=e[s],i=[];if(a.outputs.forEach(u=>{const h=n[u.id];h!=null?i.push(h):i.push(null)}),a.gradient==null)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const l=a.gradient(i);for(const u in a.inputs){if(!(u in l))throw new Error(`Cannot backprop through input ${u}. Available gradients found: ${Object.keys(l)}.`);const h=t(()=>l[u]());if(h.dtype!=="float32")throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${u} must have 'float32' dtype, but has '${h.dtype}'`);const f=a.inputs[u];if(!arraysEqual(h.shape,f.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${u}' has shape '${h.shape}', which does not match the shape of the input '${f.shape}'`);if(n[f.id]==null)n[f.id]=h;else{const c=n[f.id];n[f.id]=r(c,h),c.dispose()}}}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const FORMAT_LIMIT_NUM_VALS=20,FORMAT_NUM_FIRST_LAST_VALS=3,FORMAT_NUM_SIG_DIGITS=7;function tensorToString(n,e,t,r){const s=computeStrides(e),a=computeMaxSizePerColumn(n,e,t,s),i=e.length,l=subTensorToString(n,e,t,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${t}`),u.push(`  rank: ${i}`),u.push(`  shape: [${e}]`),u.push("  values:")),u.push(l.map(h=>"    "+h).join(`
`)),u.join(`
`)}function computeMaxSizePerColumn(n,e,t,r){const s=sizeFromShape(e),a=r[r.length-1],i=new Array(a).fill(0),l=e.length,u=t==="complex64"?createComplexTuples(n):n;if(l>1)for(let h=0;h<s/a;h++){const f=h*a;for(let c=0;c<a;c++)i[c]=Math.max(i[c],valToString(u[f+c],0,t).length)}return i}function valToString(n,e,t){let r;return Array.isArray(n)?r=`${parseFloat(n[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ${parseFloat(n[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`:isString(n)?r=`'${n}'`:t==="bool"?r=boolNumToString(n):r=parseFloat(n.toFixed(FORMAT_NUM_SIG_DIGITS)).toString(),rightPad(r,e)}function boolNumToString(n){return n===0?"false":"true"}function subTensorToString(n,e,t,r,s,a=!0){const i=t==="complex64"?2:1,l=e[0],u=e.length;if(u===0){if(t==="complex64"){const g=createComplexTuples(n);return[valToString(g[0],0,t)]}return t==="bool"?[boolNumToString(n[0])]:[n[0].toString()]}if(u===1){if(l>FORMAT_LIMIT_NUM_VALS){const y=FORMAT_NUM_FIRST_LAST_VALS*i;let $=Array.from(n.slice(0,y)),b=Array.from(n.slice((l-FORMAT_NUM_FIRST_LAST_VALS)*i,l*i));return t==="complex64"&&($=createComplexTuples($),b=createComplexTuples(b)),["["+$.map((x,w)=>valToString(x,s[w],t)).join(", ")+", ..., "+b.map((x,w)=>valToString(x,s[l-FORMAT_NUM_FIRST_LAST_VALS+w],t)).join(", ")+"]"]}return["["+(t==="complex64"?createComplexTuples(n):Array.from(n)).map((y,$)=>valToString(y,s[$],t)).join(", ")+"]"]}const h=e.slice(1),f=r.slice(1),c=r[0]*i,o=[];if(l>FORMAT_LIMIT_NUM_VALS){for(let g=0;g<FORMAT_NUM_FIRST_LAST_VALS;g++){const y=g*c,$=y+c;o.push(...subTensorToString(n.slice(y,$),h,t,f,s,!1))}o.push("...");for(let g=l-FORMAT_NUM_FIRST_LAST_VALS;g<l;g++){const y=g*c,$=y+c;o.push(...subTensorToString(n.slice(y,$),h,t,f,s,g===l-1))}}else for(let g=0;g<l;g++){const y=g*c,$=y+c;o.push(...subTensorToString(n.slice(y,$),h,t,f,s,g===l-1))}const d=u===2?",":"";o[0]="["+(l>0?o[0]+d:"");for(let g=1;g<o.length-1;g++)o[g]=" "+o[g]+d;let m=`,
`;for(let g=2;g<u;g++)m+=`
`;return o[o.length-1]=" "+o[o.length-1]+"]"+(a?"":m),o}function createComplexTuples(n){const e=[];for(let t=0;t<n.length;t+=2)e.push([n[t],n[t+1]]);return e}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TensorBuffer{constructor(e,t,r){if(this.dtype=t,this.shape=e.slice(),this.size=sizeFromShape(e),r!=null){const s=r.length;assert(s===this.size,()=>`Length of values '${s}' does not match the size inferred by the shape '${this.size}'.`)}if(t==="complex64")throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=r||getArrayFromDType(t,this.size),this.strides=computeStrides(e)}set(e,...t){t.length===0&&(t=[0]),assert(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const r=this.locToIndex(t);this.values[r]=e}get(...e){e.length===0&&(e=[0]);let t=0;for(const s of e){if(s<0||s>=this.shape[t]){const a=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(a)}t++}let r=e[e.length-1];for(let s=0;s<e.length-1;++s)r+=this.strides[s]*e[s];return this.values[r]}locToIndex(e){if(this.rank===0)return 0;if(this.rank===1)return e[0];let t=e[e.length-1];for(let r=0;r<e.length-1;++r)t+=this.strides[r]*e[r];return t}indexToLoc(e){if(this.rank===0)return[];if(this.rank===1)return[e];const t=new Array(this.shape.length);for(let r=0;r<t.length-1;++r)t[r]=Math.floor(e/this.strides[r]),e-=t[r]*this.strides[r];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return trackerFn().makeTensor(this.values,this.shape,this.dtype)}}let trackerFn=null,opHandler$1=null;function setTensorTracker(n){trackerFn=n}function setOpHandler(n){opHandler$1=n}class Tensor{constructor(e,t,r,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=sizeFromShape(e),this.strides=computeStrides(e),this.dataId=r,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return opHandler$1.buffer(this.shape,this.dtype,e)}bufferSync(){return opHandler$1.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return toNestedArray(this.shape,e,this.dtype==="complex64")}arraySync(){return toNestedArray(this.shape,this.dataSync(),this.dtype==="complex64")}async data(){this.throwIfDisposed();const e=trackerFn().read(this.dataId);if(this.dtype==="string"){const t=await e;try{return t.map(r=>decodeString(r))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),trackerFn().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=trackerFn().readSync(this.dataId);if(this.dtype==="string")try{return e.map(t=>decodeString(t))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await trackerFn().read(this.dataId);return this.dtype==="string"?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),trackerFn().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return opHandler$1.print(this,e)}clone(){return this.throwIfDisposed(),opHandler$1.clone(this)}toString(e=!1){const t=this.dataSync();return tensorToString(t,this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),opHandler$1.cast(this,e)}variable(e=!0,t,r){return this.throwIfDisposed(),trackerFn().makeVariable(this,e,t,r)}}Object.defineProperty(Tensor,Symbol.hasInstance,{value:n=>!!n&&n.data!=null&&n.dataSync!=null&&n.throwIfDisposed!=null});function getGlobalTensorClass(){return getGlobal("Tensor",()=>Tensor)}getGlobalTensorClass();class Variable extends Tensor{constructor(e,t,r,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=r}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!arraysEqual(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);trackerFn().disposeTensor(this),this.dataId=e.dataId,trackerFn().incRef(this,null)}dispose(){trackerFn().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(Variable,Symbol.hasInstance,{value:n=>n instanceof Tensor&&n.assign!=null&&n.assign instanceof Function});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var Rank;(function(n){n.R0="R0",n.R1="R1",n.R2="R2",n.R3="R3",n.R4="R4",n.R5="R5",n.R6="R6"})(Rank||(Rank={}));var UpcastInt32AndMap;(function(n){n.float32="float32",n.int32="int32",n.bool="int32",n.complex64="complex64"})(UpcastInt32AndMap||(UpcastInt32AndMap={}));var UpcastBoolAndMap;(function(n){n.float32="float32",n.int32="int32",n.bool="bool",n.complex64="complex64"})(UpcastBoolAndMap||(UpcastBoolAndMap={}));var UpcastFloat32AndMap;(function(n){n.float32="float32",n.int32="float32",n.bool="float32",n.complex64="complex64"})(UpcastFloat32AndMap||(UpcastFloat32AndMap={}));var UpcastComplex64AndMap;(function(n){n.float32="complex64",n.int32="complex64",n.bool="complex64",n.complex64="complex64"})(UpcastComplex64AndMap||(UpcastComplex64AndMap={}));const upcastTypeMap={float32:UpcastFloat32AndMap,int32:UpcastInt32AndMap,bool:UpcastBoolAndMap,complex64:UpcastComplex64AndMap};function upcastType(n,e){if(n==="string"||e==="string"){if(n==="string"&&e==="string")return"string";throw new Error(`Can not upcast ${n} with ${e}`)}return upcastTypeMap[n][e]}function sumOutType(n){return upcastType(n,"int32")}function isWebGLData(n){return n!=null&&typeof n=="object"&&"texture"in n&&n.texture instanceof WebGLTexture}function isWebGPUData(n){return typeof GPUBuffer<"u"&&n!=null&&typeof n=="object"&&"buffer"in n&&n.buffer instanceof GPUBuffer}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeTypesMatch(n,e){if(n.dtype===e.dtype)return[n,e];const t=upcastType(n.dtype,e.dtype);return[n.cast(t),e.cast(t)]}function getTensorsInContainer(n){const e=[];return walkTensorContainer(n,e,new Set),e}function walkTensorContainer(n,e,t){if(n==null)return;if(n instanceof Tensor){e.push(n);return}if(!isIterable(n))return;const r=n;for(const s in r){const a=r[s];t.has(a)||(t.add(a),walkTensorContainer(a,e,t))}}function isIterable(n){return Array.isArray(n)||typeof n=="object"}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isRegisteredKernelInvocation(n){return n.kernelName!=null}class EngineState{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Engine{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new EngineState}async ready(){if(this.pendingBackendInit!=null)return this.pendingBackendInit.then(()=>{});if(this.backendInstance!=null)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const r=e[t];if(await this.initializeBackend(r).success){await this.setBackend(r);return}}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(this.pendingBackendInit!=null)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(this.backendInstance==null){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry))if(e in this.registryFactory){const{asyncInit:t}=this.initializeBackend(e);if(t)return null}else return null;return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,r=1){return e in this.registryFactory?(warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:r},!0)}async setBackend(e){if(this.registryFactory[e]==null)throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,this.registry[e]==null){this.backendInstance=null;const{success:t,asyncInit:r}=this.initializeBackend(e);if(!(r?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Profiler(this.backendInstance),!0}setupRegisteredKernels(){getKernelsForBackend(this.backendName).forEach(t=>{t.setupFunc!=null&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){getKernelsForBackend(e).forEach(r=>{r.disposeFunc!=null&&r.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(t==null)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const r=t.factory();if(r&&!(r instanceof KernelBackend)&&typeof r.then=="function"){const s=++this.pendingBackendInitId,a=r.then(i=>s<this.pendingBackendInitId?!1:(this.registry[e]=i,this.pendingBackendInit=null,!0)).catch(i=>(s<this.pendingBackendInitId||(this.pendingBackendInit=null,warn(`Initialization of backend ${e} failed`),warn(i.stack||i.message)),!1));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}else return this.registry[e]=r,{success:!0,asyncInit:!1}}catch(r){return warn(`Initialization of backend ${e} failed`),warn(r.stack||r.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&this.pendingBackendInit!=null&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(Object.keys(this.registryFactory).length===0)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const r=e[t],{success:s,asyncInit:a}=this.initializeBackend(r);if(a||s)return{name:r,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const r=this.state.tensorInfo.get(t),s=r.backend,a=this.readSync(t),i=s.refCount(t);s.disposeData(t,!0),r.backend=e,e.move(t,a,r.shape,r.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let r=null;if(t==null){if(typeof e!="function")throw new Error("Please provide a function to tidy()");t=e}else{if(typeof e!="string"&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if(typeof t!="function")throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}let s;return this.scopedRun(()=>this.startScope(r),()=>this.endScope(s),()=>(s=t(),s instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),s))}scopedRun(e,t,r){e();try{const s=r();return t(),s}catch(s){throw t(),s}}nextTensorId(){return Engine.nextTensorId++}nextVariableId(){return Engine.nextVariableId++}clone(e){const t=ENGINE.runKernel(Identity,{x:e}),r={x:e},s=i=>({x:()=>{const l="float32",u={x:i},h={dtype:l};return ENGINE.runKernel(Cast,u,h)}}),a=[];return this.addTapeNode(this.state.activeScope.name,r,[t],s,a,{}),t}runKernel(e,t,r){if(this.backendName==null&&this.backend,!(getKernel(e,this.backendName)!=null))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:r})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,r){const s=this.backend.numDataIds();let a=0;r.forEach(u=>{a+=u.dtype==="complex64"?3:1});const i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],l=s-t-a-i;if(l>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${l} data ids) after running '${e}'`)}runKernelFunc(e){let t,r=[];const s=this.isTapeOn(),a=this.state.numBytes,i=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);let l;this.backendName==null&&this.backend;let u;const h=isRegisteredKernelInvocation(e)?e.kernelName:this.state.activeScope!=null?this.state.activeScope.name:"";if(isRegisteredKernelInvocation(e)){const{kernelName:m,inputs:g,attrs:y}=e;this.backendName==null&&this.backend;const $=getKernel(m,this.backendName);assert($!=null,()=>`Cannot find registered kernel '${m}' for backend '${this.backendName}'`),l=()=>{const b=this.backend.numDataIds();u=$.kernelFunc({inputs:g,attrs:y,backend:this.backend});const x=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(m,b,x);const w=x.map(v=>v.rank!=null?v:this.makeTensorFromTensorInfo(v));if(s){const v=this.getTensorsForGradient(m,g,w);r=this.saveTensorsForBackwardMode(v)}return w}}else{const{forwardFunc:m}=e,g=y=>{s&&(r=y.map($=>this.keep(this.clone($))))};l=()=>{const y=this.backend.numDataIds();u=this.tidy(()=>m(this.backend,g));const $=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(h,y,$),$}}const{inputs:f,attrs:c}=e,o=isRegisteredKernelInvocation(e)?null:e.backwardsFunc;let d;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{!this.ENV.getBool("DEBUG")&&!this.state.profiling?t=l():(d=this.profiler.profileKernel(h,f,()=>l()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs)}),s&&this.addTapeNode(h,f,t,o,r,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:h,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(f).map(m=>f[m]!=null?f[m].shape:null),outputShapes:t.map(m=>m.shape),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(u)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(r=>this.keep(this.clone(r)))}getTensorsForGradient(e,t,r){const s=getGradient(e);if(s!=null){const a=s.inputsToSave||[],i=s.outputsToSave||[];let l;s.saveAllInputs?(assert(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),l=Object.keys(t).map(h=>t[h])):l=a.map(h=>t[h]);const u=r.filter((h,f)=>i[f]);return l.concat(u)}return[]}makeTensor(e,t,r,s){if(e==null)throw new Error("Values passed to engine.makeTensor() are null");r=r||"float32",s=s||this.backend;let a=e;r==="string"&&isString(e[0])&&(a=e.map(u=>encodeString(u)));const i=s.write(a,t,r),l=new Tensor(t,r,i,this.nextTensorId());if(this.trackTensor(l,s),r==="string"){const u=this.state.tensorInfo.get(i),h=bytesFromStringArray(a);this.state.numBytes+=h-u.bytes,u.bytes=h}return l}makeTensorFromDataId(e,t,r,s){r=r||"float32";const a={dataId:e,shape:t,dtype:r};return this.makeTensorFromTensorInfo(a,s)}makeTensorFromTensorInfo(e,t){const{dataId:r,shape:s,dtype:a}=e,i=new Tensor(s,a,r,this.nextTensorId());return this.trackTensor(i,t),i}makeVariable(e,t=!0,r,s){r=r||this.nextVariableId().toString(),s!=null&&s!==e.dtype&&(e=e.cast(s));const a=new Variable(e,t,r,this.nextTensorId());if(this.state.registeredVariables[a.name]!=null)throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,e.dtype==="string"&&this.state.numStringTensors++;let r=0;e.dtype!=="complex64"&&e.dtype!=="string"&&(r=e.size*bytesPerElement(e.dtype)),this.state.numBytes+=r,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:r})),e instanceof Variable||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,e.dtype==="string"&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),e.dtype!=="complex64"&&e.dtype!=="string"){const r=e.size*bytesPerElement(e.dtype);this.state.numBytes-=r}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),this.state.registeredVariables[e.name]!=null&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,e.reasons==null&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,r=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(s=>s.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-r;for(const s of this.state.activeProfile.kernels)s.kernelTimeMs=await s.kernelTimeMs,s.extraInfo=await s.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0}addTapeNode(e,t,r,s,a,i){const l={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:r,saved:a},u=getGradient(e);u!=null&&(s=u.gradFunc),s!=null&&(l.gradient=h=>(h=h.map((f,c)=>{if(f==null){const o=r[c],d=makeZerosTypedArray(o.size,o.dtype);return this.makeTensor(d,o.shape,o.dtype)}return f}),s(h.length>1?h:h[0],a,i))),this.state.activeTape.push(l)}keep(e){return e.kept=!0,e}startTape(){this.state.gradientDepth===0&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=getTensorsInContainer(e),r=new Set(t.map(a=>a.id));for(let a=0;a<this.state.activeScope.track.length;a++){const i=this.state.activeScope.track[a];!i.kept&&!r.has(i.id)&&i.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(a=>{!a.kept&&a.scopeId===s.id&&this.track(a)})}gradients(e,t,r,s=!1){if(assert(t.length>0,()=>"gradients() received an empty list of xs."),r!=null&&r.dtype!=="float32")throw new Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);const a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));assert(a instanceof Tensor,()=>"The result y returned by f() must be a tensor.");const i=getFilteredNodesXToY(this.state.activeTape,t,a);if(!s&&i.length===0&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const l={};l[a.id]=r??ones(a.shape),backpropagateGradients(l,i,h=>this.tidy(h),add$1);const u=t.map(h=>l[h.id]);return this.state.gradientDepth===0&&(this.state.activeTape.forEach(h=>{for(const f of h.saved)f.dispose()}),this.state.activeTape=null),{value:a,grads:u}})}customGrad(e){return assert(isFunction(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{assert(t.every(l=>l instanceof Tensor),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let r;const s={};t.forEach((l,u)=>{s[u]=l});const a=(l,u)=>(r=e(...t,u),assert(r.value instanceof Tensor,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),assert(isFunction(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),i=(l,u)=>{const h=r.gradFunc(l,u),f=Array.isArray(h)?h:[h];assert(f.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),assert(f.every(o=>o instanceof Tensor),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const c={};return f.forEach((o,d)=>{c[d]=()=>o}),c};return this.runKernelFunc({forwardFunc:a,backwardsFunc:i,inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=now(),r=await this.backend.time(e);return r.wallMs=now()-t,r}track(e){return this.state.activeScope!=null&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new EngineState;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}Engine.nextTensorId=0,Engine.nextVariableId=0;function ones(n){const e=makeOnesTypedArray(sizeFromShape(n),"float32");return ENGINE.makeTensor(e,n,"float32")}function getOrMakeEngine(){const n=getGlobalNamespace();if(n._tfengine==null){const e=new Environment(n);n._tfengine=new Engine(e)}return setEnvironmentGlobal(n._tfengine.ENV),setTensorTracker(()=>n._tfengine),n._tfengine}const ENGINE=getOrMakeEngine();function add$1(n,e){const t={a:n,b:e};return ENGINE.runKernel(Add,t)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isBrowser(){return typeof window<"u"&&window.document!=null||typeof WorkerGlobalScope<"u"}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV$1=env();ENV$1.registerFlag("DEBUG",()=>!1,n=>{n&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),ENV$1.registerFlag("IS_BROWSER",()=>isBrowser()),ENV$1.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"),ENV$1.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),ENV$1.registerFlag("IS_SAFARI",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),ENV$1.registerFlag("PROD",()=>!1),ENV$1.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>ENV$1.getBool("DEBUG")),ENV$1.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),ENV$1.registerFlag("IS_TEST",()=>!1),ENV$1.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>ENV$1.getBool("DEBUG")),ENV$1.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),ENV$1.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),ENV$1.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function inferShape(n,e){let t=n;if(isTypedArray(n))return e==="string"?[]:[n.length];if(isWebGLData(n)){const s=n.channels||"RGBA";return[n.height,n.width*s.length]}else if(isWebGPUData(n))return[n.buffer.size/(e==null?4:bytesPerElement(e))];if(!Array.isArray(n))return[];const r=[];for(;Array.isArray(t)||isTypedArray(t)&&e!=="string";)r.push(t.length),t=t[0];return Array.isArray(n)&&env().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&deepAssertShapeConsistency(n,r,[]),r}function deepAssertShapeConsistency(n,e,t){if(t=t||[],!Array.isArray(n)&&!isTypedArray(n)){assert(e.length===0,()=>`Element arr[${t.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`);return}assert(e.length>0,()=>`Element arr[${t.join("][")}] should be a primitive, but is an array of ${n.length} elements`),assert(n.length===e[0],()=>`Element arr[${t.join("][")}] should have ${e[0]} elements, but has ${n.length} elements`);const r=e.slice(1);for(let s=0;s<n.length;++s)deepAssertShapeConsistency(n[s],r,t.concat(s))}function assertDtype(n,e,t,r){if(n!=="string_or_numeric"){if(n==null)throw new Error("Expected dtype cannot be null.");if(n!=="numeric"&&n!==e||n==="numeric"&&e==="string")throw new Error(`Argument '${t}' passed to '${r}' must be ${n} tensor, but got ${e} tensor`)}}function convertToTensor(n,e,t,r="numeric"){if(n instanceof Tensor)return assertDtype(r,n.dtype,e,t),n;let s=inferDtype(n);if(s!=="string"&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),assertDtype(r,s,e,t),n==null||!isTypedArray(n)&&!Array.isArray(n)&&typeof n!="number"&&typeof n!="boolean"&&typeof n!="string"){const u=n==null?"null":n.constructor.name;throw new Error(`Argument '${e}' passed to '${t}' must be a Tensor or TensorLike, but got '${u}'`)}const a=inferShape(n,s);!isTypedArray(n)&&!Array.isArray(n)&&(n=[n]);const l=s!=="string"?toTypedArray(n,s):flatten(n,[],!0);return ENGINE.makeTensor(l,a,s)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const OP_SCOPE_SUFFIX="__op";function op(n){const e=Object.keys(n);if(e.length!==1)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);let t=e[0];const r=n[t];t.endsWith("_")&&(t=t.substring(0,t.length-1)),t=t+OP_SCOPE_SUFFIX;const s=(...a)=>{ENGINE.startScope(t);try{const i=r(...a);return isPromise(i)&&console.error("Cannot return a Promise inside of tidy."),ENGINE.endScope(i),i}catch(i){throw ENGINE.endScope(null),i}};return Object.defineProperty(s,"name",{value:t,configurable:!0}),s}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function complex_(n,e){const t=convertToTensor(n,"real","complex"),r=convertToTensor(e,"imag","complex");assertShapesMatch(t.shape,r.shape,`real and imag shapes, ${t.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:t,imag:r};return ENGINE.runKernel(Complex,s)}const complex$1=op({complex_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeTensor(n,e,t,r){if(r==null)r=inferDtype(n);else if(r==="complex64")throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(isWebGPUData(n)||isWebGLData(n)){if(r!=="float32"&&r!=="int32")throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${r}.`);return ENGINE.backend.createTensorFromGPUData(n,e||t,r)}if(!isTypedArray(n)&&!Array.isArray(n)&&typeof n!="number"&&typeof n!="boolean"&&typeof n!="string")throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(e!=null){assertNonNegativeIntegerDimensions(e);const s=sizeFromShape(e),a=sizeFromShape(t);assert(s===a,()=>`Based on the provided shape, [${e}], the tensor should have ${s} values but has ${a}`);for(let i=0;i<t.length;++i){const l=t[i],u=i===t.length-1?l!==sizeFromShape(e.slice(i)):!0;assert(t[i]===e[i]||!u,()=>`Error creating a new Tensor. Inferred shape (${t}) does not match the provided shape (${e}). `)}}return!isTypedArray(n)&&!Array.isArray(n)&&(n=[n]),e=e||t,n=r!=="string"?toTypedArray(n,r):flatten(n,[],!0),ENGINE.makeTensor(n,e,r)}class CompositeArrayBuffer{static join(e){return new CompositeArrayBuffer(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,e==null||(e instanceof Array||(e=[e]),e=e.map(r=>isTypedArray(r)?r.buffer:r),e.length===0))return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let r=0;r<e.length;r++){const s=e[r];r!==e.length-1&&s.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const a=t+s.byteLength;this.shards.push({buffer:s,start:t,end:a}),t=a}this.shards.length===0&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(this.shards.length===0)return new ArrayBuffer(0);if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),t=Math.min(this.byteLength,t),t<=e)return new ArrayBuffer(0);const r=this.findShardForByte(e);if(r===-1)throw new Error(`Could not find start shard for byte ${e}`);const s=t-e,a=new ArrayBuffer(s),i=new Uint8Array(a);let l=0;for(let u=r;u<this.shards.length;u++){const h=this.shards[u],c=e+l-h.start,o=l,m=Math.min(t,h.end)-h.start,g=new Uint8Array(h.buffer,c,m-c);if(i.set(g,o),l+=g.length,t<h.end)break}return a}findShardForByte(e){if(this.shards.length===0||e<0||e>=this.byteLength)return-1;if(this.bufferUniformSize!=null)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(s){return e<s.start?-1:e>=s.end?1:0}if(t(this.shards[this.previousShardIndex])===0)return this.previousShardIndex;const r=search(this.shards,t);return r===-1?-1:(this.previousShardIndex=r,this.previousShardIndex)}}function search(n,e){let t=0,r=n.length;for(;t<=r;){const s=Math.floor((r-t)/2)+t,a=e(n[s]);if(a===0)return s;a<0?r=s:t=s+1}return-1}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const useNodeBuffer=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function stringByteLength(n){return useNodeBuffer?Buffer.byteLength(n,"utf8"):new Blob([n]).size}function arrayBufferToBase64String(n){if(useNodeBuffer)return Buffer.from(n).toString("base64");const e=new Uint8Array(n);let t="";for(let r=0,s=e.length;r<s;r++)t+=String.fromCharCode(e[r]);return btoa(t)}function base64StringToArrayBuffer(n){if(useNodeBuffer){const r=Buffer.from(n,"base64");return r.buffer.slice(r.byteOffset,r.byteOffset+r.byteLength)}const e=atob(n),t=new Uint8Array(e.length);for(let r=0;r<e.length;++r)t.set([e.charCodeAt(r)],r);return t.buffer}function getModelArtifactsInfoForJSON(n){if(n.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:n.modelTopology==null?0:stringByteLength(JSON.stringify(n.modelTopology)),weightSpecsBytes:n.weightSpecs==null?0:stringByteLength(JSON.stringify(n.weightSpecs)),weightDataBytes:n.weightData==null?0:new CompositeArrayBuffer(n.weightData).byteLength}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class IORouterRegistry{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return IORouterRegistry.instance==null&&(IORouterRegistry.instance=new IORouterRegistry),IORouterRegistry.instance}static registerSaveRouter(e){IORouterRegistry.getInstance().saveRouters.push(e)}static registerLoadRouter(e){IORouterRegistry.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return IORouterRegistry.getHandlers(e,"save")}static getLoadHandlers(e,t){return IORouterRegistry.getHandlers(e,"load",t)}static getHandlers(e,t,r){const s=[];return(t==="load"?IORouterRegistry.getInstance().loadRouters:IORouterRegistry.getInstance().saveRouters).forEach(i=>{const l=i(e,r);l!==null&&s.push(l)}),s}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const DATABASE_NAME="tensorflowjs",DATABASE_VERSION=1,MODEL_STORE_NAME="models_store",INFO_STORE_NAME="model_info_store";function getIndexedDBFactory(){if(!env().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const n=typeof window>"u"?self:window,e=n.indexedDB||n.mozIndexedDB||n.webkitIndexedDB||n.msIndexedDB||n.shimIndexedDB;if(e==null)throw new Error("The current browser does not appear to support IndexedDB.");return e}function setUpDatabase(n){const e=n.result;e.createObjectStore(MODEL_STORE_NAME,{keyPath:"modelPath"}),e.createObjectStore(INFO_STORE_NAME,{keyPath:"modelPath"})}class BrowserIndexedDB{constructor(e){if(this.indexedDB=getIndexedDBFactory(),e==null||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((r,s)=>{const a=this.indexedDB.open(DATABASE_NAME,DATABASE_VERSION);a.onupgradeneeded=()=>setUpDatabase(a),a.onsuccess=()=>{const i=a.result;if(t==null){const l=i.transaction(MODEL_STORE_NAME,"readonly"),h=l.objectStore(MODEL_STORE_NAME).get(this.modelPath);h.onsuccess=()=>{if(h.result==null)return i.close(),s(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));r(h.result.modelArtifacts)},h.onerror=f=>(i.close(),s(h.error)),l.oncomplete=()=>i.close()}else{t.weightData=CompositeArrayBuffer.join(t.weightData);const l=getModelArtifactsInfoForJSON(t),u=i.transaction(INFO_STORE_NAME,"readwrite");let h=u.objectStore(INFO_STORE_NAME),f;try{f=h.put({modelPath:this.modelPath,modelArtifactsInfo:l})}catch(o){return s(o)}let c;f.onsuccess=()=>{c=i.transaction(MODEL_STORE_NAME,"readwrite");const o=c.objectStore(MODEL_STORE_NAME);let d;try{d=o.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:l})}catch(m){return s(m)}d.onsuccess=()=>r({modelArtifactsInfo:l}),d.onerror=m=>{h=u.objectStore(INFO_STORE_NAME);const g=h.delete(this.modelPath);g.onsuccess=()=>(i.close(),s(d.error)),g.onerror=y=>(i.close(),s(d.error))}},f.onerror=o=>(i.close(),s(f.error)),u.oncomplete=()=>{c==null?i.close():c.oncomplete=()=>i.close()}}},a.onerror=i=>s(a.error)})}}BrowserIndexedDB.URL_SCHEME="indexeddb://";const indexedDBRouter=n=>env().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(BrowserIndexedDB.URL_SCHEME)?browserIndexedDB(n.slice(BrowserIndexedDB.URL_SCHEME.length)):null;IORouterRegistry.registerSaveRouter(indexedDBRouter),IORouterRegistry.registerLoadRouter(indexedDBRouter);function browserIndexedDB(n){return new BrowserIndexedDB(n)}function maybeStripScheme$1(n){return n.startsWith(BrowserIndexedDB.URL_SCHEME)?n.slice(BrowserIndexedDB.URL_SCHEME.length):n}class BrowserIndexedDBManager{constructor(){this.indexedDB=getIndexedDBFactory()}async listModels(){return new Promise((e,t)=>{const r=this.indexedDB.open(DATABASE_NAME,DATABASE_VERSION);r.onupgradeneeded=()=>setUpDatabase(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(INFO_STORE_NAME,"readonly"),l=a.objectStore(INFO_STORE_NAME).getAll();l.onsuccess=()=>{const u={};for(const h of l.result)u[h.modelPath]=h.modelArtifactsInfo;e(u)},l.onerror=u=>(s.close(),t(l.error)),a.oncomplete=()=>s.close()},r.onerror=s=>t(r.error)})}async removeModel(e){return e=maybeStripScheme$1(e),new Promise((t,r)=>{const s=this.indexedDB.open(DATABASE_NAME,DATABASE_VERSION);s.onupgradeneeded=()=>setUpDatabase(s),s.onsuccess=()=>{const a=s.result,i=a.transaction(INFO_STORE_NAME,"readwrite"),l=i.objectStore(INFO_STORE_NAME),u=l.get(e);let h;u.onsuccess=()=>{if(u.result==null)return a.close(),r(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const f=l.delete(e),c=()=>{h=a.transaction(MODEL_STORE_NAME,"readwrite");const d=h.objectStore(MODEL_STORE_NAME).delete(e);d.onsuccess=()=>t(u.result.modelArtifactsInfo),d.onerror=m=>r(u.error)};f.onsuccess=c,f.onerror=o=>(c(),a.close(),r(u.error))}},u.onerror=f=>(a.close(),r(u.error)),i.oncomplete=()=>{h==null?a.close():h.oncomplete=()=>a.close()}},s.onerror=a=>r(s.error)})}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PATH_SEPARATOR="/",PATH_PREFIX="tensorflowjs_models",INFO_SUFFIX="info",MODEL_TOPOLOGY_SUFFIX="model_topology",WEIGHT_SPECS_SUFFIX="weight_specs",WEIGHT_DATA_SUFFIX="weight_data",MODEL_METADATA_SUFFIX="model_metadata";function getModelKeys(n){return{info:[PATH_PREFIX,n,INFO_SUFFIX].join(PATH_SEPARATOR),topology:[PATH_PREFIX,n,MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),weightSpecs:[PATH_PREFIX,n,WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),weightData:[PATH_PREFIX,n,WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),modelMetadata:[PATH_PREFIX,n,MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)}}function removeItems(n){for(const e of Object.values(n))window.localStorage.removeItem(e)}function getModelPathFromKey(n){const e=n.split(PATH_SEPARATOR);if(e.length<3)throw new Error(`Invalid key format: ${n}`);return e.slice(1,e.length-1).join(PATH_SEPARATOR)}function maybeStripScheme(n){return n.startsWith(BrowserLocalStorage.URL_SCHEME)?n.slice(BrowserLocalStorage.URL_SCHEME.length):n}class BrowserLocalStorage{constructor(e){if(!env().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,e==null||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=getModelKeys(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),r=JSON.stringify(e.weightSpecs),s=getModelArtifactsInfoForJSON(e),a=CompositeArrayBuffer.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,r),this.LS.setItem(this.keys.weightData,arrayBufferToBase64String(a));const i={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:e.signature!=null?e.signature:void 0,userDefinedMetadata:e.userDefinedMetadata!=null?e.userDefinedMetadata:void 0,modelInitializer:e.modelInitializer!=null?e.modelInitializer:void 0,initializerSignature:e.initializerSignature!=null?e.initializerSignature:void 0,trainingConfig:e.trainingConfig!=null?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(i)),{modelArtifactsInfo:s}}catch{throw removeItems(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(e==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(e.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},r=JSON.parse(this.LS.getItem(this.keys.topology));if(r==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=r;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(s==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const a=this.LS.getItem(this.keys.modelMetadata);if(a!=null){const l=JSON.parse(a);t.format=l.format,t.generatedBy=l.generatedBy,t.convertedBy=l.convertedBy,l.signature!=null&&(t.signature=l.signature),l.userDefinedMetadata!=null&&(t.userDefinedMetadata=l.userDefinedMetadata),l.modelInitializer!=null&&(t.modelInitializer=l.modelInitializer),l.initializerSignature!=null&&(t.initializerSignature=l.initializerSignature),l.trainingConfig!=null&&(t.trainingConfig=l.trainingConfig)}const i=this.LS.getItem(this.keys.weightData);if(i==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=base64StringToArrayBuffer(i),t}}BrowserLocalStorage.URL_SCHEME="localstorage://";const localStorageRouter=n=>env().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(BrowserLocalStorage.URL_SCHEME)?browserLocalStorage(n.slice(BrowserLocalStorage.URL_SCHEME.length)):null;IORouterRegistry.registerSaveRouter(localStorageRouter),IORouterRegistry.registerLoadRouter(localStorageRouter);function browserLocalStorage(n){return new BrowserLocalStorage(n)}class BrowserLocalStorageManager{constructor(){assert(env().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),assert(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=PATH_PREFIX+PATH_SEPARATOR,r=PATH_SEPARATOR+INFO_SUFFIX;for(let s=0;s<this.LS.length;++s){const a=this.LS.key(s);if(a.startsWith(t)&&a.endsWith(r)){const i=getModelPathFromKey(a);e[i]=JSON.parse(this.LS.getItem(a))}}return e}async removeModel(e){e=maybeStripScheme(e);const t=getModelKeys(e);if(this.LS.getItem(t.info)==null)throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(t.info));return removeItems(t),r}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const URL_SCHEME_SUFFIX="://";class ModelStoreManagerRegistry{constructor(){this.managers={}}static getInstance(){return ModelStoreManagerRegistry.instance==null&&(ModelStoreManagerRegistry.instance=new ModelStoreManagerRegistry),ModelStoreManagerRegistry.instance}static registerManager(e,t){assert(e!=null,()=>"scheme must not be undefined or null."),e.endsWith(URL_SCHEME_SUFFIX)&&(e=e.slice(0,e.indexOf(URL_SCHEME_SUFFIX))),assert(e.length>0,()=>"scheme must not be an empty string.");const r=ModelStoreManagerRegistry.getInstance();assert(r.managers[e]==null,()=>`A model store manager is already registered for scheme '${e}'.`),r.managers[e]=t}static getManager(e){const t=ModelStoreManagerRegistry.getInstance().managers[e];if(t==null)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(ModelStoreManagerRegistry.getInstance().managers)}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class PlatformBrowser{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if(t!=="utf-8"&&t!=="utf8")throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return this.textEncoder==null&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){if(typeof window>"u"||!env().getBool("USE_SETTIMEOUTCUSTOM")){setTimeout(e,t);return}this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",r=>{if(r.source===window&&r.data.name===this.messageName){r.stopPropagation();const s=this.functionRefs[r.data.index];s(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}},!0))}isTypedArray(e){return isTypedArrayBrowser(e)}}if(env().get("IS_BROWSER")){env().setPlatform("browser",new PlatformBrowser);try{ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME,new BrowserLocalStorageManager)}catch{}try{ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME,new BrowserIndexedDBManager)}catch{}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const getNodeFetch={importFetch:()=>require("node-fetch")};let systemFetch;class PlatformNode{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return env().global.fetch!=null?env().global.fetch(e,t):(systemFetch==null&&(systemFetch=getNodeFetch.importFetch()),systemFetch(e,t))}now(){const e=process.hrtime();return e[0]*1e3+e[1]/1e6}encode(e,t){if(t!=="utf-8"&&t!=="utf8")throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return e.length===0?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}}env().get("IS_NODE")&&!env().get("IS_BROWSER")&&env().setPlatform("node",new PlatformNode);/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function buffer(n,e="float32",t){return e=e||"float32",assertNonNegativeIntegerDimensions(n),new TensorBuffer(n,e,t)}/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cast_(n,e){const t=convertToTensor(n,"x","cast");if(!isValidDtype(e))throw new Error(`Failed to cast to unknown dtype ${e}`);if(e==="string"&&t.dtype!=="string"||e!=="string"&&t.dtype==="string")throw new Error("Only strings can be casted to strings");const r={x:t},s={dtype:e};return ENGINE.runKernel(Cast,r,s)}const cast$1=op({cast_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function clone_(n){const t={x:convertToTensor(n,"x","clone","string_or_numeric")};return ENGINE.runKernel(Identity,t)}const clone=op({clone_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function print(n,e=!1){console.log(n.toString(e))}/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getOrMakeEngine();const opHandler={buffer,cast:cast$1,clone,print};setOpHandler(opHandler);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function engine(){return ENGINE}function tidy(n,e){return ENGINE.tidy(n,e)}function dispose(n){getTensorsInContainer(n).forEach(t=>t.dispose())}function keep(n){return ENGINE.keep(n)}function registerBackend(n,e,t=1){return ENGINE.registerBackend(n,e,t)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function add_(n,e){let t=convertToTensor(n,"a","add"),r=convertToTensor(e,"b","add");[t,r]=makeTypesMatch(t,r);const s={a:t,b:r};return ENGINE.runKernel(Add,s)}const add=op({add_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function floorDiv_(n,e){let t=convertToTensor(n,"a","floorDiv"),r=convertToTensor(e,"b","floorDiv");[t,r]=makeTypesMatch(t,r);const s={a:t,b:r};return ENGINE.runKernel(FloorDiv,s)}const floorDiv$1=op({floorDiv_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function div_(n,e){let t=convertToTensor(n,"a","div"),r=convertToTensor(e,"b","div");if([t,r]=makeTypesMatch(t,r),t.dtype==="int32"&&r.dtype==="int32")return floorDiv$1(t,r);const s={a:t,b:r},a={};return ENGINE.runKernel(RealDiv,s,a)}const div=op({div_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mul_(n,e){let t=convertToTensor(n,"a","mul"),r=convertToTensor(e,"b","mul");[t,r]=makeTypesMatch(t,r);const s={a:t,b:r};return ENGINE.runKernel(Multiply,s)}const mul=op({mul_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function abs_(n){const e=convertToTensor(n,"x","abs");if(e.dtype==="complex64"){const t={x:e};return ENGINE.runKernel(ComplexAbs,t)}else{const t={x:e};return ENGINE.runKernel(Abs,t)}}const abs$1=op({abs_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function computeDilation2DInfo(n,e,t,r,s="NHWC",a){const i=n[3],l=[...e,i],u=convertConv2DDataFormat(s);return computeConv2DInfo(n,l,t,a,r,null,null,u)}function computePool2DInfo(n,e,t,r,s,a,i="channelsLast"){const[l,u]=parseTupleParam(e);let h;if(i==="channelsLast")h=[l,u,n[3],n[3]];else if(i==="channelsFirst")h=[l,u,n[1],n[1]];else throw new Error(`Unknown dataFormat ${i}`);return computeConv2DInfo(n,h,t,r,s,a,!1,i)}function computePool3DInfo(n,e,t,r,s,a,i="NDHWC"){const[l,u,h]=parse3TupleParam(e);let f,c;if(i==="NDHWC")c="channelsLast",f=[l,u,h,n[4],n[4]];else if(i==="NCDHW")c="channelsFirst",f=[l,u,h,n[1],n[1]];else throw new Error(`Unknown dataFormat ${i}`);return computeConv3DInfo(n,f,t,r,s,!1,c,a)}function computeConv2DInfo(n,e,t,r,s,a,i=!1,l="channelsLast"){let[u,h,f,c]=[-1,-1,-1,-1];if(l==="channelsLast")[u,h,f,c]=n;else if(l==="channelsFirst")[u,c,h,f]=n;else throw new Error(`Unknown dataFormat ${l}`);const[o,d,,m]=e,[g,y]=parseTupleParam(t),[$,b]=parseTupleParam(r),x=getEffectiveFilterSize(o,$),w=getEffectiveFilterSize(d,b),{padInfo:v,outHeight:S,outWidth:T}=getPadAndOutInfo(s,h,f,g,y,x,w,a,l),C=i?m*c:m;let I;return l==="channelsFirst"?I=[u,C,S,T]:l==="channelsLast"&&(I=[u,S,T,C]),{batchSize:u,dataFormat:l,inHeight:h,inWidth:f,inChannels:c,outHeight:S,outWidth:T,outChannels:C,padInfo:v,strideHeight:g,strideWidth:y,filterHeight:o,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:$,dilationWidth:b,inShape:n,outShape:I,filterShape:e}}function computeConv3DInfo(n,e,t,r,s,a=!1,i="channelsLast",l){let[u,h,f,c,o]=[-1,-1,-1,-1,-1];if(i==="channelsLast")[u,h,f,c,o]=n;else if(i==="channelsFirst")[u,o,h,f,c]=n;else throw new Error(`Unknown dataFormat ${i}`);const[d,m,g,,y]=e,[$,b,x]=parse3TupleParam(t),[w,v,S]=parse3TupleParam(r),T=getEffectiveFilterSize(d,w),C=getEffectiveFilterSize(m,v),I=getEffectiveFilterSize(g,S),{padInfo:N,outDepth:P,outHeight:F,outWidth:_}=get3DPadAndOutInfo(s,h,f,c,$,b,x,T,C,I,l),D=a?y*o:y;let E;return i==="channelsFirst"?E=[u,D,P,F,_]:i==="channelsLast"&&(E=[u,P,F,_,D]),{batchSize:u,dataFormat:i,inDepth:h,inHeight:f,inWidth:c,inChannels:o,outDepth:P,outHeight:F,outWidth:_,outChannels:D,padInfo:N,strideDepth:$,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:m,filterWidth:g,effectiveFilterDepth:T,effectiveFilterHeight:C,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:v,dilationWidth:S,inShape:n,outShape:E,filterShape:e}}function computeOutputShape2D(n,e,t,r,s){r==null&&(r=computeDefaultPad(n,e,t));const a=n[0],i=n[1],l=round$1((a-e+2*r)/t+1,s),u=round$1((i-e+2*r)/t+1,s);return[l,u]}function computeOutputShape4D(n,e,t,r,s,a){s==null&&(s=computeDefaultPad(n,e[0],r[0]));const i=[0,0,0,t];for(let l=0;l<3;l++)n[l]+2*s>=e[l]&&(i[l]=round$1((n[l]-e[l]+2*s)/r[l]+1,a));return i}function computeDefaultPad(n,e,t,r=1){const s=getEffectiveFilterSize(e,r);return Math.floor((n[0]*(t-1)-t+s)/2)}function parseTupleParam(n){return typeof n=="number"?[n,n,n]:n.length===2?[n[0],n[1],1]:n}function parse3TupleParam(n){return typeof n=="number"?[n,n,n]:n}function getEffectiveFilterSize(n,e){return e<=1?n:n+(n-1)*(e-1)}function getPadAndOutInfo(n,e,t,r,s,a,i,l,u){let h,f,c;if(typeof n=="number"){h={top:n,bottom:n,left:n,right:n,type:n===0?"VALID":"NUMBER"};const d=computeOutputShape2D([e,t],a,r,n,l);f=d[0],c=d[1]}else if(n==="same"){f=Math.ceil(e/r),c=Math.ceil(t/s);const o=Math.max(0,(f-1)*r+a-e),d=Math.max(0,(c-1)*s+i-t),m=Math.floor(o/2),g=o-m,y=Math.floor(d/2),$=d-y;h={top:m,bottom:g,left:y,right:$,type:"SAME"}}else if(n==="valid")h={top:0,bottom:0,left:0,right:0,type:"VALID"},f=Math.ceil((e-a+1)/r),c=Math.ceil((t-i+1)/s);else if(typeof n=="object"){const o=u==="channelsLast"?n[1][0]:n[2][0],d=u==="channelsLast"?n[1][1]:n[2][1],m=u==="channelsLast"?n[2][0]:n[3][0],g=u==="channelsLast"?n[2][1]:n[3][1];h={top:o,bottom:d,left:m,right:g,type:o===0&&d===0&&m===0&&g===0?"VALID":"EXPLICIT"},f=round$1((e-a+o+d)/r+1,l),c=round$1((t-i+m+g)/s+1,l)}else throw Error(`Unknown padding parameter: ${n}`);return{padInfo:h,outHeight:f,outWidth:c}}function get3DPadAndOutInfo(n,e,t,r,s,a,i,l,u,h,f){let c,o,d,m;if(n==="valid"&&(n=0),typeof n=="number"){c={top:n,bottom:n,left:n,right:n,front:n,back:n,type:n===0?"VALID":"NUMBER"};const y=computeOutputShape4D([e,t,r,1],[l,u,h],1,[s,a,i],n,f);o=y[0],d=y[1],m=y[2]}else if(n==="same"){o=Math.ceil(e/s),d=Math.ceil(t/a),m=Math.ceil(r/i);const g=(o-1)*s+l-e,y=(d-1)*a+u-t,$=(m-1)*i+h-r,b=Math.floor(g/2),x=g-b,w=Math.floor(y/2),v=y-w,S=Math.floor($/2),T=$-S;c={top:w,bottom:v,left:S,right:T,front:b,back:x,type:"SAME"}}else throw Error(`Unknown padding parameter: ${n}`);return{padInfo:c,outDepth:o,outHeight:d,outWidth:m}}function round$1(n,e){if(!e)return Math.trunc(n);switch(e){case"round":return Math.round(n);case"ceil":return Math.ceil(n);case"floor":return Math.floor(n);default:throw new Error(`Unknown roundingMode ${e}`)}}function tupleValuesAreOne(n){const[e,t,r]=parseTupleParam(n);return e===1&&t===1&&r===1}function eitherStridesOrDilationsAreOne(n,e){return tupleValuesAreOne(n)||tupleValuesAreOne(e)}function convertConv2DDataFormat(n){if(n==="NHWC")return"channelsLast";if(n==="NCHW")return"channelsFirst";throw new Error(`Unknown dataFormat ${n}`)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reshape_(n,e){const r={x:convertToTensor(n,"x","reshape","string_or_numeric")},s={shape:e};return ENGINE.runKernel(Reshape,r,s)}const reshape$2=op({reshape_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastTo_(n,e){let t=convertToTensor(n,"broadcastTo","x");const r=t.shape;if(assertNonNegativeIntegerDimensions(e),e.length<t.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${t.rank}.`);if(e.length>t.rank){const h=t.shape.slice();for(;h.length<e.length;)h.unshift(1);t=reshape$2(t,h)}const s=t.shape,a=Array.from(e);for(let h=e.length-1;h>=0;h--)if(s[h]===e[h])a[h]=1;else if(t.shape[h]!==1)throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(a.map((h,f)=>h>1?f:-1).filter(h=>h>=0).length===0)return clone(t);const l={x:t},u={reps:a};return ENGINE.runKernel(Tile,l,u)}const broadcastTo=op({broadcastTo_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fill$1(n,e,t){assertNonNegativeIntegerDimensions(n),t=t||inferDtype(e);const r={shape:n,value:e,dtype:t};return ENGINE.runKernel(Fill,{},r)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getBroadcastDims(n,e){const t=n.length,r=[];for(let s=0;s<t;s++){const a=t-1-s,i=n[a]||1;(e[e.length-1-s]||1)>1&&i===1&&r.unshift(a)}return r}function assertAndGetBroadcastShape(n,e){const t=Math.max(n.length,e.length),r=new Array(t);for(let s=0;s<t;s++){let a=n[n.length-s-1];a==null&&(a=1);let i=e[e.length-s-1];if(i==null&&(i=1),a===1)r[t-s-1]=i;else if(i===1)r[t-s-1]=a;else if(a!==i){const l=`Operands could not be broadcast together with shapes ${n} and ${e}.`;throw Error(l)}else r[t-s-1]=a}return r}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zerosLike_(n){const t={x:convertToTensor(n,"x","zerosLike")};return ENGINE.runKernel(ZerosLike,t)}const zerosLike$1=op({zerosLike_});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function axesAreInnerMostDims(n,e){for(let t=0;t<n.length;++t)if(n[n.length-t-1]!==e-1-t)return!1;return!0}function combineLocations(n,e,t){const r=n.length+e.length,s=[];let a=0,i=0;for(let l=0;l<r;l++)t.indexOf(l)===-1?s.push(n[a++]):s.push(e[i++]);return s}function computeOutAndReduceShapes(n,e){const t=[],r=n.length;for(let a=0;a<r;a++)e.indexOf(a)===-1&&t.push(n[a]);const s=e.map(a=>n[a]);return[t,s]}function expandShapeToKeepDim(n,e){const t=e.map(r=>1);return combineLocations(n,t,e)}function assertAxesAreInnerMostDims(n,e,t){assert(axesAreInnerMostDims(e,t),()=>`${n} supports only inner-most axes for now. Got axes ${e} and rank-${t} input.`)}function getAxesPermutation(n,e){if(axesAreInnerMostDims(n,e))return null;const t=[];for(let r=0;r<e;++r)n.indexOf(r)===-1&&t.push(r);return n.forEach(r=>t.push(r)),t}function getUndoAxesPermutation(n){return n.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function getInnerMostAxes(n,e){const t=[];for(let r=e-n;r<e;++r)t.push(r);return t}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pow_(n,e){let t=convertToTensor(n,"base","pow"),r=convertToTensor(e,"exp","pow");[t,r]=makeTypesMatch(t,r);const s={a:t,b:r};return ENGINE.runKernel(Pow,s)}const pow$1=op({pow_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scalar(n,e){if((isTypedArray(n)&&e!=="string"||Array.isArray(n))&&e!=="complex64")throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if(e==="string"&&isTypedArray(n)&&!(n instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return makeTensor(n,[],[],e)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sqrt_(n){const t={x:convertToTensor(n,"x","sqrt","float32")};return ENGINE.runKernel(Sqrt,t)}const sqrt$1=op({sqrt_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function square_(n){const e=convertToTensor(n,"x","square"),t={};return ENGINE.runKernel("Square",{x:e},t)}const square=op({square_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function variableGrads(n,e){assert(isFunction(n),()=>"The f passed in variableGrads(f) must be a function"),assert(e==null||Array.isArray(e)&&e.every(h=>h instanceof Variable),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const t=e!=null;if(!t){e=[];for(const h in ENGINE.registeredVariables)e.push(ENGINE.registeredVariables[h])}const r=t?e.filter(h=>!h.trainable):null,s=e.length;e=e.filter(h=>h.trainable),assert(e.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const a=!0,{value:i,grads:l}=ENGINE.gradients(n,e,null,a);assert(l.some(h=>h!=null),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),assert(i.rank===0,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);const u={};return e.forEach((h,f)=>{l[f]!=null&&(u[h.name]=l[f])}),r?.forEach(h=>u[h.name]=null),{value:i,grads:u}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sub_(n,e){let t=convertToTensor(n,"a","sub"),r=convertToTensor(e,"b","sub");[t,r]=makeTypesMatch(t,r);const s={a:t,b:r};return ENGINE.runKernel(Sub,s)}const sub$1=op({sub_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maximum_(n,e){let t=convertToTensor(n,"a","maximum"),r=convertToTensor(e,"b","maximum");[t,r]=makeTypesMatch(t,r),t.dtype==="bool"&&(t=cast$1(t,"int32"),r=cast$1(r,"int32")),assertAndGetBroadcastShape(t.shape,r.shape);const s={a:t,b:r};return ENGINE.runKernel(Maximum,s)}const maximum$1=op({maximum_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zeros(n,e="float32"){if(assertNonNegativeIntegerDimensions(n),e==="complex64"){const r=zeros(n,"float32"),s=zeros(n,"float32");return complex$1(r,s)}const t=makeZerosTypedArray(sizeFromShape(n),e);return ENGINE.makeTensor(t,n,e)}function calculateShapes(n,e,t){const r=e.shape.length,s=r>1?e.shape[r-1]:1,a=t.length;let i=1;for(let c=s;c<a;++c)i*=t[c];const l=s<1?1:s,u=sizeFromShape(e.shape)/l,h=[...computeStrides(t.slice(0,s)),1],f=sizeFromShape(t);return{sliceRank:s,numUpdates:u,sliceSize:i,strides:h,outputSize:f}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function binaryInsert(n,e,t){const r=binarySearch(n,e,t),s=r<0?-(r+1):r;n.splice(s,0,e)}function binarySearch(n,e,t){return binarySearch_(n,e,t||defaultComparator)}function defaultComparator(n,e){return n>e?1:n<e?-1:0}function binarySearch_(n,e,t){let r=0,s=n.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const l=t(e,n[a]);l>0?r=a+1:(s=a,i=!l)}return i?r:-r-1}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppressionV3Impl(n,e,t,r,s){return nonMaxSuppressionImpl_(n,e,t,r,s,0)}function nonMaxSuppressionV5Impl(n,e,t,r,s,a){return nonMaxSuppressionImpl_(n,e,t,r,s,a,!0)}function nonMaxSuppressionImpl_(n,e,t,r,s,a,i=!1,l=!1,u=!1){const h=[];for(let y=0;y<e.length;y++)e[y]>s&&h.push({score:e[y],boxIndex:y,suppressBeginIndex:0});h.sort(ascendingComparator);const f=a>0?-.5/a:0,c=[],o=[];for(;c.length<t&&h.length>0;){const y=h.pop(),{score:$,boxIndex:b,suppressBeginIndex:x}=y;if($<s)break;let w=!1;for(let v=c.length-1;v>=x;--v){const S=intersectionOverUnion(n,b,c[v]);if(S>=r){w=!0;break}if(y.score=y.score*suppressWeight(r,f,S),y.score<=s)break}y.suppressBeginIndex=c.length,w||(y.score===$?(c.push(b),o.push(y.score)):y.score>s&&binaryInsert(h,y,ascendingComparator))}const d=c.length,m=t-d;l&&m>0&&(c.push(...new Array(m).fill(0)),o.push(...new Array(m).fill(0)));const g={selectedIndices:c};return i&&(g.selectedScores=o),u&&(g.validOutputs=d),g}function intersectionOverUnion(n,e,t){const r=n.subarray(e*4,e*4+4),s=n.subarray(t*4,t*4+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),l=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),h=Math.min(s[0],s[2]),f=Math.min(s[1],s[3]),c=Math.max(s[0],s[2]),o=Math.max(s[1],s[3]),d=(l-a)*(u-i),m=(c-h)*(o-f);if(d<=0||m<=0)return 0;const g=Math.max(a,h),y=Math.max(i,f),$=Math.min(l,c),b=Math.min(u,o),x=Math.max($-g,0)*Math.max(b-y,0);return x/(d+m-x)}function suppressWeight(n,e,t){const r=Math.exp(e*t*t);return t<=n?r:0}function ascendingComparator(n,e){return n.score-e.score||n.score===e.score&&e.boxIndex-n.boxIndex}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const GLOBAL_CUSTOM_OBJECT=new Map,GLOBAL_CUSTOM_NAMES=new Map;class Serializable{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class SerializationMap{constructor(){this.classNameMap={}}static getMap(){return SerializationMap.instance==null&&(SerializationMap.instance=new SerializationMap),SerializationMap.instance}static register(e){SerializationMap.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function registerClass(n,e,t){assert(n.className!=null,()=>"Class being registered does not have the static className property defined."),assert(typeof n.className=="string",()=>"className is required to be a string, but got type "+typeof n.className),assert(n.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),typeof e>"u"&&(e="Custom"),typeof t>"u"&&(t=n.className);const r=t,s=e+">"+r;return SerializationMap.register(n),GLOBAL_CUSTOM_OBJECT.set(s,n),GLOBAL_CUSTOM_NAMES.set(n,s),n}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Optimizer extends Serializable{minimize(e,t=!1,r){const{value:s,grads:a}=this.computeGradients(e,r);if(r!=null){const i=r.map(l=>({name:l.name,tensor:a[l.name]}));this.applyGradients(i)}else this.applyGradients(a);return dispose(a),t?s:(s.dispose(),null)}get iterations(){return this.iterations_==null&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return variableGrads(e,t)}dispose(){this.iterations_!=null&&dispose(this.iterations_)}async saveIterations(){return this.iterations_==null&&(this.iterations_=0),{name:"iter",tensor:scalar(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Optimizer,Symbol.hasInstance,{value:n=>n.minimize!=null&&n.computeGradients!=null&&n.applyGradients!=null});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AdadeltaOptimizer extends Optimizer{static get className(){return"Adadelta"}constructor(e,t,r=null){super(),this.learningRate=e,this.rho=t,this.epsilon=r,this.accumulatedGrads=[],this.accumulatedUpdates=[],r==null&&(this.epsilon=ENGINE.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const a=ENGINE.registeredVariables[r],i=!1;this.accumulatedGrads[s]==null&&(this.accumulatedGrads[s]={originalName:`${r}/accum_grad`,variable:tidy(()=>zerosLike$1(a).variable(i))}),this.accumulatedUpdates[s]==null&&(this.accumulatedUpdates[s]={originalName:`${r}/accum_var`,variable:tidy(()=>zerosLike$1(a).variable(i))});const l=Array.isArray(e)?e[s].tensor:e[r];if(l==null)return;const u=this.accumulatedGrads[s].variable,h=this.accumulatedUpdates[s].variable;tidy(()=>{const f=add(mul(u,this.rho),mul(square(l),1-this.rho)),c=mul(div(sqrt$1(add(h,this.epsilon)),sqrt$1(add(u,this.epsilon))),l),o=add(mul(h,this.rho),mul(square(c),1-this.rho));u.assign(f),h.assign(o);const d=add(mul(c,-this.learningRate),a);a.assign(d)})}),this.incrementIterations()}dispose(){this.accumulatedUpdates!=null&&(dispose(this.accumulatedGrads.map(e=>e.variable)),dispose(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=e.length/2,r=!1;this.accumulatedGrads=e.slice(0,t).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})),this.accumulatedUpdates=e.slice(t,t*2).map(s=>({originalName:s.name,variable:s.tensor.variable(r)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AdagradOptimizer extends Optimizer{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const a=ENGINE.registeredVariables[r];this.accumulatedGrads[s]==null&&(this.accumulatedGrads[s]={originalName:`${r}/accumulator`,variable:tidy(()=>fill$1(a.shape,this.initialAccumulatorValue).variable(!1))});const i=Array.isArray(e)?e[s].tensor:e[r];if(i==null)return;const l=this.accumulatedGrads[s].variable;tidy(()=>{const u=add(l,square(i));l.assign(u);const h=add(mul(div(i,sqrt$1(add(u,ENGINE.backend.epsilon()))),-this.learningRate),a);a.assign(h)})}),this.incrementIterations()}dispose(){this.accumulatedGrads!=null&&dispose(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=!1;this.accumulatedGrads=e.map(r=>({originalName:r.name,variable:r.tensor.variable(t)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AdamOptimizer extends Optimizer{static get className(){return"Adam"}constructor(e,t,r,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=r,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],tidy(()=>{this.accBeta1=scalar(t).variable(),this.accBeta2=scalar(r).variable()}),s==null&&(this.epsilon=ENGINE.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(r=>r.name):Object.keys(e);tidy(()=>{const r=sub$1(1,this.accBeta1),s=sub$1(1,this.accBeta2);t.forEach((a,i)=>{const l=ENGINE.registeredVariables[a],u=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${a}/m`,variable:tidy(()=>zerosLike$1(l).variable(u))}),this.accumulatedSecondMoment[i]==null&&(this.accumulatedSecondMoment[i]={originalName:`${a}/v`,variable:tidy(()=>zerosLike$1(l).variable(u))});const h=Array.isArray(e)?e[i].tensor:e[a];if(h==null)return;const f=this.accumulatedFirstMoment[i].variable,c=this.accumulatedSecondMoment[i].variable,o=add(mul(f,this.beta1),mul(h,1-this.beta1)),d=add(mul(c,this.beta2),mul(square(h),1-this.beta2)),m=div(o,r),g=div(d,s);f.assign(o),c.assign(d);const y=add(mul(div(m,add(sqrt$1(g),this.epsilon)),-this.learningRate),l);l.assign(y)}),this.accBeta1.assign(mul(this.accBeta1,this.beta1)),this.accBeta2.assign(mul(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),this.accumulatedFirstMoment!=null&&dispose(this.accumulatedFirstMoment.map(e=>e.variable)),this.accumulatedSecondMoment!=null&&dispose(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e),tidy(()=>{this.accBeta1.assign(pow$1(this.beta1,this.iterations_+1)),this.accBeta2.assign(pow$1(this.beta2,this.iterations_+1))});const t=e.length/2,r=!1;this.accumulatedFirstMoment=e.slice(0,t).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})),this.accumulatedSecondMoment=e.slice(t,t*2).map(s=>({originalName:s.name,variable:s.tensor.variable(r)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AdamaxOptimizer extends Optimizer{static get className(){return"Adamax"}constructor(e,t,r,s=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=r,this.epsilon=s,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],tidy(()=>{this.iteration=scalar(0).variable(),this.accBeta1=scalar(t).variable()}),s==null&&(this.epsilon=ENGINE.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(r=>r.name):Object.keys(e);tidy(()=>{const r=sub$1(1,this.accBeta1),s=div(-this.learningRate,add(mul(this.iteration,this.decay),1));t.forEach((a,i)=>{const l=ENGINE.registeredVariables[a],u=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${a}/m`,variable:zerosLike$1(l).variable(u)}),this.accumulatedWeightedInfNorm[i]==null&&(this.accumulatedWeightedInfNorm[i]={originalName:`${a}/v`,variable:zerosLike$1(l).variable(u)});const h=Array.isArray(e)?e[i].tensor:e[a];if(h==null)return;const f=this.accumulatedFirstMoment[i].variable,c=this.accumulatedWeightedInfNorm[i].variable,o=add(mul(f,this.beta1),mul(h,1-this.beta1)),d=mul(c,this.beta2),m=abs$1(h),g=maximum$1(d,m);f.assign(o),c.assign(g);const y=add(mul(div(s,r),div(o,add(g,this.epsilon))),l);l.assign(y)}),this.iteration.assign(add(this.iteration,1)),this.accBeta1.assign(mul(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),this.accumulatedFirstMoment!=null&&dispose(this.accumulatedFirstMoment.map(e=>e.variable)),this.accumulatedWeightedInfNorm!=null&&dispose(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SGDOptimizer extends Optimizer{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const a=Array.isArray(e)?e[s].tensor:e[r];if(a==null)return;const i=ENGINE.registeredVariables[r];tidy(()=>{const l=add(mul(this.c,a),i);i.assign(l)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,this.c!=null&&this.c.dispose(),this.c=keep(scalar(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(e=await this.extractIterations(e),e.length!==0)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MomentumOptimizer extends SGDOptimizer{static get className(){return"Momentum"}constructor(e,t,r=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=r,this.accumulations=[],this.m=scalar(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const a=ENGINE.registeredVariables[r];this.accumulations[s]==null&&(this.accumulations[s]={originalName:`${r}/momentum`,variable:tidy(()=>zerosLike$1(a).variable(!1))});const i=this.accumulations[s].variable,l=Array.isArray(e)?e[s].tensor:e[r];l!=null&&tidy(()=>{let u;const h=add(mul(this.m,i),l);this.useNesterov?u=add(mul(this.c,add(l,mul(h,this.m))),a):u=add(mul(this.c,h),a),i.assign(h),a.assign(u)})}),this.incrementIterations()}dispose(){this.m.dispose(),this.accumulations!=null&&dispose(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=!1;this.accumulations=e.map(r=>({originalName:r.name,variable:r.tensor.variable(t)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class RMSPropOptimizer extends Optimizer{static get className(){return"RMSProp"}constructor(e,t=.9,r=0,s=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=r,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,s==null&&(this.epsilon=ENGINE.backend.epsilon()),e==null)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const a=ENGINE.registeredVariables[r],i=!1;this.accumulatedMeanSquares[s]==null&&(this.accumulatedMeanSquares[s]={originalName:`${r}/rms`,variable:tidy(()=>zerosLike$1(a).variable(i))}),this.accumulatedMoments[s]==null&&(this.accumulatedMoments[s]={originalName:`${r}/momentum`,variable:tidy(()=>zerosLike$1(a).variable(i))}),this.accumulatedMeanGrads[s]==null&&this.centered&&(this.accumulatedMeanGrads[s]={originalName:`${r}/mg`,variable:tidy(()=>zerosLike$1(a).variable(i))});const l=Array.isArray(e)?e[s].tensor:e[r];if(l==null)return;const u=this.accumulatedMeanSquares[s].variable,h=this.accumulatedMoments[s].variable;tidy(()=>{const f=add(mul(u,this.decay),mul(square(l),1-this.decay));if(this.centered){const c=this.accumulatedMeanGrads[s].variable,o=add(mul(c,this.decay),mul(l,1-this.decay)),d=div(mul(l,this.learningRate),sqrt$1(sub$1(f,add(square(o),this.epsilon)))),m=add(mul(h,this.momentum),d);u.assign(f),c.assign(o),h.assign(m);const g=sub$1(a,m);a.assign(g)}else{const c=add(mul(u,this.decay),mul(square(l),1-this.decay)),o=add(mul(h,this.momentum),div(mul(l,this.learningRate),sqrt$1(add(c,this.epsilon))));u.assign(c),h.assign(o);const d=sub$1(a,o);a.assign(d)}})}),this.incrementIterations()}dispose(){this.accumulatedMeanSquares!=null&&dispose(this.accumulatedMeanSquares.map(e=>e.variable)),this.accumulatedMeanGrads!=null&&this.centered&&dispose(this.accumulatedMeanGrads.map(e=>e.variable)),this.accumulatedMoments!=null&&dispose(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,r=!1;this.accumulatedMeanSquares=e.slice(0,t).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})),this.accumulatedMoments=e.slice(t,t*2).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})),this.centered&&(this.accumulatedMeanGrads=e.slice(t*2,t*3).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const OPTIMIZERS=[AdadeltaOptimizer,AdagradOptimizer,AdamOptimizer,AdamaxOptimizer,MomentumOptimizer,RMSPropOptimizer,SGDOptimizer];function registerOptimizers(){for(const n of OPTIMIZERS)registerClass(n)}function prepareAndValidate(n,e){const t=n.shape.length,r=e.shape.length;if(t<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if(e.dtype!=="int32")throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[r-1]>t)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[r-1]} vs. ${t}`);if(sizeFromShape(n.shape)===0)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);const s=e.shape,a=s[s.length-1];let i=1;for(let c=0;c<s.length-1;++c)i*=s[c];const l=n.shape,u=s.slice();u.pop();let h=1;for(let c=a;c<t;++c)h*=l[c],u.push(l[c]);const f=[...computeStrides(n.shape).map(c=>c/h),1].slice(0,a);return[u,i,h,f]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NEW_AXIS=-2,SHRINK_AXIS=-1;function assertParamsValid(n,e,t){const r=n.shape.length;assert(r===e.length,()=>`Error in slice${r}D: Length of begin ${e} must match the rank of the array (${r}).`),assert(r===t.length,()=>`Error in slice${r}D: Length of size ${t} must match the rank of the array (${r}).`);for(let s=0;s<r;++s)assert(e[s]+t[s]<=n.shape[s],()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${e[s]+t[s]}) would overflow input.shape[${s}] (${n.shape[s]})`)}function computeOutShape$2(n,e,t){const r=[];for(let s=0;s<n.length;s++)r[s]=Math.ceil((e[s]-n[s])/t[s]);return r}function isSliceContinous(n,e,t){let r=t.length;for(let s=0;s<t.length;s++)if(t[s]>1){r=s;break}for(let s=r+1;s<t.length;s++)if(e[s]>0||t[s]!==n[s])return!1;return!0}function computeFlatOffset(n,e){let t=n.length>0?n[n.length-1]:1;for(let r=0;r<n.length-1;r++)t+=n[r]*e[r];return t}function parseSliceParams(n,e,t){let r;const s=n.shape.length;typeof e=="number"?r=[e,...new Array(s-1).fill(0)]:e.length<s?r=e.concat(new Array(s-e.length).fill(0)):r=e.slice(),r.forEach(i=>{assert(i!==-1,()=>"slice() does not support negative begin indexing.")});let a;return t==null?a=new Array(s).fill(-1):typeof t=="number"?a=[t,...new Array(s-1).fill(-1)]:t.length<s?a=t.concat(new Array(s-t.length).fill(-1)):a=t,a=a.map((i,l)=>i>=0?i:(assert(i===-1,()=>`Negative size values should be exactly -1 but got ${i} for the slice() size at index ${l}.`),n.shape[l]-r[l])),[r,a]}function sliceInfo(n,e,t,r,s,a,i,l,u){let h;if(r==null?(h=new Array(e.length),h.fill(1)):h=r,i!=null&&i&i-1)throw new Error("Multiple ellipses in slice is not allowed.");let f=!1;const c={dims:h.length,numAddAxisAfterEllipsis:0,begin:e.slice(),end:t.slice(),strides:h.slice(),beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:l,shrinkAxisMask:u};for(let x=0;x<c.dims;x++)f&&1<<x&l&&c.numAddAxisAfterEllipsis++,1<<x&i&&(f=!0);f||(c.ellipsisMask|=1<<c.dims,c.dims++);const o={dims:n.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};buildDenseSpec(c,o);let d=!0,m=!0,g=!0;const y=[],$=[];for(let x=0;x<n.length;++x){if(o.strides[x]===0)throw Error(`strides[${x}] must be non-zero`);const w=!!(o.shrinkAxisMask&1<<x),v=n[x];if(v===-1){y.push(w?1:-1);continue}const S=[o.beginMask&1<<x,o.endMask&1<<x],T=[o.strides[x]>0?0:-1,o.strides[x]>0?v:v-1];if(w&&o.strides[x]<=0)throw Error("only stride 1 allowed on non-range indexing.");g=g&&o.strides[x]===1;const C=!!(o.beginMask&1<<x&&o.endMask&1<<x);if(o.beginValid&&o.endValid){if(w){const F=o.begin[x]<0?v+o.begin[x]:o.begin[x];if(o.begin[x]=F,o.end[x]=o.begin[x]+1,F<0||F>=v)throw Error(`slice index ${o.begin[x]} of dimension ${x} out of bounds.`)}else o.begin[x]=canonical(o.begin[x],0,o.strides[x],v,S,T),o.end[x]=canonical(o.end[x],1,o.strides[x],v,S,T);const P=o.strides[x]===1&&o.begin[x]===0&&o.end[x]===v;d=d&&P,m=m&&(x===0&&o.strides[x]===1||P)}else d=d&&o.strides[x]===1&&C,m=m&&(x===0&&o.strides[x]===1||C);let I,N=!1;if(o.beginValid&&o.endValid?(I=o.end[x]-o.begin[x],N=!0):w?(I=1,N=!0):C&&v>=0&&(o.strides[x]<0?I=-v:I=v,N=!0),N){let P;I===0||I<0!=o.strides[x]<0?P=0:P=Math.trunc(I/o.strides[x])+(I%o.strides[x]!==0?1:0),y.push(P)}else y.push(-1)}for(let x=0;x<o.finalShapeGatherIndices.length;++x){const w=o.finalShapeGatherIndices[x];w>=0?$.push(y[w]):w===NEW_AXIS&&$.push(1)}return{finalShapeSparse:$.filter((x,w)=>o.finalShapeGatherIndices[w]!==NEW_AXIS),finalShape:$,isIdentity:d,sliceDim0:m,isSimpleSlice:g,begin:o.begin,end:o.end,strides:o.strides}}function buildDenseSpec(n,e){e.beginMask=0,e.endMask=0,e.shrinkAxisMask=0;let t=0;e.beginValid=n.begin!=null,e.endValid=n.end!=null,e.begin=new Array(e.dims),e.end=new Array(e.dims),e.strides=new Array(e.dims),e.finalShapeGatherIndices=[],e.finalShapeGatherIndicesSparse=[],e.inputShapeGatherIndicesSparse=new Array(e.dims);for(let r=0;r<n.dims;r++)if(1<<r&n.ellipsisMask){const s=Math.min(e.dims-(n.dims-r)+1+n.numAddAxisAfterEllipsis,e.dims);for(;t<s;t++)e.begin[t]=0,e.end[t]=0,e.strides[t]=1,e.beginMask|=1<<t,e.endMask|=1<<t,e.finalShapeGatherIndices.push(t),e.finalShapeGatherIndicesSparse.push(-1),e.inputShapeGatherIndicesSparse[t]=r}else if(1<<r&n.newAxisMask)e.finalShapeGatherIndices.push(NEW_AXIS),e.finalShapeGatherIndicesSparse.push(-1);else{if(t===e.begin.length)throw Error(`Index out of range using input dim ${t}; input has only ${e.dims} dims, ${e.begin.length}.`);n.begin!=null&&(e.begin[t]=n.begin[r]),n.end!=null&&(e.end[t]=n.end[r]),e.strides[t]=n.strides[r],n.beginMask&1<<r&&(e.beginMask|=1<<t),n.endMask&1<<r&&(e.endMask|=1<<t),n.shrinkAxisMask&1<<r?(e.finalShapeGatherIndices.push(SHRINK_AXIS),e.finalShapeGatherIndicesSparse.push(-1),e.shrinkAxisMask|=1<<t):(e.finalShapeGatherIndices.push(t),e.finalShapeGatherIndicesSparse.push(r)),e.inputShapeGatherIndicesSparse[t]=r,t++}}function canonical(n,e,t,r,s,a){if(s[e])return t>0?a[e]:a[e+1&1];{const i=n<0?r+n:n;return i<a[0]?a[0]:i>a[1]?a[1]:i}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function assertParamsConsistent(n,e){const t=n[0].length;n.forEach((s,a)=>{assert(s.length===t,()=>`Error in concat${t}D: rank of tensors[${a}] must be the same as the rank of the rest (${t})`)}),assert(e>=0&&e<t,()=>`Error in concat${t}D: axis must be between 0 and ${t-1}.`);const r=n[0];n.forEach((s,a)=>{for(let i=0;i<t;i++)assert(i===e||s[i]===r[i],()=>`Error in concat${t}D: Shape of tensors[${a}] (${s}) does not match the shape of the rest (${r}) along the non-concatenated axis ${a}.`)})}function computeOutShape$1(n,e){const t=n[0].slice();for(let r=1;r<n.length;r++)t[e]+=n[r][e];return t}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var RowPartitionType$1;(function(n){n[n.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",n[n.VALUE_ROWIDS=1]="VALUE_ROWIDS",n[n.ROW_LENGTHS=2]="ROW_LENGTHS",n[n.ROW_SPLITS=3]="ROW_SPLITS",n[n.ROW_LIMITS=4]="ROW_LIMITS",n[n.ROW_STARTS=5]="ROW_STARTS"})(RowPartitionType$1||(RowPartitionType$1={}));function combineRaggedTensorToTensorShapes(n,e,t){let r=new Array;if(t==null&&e==null)return r;if(e==null)for(;r.length<n+t.length;)r.push(-1);else r=e.slice();if(t==null)return r;if(n+t.length!==r.length)throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.rank = ${n+t.length}, but shape.rank = ${r.length}`);for(let s=1;s<t.length;++s){const a=t[s],i=r[r.length-t.length+s],l=r[i];if(a>=0)if(l>=0){if(l!==a)throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.shape[${s+n}] = ${a} but shape[${s+n}] = ${l}`)}else r[i]=a}return r}function getRowPartitionTypesHelper(n){const e={FIRST_DIM_SIZE:RowPartitionType$1.FIRST_DIM_SIZE,VALUE_ROWIDS:RowPartitionType$1.VALUE_ROWIDS,ROW_LENGTHS:RowPartitionType$1.ROW_LENGTHS,ROW_SPLITS:RowPartitionType$1.ROW_SPLITS,ROW_LIMITS:RowPartitionType$1.ROW_LIMITS,ROW_STARTS:RowPartitionType$1.ROW_STARTS},t=[];for(const r of n)if(r in e)t.push(e[r]);else break;return t}function getRaggedRank(n){return n.length===0?0:n[0]===RowPartitionType$1.FIRST_DIM_SIZE?n.length-1:n.length}function validateDefaultValueShape(n,e){if(n==null||e==null)return;const t=n.length,r=e.length;if(t>=r)throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${e}, are incompatible: defaultValue.rank = ${t} must be less than ragged tensor input flatValues.rank = ${r})`);for(let s=0;s<Math.min(t,r-1);++s){const a=n[s],i=e[s+1];if(a>=0&&i>=0&&a!==1&&a!==i)throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${e} are incompatible: defaultValue.shape[${s-n.length}] = ${a} but ragged tensor input.flatValues.shape[${s-n.length}] = ${i}`)}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getImageCenter(n,e,t){const r=t*(typeof n=="number"?n:n[0]),s=e*(typeof n=="number"?n:n[1]);return[r,s]}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getReshaped(n,e,t,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(n[0]/t),s=s.concat(n.slice(1));else{s=s.concat(n[0]);const a=e.length;for(let i=0;i<a;++i)s=s.concat([n[i+1]/e[i],e[i]]);s=s.concat(n.slice(a+1))}return s}function getPermuted(n,e,t=!0){const r=[];if(t){r.push(e);for(let s=e+1;s<n;++s)s<=2*e?(r.push(s),r.push(s-(e+1))):r.push(s)}else{const s=[],a=[];for(let i=1;i<n;++i)i>=e*2+1||i%2===1?a.push(i):s.push(i);r.push(...s),r.push(0),r.push(...a)}return r}function getReshapedPermuted(n,e,t,r=!0){const s=[];r?s.push(n[0]/t):s.push(n[0]*t);for(let a=1;a<n.length;++a)a<=e.length?r?s.push(e[a-1]*n[a]):s.push(n[a]/e[a-1]):s.push(n[a]);return s}function getSliceBeginCoords(n,e){const t=[0];for(let r=0;r<e;++r)t.push(n[r][0]);return t}function getSliceSize(n,e,t){const r=n.slice(0,1);for(let s=0;s<t;++s)r.push(n[s+1]-e[s][0]-e[s][1]);return r}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SELU_SCALEALPHA=1.7580993408473768,SELU_SCALE=1.0507009873554805;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ERF_P=.3275911,ERF_A1=.254829592,ERF_A2=-.284496736,ERF_A3=1.421413741,ERF_A4=-1.453152027,ERF_A5=1.061405429;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mergeRealAndImagArrays(n,e){if(n.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${e.length}.`);const t=new Float32Array(n.length*2);for(let r=0;r<t.length;r+=2)t[r]=n[r/2],t[r+1]=e[r/2];return t}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ARROW="->",ARROW_REGEX=/->/g,COMMA=",",ELLIPSIS="...";function decodeEinsumEquation(n,e){n=n.replace(/\s/g,"");const t=(n.length-n.replace(ARROW_REGEX,"").length)/ARROW.length;if(t<1)throw new Error("Equations without an arrow are not supported.");if(t>1)throw new Error(`Equation must contain exactly one arrow ("${ARROW}").`);const[r,s]=n.split(ARROW);assert(r.indexOf(ELLIPSIS)===-1,()=>`The ellipsis notation ("${ELLIPSIS}") is not supported yet.`);const a=r.split(COMMA),i=a.length;if(e!==i)throw new Error(`Expected ${i} input tensors, received ${e}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const l=[];for(let o=0;o<s.length;++o){const d=s[o];if(!a.some(m=>m.indexOf(d)!==-1))throw new Error(`Output subscripts contain the label ${d} not present in the input subscripts.`);l.indexOf(d)===-1&&l.push(d)}for(let o=0;o<r.length;++o){const d=r[o];l.indexOf(d)===-1&&d!==COMMA&&l.push(d)}const u=new Array(a.length);for(let o=0;o<i;++o){if(new Set(a[o].split("")).size!==a[o].length)throw new Error(`Found duplicate axes in input component ${a[o]}. Support for duplicate axes in input is not implemented yet.`);u[o]=[];for(let d=0;d<a[o].length;++d)u[o].push(l.indexOf(a[o][d]))}const h=l.length,f=s.length,c=[];for(let o=f;o<h;++o)c.push(o);return{allDims:l,summedDims:c,idDims:u}}function getEinsumPermutation(n,e){let t=new Array(n);t.fill(-1);for(let s=0;s<e.length;++s)t[e[s]]=s;const r=[];for(let s=0;s<n;++s)t[s]===-1&&r.push(s);return t=t.filter(s=>s!==-1),{permutationIndices:t,expandDims:r}}function checkEinsumDimSizes(n,e,t){const r=new Array(n);for(let s=0;s<t.length;++s){const a=t[s].shape;for(let i=0;i<e[s].length;++i)r[e[s][i]]===void 0?r[e[s][i]]=a[i]:assert(r[e[s][i]]===a[i],()=>`Expected dimension ${r[e[s][i]]} at axis ${i} of input shaped ${JSON.stringify(a)}, but got dimension ${a[i]}`)}}function getEinsumComputePath(n,e){const t=n,r=[];let s=0;n.length===0&&t.push(-1),s=n.length+1;for(let i=0;i<s;++i)r.push([]);const a=[];for(let i=0;i<t.length;++i){const l=t[i],u=findTermsWithDim(e,l);for(const h of u)a.indexOf(h)===-1&&(r[i].push(h),a.push(h))}return{path:t,steps:r}}function isIdentityPermutation(n){return n.every((e,t)=>e===t)}function findTermsWithDim(n,e){const t=[];for(let r=0;r<n.length;++r)(n[r].length===0||n[r].indexOf(e)!==-1||e===-1)&&t.push(r);return t}function prepareSplitSize(n,e,t=0){let r=[];if(typeof e=="number")assert(n.shape[t]%e===0,()=>"Number of splits must evenly divide the axis."),r=new Array(e).fill(n.shape[t]/e);else{const s=e.reduce((i,l)=>(l===-1&&(i+=1),i),0);assert(s<=1,()=>"There should be only one negative value in split array.");const a=e.indexOf(-1);if(a!==-1){const i=e.reduce((l,u)=>u>0?l+u:l);e[a]=n.shape[t]-i}assert(n.shape[t]===e.reduce((i,l)=>i+l),()=>"The sum of sizes must match the size of the axis dimension."),r=e}return r}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseFillEmptyRowsIndicesDenseShapeMismatch(n){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${n}`}function getSparseFillEmptyRowsNegativeIndexErrorMessage(n,e){return`indices(${n}, 0) is invalid: ${e} < 0`}function getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(n,e,t){return`indices(${n}, 0) is invalid: ${e} >= ${t}`}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(n,e){return`only one output dimension may be -1, not both ${n} and ${e}`}function getSparseReshapeNegativeOutputDimErrorMessage(n,e){return`size ${n} must be non-negative, not ${e}`}function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function getSparseReshapeInputOutputMultipleErrorMessage(n,e){const t=sizeFromShape(n),r=sizeFromShape(e);return`Input to reshape is a SparseTensor with ${t}
  dense values, but the requested shape requires a multiple of ${r}. inputShape=${n} outputShape= ${e}`}function getSparseReshapeInputOutputMismatchErrorMessage(n,e){const t=sizeFromShape(n),r=sizeFromShape(e);return`Input to reshape is a tensor with ${t} dense values, but the requested shape has ${r}. inputShape=${n} outputShape=${e}`}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseSegmentReductionNegativeSegmentIdsErrorMessage(){return"segment ids must be >= 0"}function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage(){return"segment ids are not increasing"}function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(n,e){return`Segment id ${n} out of range [0, ${e}), possibly because segmentIds input is not sorted.`}function getSparseSegmentReductionIndicesOutOfRangeErrorMessage(n,e,t){return`Bad: indices[${n}] == ${e} out of range [0, ${t})`}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function computeOutShape(n,e,t){const r=[],s=n.length;for(let a=0;a<s;a++)a!==e?r.push(n[a]):r.push(t);return r}function collectGatherOpShapeInfo(n,e,t,r){const s=e.shape.length,a=n.shape.length;if(r!==0&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (
    ${a}).`);if(t<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${t}).`);for(let c=0;c<r;++c)if(n.shape[c]!==e.shape[c])throw new Error(`x.shape[${c}]: ${n.shape[c]} should be equal to indices.shape[${c}]: ${e.shape[c]}.`);const i=n.shape[t],l=[];let u=1,h=1,f=1;for(let c=0;c<r;++c)l.push(n.shape[c]),u*=n.shape[c];for(let c=r;c<t;c++)l.push(n.shape[c]),h*=n.shape[c];for(let c=r;c<s;c++)l.push(e.shape[c]);for(let c=t+1;c<a;c++)l.push(n.shape[c]),f*=n.shape[c];return{batchSize:u,sliceSize:f,outerSize:h,dimSize:i,outputShape:l}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fromUint8ToStringArray(n){try{return n.map(e=>decodeString(e))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function fromStringArrayToUint8(n){return n.map(e=>encodeString(e))}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */registerOptimizers();/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV=env();ENV.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",()=>15),ENV.registerFlag("WEBGPU_CPU_FORWARD",()=>!0),ENV.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",()=>-1),ENV.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",()=>!0),ENV.registerFlag("WEBGPU_USE_LOW_POWER_GPU",()=>!1),ENV.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e3),ENV.registerFlag("WEBGPU_USE_PROFILE_TOOL",()=>!1),ENV.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",()=>!0),ENV.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG",()=>!1),ENV.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL",()=>-1),ENV.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER",()=>!1),ENV.registerFlag("WEBGPU_PRINT_SHADER",()=>""),ENV.registerFlag("WEBGPU_ENGINE_COMPILE_ONLY",()=>!1);/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AdapterInfo{constructor(e){e&&(this.vendor=e.vendor,this.architecture=e.architecture,this.intelGPUGeneration=this.getIntelGPUGeneration())}getIntelGPUGeneration(){if(this.isIntel()){if(this.architecture.startsWith("gen"))return Number(this.architecture.match(/\d+/));if(this.architecture.startsWith("xe"))return 12}return 0}isIntel(){return this.vendor==="intel"}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class BufferManager{constructor(e){this.device=e,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireBuffer(e,t,r=!1,s=!0){let a;const i=getBufferKey(e,t);return s?(this.freeBuffers.has(i)||this.freeBuffers.set(i,[]),this.freeBuffers.get(i).length>0?(a=this.freeBuffers.get(i).pop(),this.numFreeBuffers--):(a=this.device.createBuffer({size:e,usage:t,mappedAtCreation:r}),this.numBytesAllocated+=e)):(a=this.device.createBuffer({size:e,usage:t,mappedAtCreation:r}),this.numBytesAllocated+=e),this.usedBuffers.has(i)||this.usedBuffers.set(i,[]),this.usedBuffers.get(i).push(a),this.numUsedBuffers++,this.numBytesUsed+=e,a}releaseBuffer(e,t=!0){if(this.freeBuffers.size===0)return;const r=e.size,s=e.usage,a=getBufferKey(r,s),i=this.usedBuffers.get(a),l=i.indexOf(e);if(l<0)throw new Error("Cannot find the buffer in buffer manager");i[l]=i[i.length-1],i.pop(),this.numUsedBuffers--,this.numBytesUsed-=r,t?(this.freeBuffers.get(a).push(e),this.numFreeBuffers++):(e.destroy(),this.numBytesAllocated-=r)}getNumUsedBuffers(){return this.numUsedBuffers}getNumFreeBuffers(){return this.numFreeBuffers}dispose(){this.freeBuffers.forEach((e,t)=>{e.forEach(r=>{r.destroy()})}),this.usedBuffers.forEach((e,t)=>{e.forEach(r=>{r.destroy()})}),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0}}function getBufferKey(n,e){return`${n}_${e}`}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TextureManager{constructor(e){this.device=e,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireTexture(e,t,r,s){const a=getBytesPerElement(r),i=e*t*a,l=getTextureKey(e,t,r,s);if(this.freeTextures.has(l)||this.freeTextures.set(l,[]),this.usedTextures.has(l)||this.usedTextures.set(l,[]),this.numBytesUsed+=i,this.numUsedTextures++,this.freeTextures.get(l).length>0){this.numFreeTextures--;const h=this.freeTextures.get(l).shift();return this.usedTextures.get(l).push(h),h}this.numBytesAllocated+=i;const u=this.device.createTexture({size:[e,t],format:r,usage:s});return this.usedTextures.get(l).push(u),u}releaseTexture(e){if(this.freeTextures.size===0)return;const t=e.width,r=e.height,s=e.format,a=e.usage,i=getTextureKey(t,r,s,a);this.freeTextures.has(i)||this.freeTextures.set(i,[]),this.freeTextures.get(i).push(e),this.numFreeTextures++,this.numUsedTextures--;const l=this.usedTextures.get(i),u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1);const h=getBytesPerElement(s),f=t*r*h;this.numBytesUsed-=f}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){this.freeTextures.forEach((e,t)=>{e.forEach(r=>{r.destroy()})}),this.usedTextures.forEach((e,t)=>{e.forEach(r=>{r.destroy()})}),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0}}function getTextureKey(n,e,t,r){return`${n}_${e}_${t}_${r}`}function getBytesPerElement(n){if(n==="rgba8unorm")return 16;throw new Error(`${n} is not supported!`)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function symbolicallyComputeStrides(n,e){if(Math.max(...n)>5)throw new Error("Cannot symbolically compute strides for rank > 6 tensor.");const t=n.length,r="xyzwuv",s=n.map(i=>`${e}.${r[i]}`),a=new Array(t-1);a[t-2]=s[t-1];for(let i=t-3;i>=0;--i)a[i]=`(${a[i+1]} * ${s[i+1]})`;return a}const atomicAddSnippet=(n,e,t)=>t==="int32"?`atomicAdd(${n}, bitcast<i32>(${e}));`:`
          {
            var oldValue = 0;
            loop {
              let newValueF32 = bitcast<f32>(oldValue) + (${e});
              let newValue = bitcast<i32>(newValueF32);
              let res = atomicCompareExchangeWeak(${n}, oldValue, newValue);
              if res.exchanged {
                break;
              }
              oldValue = res.old_value;
            }
          }`;/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var PixelsOpType;(function(n){n[n.FROM_PIXELS=0]="FROM_PIXELS",n[n.DRAW=1]="DRAW"})(PixelsOpType||(PixelsOpType={}));const compileProgram=(n,e,t,r,s)=>{const a={dtype:r.dtype,shape:r.shape},i=makeShader(t,a,e),l=n.createShaderModule({code:i,label:e.constructor.name});let u=env().get("WEBGPU_PRINT_SHADER");if(u!==""){u=u.toLowerCase();const h=u.split(",");(u==="all"||h.some(f=>e.shaderKey.toLowerCase().includes(f)))&&(console.group(e.shaderKey),console.debug(i),console.groupEnd())}return s?n.createComputePipelineAsync({compute:{module:l,entryPoint:"_start"},label:e.constructor.name,layout:"auto"}):n.createComputePipeline({compute:{module:l,entryPoint:"_start"},label:e.constructor.name,layout:"auto"})},typeSnippet=(n,e="f32")=>{switch(n){case 1:return`${e}`;case 2:return`vec2<${e}>`;case 3:return`vec3<${e}>`;case 4:return`vec4<${e}>`;default:throw new Error(`${n}-component ${e} is not supported.`)}};function getCoordsDataType(n){if(n<=1)return"i32";if(n===2)return"vec2<i32>";if(n===3)return"vec3<i32>";if(n===4)return"vec4<i32>";if(n===5)return"vec5";if(n===6)return"vec6";throw Error(`GPU for rank ${n} is not yet supported`)}function getCoordsXYZ(n){if(n===0)return"x";if(n===1)return"y";if(n===2)return"z";if(n===3)return"w";if(n===4)return"u";if(n===5)return"v";throw Error(`Index ${n} is not yet supported`)}function getMainHeaderString(...n){let e;switch(n.length){case 0:e=`
        fn main()
      `;break;case 1:e=`
        fn main(${n[0]} : i32)
      `;break;default:throw Error("Unreachable")}return e}function getStartHeaderString(n,e){let t;return t=`
     ${getWorkgroupSizeString(e)}
      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                @builtin(global_invocation_id) GlobalId : vec3<u32>,
                @builtin(local_invocation_index) LocalIndex: u32,
                @builtin(workgroup_id) WorkgroupId : vec3<u32>,
                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {
        localId = LocalId;
        localIndex = LocalIndex;
        globalId = GlobalId;
        numWorkgroups = NumWorkgroups;
        workgroupId = WorkgroupId;
        ${n?"main(getGlobalIndex());":"main();"};
      }
    `,t}function getWorkgroupSizeString(n){return`
  @compute @workgroup_size(${n.workgroupSize[0]}, ${n.workgroupSize[1]}, ${n.workgroupSize[2]})
`}function makeShader(n,e,t){const r=[],s=t.workgroupSize[0]*t.workgroupSize[1]*t.workgroupSize[2];if(t.outputComponent=t.outputComponent?t.outputComponent:1,r.push(`

      var<private> localId: vec3<u32>;
      var<private> localIndex: u32;
      var<private> globalId: vec3<u32>;
      var<private> numWorkgroups: vec3<u32>;
      var<private> workgroupId: vec3<u32>;

      // Only used when the y/z dimension of workgroup size is 1.
      fn getGlobalIndex() -> i32 {
        ${isFlatDispatch(t)?"  return i32(globalId.x);":`  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +
                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${s}u +
                localIndex);
        `}
      }
    `),t.pixelsOpType!=null){const m=t.pixelsOpType===PixelsOpType.FROM_PIXELS?`@group(0) @binding(0) var<storage, read_write> result: array<${dataTypeToGPUType(e.dtype,t.outputComponent)}>;`:`@group(0) @binding(1) var<storage, read> inBuf : array<${dataTypeToGPUType(n[0].dtype,t.outputComponent)}>;`,g=e.shape.length===3?"vec2<i32>":"i32";r.push(`
        struct Uniform {
          outShapeStrides : ${g},
          size            : i32,
          numChannels     : i32,
          alpha           : f32,
        };

        ${m}
        @group(0) @binding(2) var<uniform> uniforms: Uniform;
      `);const y=isFlatDispatchLayout(t);return[commonSnippet,r.join(`
`),getCoordsFromIndexSnippet(e.shape),t.getUserCode(),getStartHeaderString(y,t)].join(`
`)}let a,i,l="struct Uniforms { NAN : f32, INFINITY : f32, ";t.variableNames.forEach((m,g)=>{const y=getCoordsDataType(n[g].shape.length);l+=`${m.charAt(0).toLowerCase()+m.slice(1)}Shape : ${y}, `,a=n[g].shape.length-1,i=getCoordsDataType(a),l+=`${m.charAt(0).toLowerCase()+m.slice(1)}ShapeStrides: ${i}, `});const u=getCoordsDataType(e.shape.length);l+=`outShape : ${u}, `,a=e.shape.length-1,i=getCoordsDataType(a),l+=`
         outShapeStrides: ${i}, `,t.size&&(l+="size : i32, "),t.uniforms&&(l+=t.uniforms),l+="};",l=insertAlignment(l),r.push(l),t.atomic?r.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;
    `):r.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<${dataTypeToGPUType(e.dtype,t.outputComponent)}>;
    `),t.variableNames.forEach((m,g)=>{r.push(`
      @group(0) @binding(${1+g}) var<storage, read> ${m}: array<${t.variableComponents?dataTypeToGPUType(n[g].dtype,t.variableComponents[g]):dataTypeToGPUType(n[g].dtype,t.outputComponent)}>;
        `)}),l!==""&&r.push(`
      @group(0) @binding(${1+t.variableNames.length}) var<uniform> uniforms: Uniforms;
      `);const h=getOutputCoordsSnippet(e.shape,t.dispatchLayout),f=[commonSnippet,r.join(`
`)+isInfSnippet,getCoordsFromIndexSnippet(e.shape),h,getOutputIndexFromCoordsSnippet(e.shape.length)];t.atomic||f.push(setOutputSnippet(e.shape,e.dtype,t.outputComponent)),t.variableNames.forEach((m,g)=>{f.push(`${getCoordsFromIndexSnippet(n[g].shape,m)}`)});const c=n.map((m,g)=>getInputSnippet(m,e.shape,t.variableComponents?t.variableComponents[g]:t.outputComponent,t.dispatchLayout.x.length===e.shape.length)).join(`
`);f.push(c),f.push(t.getUserCode());const o=isFlatDispatchLayout(t);return f.push(getStartHeaderString(o,t)),f.join(`
`)}function makeShaderKey(n,e,t){let r=n.shaderKey;if(n.pixelsOpType!=null)return r;const s=[],a=[];e.forEach(f=>{s.push(f.shape),a.push(f.dtype)}),s.push(t.shape),a.push(t.dtype);const i=e.map(f=>getBroadcastDims(f.shape,t.shape)),l=e.map(f=>arraysEqual(f.shape,t.shape)).join("_"),u=i.map(f=>f.join("_")).join(";"),h=isFlatDispatch(n)?"flatDispatch":"";return r+="_"+(n.workgroupSize?n.workgroupSize.join(","):"")+s.map(f=>f.length).join(",")+a.join(",")+n.variableNames.join(",")+u+l+h,r}const commonSnippet=`
  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};
  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};

  // Checks whether coordinates lie within the bounds of the shape.
  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {
    return all(coord >= vec2<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {
    return all(coord >= vec3<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {
    return all(coord >= vec4<i32>(0)) && all(coord < shape);
  }

  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {
    return coord;
  }
  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {
    return dot(coords, vec2<i32>(shape.y, 1));
  }
  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {
    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));
  }
  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
    return dot(coords, vec4<i32>(
        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
  }
  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {
    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;
  }
  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {
    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;
  }

  // NaN defination in IEEE 754-1985 is :
  //   - sign = either 0 or 1.
  //   - biased exponent = all 1 bits.
  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).
  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers
  fn isnan(val: f32) -> bool {
    let floatToUint: u32 = bitcast<u32>(val);
    return (floatToUint & 0x7fffffffu) > 0x7f800000u;
  }
  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {
    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);
    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);
  }
`,isInfSnippet=`
  fn isinf(val: f32) -> bool {
    return abs(val) == uniforms.INFINITY;
  }
`;function getCoordsFromIndexSnippet(n,e=""){const t=n.length,r=e!==""?`get${e.charAt(0).toUpperCase()+e.slice(1)}CoordsFromIndex`:"getCoordsFromIndex",s=e!==""?`${e.charAt(0).toLowerCase()+e.slice(1)}ShapeStrides`:"outShapeStrides";if(t<=1)return`fn ${r}(index : i32) -> i32 { return index; }`;const a=computeStrides(n),i=getCoordsDataType(t),l=[];for(let h=0;h<t;h++)l.push(`d${h}`);if(a.length===1)return`    fn ${r}(index : i32) -> vec2<i32> {
      let d0 = index / uniforms.${s}; let d1 = index - d0 * uniforms.${s};
      return vec2<i32>(d0, d1);
    }`;let u;return u="var index2 = index;"+a.map((h,f)=>{const c=`let ${l[f]} = index2 / uniforms.${s}.${getCoordsXYZ(f)}`,o=f===a.length-1?`let ${l[f+1]} = index2 - ${l[f]} * uniforms.${s}.${getCoordsXYZ(f)}`:`index2 = index2 - ${l[f]} * uniforms.${s}.${getCoordsXYZ(f)}`;return`${c}; ${o};`}).join(""),`
    fn ${r}(index : i32) -> ${i} {
      ${u}
      return ${i}(${l.join(",")});
    }
  `}function getInputAtCoordsSnippet(n,e){const t=n.name,r=n.shape.length,s=getCoordsDataType(r),a="get"+t.charAt(0).toUpperCase()+t.slice(1),i=["d0","d1","d2","d3","d4","d5"].slice(0,r),l=i.map(f=>`${f} : i32`).join(", ");if(r<1)return`
      fn ${a}() -> ${typeSnippet(e)} {
        return ${typeSnippet(e)}(${t}[0]);
      }
    `;const u=`uniforms.${t.charAt(0).toLowerCase()+t.slice(1)}Shape`;let h=`${r}D`;return r===0&&(h="1D"),`
    fn ${a}(${l}) -> ${typeSnippet(e)} {
      return ${typeSnippet(e)}(${t}[getIndexFromCoords${h}(${s}(${i.join(",")}),
        ${u})${e===1?"":` / ${e}`}]);
    }
   `}function getInputByOutputSnippet(n,e,t,r){const s=n.name,a=s.charAt(0).toUpperCase()+s.slice(1),i="get"+a+"ByOutput",l=n.shape.length,u=e.length,h=getCoordsDataType(u);if(arraysEqual(n.shape,e)&&r)return`
    fn ${i}Index(globalIndex : i32) -> ${typeSnippet(t)} {
      return ${typeSnippet(t)}(${s}[globalIndex]);
    }

    fn ${i}Coords(coords : ${h}) -> ${typeSnippet(t)} {
      return ${typeSnippet(t)}(${s}[${u>1?"getOutputIndexFromCoords(coords)":"coords"}${t===1?"":` / ${t}`}]);
    }
    `;const f=getBroadcastDims(n.shape,e),c=u-l;let o="";if(l===0)return`
    fn ${i}Index(globalIndex : i32) -> ${typeSnippet(t)}{
      return get${a}();
    }

    fn ${i}Coords(coords : ${h}) -> ${typeSnippet(t)}{
      return get${a}();
    }
  `;u<2&&f.length>=1?o="coords = 0;":o=f.map(y=>`coords.${getCoordsXYZ(y+c)} = 0;`).join(`
`);let d="";if(u<2&&l>0)d="coords";else if(u>1){const y=getCoordsDataType(l),$=n.shape.map((b,x)=>`coords.${getCoordsXYZ(x+c)}`).join(", ");d=`${y}(${$})`}else d="coords";const m=`uniforms.${s.charAt(0).toLowerCase()+s.slice(1)}Shape`,g=`${l}D`;return`
  fn ${i}Index(globalIndex : i32) -> ${typeSnippet(t)} {
    var coords = getCoordsFromIndex(globalIndex);
    ${o}
    return ${typeSnippet(t)}(${s}[getIndexFromCoords${g}(${d}, ${m})${t===1?"":` / ${t}`}]);
  }

  fn ${i}Coords(coordsIn : ${h}) -> ${typeSnippet(t)} {
    var coords = coordsIn;
    ${o}
    return ${typeSnippet(t)}(${s}[getIndexFromCoords${g}(${d}, ${m})${t===1?"":` / ${t}`}]);
  }
`}function getInputSnippet(n,e,t,r){let s=getInputAtCoordsSnippet(n,t);return n.shape.length<=e.length&&(s+=getInputByOutputSnippet(n,e,t,r)),s}function getOutputCoordsSnippet(n,e){const{x:t,y:r=[],z:s=[]}=e,a=n.length,i=t.length+r.length+s.length;if(i!==a)return"";if(t.length===a)return`fn getOutputCoords() -> ${getCoordsDataType(a)}{
    let globalIndex = getGlobalIndex();
    return getCoordsFromIndex(globalIndex);
  }
  `;let l="";const u=[t,r,s];for(let o=0;o<u.length;o++){const d=u[o];if(d.length!==0)if(d.length===1)l+=`let d${d[0]} = i32(globalId[${o}]);`;else{const m=symbolicallyComputeStrides(d,"uniforms.outShape");l+=`var index${o} = i32(globalId[${o}]);`;for(let g=0;g<m.length;g++)l+=`let d${d[g]} = index${o} / ${m[g]};`,g===m.length-1?l+=`let d${d[g+1]} = index${o} - d${d[g]} * ${m[g]};`:l+=`index${o} = index${o} - d${d[g]} * ${m[g]};`}}const h=[];for(let o=0;o<i;o++)h.push(`d${o}`);const f=getCoordsDataType(i);let c=`fn getOutputCoords() -> ${f} {
  ${l}
`;return h.length===0?c+=`return ${f}(0); }`:c+=`return ${f}(${h.join(",")}); }`,c}function getOutputIndexFromCoordsSnippet(n){let e="";switch(n){case 0:case 1:e+=`
        fn getOutputIndexFromCoords(coords : i32) -> i32 {
          return coords;
        }
        `;break;case 2:e+=`
        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {
          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));
        }
        `;break;case 3:e+=`
        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {
          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));
        }
        `;break;case 4:e+=`
        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
          return dot(coords, vec4<i32>(
            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));
        }
        `;break;case 5:e+=`
        fn getOutputIndexFromCoords(coords : vec5) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u;
        }
        `;break;case 6:e+=`
        fn getOutputIndexFromCoords(coords : vec6) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u * uniforms.outShapeStrides.u +
              coords.v;
        }
        `;break;default:assert(!1,()=>`Unsupported ${n}D shape`);break}return e}function isFlatDispatch(n){return n.dispatch[1]===1&&n.dispatch[2]===1}function dataTypeToGPUType(n,e=1){if(n==="float32")return typeSnippet(e,"f32");if(n==="int32"||n==="bool")return typeSnippet(e,"i32");throw new Error(`type ${n} is not supported.`)}function setOutputSnippet(n,e,t){const r=n.length,s=dataTypeToGPUType(e,t);let a=`fn setOutputAtIndex(flatIndex : i32, value : ${typeSnippet(t)}) {
      result[flatIndex] = ${s}(value);
    }

    fn setOutputAtIndexI32(flatIndex : i32, value : ${typeSnippet(t,"i32")}) {
      result[flatIndex] = ${s}(value);
    }
    `;if(r>=2){const i=["d0","d1","d2","d3","d4","d5"].slice(0,r),l=getCoordsDataType(r);a+=`
      fn setOutputAtCoords(${i.map(u=>`${u} : i32`).join(", ")}, value : ${typeSnippet(t)}) {
        let flatIndex = getOutputIndexFromCoords(${l}(${i.join(", ")}));
        setOutputAtIndex(flatIndex${t===1?"":` / ${t}`}, value);
      }
      fn setOutputAtCoordsI32(${i.map(u=>`${u} : i32`).join(", ")}, value : ${typeSnippet(t,"i32")}) {
        let flatIndex = getOutputIndexFromCoords(${l}(${i.join(", ")}));
        setOutputAtIndexI32(flatIndex${t===1?"":` / ${t}`}, value);
      }
    `}return a}function insertAlignment(n){const e=/(\w+)\s*:\s*vec(5|6)/g;n=n.replace(e,r=>"@align(16) "+r);const t=/vec(5|6)\s*,\s*(\w+)/g;return n=n.replace(t,(r,s,a)=>`vec${s}, @align(16) ${a}`),n}function isFlatDispatchLayout(n){return!(n.dispatchLayout.hasOwnProperty("y")&&n.dispatchLayout.y.length!==0||n.dispatchLayout.hasOwnProperty("z")&&n.dispatchLayout.z.length!==0)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const arrayProduct=n=>{let e=1;for(let t=0;t<n.length;t++)e*=n[t];return e};function computeDispatch(n,e,t=[1,1,1],r=[1,1,1]){const[s,a,i]=[Math.ceil(arrayProduct(n.x.map(l=>e[l]))/(t[0]*r[0])),n.y?Math.ceil(arrayProduct(n.y.map(l=>e[l]))/(t[1]*r[1])):1,n.z?Math.ceil(arrayProduct(n.z.map(l=>e[l]))/(t[2]*r[2])):1];return[s,a,i]}function computeWorkgroupInfoForMatMul(n,e,t,r=!1){const s=[8,8,1],a=[4,4,1];return r||(n<=8&&(a[1]=1),e<=16&&t<=16&&(s[0]=4)),{workgroupSize:s,elementsPerThread:a}}function computeWorkgroupSizeForConv2d(n,e,t=!1){if(t)return[8,8,1];const r=arrayProduct(n.x.map(a=>e[a])),s=arrayProduct(n.y.map(a=>e[a]));return r<=4?[4,16,1]:s<=4?[16,4,1]:[16,16,1]}function computeWorkPerThreadForConv2d(n,e,t=!1){if(t)return[4,4,1];const r=arrayProduct(n.x.map(a=>e[a])),s=arrayProduct(n.y.map(a=>e[a]));return r<=4?[1,2,1]:s<=4?[2,1,1]:[2,2,1]}function flatDispatchLayout(n){return{x:n.map((e,t)=>t)}}function GPUBytesPerElement(n){if(n==="float32"||n==="int32"||n==="bool"||n==="string")return 4;if(n==="complex64")return 8;throw new Error(`Unknown dtype ${n}`)}function isWebGPUSupported(){return(typeof window<"u"||typeof WorkerGlobalScope<"u")&&!!navigator.gpu}function assertNotComplex(n,e){Array.isArray(n)||(n=[n]),n.forEach(t=>{t!=null&&assert(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the WebGPU backend.`)})}var MatMulProgramType;(function(n){n[n.MatMulReduceProgram=0]="MatMulReduceProgram",n[n.MatMulSplitKProgram=1]="MatMulSplitKProgram",n[n.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",n[n.MatMulPackedProgram=3]="MatMulPackedProgram",n[n.MatMulMax=4]="MatMulMax"})(MatMulProgramType||(MatMulProgramType={}));/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CPU_HANDOFF_SIZE_THRESHOLD=env().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD"),reshapeDispatch=(n,e)=>{const t=n.limits.maxComputeWorkgroupsPerDimension,r=e.dispatchLayout,s=e.dispatch;if(s.every(i=>i<=t))return s;assert(s[0]>t&&r.y===void 0&&r.z===void 0,()=>"Dispatch size exceeds WebGPU limits in Y or Z dimension.");let a=Math.ceil(Math.sqrt(s[0]));return a>t?(a=Math.ceil(Math.cbrt(s[0])),assert(a<=t,()=>"Total dispatch size exceeds WebGPU maximum."),[a,a,a]):[a,a,1]};class WebGPUBackend extends KernelBackend{nextDataId(){return WebGPUBackend.nextDataId++}constructor(e,t){if(super(),this.commandQueueOwnedIds=new WeakSet,this.dispatchCountInPass=0,this.disposed=!1,this.downloadWaitMs=0,this.tensorDataPendingDisposal=[],this.queryResolveBuffer=null,this.querySet=null,this.querySetCount=2,this.stagingPendingDisposal=[],this.uniformPendingDisposal=[],this.uploadWaitMs=0,this.hasReadSyncWarned=!1,this.hasTimestampQueryWarned=!1,!isWebGPUSupported())throw new Error("WebGPU is not supported on this device");this.pipelineCache={},this.device=e,this.queue=e.queue,this.commandEncoder=null,this.computePassEncoder=null,this.adapterInfo=new AdapterInfo(t),this.supportTimestampQuery=this.device.features.has("timestamp-query"),this.thresholdToIncreaseWorkgroups=this.adapterInfo.intelGPUGeneration>=12?16:8,this.bufferManager=new BufferManager(this.device),this.textureManager=new TextureManager(this.device),this.tensorMap=new DataStorage(this,engine()),env().getBool("WEBGPU_USE_PROFILE_TOOL")&&(this.dummyCanvas=document.createElement("canvas"),this.dummyCanvas.width=1,this.dummyCanvas.height=1,this.dummyContext=this.dummyCanvas.getContext("webgpu"),this.dummyContext.configure({device:e,format:"bgra8unorm"}),document.body.appendChild(this.dummyCanvas))}floatPrecision(){return 32}disposeData(e,t=!1){if(!this.tensorMap.has(e))return!0;const r=this.tensorMap.get(e);return t?r.refCount=0:r.refCount--,r.refCount>0?!1:(r.complexTensorInfos!=null&&(this.disposeData(r.complexTensorInfos.real.dataId),this.disposeData(r.complexTensorInfos.imag.dataId)),this.commandQueueOwnedIds.has(e)?(this.tensorDataPendingDisposal.push(e),!0):(this.releaseResource(e),this.tensorMap.delete(e),!0))}memory(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}}releaseResource(e){const t=this.tensorMap.get(e);if(!(!t||!t.resource)){if(t.external){t.resource=null;return}t.resource instanceof GPUBuffer?this.bufferManager.releaseBuffer(t.resource):t.resource instanceof GPUTexture&&this.textureManager.releaseTexture(t.resource),t.resource=null}}refCount(e){return this.tensorMap.has(e)?this.tensorMap.get(e).refCount:0}incRef(e){const t=this.tensorMap.get(e);t.refCount++}decRef(e){if(this.tensorMap.has(e)){const t=this.tensorMap.get(e);t.refCount--}}write(e,t,r){if(r==="complex64"&&e!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.tensorMap.set(s,{dtype:r,shape:t,values:e,refCount:1}),s}move(e,t,r,s,a){if(s==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(e,{dtype:s,shape:r,values:t,refCount:a})}submitQueue(){this.queue.submit([this.commandEncoder.finish()]),this.commandEncoder=null,this.dispatchCountInPass=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach(e=>{this.releaseResource(e),this.tensorMap.delete(e)}),this.uniformPendingDisposal.forEach(e=>this.bufferManager.releaseBuffer(e)),this.stagingPendingDisposal.forEach(e=>this.bufferManager.releaseBuffer(e,!1)),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]}ensureCommandEncoderReady(){this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder())}endComputePassEncoder(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}async checkCompileCompletionAsync(){let e;try{e=await Promise.all(Object.values(this.pipelineCache))}catch(t){throw new Error(t.message)}Object.keys(this.pipelineCache).map((t,r)=>{this.pipelineCache[t]=e[r]})}async getBufferData(e){if(env().getBool("WEBGPU_ENGINE_COMPILE_ONLY"))return console.warn("The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false"),null;const t=e.size,r=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,r,0,t),this.submitQueue(),await r.mapAsync(GPUMapMode.READ);const s=r.getMappedRange().slice(0);return r.unmap(),r!=null&&this.bufferManager.releaseBuffer(r),env().getBool("WEBGPU_USE_PROFILE_TOOL")&&(assert(this.dummyContext!==void 0,()=>"Fail to get context for profiling tool"),this.dummyContext.getCurrentTexture()),s}convertAndCacheOnCPU(e,t){const r=this.tensorMap.get(e);return r.values=t,r.values}readSync(e){const t=this.tensorMap.get(e),{values:r,complexTensorInfos:s}=t;if(r!=null||t.dtype==="string")return r;if(t.dtype==="complex64"){const g=this.readSync(s.real.dataId),y=this.readSync(s.imag.dataId),$=convertBackendValuesAndArrayBuffer(mergeRealAndImagArrays(g,y).buffer,"float32");return this.convertAndCacheOnCPU(e,$),$}this.hasReadSyncWarned||(this.hasReadSyncWarned=!0,console.warn("The performance of synchronously reading data from GPU to CPU is poor on the webgpu backend, please use asynchronous APIs instead."));const a=["opaque","premultiplied"],i=t.resource,l=i.size;assert(l%4===0,()=>"Because there is 4 bytes for one pixel, buffer size must be multiple of 4.");const u=l/4,h=new ArrayBuffer(l),f=256,c=256,o=a.map(g=>new OffscreenCanvas(f,c)),d=new OffscreenCanvas(f,c);this.endComputePassEncoder(),o.map((g,y)=>{const $=g.getContext("webgpu");return $.configure({device:this.device,format:"bgra8unorm",usage:GPUTextureUsage.COPY_DST,alphaMode:a[y]}),$.getCurrentTexture()}).map((g,y)=>{const $=f*4,b=(C,I,N)=>{this.ensureCommandEncoderReady(),this.commandEncoder.copyBufferToTexture({buffer:i,bytesPerRow:$,offset:N},{texture:g},{width:C,height:I}),this.submitQueue();const P=d.getContext("2d",{willReadFrequently:!0});P.clearRect(0,0,C,I),P.drawImage(o[y],0,0);const F=P.getImageData(0,0,C,I).data,_=a[y],D=new Uint8ClampedArray(h,N,C*I*4);for(let E=0;E<D.length;E+=4)if(_==="premultiplied")D[E+3]=F[E+3];else{const k=F[E];D[E]=F[E+2],D[E+1]=F[E+1],D[E+2]=k}},x=Math.floor(u/(f*c));let w=f,v=c,S=0;for(let C=0;C<x;C++)b(w,v,S),S+=f*c*4;const T=u%(f*c);v=Math.floor(T/f),v>0&&(b(w,v,S),S+=v*(f*4)),w=T%f,w>0&&b(w,1,S)});const m=convertBackendValuesAndArrayBuffer(h,t.dtype);return this.convertAndCacheOnCPU(e,m),m}async read(e){if(!this.tensorMap.has(e))throw new Error(`Tensor ${e} was not registered!`);const t=this.tensorMap.get(e),{values:r}=t;if(r!=null)return r;let s;if(t.dtype==="complex64"){const a=await Promise.all([this.read(t.complexTensorInfos.real.dataId),this.read(t.complexTensorInfos.imag.dataId)]),i=a[0],l=a[1];s=mergeRealAndImagArrays(i,l)}else{const a=await this.getBufferData(t.resource);s=convertBackendValuesAndArrayBuffer(a,t.dtype)}return this.convertAndCacheOnCPU(e,s),s}copyBuffer(e){const t=e.size,r=e.usage,s=this.bufferManager.acquireBuffer(t,r);return this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,s,0,t),this.submitQueue(),s}createTensorFromGPUData(e,t,r){let s=e.buffer;if(r==="complex64")throw new Error("Cannot write to a complex64 dtype. ");const a={id:this.nextDataId()};this.tensorMap.set(a,{dtype:r,shape:t,values:null,refCount:1,external:e.zeroCopy});const i=this.tensorMap.get(a),l=GPUBytesPerElement(i.dtype)*sizeFromShape(i.shape);if(e.buffer.size<l)throw new Error(`GPUBuffer size(${e.buffer.size}) is smaller than tensor size(${l})!`);if((e.buffer.usage&(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))!==(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))throw new Error("GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!");return e.zeroCopy!==!0&&(s=this.copyBuffer(s)),i.resource=s,engine().makeTensorFromDataId(a,t,r,this)}readToGPU(e){const t=this.tensorMap.get(e),{values:r,dtype:s,shape:a,resource:i}=t;if(s==="complex64")throw new Error("Does not support reading buffer for complex64 dtype.");if(i==null)throw r!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const l=i,u=l.size,h=l.usage,f=this.bufferManager.acquireBuffer(u,h);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(i,0,f,0,u),this.submitQueue();const c=this.makeTensorInfo(a,s),o=engine().makeTensorFromTensorInfo(c),d=this.tensorMap.get(c.dataId);return d.resource=f,{tensorRef:o,buffer:f}}bufferSync(e){const t=this.readSync(e.dataId);if(e.dtype==="string")try{const r=t.map(s=>decodeString(s));return buffer(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return buffer(e.shape,e.dtype,t)}async time(e){!this.supportTimestampQuery&&!this.hasTimestampQueryWarned&&(console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --disable-dawn-features=disallow_unsafe_apis to try it again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled."),this.hasTimestampQueryWarned=!0);const t=this.activeTimers,r=[];let s=!1;this.programTimersStack==null?(this.programTimersStack=r,s=!0):this.activeTimers.push(r),this.activeTimers=r,e();const a=flatten(this.activeTimers.map(h=>h.query)).filter(h=>h!=null),i=flatten(this.activeTimers.map(h=>h.name)).filter(h=>h!=null);this.activeTimers=t,s&&(this.programTimersStack=null);const l={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},u=await Promise.all(a);return l.kernelMs=sum$1(u),l.getExtraProfileInfo=()=>u.map((h,f)=>({name:i[f],ms:h})).map(h=>`${h.name}: ${h.ms}`).join(", "),this.uploadWaitMs=0,this.downloadWaitMs=0,l}makeTensorInfo(e,t,r){return t==="string"&&r!=null&&r.length>0&&isString(r[0])&&(r=r.map(a=>encodeString(a))),{dataId:this.write(r,e,t),shape:e,dtype:t}}tensorToBinding(e){if(!e)return null;const r=this.tensorMap.get(e.dataId).resource;return r instanceof GPUBuffer?{buffer:r}:r instanceof GPUTexture?r.createView():r}uploadToGPU(e){const t=this.tensorMap.get(e);if(t.resource!=null)return;const r=GPUBytesPerElement(t.dtype)*sizeFromShape(t.shape);let s;const a=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST;if(t.values){if(s=this.bufferManager.acquireBuffer(r,a,!0),s.mapState==="unmapped"){const i=this.bufferManager.acquireBuffer(r,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,!0,!1),l=i.getMappedRange();t.dtype==="int32"||t.dtype==="bool"?new Int32Array(l).set(t.values):new Float32Array(l).set(t.values),i.unmap(),this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(i,0,s,0,r),this.stagingPendingDisposal.push(i)}else{const i=s.getMappedRange();t.dtype==="int32"||t.dtype==="bool"?new Int32Array(i).set(t.values):new Float32Array(i).set(t.values),s.unmap()}t.values=null}else s=this.bufferManager.acquireBuffer(r,a);t.resource=s}makeUniforms(e){let t=0,r=0;const s=[];let a=1;e.forEach(u=>{u.data.length===0&&(u.data=[1]);let h;switch(u.data.length){case 1:h=4;break;case 2:h=8;break;case 3:h=16;break;case 4:h=16;break;case 5:h=16;break;case 6:h=16;break;default:assert(!1,()=>`Unsupported ${u.data.length}D shape`)}(r===5||r===6)&&(h=16),h>a&&(a=h),t=Math.ceil(t/h)*h,r=u.data.length,s.push(t),t+=u.data.length*4}),t=Math.ceil(t/a)*a;const i=new ArrayBuffer(t);e.forEach((u,h)=>{const f=s[h];u.type==="int32"?new Int32Array(i,f,u.data.length).set(u.data):u.type==="uint32"?new Uint32Array(i,f,u.data.length).set(u.data):new Float32Array(i,f,u.data.length).set(u.data)});const l=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);return this.queue.writeBuffer(l,0,i,0,t),this.uniformPendingDisposal.push(l),{offset:0,size:t,buffer:l}}runWebGPUProgram(e,t,r,s,a){if(a||(a=this.makeTensorInfo(e.outputShape,r)),sizeFromShape(a.shape)===0)return this.tensorMap.get(a.dataId).values=getTypedArrayFromDType(a.dtype,0),a;this.uploadToGPU(a.dataId),e.dispatch=reshapeDispatch(this.device,e);const i=t.map((u,h)=>{if(u.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return this.uploadToGPU(u.dataId),{dtype:this.tensorMap.get(u.dataId).dtype,shape:u.shape,name:e.variableNames[h]}});e.shaderKey=makeShaderKey(e,i,a);const l=env().getBool("WEBGPU_ENGINE_COMPILE_ONLY");return e.shaderKey in this.pipelineCache||(this.pipelineCache[e.shaderKey]=compileProgram(this.device,e,i,a,l)),e.pipeline=this.pipelineCache[e.shaderKey],l||this.recordAndSubmit(e,a,t,s),a}recordAndSubmit(e,t,r,s){if(e.pipeline instanceof Promise)throw new Error("Please call checkCompileCompletionAsync to ensure parallel compilation is done!");let a=[],i=[];const l="int32";if(e.pixelsOpType==null){a.push({type:"float32",data:[NaN]},{type:"float32",data:[1/0]}),i=r.concat(t).map(d=>d.shape);const o="int32";i.map(d=>{a.push({type:o,data:d});const m=computeStrides(d);a.push({type:o,data:m})})}else{const o=computeStrides(t.shape);a.push({type:l,data:o})}if(e.size){const o=sizeFromShape(e.outputShape);a.push({type:l,data:[e.outputComponent?o/e.outputComponent:o]})}s&&(a=[...a,...s]);const u=[this.tensorToBinding(t),...r.map(o=>this.tensorToBinding(o)),this.makeUniforms(a)];r.forEach(o=>{this.commandQueueOwnedIds.add(o.dataId)}),this.commandQueueOwnedIds.add(t.dataId);const h=this.device.createBindGroup({layout:e.pipeline.getBindGroupLayout(0),entries:u.map((o,d)=>({binding:d,resource:o}))}),f=this.activeTimers!=null;this.ensureCommandEncoderReady();const c={};f&&this.supportTimestampQuery?(this.endComputePassEncoder(),this.querySet==null&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),c.timestampWrites=[{querySet:this.querySet,queryIndex:0,location:"beginning"},{querySet:this.querySet,queryIndex:1,location:"end"}],this.computePassEncoder=this.commandEncoder.beginComputePass(c)):this.computePassEncoder||(this.computePassEncoder=this.commandEncoder.beginComputePass(c)),this.computePassEncoder.setPipeline(e.pipeline),this.computePassEncoder.setBindGroup(0,h),this.computePassEncoder.dispatchWorkgroups(e.dispatch[0],e.dispatch[1],e.dispatch[2]),this.dispatchCountInPass++,(f||env().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchCountInPass||e.pixelsOpType===PixelsOpType.DRAW)&&(this.endComputePassEncoder(),f?this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime()}):this.submitQueue())}async getQueryTime(){if(!this.supportTimestampQuery)return 0;this.queryResolveBuffer==null&&(this.queryResolveBuffer=this.bufferManager.acquireBuffer(this.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST|GPUBufferUsage.QUERY_RESOLVE)),this.commandEncoder.resolveQuerySet(this.querySet,0,this.querySetCount,this.queryResolveBuffer,0);const e=this.bufferManager.acquireBuffer(this.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,this.querySetCount*8),this.submitQueue(),await e.mapAsync(GPUMapMode.READ);const t=new BigUint64Array(e.getMappedRange()),r=Number(t[1]-t[0])/1e6;return e.unmap(),this.bufferManager.releaseBuffer(e),r}shouldExecuteOnCPU(e,t=CPU_HANDOFF_SIZE_THRESHOLD){return env().getBool("WEBGPU_CPU_FORWARD")&&e.every(r=>this.tensorMap.get(r.dataId).resource==null&&sizeFromShape(r.shape)<t)}numDataIds(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length}dispose(){this.disposed||(this.querySet!=null&&this.querySet.destroy(),this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)}}WebGPUBackend.nextDataId=0;/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */isWebGPUSupported()&&registerBackend("webgpu",async()=>{const n={powerPreference:env().get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},e=await navigator.gpu.requestAdapter(n),t={},r=[];e.features.has("timestamp-query")&&r.push("timestamp-query"),e.features.has("bgra8unorm-storage")&&r.push(["bgra8unorm-storage"]),t.requiredFeatures=r;const s=e.limits;t.requiredLimits={maxComputeWorkgroupStorageSize:s.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:s.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:s.maxStorageBufferBindingSize,maxBufferSize:s.maxBufferSize,maxComputeWorkgroupSizeX:s.maxComputeWorkgroupSizeX,maxComputeInvocationsPerWorkgroup:s.maxComputeInvocationsPerWorkgroup};const a=await e.requestDevice(t),i=await e.requestAdapterInfo();return new WebGPUBackend(a,i)},3);/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var BinaryOpType;(function(n){n[n.ADD=0]="ADD",n[n.ATAN2=1]="ATAN2",n[n.COMPLEX_MULTIPLY_IMAG=2]="COMPLEX_MULTIPLY_IMAG",n[n.COMPLEX_MULTIPLY_REAL=3]="COMPLEX_MULTIPLY_REAL",n[n.DIV=4]="DIV",n[n.ELU_DER=5]="ELU_DER",n[n.EQUAL=6]="EQUAL",n[n.FLOOR_DIV=7]="FLOOR_DIV",n[n.GREATER=8]="GREATER",n[n.GREATER_EQUAL=9]="GREATER_EQUAL",n[n.LESS=10]="LESS",n[n.LESS_EQUAL=11]="LESS_EQUAL",n[n.LOGICAL_AND=12]="LOGICAL_AND",n[n.LOGICAL_OR=13]="LOGICAL_OR",n[n.MAX=14]="MAX",n[n.MIN=15]="MIN",n[n.MOD=16]="MOD",n[n.MUL=17]="MUL",n[n.NOT_EQUAL=18]="NOT_EQUAL",n[n.POW=19]="POW",n[n.PRELU=20]="PRELU",n[n.SQUARED_DIFFERENCE=21]="SQUARED_DIFFERENCE",n[n.SUB=22]="SUB"})(BinaryOpType||(BinaryOpType={}));const ADD="let resultTemp = a + b;",ATAN2="let resultTemp = atan2(a, b);",COMPLEX_MULTIPLY_REAL="let resultTemp = areal * breal - aimag * bimag;",COMPLEX_MULTIPLY_IMAG="let resultTemp = areal * bimag + aimag * breal;",DIV="let resultTemp = a / b;",ELU_DER="let resultTemp = select(a * (b + 1.0), a, b >= b - b);",EQUAL=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a == b);
`,FLOOR_DIV=`
  let remainder =
      select(a % b, round(a % b), (round(a) == a) & (round(b) == b));
  let quotient = (a - remainder) / b;
  let resultTemp =
      round(select(quotient, quotient - 1, sign(remainder) == -sign(b)));
`,GREATER=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a > b);
`,GREATER_EQUAL=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a >= b);
`,LESS=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a < b);
`,LESS_EQUAL=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a <= b);
`,LOGICAL_AND="return f32(a >= 1.0 && b >= 1.0);",LOGICAL_AND_VEC4=`return (vec4<f32>(a >= vec4<f32>(1.0)) *
  vec4<f32>(b >= vec4<f32>(1.0)));`,LOGICAL_OR="return f32(a >= 1.0 || b >= 1.0);",LOGICAL_OR_VEC4=`return min(vec4<f32>(a >= vec4<f32>(1.0)) +
  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));`,MAX="let resultTemp = max(a, b);",MIN="let resultTemp = min(a, b);",MOD=`
  let isNaN = b == 0.;
  var resultTemp = a % b;
  resultTemp = select((resultTemp + b) % b, resultTemp,
      (a < 0. && b < 0.) || (a >= 0. && b > 0.));
`,MOD_VEC4=`
  let isNaN = !vec4<bool>(b);
  var resultTemp = vec4<f32>(a % b);
  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {
    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];
  }
  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {
    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];
  }
  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {
    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];
  }
  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {
    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];
  }
`,MUL="let resultTemp = a * b;",NOT_EQUAL=`
  var resultTemp = f32(a != b);
  let valueForNaN = 1.0;
`,NOT_EQUAL_VEC4=`
  var resultTemp = vec4<f32>(a != b);
  let valueForNaN = 1.0;
`,POW=`
  let isNaN = a < 0.0 && floor(b) < b;
  if (b == 0.0) {
    return 1.0;
  }
  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),
      round(abs(b) % 2.0) != 1.0);
`,POW_VEC4=`
  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);
  let isModRound1 = vec4<f32>(isModRound1Bool);
  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);
  var resultTemp = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  let isExpZero = b == vec4<f32>(0.0);
  if (isExpZero.r) {
    resultTemp.r = 1.0;
  }
  if (isExpZero.g) {
    resultTemp.g = 1.0;
  }
  if (isExpZero.b) {
    resultTemp.b = 1.0;
  }
  if (isExpZero.a) {
    resultTemp.a = 1.0;
  }
  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);
`,PRELU="if (a < 0.0) { return b * a; }  return a;",PRELU_VEC4=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`,SQUARED_DIFFERENCE="let resultTemp = (a - b) * (a - b);",SUB="let resultTemp = a - b;";function getBinaryOpString(n,e){let t;do{switch(n){case BinaryOpType.ATAN2:t=ATAN2;break;case BinaryOpType.MAX:t=MAX;break;case BinaryOpType.MIN:t=MIN;break;case BinaryOpType.MOD:t=e?MOD_VEC4:MOD;break;case BinaryOpType.NOT_EQUAL:t=e?NOT_EQUAL_VEC4:NOT_EQUAL;break;case BinaryOpType.POW:t=e?POW_VEC4:POW;break;default:continue}let r,s,a;return e?(r="isnanVec4",s="vec4<f32>",a="vec4<bool>"):(r="isnan",s="f32",a="bool"),`
      let aIsNaN = ${r}(a);
      let aPostLegalization = select(a, ${s}(42), aIsNaN);
      let bIsNaN = ${r}(b);
      let bPostLegalization = select(b, ${s}(42), bIsNaN);
      let isNaN = false;
      let valueForNaN = uniforms.NAN;
      {
        let a = aPostLegalization;
        let b = bPostLegalization;
        ${t}
        return select(
            resultTemp, ${s}(valueForNaN),
            ${a}(isNaN) | aIsNaN | bIsNaN);
      }
    `}while(!1);switch(n){case BinaryOpType.ADD:t=ADD;break;case BinaryOpType.COMPLEX_MULTIPLY_IMAG:t=COMPLEX_MULTIPLY_IMAG;break;case BinaryOpType.COMPLEX_MULTIPLY_REAL:t=COMPLEX_MULTIPLY_REAL;break;case BinaryOpType.DIV:t=DIV;break;case BinaryOpType.ELU_DER:t=ELU_DER;break;case BinaryOpType.EQUAL:t=EQUAL;break;case BinaryOpType.FLOOR_DIV:t=FLOOR_DIV;break;case BinaryOpType.GREATER:t=GREATER;break;case BinaryOpType.GREATER_EQUAL:t=GREATER_EQUAL;break;case BinaryOpType.LESS:t=LESS;break;case BinaryOpType.LESS_EQUAL:t=LESS_EQUAL;break;case BinaryOpType.LOGICAL_AND:return e?LOGICAL_AND_VEC4:LOGICAL_AND;case BinaryOpType.LOGICAL_OR:return e?LOGICAL_OR_VEC4:LOGICAL_OR;case BinaryOpType.MUL:t=MUL;break;case BinaryOpType.PRELU:return e?PRELU_VEC4:PRELU;case BinaryOpType.SQUARED_DIFFERENCE:t=SQUARED_DIFFERENCE;break;case BinaryOpType.SUB:t=SUB;break}return`
    ${t}
    return resultTemp;
  `}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var UnaryOpType;(function(n){n[n.ABS=0]="ABS",n[n.ACOS=1]="ACOS",n[n.ACOSH=2]="ACOSH",n[n.ASIN=3]="ASIN",n[n.ASINH=4]="ASINH",n[n.ATAN=5]="ATAN",n[n.ATANH=6]="ATANH",n[n.CEIL=7]="CEIL",n[n.COS=8]="COS",n[n.COSH=9]="COSH",n[n.ELU=10]="ELU",n[n.ERF=11]="ERF",n[n.EXP=12]="EXP",n[n.EXPM1=13]="EXPM1",n[n.FLOOR=14]="FLOOR",n[n.IS_FINITE=15]="IS_FINITE",n[n.IS_INF=16]="IS_INF",n[n.IS_NAN=17]="IS_NAN",n[n.LINEAR=18]="LINEAR",n[n.LOG=19]="LOG",n[n.LOG1P=20]="LOG1P",n[n.LOGICAL_NOT=21]="LOGICAL_NOT",n[n.NEG=22]="NEG",n[n.RELU=23]="RELU",n[n.RELU6=24]="RELU6",n[n.LEAKYRELU=25]="LEAKYRELU",n[n.RECIPROCAL=26]="RECIPROCAL",n[n.ROUND=27]="ROUND",n[n.RSQRT=28]="RSQRT",n[n.SELU=29]="SELU",n[n.SIGMOID=30]="SIGMOID",n[n.SIGN=31]="SIGN",n[n.SIN=32]="SIN",n[n.SINH=33]="SINH",n[n.SOFTPLUS=34]="SOFTPLUS",n[n.SQRT=35]="SQRT",n[n.SQUARE=36]="SQUARE",n[n.STEP=37]="STEP",n[n.TAN=38]="TAN",n[n.TANH=39]="TANH",n[n.TO_INT=40]="TO_INT"})(UnaryOpType||(UnaryOpType={}));const ABS="return abs(a);",ACOS=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return acos(a);
`,ACOSH=`
  if (a < 1.) {
    return uniforms.NAN;
  }
  return acosh(a);
`,ASIN=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return asin(a);
`,ASINH="return asinh(a);",ATAN=`
  if (isnan(a)) {
    return uniforms.NAN;
  }
  return atan(a);
`,ATANH=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  if (a == 1.) {
    return uniforms.INFINITY;
  }
  if (a == -1.) {
    return -uniforms.INFINITY;
  }
  return atanh(a);
`,CEIL="return ceil(a);",COS="return cos(a);",COSH=`
  let e2x = exp(-a);
  return (e2x + 1.0 / e2x) / 2.0;
`,EXPM1="return exp(a) - 1.0;",ELU="if (a >= 0.0) { return a; }  return (exp(a) - 1.0);",ELU_VEC4=`
  var resFloat = exp(a) - vec4<f32>(1.0);
  if (a.r >= 0.0) {
    resFloat.r = a.r;
  }
  if (a.g >= 0.0) {
    resFloat.g = a.g;
  }
  if (a.b >= 0.0) {
    resFloat.b = a.b;
  }
  if (a.a >= 0.0) {
    resFloat.a = a.a;
  }
  return resFloat;
`,ERF=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  let p = ${ERF_P};
  let a1 = ${ERF_A1};
  let a2 = ${ERF_A2};
  let a3 = ${ERF_A3};
  let a4 = ${ERF_A4};
  let a5 = ${ERF_A5};

  let sign = sign(a);
  let absA = abs(a);
  let t = 1.0 / (1.0 + p * absA);
  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));
`,EXP="return exp(a);",FLOOR="return floor(a);",IS_FINITE="return f32(!isnan(a) && !isinf(a));",IS_INF="return f32(isinf(a));",IS_NAN="return f32(isnan(a));",LINEAR="return a;",LOG=`if (a < 0.0) { return uniforms.NAN; }
  return log(a);`,LOG1P=`
  if (isnan(a)) { return a; }
  return log(1.0 + a);
`,LOGICAL_NOT="return f32(!(a >= 1.0));",NEG="return -a;",LEAKYRELU="if (a < 0.0) { return uniforms.alpha * a; } return a;",LEAKYRELU_VEC4=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`,RECIPROCAL="return 1.0 / a;",RELU="return select(a, 0.0, a < 0.0);",RELU6="return clamp(a, 0.0, 6.0);",RELU6_VEC4="return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));",RELU_VEC4=`
  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));
`,ROUND="return round(a);",RSQRT="return inverseSqrt(a);",SELU=`
  if (a >= 0.0) {
    return ${SELU_SCALE} * a;
  } else {
    return ${SELU_SCALEALPHA} * (exp(a) - 1.0);
  }
`,SIGMOID="return 1.0 / (1.0 + exp(-1.0 * a));",SIGN="return sign(a);",SIN="return sin(a);",SINH=`
  let e2x = exp(a);
  return (e2x - 1.0 / e2x) / 2.0;
`,SOFTPLUS=`
  let epsilon = 1.1920928955078125e-7;
  let threshold = log(epsilon) + 2.0;

  let too_large = a > -threshold;
  let too_small = a < threshold;
  let exp_a = exp(a);

  if (too_large) {
    return a;
  } else if (too_small) {
    return exp_a;
  } else {
    return log(exp_a + 1.0);
  }
`,SQRT="return sqrt(a);",SQUARE="return a * a;",STEP=`
  if (isnan(a)) {
    return a;
  }

  return select(uniforms.stepAlpha, 1.0, a > 0.0);
`,TAN="return tan(a);",TANH=`
  let e2x = exp(-2.0 * abs(a));
  return sign(a) * (1.0 - e2x) / (1.0 + e2x);
`,TO_INT="return f32(i32((a)));";function getUnaryOpString(n,e){switch(n){case UnaryOpType.ABS:return ABS;case UnaryOpType.ACOS:return ACOS;case UnaryOpType.ACOSH:return ACOSH;case UnaryOpType.ASIN:return ASIN;case UnaryOpType.ASINH:return ASINH;case UnaryOpType.ATAN:return ATAN;case UnaryOpType.ATANH:return ATANH;case UnaryOpType.COS:return COS;case UnaryOpType.COSH:return COSH;case UnaryOpType.CEIL:return CEIL;case UnaryOpType.ELU:return e?ELU_VEC4:ELU;case UnaryOpType.ERF:return ERF;case UnaryOpType.EXP:return EXP;case UnaryOpType.EXPM1:return EXPM1;case UnaryOpType.FLOOR:return FLOOR;case UnaryOpType.IS_FINITE:return IS_FINITE;case UnaryOpType.IS_INF:return IS_INF;case UnaryOpType.IS_NAN:return IS_NAN;case UnaryOpType.LINEAR:return LINEAR;case UnaryOpType.LOG:return LOG;case UnaryOpType.LOG1P:return LOG1P;case UnaryOpType.LOGICAL_NOT:return LOGICAL_NOT;case UnaryOpType.NEG:return NEG;case UnaryOpType.LEAKYRELU:return e?LEAKYRELU_VEC4:LEAKYRELU;case UnaryOpType.RECIPROCAL:return RECIPROCAL;case UnaryOpType.RELU:return e?RELU_VEC4:RELU;case UnaryOpType.RELU6:return e?RELU6_VEC4:RELU6;case UnaryOpType.ROUND:return ROUND;case UnaryOpType.RSQRT:return RSQRT;case UnaryOpType.SELU:return SELU;case UnaryOpType.SIGMOID:return SIGMOID;case UnaryOpType.SIGN:return SIGN;case UnaryOpType.SIN:return SIN;case UnaryOpType.SINH:return SINH;case UnaryOpType.SOFTPLUS:return SOFTPLUS;case UnaryOpType.SQRT:return SQRT;case UnaryOpType.SQUARE:return SQUARE;case UnaryOpType.STEP:return STEP;case UnaryOpType.TAN:return TAN;case UnaryOpType.TANH:return TANH;case UnaryOpType.TO_INT:return TO_INT;default:throw new Error(`BinaryType ${n} is not implemented!`)}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function activationFnSnippet(n,e=!1,t=!1,r=3){if(n===null)return"";let s="";if(n==="linear")s=getUnaryOpString(UnaryOpType.LINEAR);else if(n==="relu")s=getUnaryOpString(UnaryOpType.RELU,t);else if(n==="elu")s=getUnaryOpString(UnaryOpType.ELU,t);else if(n==="relu6")s=getUnaryOpString(UnaryOpType.RELU6,t);else if(n==="prelu")s=getBinaryOpString(BinaryOpType.PRELU,t);else if(n==="sigmoid")s=getUnaryOpString(UnaryOpType.SIGMOID,t);else if(n==="leakyrelu")s=getUnaryOpString(UnaryOpType.LEAKYRELU,t);else throw new Error(`Activation ${n} has not been implemented for the WebGPU backend.`);const i=typeSnippet(t?4:1);let l="";return e?l=`
      fn activation(a : ${i}, coords : vec${r}<i32>) -> ${i} {
        let b = getPreluActivationWeightsByOutputCoords(coords);
        ${s}
      }`:l=`
      fn activation(a : ${i}, coords : vec${r}<i32>) -> ${i} {
        ${s}
      }`,l}function biasActivationSnippet(n,e){return`
      ${n?"value = value + getBiasByOutputCoords(coords);":""}
      ${e?"value = activation(value, coords);":""}
      `}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function matMulReadFnSource(n,e,t=!1,r=!1,s=!1,a=1){assert(n&&a===1||!n,()=>`transposeA ${n} is not compatible with component size ${a}`);const i=`
      ${n?"value = getA(batch, col, row);":"value = getA(batch, row, col);"}

    `,l=e?"value = getB(batch, col, row);":"value = getB(batch, row, col);";return`
  fn mm_readA(batch: i32, row: i32, col: i32) -> ${typeSnippet(a)} {
    var value = ${typeSnippet(a)}(0.0);
    ${t&&s?i:`
    ${n?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}
    {
      ${i}
    }
    `}
    return value;
  }

  fn mm_readB(batch: i32, row: i32, col: i32) -> ${typeSnippet(a)} {
    var value = ${typeSnippet(a)}(0.0);
    ${l}
    return value;
  }
  `}function matMulReadWriteFnSource(n,e,t,r,s=!1,a=!1,i=!1,l=1){return`
  ${matMulReadFnSource(t,r,s,a,i,l)}
  fn mm_write(batch: i32, row: i32, col: i32, valueIn: ${typeSnippet(l)}) {
    ${s&&a?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}
    {
      var value = valueIn;
      let coords = vec3<i32>(batch, row, col);
      ${biasActivationSnippet(n,e)}
      setOutputAtCoords(coords[0], coords[1], coords[2], value);
    }
  }
  `}const writeDataToSubAVec4Snippet=(n,e)=>n?`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          kStart + inputRow,
          globalRowStart + inputCol * ${e});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          globalRow + innerRow,
          kStart + inputCol * ${e});
        `,calculateResultSnippet=(n,e,t,r)=>{if(n)return`
      for (var k = 0; k < ${r}; k++) {
        let BCached0 = mm_Bsub[k][tileCol];
        let ACached0 = mm_Asub[k][localRow];
        for (var i = 0; i < ${t}; i++) {
          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);
        }
      }`;{let s="",a="";for(let i=0;i<e;i++)s+=`let BCached${i} = mm_Bsub[k * ${e} + ${i}][tileCol];`,a+=`acc[i] = fma(BCached${i}, vec4<f32>(ACached[${i}]), acc[i]);`;return`
      for (var k = 0; k < ${r/e}; k++) {
        ${s}
        for (var i = 0; i < ${t}; i++) {
          let ACached = mm_Asub[tileRow + i][k];
          ${a}
        }
      }`}};function makeMatMulPackedVec4Source(n,e,t=!1,r=32,s=!1,a=32,i=!1){const l=e[1]*n[1],u=e[0]*n[0],h=t?l:r,f=t?r:l,c=h/e[0],o=r/e[1],d=n[1],m=n[0];return assert((t&&c===4&&n[1]===4||!t&&(c===3||c===4))&&h%e[0]===0&&r%e[1]===0&&n[0]===4,()=>`If transposeA ${t} is true, innerElementSize ${c} and workPerThread[1] ${n[1]} must be 4.
          Otherwise, innerElementSize ${c} must be 3 or 4.
      tileAWidth ${h} must be divisible by workgroupSize[0]${e[0]}. tileInner ${r} must be divisible by workgroupSize[1] ${e[1]}. colPerThread ${n[0]} must be 4.`),`
  var<workgroup> mm_Asub : array<array<vec${c}<f32>, ${h/c}>, ${f}>;
  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${u/n[0]}>, ${r}>;

  ${getMainHeaderString()} {
    let localRow = i32(localId.y);
    let tileRow = localRow * ${d};
    let tileCol = i32(localId.x);

    let globalRow = i32(globalId.y) * ${d};
    let globalCol = i32(globalId.x) * ${m};
    let batch = ${s?"0":"i32(globalId.z)"};
    let batchA = ${s||!i?"batch":"batch % uniforms.aShape[0]"};
    let batchB = ${s||!i?"batch":"batch % uniforms.bShape[0]"};
    let globalRowStart = i32(workgroupId.y) * ${l};

    let numTiles = ${s?`${Math.ceil(a/r)}`:`(uniforms.dimInner - 1) / ${r} + 1`};
    var kStart = ${s?`i32(globalId.z) * ${a}`:"0"};

    var acc: array<vec4<f32>, ${d}>;

    // Loop over shared dimension.
    let tileRowB = localRow * ${o};
    for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < ${d}; innerRow++) {
            let inputRow = tileRow + innerRow;
            let inputCol = tileCol;
            ${writeDataToSubAVec4Snippet(t,c)}
        }

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < ${o}; innerRow++) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);
        }
        kStart = kStart + ${r};
        workgroupBarrier();

        // Compute acc values for a single thread.
        ${calculateResultSnippet(t,c,d,r)}
        workgroupBarrier();
    }

    for (var innerRow = 0; innerRow < ${d}; innerRow++) {
        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
    }
  }`}const writeDataToSubASnippet=n=>n?`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          kStart + inputRow,
          globalRowStart + inputCol);
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          globalRowStart + inputRow,
          kStart + inputCol);
        `,readDataFromSubASnippet=n=>n?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];";function makeMatMulPackedSource(n,e,t=!1,r=32,s=!1,a=32,i=!1,l=!1){const u=n[1]*e[1],h=n[0]*e[0],f=t?u:r,c=t?r:u;assert(c%e[1]===0&&f%e[0]===0&&r%e[1]===0,()=>`tileAHight ${c} must be divisible by workgroupSize[1]${e[1]}, tileAWidth ${f} must be divisible by workgroupSize[0]${e[0]}, tileInner ${r} must be divisible by workgroupSize[1]${e[1]}`);const o=c/e[1],d=f/e[0],m=r/e[1],g=n[1],y=n[0],$=i?`
      let localRow = i32(localId.y);
      let localCol = i32(localId.x);
      let globalRowStart = i32(workgroupId.y) * ${u};
      let globalColStart = i32(workgroupId.x) * ${h};

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        for (var inputRow = localRow; inputRow < ${c}; inputRow = inputRow + ${e[1]}) {
          for (var inputCol = localCol; inputCol < ${f}; inputCol = inputCol + ${e[0]}) {
            ${writeDataToSubASnippet(t)}
          }
        }
        // Load one tile of B into local memory.
        for (var inputRow = localRow; inputRow < ${r}; inputRow = inputRow + ${e[1]}) {
              for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${e[0]}) {
            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,
              kStart + inputRow,
              globalColStart + inputCol);
          }
        }
        kStart = kStart + ${r};
        workgroupBarrier();

        // Compute acc values for a single thread.
        var BCached : array<f32, ${y}>;
        for (var k = 0; k < ${r}; k++) {
          for (var inner = 0; inner < ${y}; inner++) {
            BCached[inner] = mm_Bsub[k][localCol + inner * ${e[0]}];
          }
          for (var innerRow = 0; innerRow < ${g}; innerRow++) {
            let ACached = ${t?`mm_Asub[k][localRow + innerRow * ${e[1]}];`:`mm_Asub[localRow + innerRow * ${e[1]}][k];`}
            for (var innerCol = 0; innerCol < ${y}; innerCol++) {
              acc[innerRow][innerCol] =
                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);
            }
          }
        }
        workgroupBarrier();
      }
      for (var innerRow = 0; innerRow < ${g}; innerRow++) {
        let gRow = globalRowStart + localRow + innerRow * ${e[1]};
        for (var innerCol = 0; innerCol < ${y}; innerCol++) {
          let gCol = globalColStart + localCol + innerCol * ${e[0]};
          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
        }
      }
      `:`
  let tileRow = i32(localId.y) * ${g};
  let tileCol = i32(localId.x) * ${y};

  let globalRow = i32(globalId.y) * ${g};
  let globalCol = i32(globalId.x) * ${y};
  let globalRowStart = i32(workgroupId.y) * ${u};

  let tileRowA = i32(localId.y) * ${o};
  let tileColA = i32(localId.x) * ${d};
  let tileRowB = i32(localId.y) * ${m};
  // Loop over shared dimension.
  for (var t = 0; t < numTiles; t++) {
    // Load one tile of A into local memory.
    for (var innerRow = 0; innerRow < ${o}; innerRow++) {
      for (var innerCol = 0; innerCol < ${d}; innerCol++) {
        let inputRow = tileRowA + innerRow;
        let inputCol = tileColA + innerCol;
        ${writeDataToSubASnippet(t)}
      }
    }

    // Load one tile of B into local memory.
    for (var innerRow = 0; innerRow < ${m}; innerRow++) {
      for (var innerCol = 0; innerCol < ${y}; innerCol++) {
        let inputRow = tileRowB + innerRow;
        let inputCol = tileCol + innerCol;
        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,
          kStart + inputRow,
          globalCol + innerCol);
      }
    }
    kStart = kStart + ${r};
    workgroupBarrier();

    // Compute acc values for a single thread.
    var BCached : array<f32, ${y}>;
    for (var k = 0; k < ${r}; k++) {
      for (var inner = 0; inner < ${y}; inner++) {
        BCached[inner] = mm_Bsub[k][tileCol + inner];
      }

      for (var innerRow = 0; innerRow < ${g}; innerRow++) {
        ${readDataFromSubASnippet(t)}
        for (var innerCol = 0; innerCol < ${y}; innerCol++) {
          acc[innerRow][innerCol] =
              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);
        }
      }
    }

    workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < ${g}; innerRow++) {
    for (var innerCol = 0; innerCol < ${y}; innerCol++) {
      mm_write(batch, globalRow + innerRow, globalCol + innerCol,
          acc[innerRow][innerCol]);
    }
  }
  `;return`
    var<workgroup> mm_Asub : array<array<f32, ${f}>, ${c}>;
    var<workgroup> mm_Bsub : array<array<f32, ${h}>, ${r}>;

    ${getMainHeaderString()} {
      let batch = ${s?"0":"i32(globalId.z)"};
      let batchA = ${s||!l?"batch":"batch % uniforms.aShape[0]"};
      let batchB = ${s||!l?"batch":"batch % uniforms.bShape[0]"};
      let numTiles = ${s?`${Math.ceil(a/r)}`:`(uniforms.dimInner - 1) / ${r} + 1`};
      var kStart = ${s?`i32(globalId.z) * ${a}`:"0"};

      var acc : array<array<f32, ${y}>, ${g}>;

      // Without this initialization strange values show up in acc.
      for (var innerRow = 0; innerRow < ${g}; innerRow++) {
        for (var innerCol = 0; innerCol < ${y}; innerCol++) {
          acc[innerRow][innerCol] = 0.0;
        }
      }
      ${$}
    }
  `}const readVectorASnippet=n=>n?`
      mm_readA(batchA, colA, globalRow),
      mm_readA(batchA, colA + 1, globalRow),
      mm_readA(batchA, colA + 2, globalRow),
      mm_readA(batchA, colA + 3, globalRow)
  `:`
      mm_readA(batchA, globalRow, colA),
      mm_readA(batchA, globalRow, colA + 1),
      mm_readA(batchA, globalRow, colA + 2),
      mm_readA(batchA, globalRow, colA + 3)
  `;function makeVectorMatrixProductSource(n,e=!1){assert(n[1]===1&&n[2]===1,()=>`A linear work group size is required. But got ${n}.`);const t=n[0]*4;return`
    var<workgroup> mm_Asub : array<vec4<f32>, ${n[0]}>;

    ${getMainHeaderString()} {
      let tileCol = i32(localId.x);
      let globalCol = i32(globalId.x);
      let globalRow = i32(globalId.y);

      let numTiles = (uniforms.dimInner - 1) / ${t} + 1;
      let batch = i32(globalId.z);
      let batchA = batch % uniforms.aShape[0];
      let batchB = batch % uniforms.bShape[0];
      // Without this initialization strange values show up in acc.
      var acc = 0.0;

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        let colA = t * ${t} + tileCol * 4;
        mm_Asub[tileCol] = vec4<f32>(${readVectorASnippet(e)});
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < ${t/4}; k++) {
          let rowB = t * ${t} + k * 4;
          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),
                              mm_readB(batchB, rowB + 1, globalCol),
                              mm_readB(batchB, rowB + 2, globalCol),
                              mm_readB(batchB, rowB + 3, globalCol));

          let ACached = mm_Asub[k];
          acc = acc + dot(ACached, BCached);
        }

        workgroupBarrier();
      }

      mm_write(batch, globalRow, globalCol, acc);
    }
  `}class MatMulPackedProgram{constructor(e,t,r=!1,s=!1,a=null,i=null,l=null,u=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0]};const h=r?e[1]:e[2];if(this.isVec4=(h%4===0&&!r||t[1]%4===0&&r)&&t[2]%4===0&&!s,this.outputComponent=this.isVec4?4:1,this.isVectorA=t[1]===1&&!r,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workgroupSize=[32,1,1];else{const o=computeWorkgroupInfoForMatMul(t[1],h,t[2],r);this.workgroupSize=o.workgroupSize,this.elementsPerThread=o.elementsPerThread}this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread);const f=a!=null,c=l!=null;f&&this.variableNames.push("bias"),c&&this.variableNames.push("preluActivationWeights"),this.sequentialAccessByThreads=u,this.transposeA=r,this.transposeB=s,this.addBias=f,this.activation=i,this.hasPreluActivationWeights=c,[this.fitAOuter,this.fitBOuter,this.fitInner]=this.getShapeFit(t[1],t[2],h),this.shaderKey=`matMulPacked_${this.elementsPerThread}_${r}_${s}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.sequentialAccessByThreads}`}getShapeFit(e,t,r){const s=this.workgroupSize[1]*this.elementsPerThread[1],a=this.workgroupSize[0]*this.elementsPerThread[0];!this.isVec4&&this.isVectorA?this.tileInner=this.workgroupSize[0]*4:this.tileInner=a;const i=e%s===0,l=t%a===0,u=r%this.tileInner===0;return[i,l,u]}getUserCode(){return`
      ${activationFnSnippet(this.activation,this.hasPreluActivationWeights,this.isVec4)}
      ${matMulReadWriteFnSource(this.addBias,this.activation,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1)}
      ${this.isVec4?makeMatMulPackedVec4Source(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,!0):this.isVectorA?makeVectorMatrixProductSource(this.workgroupSize,this.transposeA):makeMatMulPackedSource(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,this.sequentialAccessByThreads,!0)}
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeMatMulReduceSource(n){return`
    var<workgroup> sumValues : array<f32, ${n}>;
    ${getMainHeaderString()} {
      let coords = getOutputCoords();
      let batch = coords[0];
      let batchA = batch % uniforms.aShape[0];
      let batchB = batch % uniforms.bShape[0];
      let row = coords[1];
      let col = coords[2];
      var sum = 0.0;
      let Length = uniforms.dimInner;
      for (var k = i32(localId.x); k < Length; k = k + ${n}) {
        let dataA = mm_readA(batchA, row, k);
        let dataB = mm_readB(batchB, k, col);
        sum = sum + dataA * dataB;
      }
      sumValues[localId.x] = sum;
      workgroupBarrier();

      for(var currentSize = ${n/2}u; currentSize > 1u;
          currentSize = currentSize / 2u) {
        if (localId.x < currentSize)
        {
          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];
        }
        workgroupBarrier();
      }

      if (localId.x == 0u) {
        sum = sumValues[0] + sumValues[1];
        mm_write(batch, row, col, sum);
      }
    }
  `}class MatMulReduceProgram{constructor(e,t=!1,r=!1,s=null,a=null,i=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize);const l=s!=null,u=i!=null;l&&this.variableNames.push("bias"),u&&this.variableNames.push("preluActivationWeights"),this.transposeA=t,this.transposeB=r,this.addBias=l,this.activation=a,this.hasPreluActivationWeights=u,this.shaderKey=`matMulReduce_${this.activation}_${t}_${r}`}getUserCode(){return`
      ${activationFnSnippet(this.activation,this.hasPreluActivationWeights)}
      ${matMulReadWriteFnSource(this.addBias,this.activation,this.transposeA,this.transposeB)}
      ${makeMatMulReduceSource(this.workgroupSize[0])}
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeMatMulSmallOutputSizeSource(n){const e=n[1],t=n[0],r=e>t?e:t;return`
  var<workgroup> mm_Asub : array<array<f32, ${r}>, ${e}>;
  var<workgroup> mm_Bsub : array<array<f32, ${t}>, ${r}>;

  // If the output size is small for matrix multiplication, avoid to use vec4
  // and handle some elements per thread to optimally utilize the ALU.
  // Read data from global memory to registers firstly, then store them into
  // shared memory, so it is instruction-Level parallelism for arithmetic
  // operations and others handle IO operations between barrier api, makes ALU
  // and load/store units work simultaneously, could improves the performance.
  ${getMainHeaderString()} {
    let tileRow = i32(localId.y);
    let tileCol = i32(localId.x);
    let globalRow = i32(globalId.y);
    let globalCol = i32(globalId.x);
    let batch = i32(globalId.z);
    let batchA = batch % uniforms.aShape[0];
    let batchB = batch % uniforms.bShape[0];

    // uniforms.dimInner should be greater than 0.
    let numTiles = (uniforms.dimInner - 1) / ${r} + 1;
    var acc = 0.0;

    var globalColA = tileCol;
    var globalRowB = 0;
    var regA = mm_readA(batchA, globalRow, globalColA);
    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);
    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);
    globalColA = globalColA + ${r};
    globalRowB = globalRowB + ${r};

    for (var t = 0; t < numTiles; t = t + 1) {
      mm_Asub[tileRow][tileCol] = regA;
      mm_Bsub[2 * tileRow][tileCol] = regB0;
      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;

      workgroupBarrier();

      regA = mm_readA(batchA, globalRow, globalColA);
      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);
      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);
      globalColA = globalColA + ${r};
      globalRowB = globalRowB + ${r};

      for (var k = 0; k < ${r}; k = k + 1) {
        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];
      }
      workgroupBarrier();
    }

    mm_write(batch, globalRow, globalCol, acc);
  }
  `}class MatMulSmallOutputSizeProgram{constructor(e,t,r,s=!1,a=!1,i=null,l=null,u=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[16,8,1],this.outputShape=r,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(r[2]/this.workgroupSize[0]),Math.ceil(r[1]/this.workgroupSize[1]),r[0]];const h=i!=null;h&&this.variableNames.push("bias");const f=u!=null;f&&this.variableNames.push("preluActivationWeights"),this.transposeA=s,this.transposeB=a,this.addBias=h,this.activation=l,this.hasPreluActivationWeights=f,this.shaderKey=`matMulSmallOutputSize_${this.activation}_${s}_${a}`}getUserCode(){return`
      ${activationFnSnippet(this.activation,this.hasPreluActivationWeights)}
      ${matMulReadWriteFnSource(this.addBias,this.activation,this.transposeA,this.transposeB)}
      ${makeMatMulSmallOutputSizeSource(this.workgroupSize)}
    `}}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MatMulSplitKProgram{constructor(e,t,r=!1,s=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[8,8,1],this.atomic=!0,this.splitedDimInner=128,assert(e[0]===1,()=>"MatMulSplitKProgram only supports batch = 1."),this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0,3]};const a=(r&&this.outputShape[1]%4===0||!r&&t%4===0)&&this.outputShape[2]%4===0;this.elementsPerThread=[4,4,this.splitedDimInner],this.outputComponent=a?4:1,a||(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=computeDispatch(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],t],this.workgroupSize,this.elementsPerThread),this.transposeA=r,this.transposeB=s,this.shaderKey=`matMulSplitK_${r}_${s}_${this.elementsPerThread}_${this.outputComponent}`}getUserCode(){const e=this.outputComponent;return`
      ${matMulReadFnSource(!1,this.transposeB,!1,!1,!1,e)}
      fn mm_write(batch: i32, row : i32, col : i32, value : ${typeSnippet(e)}) {
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
          let coords = vec3<i32>(batch, row, col);
          let flatIndex = getOutputIndexFromCoords(coords);
          // The problem is that we should initialize output to zero before using.
          // Otherwise, the original value will be added to the result.
          for (var i = 0; i < ${e}; i = i + 1) {
            ${atomicAddSnippet("&result[flatIndex + i]",`${e>1?"value[i]":"value"}`,"float32")}
          }
        }
      }
      ${e===4?makeMatMulPackedVec4Source(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner):makeMatMulPackedSource(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner)}
    `}}class BiasActivationProgram{constructor(e,t=null,r=null,s=null){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=t!=null,this.hasPreluActivationWeights=s!=null,this.activation=r,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`biasActivation_${r}`}getUserCode(){return`
    ${activationFnSnippet(this.activation,this.hasPreluActivationWeights)}
    ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        var value = getXByOutputIndex(index);
        ${biasActivationSnippet(this.addBias,this.activation)}
        setOutputAtIndex(index, value);
      }
    }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FillProgram{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="fill"}getUserCode(){return`
    ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        setOutputAtIndex(index, uniforms.value);
      }
    }
  `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fill(n){const{backend:e,attrs:t}=n,{shape:r,value:s}=t;let{dtype:a}=t;if(a=a||inferDtype(s),a==="string"){const i=getArrayFromDType(a,sizeFromShape(r));return i.fill(s),e.makeTensorInfo(r,a,i)}else{const i=new FillProgram(r),l=[{type:"float32",data:[s]}];return e.runWebGPUProgram(i,[],a,l)}}const fillConfig={kernelName:Fill,backendName:"webgpu",kernelFunc:fill};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reshape$1(n){const{inputs:e,attrs:t}=n,{x:r}=e,{shape:s}=t,a=sizeFromShape(r.shape),i=inferFromImplicitShape(s,a),l=sizeFromShape(i);return assert(a===l,()=>`The new shape (${i}) has ${l} elements and the old shape (${r.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`),n.backend.incRef(r.dataId),{dataId:r.dataId,shape:i,dtype:r.dtype}}const reshapeConfig={kernelName:Reshape,backendName:"webgpu",kernelFunc:reshape$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchMatMulImpl({a:n,b:e,transposeA:t,transposeB:r,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:l=0,activation:u=null}){const h=n.shape.length,f=e.shape.length,c=t?n.shape[h-2]:n.shape[h-1],o=r?e.shape[f-1]:e.shape[f-2],d=t?n.shape[h-1]:n.shape[h-2],m=r?e.shape[f-2]:e.shape[f-1],g=n.shape.slice(0,-2),y=e.shape.slice(0,-2),$=sizeFromShape(g),b=sizeFromShape(y),w=assertAndGetBroadcastShape(n.shape.slice(0,-2),e.shape.slice(0,-2)).concat([d,m]);assert(c===o,()=>`Error in matMul: inner shapes (${c}) and (${o}) of Tensors with shapes ${n.shape} and ${e.shape} and transposeA=${t} and transposeB=${r} must match.`);const v=t?[$,c,d]:[$,d,c],S=r?[b,m,o]:[b,o,m],T=reshape$1({inputs:{x:n},backend:s,attrs:{shape:v}}),C=reshape$1({inputs:{x:e},backend:s,attrs:{shape:S}}),I=[T,C],N=Math.max($,b),P=[T,C],F=[{type:"int32",data:[d]},{type:"int32",data:[m]},{type:"int32",data:[c]}];let _,D;const E=[N,d,m];let k=env().get("WEBGPU_MATMUL_PROGRAM_TYPE");if(k<0){const M=env().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),z=M>0?M:s.thresholdToIncreaseWorkgroups,G=N*Math.ceil(d/32)*Math.ceil(m/32);G<=z||d<=8&&G<=z*2?N*d*m<=128?k=MatMulProgramType.MatMulReduceProgram:N===1&&o>=2e3?k=MatMulProgramType.MatMulSplitKProgram:k=MatMulProgramType.MatMulSmallOutputSizeProgram:k=MatMulProgramType.MatMulPackedProgram}switch(k){case MatMulProgramType.MatMulReduceProgram:_=new MatMulReduceProgram(E,t,r,a,u,i);break;case MatMulProgramType.MatMulSplitKProgram:{if(D=fill({backend:s,attrs:{shape:E,value:0,dtype:n.dtype}}),_=new MatMulSplitKProgram(E,o,t,r),a||u){D=s.runWebGPUProgram(_,P,n.dtype,F,D);const z=new BiasActivationProgram(D.shape,a,u,i);let G=null;const j=[D];a&&j.push(a),i&&j.push(i),u==="leakyrelu"&&(G=[{type:"float32",data:[l]}],z.uniforms+=" alpha : f32,");const K=s.runWebGPUProgram(z,j,D.dtype,G);I.push(D);const X=reshape$1({inputs:{x:K},backend:s,attrs:{shape:w}});I.push(K);for(const Y of I)s.disposeData(Y.dataId);return X}break}case MatMulProgramType.MatMulSmallOutputSizeProgram:_=new MatMulSmallOutputSizeProgram(v,S,E,t,r,a,u,i);break;case MatMulProgramType.MatMulPackedProgram:const M=s.adapterInfo.isIntel();_=new MatMulPackedProgram(v,E,t,r,a,u,i,M);break;default:throw new Error(`Unsupported MatMulProgramType ${k}.`)}a&&P.push(a),i&&P.push(i),u==="leakyrelu"&&(F.push({type:"float32",data:[l]}),_.uniforms+=" alpha : f32,"),D=s.runWebGPUProgram(_,P,n.dtype,F,D);const O=reshape$1({inputs:{x:D},backend:s,attrs:{shape:w}});I.push(D);for(const M of I)s.disposeData(M.dataId);return O}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function _fusedMatMul(n){const{inputs:e,backend:t,attrs:r}=n,{a:s,b:a,bias:i,preluActivationWeights:l}=e,{transposeA:u,transposeB:h,activation:f,leakyreluAlpha:c}=r;return batchMatMulImpl({a:s,b:a,transposeA:u,transposeB:h,backend:t,bias:i,preluActivationWeights:l,leakyreluAlpha:c,activation:f})}const _fusedMatMulConfig={kernelName:_FusedMatMul,backendName:"webgpu",kernelFunc:_fusedMatMul};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class BinaryOpComplexProgram{constructor(e,t,r){this.variableNames=["AReal","AImag","BReal","BImag"],this.workgroupSize=[128,1,1],this.size=!0,this.outputShape=assertAndGetBroadcastShape(t,r),this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`binaryOpComplex_${e}`,this.op=e}getUserCode(){return`
      fn binaryOpComplex(
          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {
        ${getBinaryOpString(this.op,!1)}
      }

      ${getMainHeaderString("index")} {
        if(index < uniforms.size) {
          let areal = getARealByOutputIndex(index);
          let aimag = getAImagByOutputIndex(index);
          let breal = getBRealByOutputIndex(index);
          let bimag = getBImagByOutputIndex(index);
          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));
        }
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class BinaryOpProgram{constructor(e,t,r){if(this.size=!0,this.variableNames=["A","B"],this.outputShape=assertAndGetBroadcastShape(t,r),this.dispatchLayout=flatDispatchLayout(this.outputShape),this.op=e,this.useSharedMemoryWithA=t.length<=1&&r.length>1&&t[0]<128,this.useSharedMemoryWithB=r.length<=1&&t.length>1&&r[0]<128,this.useSharedMemoryWithA||this.useSharedMemoryWithB)this.outputComponent=1,this.variableComponents=[1,1],this.lastDimensionSize=this.useSharedMemoryWithB?r[0]:t[0],this.shaderKey=`binary_${e}_${this.lastDimensionSize}`,this.type="shared",this.workgroupSize=[256,1,1];else{const s=t.length>0&&t[t.length-1]%4===0,a=r.length>0&&r[r.length-1]%4===0;s&&a?(this.outputComponent=4,this.variableComponents=[4,4]):s&&(isScalarShape(r)||r[r.length-1]===1)||a&&(isScalarShape(t)||t[t.length-1]===1)?(this.outputComponent=4,this.variableComponents=s?[4,1]:[1,4]):(this.outputComponent=1,this.variableComponents=[1,1]),this.type="nonshared",this.shaderKey=`binary_${e}_${this.variableComponents}`,this.workgroupSize=[128,1,1]}this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.outputComponent,1,1])}getUserCode(){let e;const t=this.outputComponent===4?"vec4<f32>":"f32",r=`
    fn binaryOperation(a : ${t}, b : ${t}) -> ${t} {
      ${getBinaryOpString(this.op,this.outputComponent===4)}
    };
    `;if(this.type==="shared"){const s=this.lastDimensionSize>1?`coords[${this.outputShape.length-1}]`:"0",a=this.useSharedMemoryWithB?`let a = getAByOutputIndex(index);
          let b = sharedBuf[${s}];`:`let a = sharedBuf[${s}];
          let b = getBByOutputIndex(index);`;e=`
        ${r}
        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;
        ${getMainHeaderString("index")} {
          // Fill in the shared memory buffer.
          let localIndex = i32(localId.x);
          if(localIndex < ${this.lastDimensionSize}) {
            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB?"B":"A"}[localIndex]);
          }
          workgroupBarrier();

          if(index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            ${a}
            setOutputAtIndex(index, binaryOperation(a, b));
          }
        }
        `}else e=`
       ${r}
       ${getMainHeaderString("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index * ${this.outputComponent});
           let a = ${t}(getAByOutputCoords(coords));
           let b = ${t}(getBByOutputCoords(coords));
           setOutputAtIndex(index, binaryOperation(a, b));
         }
       }
       `;return e}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function identity(n){const{inputs:e}=n,{x:t}=e;return n.backend.incRef(t.dataId),{dataId:t.dataId,shape:t.shape,dtype:t.dtype}}const identityConfig={kernelName:Identity,backendName:"webgpu",kernelFunc:identity};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function complex(n){const{inputs:e,backend:t}=n,{real:r,imag:s}=e,a=t.makeTensorInfo(r.shape,"complex64"),i=t.tensorMap.get(a.dataId),l=identity({inputs:{x:r},backend:t}),u=identity({inputs:{x:s},backend:t});return i.complexTensorInfos={real:l,imag:u},a}const complexConfig={kernelName:Complex,backendName:"webgpu",kernelFunc:complex};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class UnaryOpProgram{constructor(e,t,r=""){this.variableNames=["A"],this.size=!0;const s=128;this.workgroupSize=[s,1,1],this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.op=t,r!==""&&(this.uniforms=r),this.shaderKey=`unary_${t}`}getUserCode(){return`
      fn unaryOperation(a : f32) -> f32 {
        ${getUnaryOpString(this.op,!1)}
      }
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let a = getAByOutputIndex(index);
          setOutputAtIndex(index, unaryOperation(a));
        }
      }
      `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unaryKernelFunc({opType:n,cpuKernelImpl:e,dtype:t}){return({inputs:r,backend:s})=>{const{x:a}=r,i=s,l=t||a.dtype;if(i.shouldExecuteOnCPU([a])&&e!=null){const h=i.tensorMap.get(a.dataId),f=e(h.values,l);return i.makeTensorInfo(a.shape,l,f)}const u=new UnaryOpProgram(a.shape,n);return i.runWebGPUProgram(u,[a],l)}}function binaryKernelFunc({opType:n,cpuKernelImpl:e,supportsComplex:t=!1,dtype:r}){return({inputs:s,backend:a})=>{const{a:i,b:l}=s,u=a;if(t&&i.dtype==="complex64"){const c=u.tensorMap.get(i.dataId),o=u.tensorMap.get(l.dataId);let d,m;if(n!==BinaryOpType.MUL)[d,m]=[[c.complexTensorInfos.real,o.complexTensorInfos.real],[c.complexTensorInfos.imag,o.complexTensorInfos.imag]].map(y=>{const[$,b]=y,x={dataId:$.dataId,dtype:$.dtype,shape:i.shape},w={dataId:b.dataId,dtype:b.dtype,shape:l.shape},v=new BinaryOpProgram(n,i.shape,l.shape);return u.runWebGPUProgram(v,[x,w],upcastType($.dtype,b.dtype))});else{const y=new BinaryOpComplexProgram(BinaryOpType.COMPLEX_MULTIPLY_REAL,i.shape,l.shape),$=new BinaryOpComplexProgram(BinaryOpType.COMPLEX_MULTIPLY_IMAG,i.shape,l.shape),b=[{dataId:c.complexTensorInfos.real.dataId,dtype:c.complexTensorInfos.real.dtype,shape:i.shape},{dataId:c.complexTensorInfos.imag.dataId,dtype:c.complexTensorInfos.imag.dtype,shape:i.shape},{dataId:o.complexTensorInfos.real.dataId,dtype:o.complexTensorInfos.real.dtype,shape:l.shape},{dataId:o.complexTensorInfos.imag.dataId,dtype:o.complexTensorInfos.imag.dtype,shape:l.shape}];d=u.runWebGPUProgram(y,b,"float32"),m=u.runWebGPUProgram($,b,"float32")}const g=complex({inputs:{real:d,imag:m},backend:u});return u.disposeData(d.dataId),u.disposeData(m.dataId),g}const h=r||upcastType(i.dtype,l.dtype);if((i.dtype==="string"||l.dtype==="string"||u.shouldExecuteOnCPU([i,l]))&&e!=null){const c=u.tensorMap.get(i.dataId).values,o=u.tensorMap.get(l.dataId).values,d=i.dtype==="string"?fromUint8ToStringArray(c):c,m=i.dtype==="string"?fromUint8ToStringArray(o):o,[g,y]=e(i.shape,l.shape,d,m,h);return u.makeTensorInfo(y,h,g)}const f=new BinaryOpProgram(n,i.shape,l.shape);return u.runWebGPUProgram(f,[i,l],h)}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function simpleAbsImpl(n){const e=new Float32Array(n.length);for(let t=0;t<n.length;++t)e[t]=Math.abs(n[t]);return e}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createSimpleBinaryKernelImpl(n){return(e,t,r,s,a)=>{const i=assertAndGetBroadcastShape(e,t),l=i.length,u=computeStrides(i),h=sizeFromShape(i),f=getTypedArrayFromDType(a,h),c=e.length,o=t.length,d=computeStrides(e),m=computeStrides(t),g=getBroadcastDims(e,i),y=getBroadcastDims(t,i);if(g.length+y.length===0)for(let $=0;$<f.length;++$)f[$]=n(r[$%r.length],s[$%s.length]);else for(let $=0;$<f.length;++$){const b=indexToLoc($,l,u),x=b.slice(-c);g.forEach(T=>x[T]=0);const w=locToIndex(x,c,d),v=b.slice(-o);y.forEach(T=>v[T]=0);const S=locToIndex(v,o,m);f[$]=n(r[w],s[S])}return[f,i]}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function castImpl(n,e,t,r){if(r==="int32"){const s=Int32Array.from(n);return[e,"int32",s]}if(r==="bool"){const s=toTypedArray([0],t),[a,i]=createSimpleBinaryKernelImpl((l,u)=>l!==u?1:0)(e,[],n,s,"bool");return[i,"bool",a]}throw new Error(`Error in Cast: failed to cast ${t} to ${r}`)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const addImpl=createSimpleBinaryKernelImpl((n,e)=>n+e);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincountImpl(n,e,t,r,s){const a=sizeFromShape(r),i=makeZerosTypedArray(s,t);for(let l=0;l<n.length;l++){const u=n[l];if(u<0)throw new Error("Input x must be non-negative!");u>=s||(a>0?i[u]+=e[l]:i[u]+=1)}return i}function bincountReduceImpl(n,e,t,r=!1){const s=n.shape[0],a=n.shape[1],i=buffer([s,t],e.dtype);for(let l=0;l<s;l++)for(let u=0;u<a;u++){const h=n.get(l,u);if(h<0)throw new Error("Input x must be non-negative!");h>=t||(r?i.set(1,l,h):e.size>0?i.set(i.get(l,h)+e.get(l,u),l,h):i.set(i.get(l,h)+1,l,h))}return i}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const bitwiseAndImpl=createSimpleBinaryKernelImpl((n,e)=>n&e);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createSimpleUnaryImpl(n){return(e,t,r)=>{const s=getArrayFromDType(t,e.length);for(let a=0;a<e.length;++a)s[a]=n(e[a],r);return s}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ceilImpl=createSimpleUnaryImpl(n=>Math.ceil(n));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concatImpl$1(n,e,t,r){const s=getArrayFromDType(t,sizeFromShape(e));if(r&&t!=="string"){let a=0;n.forEach(i=>{const l=sizeFromShape(i.shape);s.set(i.vals,a),a+=l})}else{let a=0;n.forEach(i=>{const l=t==="string"?fromUint8ToStringArray(i.vals):i.vals;let u=0;for(let h=0;h<i.shape[0];++h){const f=h*e[1]+a;for(let c=0;c<i.shape[1];++c)s[f+c]=l[u++]}a+=i.shape[1]})}return s}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const equalImpl=createSimpleBinaryKernelImpl((n,e)=>n===e?1:0);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expImpl=createSimpleUnaryImpl(n=>Math.exp(n));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expm1Impl=createSimpleUnaryImpl(n=>Math.expm1(n));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorImpl=createSimpleUnaryImpl(n=>Math.floor(n));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorDivImpl=createSimpleBinaryKernelImpl((n,e)=>Math.floor(n/e));/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherNdImpl(n,e,t,r,s,a,i,l,u){const h=buffer([r,a],t);for(let f=0;f<r;f++){const c=[];let o=0;for(let d=0;d<s;d++){const m=n[f*s+d];o+=m*i[d],c.push(m)}if(o<0||o>=u/a)throw new Error(`Invalid indices: ${c} does not index into ${l}`);for(let d=0;d<a;d++)h.values[f*a+d]=e.get(...e.indexToLoc(o*a+d))}return h}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherV2Impl(n,e,t){const r=buffer(t,n.dtype);for(let s=0;s<r.size;++s){const i=r.indexToLoc(s).slice(),l=i[0],u=i[2],h=e.locToIndex([l,u]);i[2]=e.values[h];const f=n.locToIndex(i);0<=f&&f<n.values.length&&(r.values[s]=n.values[f])}return r}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greaterImpl=createSimpleBinaryKernelImpl((n,e)=>n>e?1:0);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greaterEqualImpl=createSimpleBinaryKernelImpl((n,e)=>n>=e?1:0);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lessImpl=createSimpleBinaryKernelImpl((n,e)=>n<e?1:0);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lessEqualImpl=createSimpleBinaryKernelImpl((n,e)=>n<=e?1:0);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linSpaceImpl(n,e,t){const r=(e-n)/(t-1),s=makeZerosTypedArray(t,"float32");s[0]=n;for(let a=1;a<s.length;a++)s[a]=s[a-1]+r;return s}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logImpl=createSimpleUnaryImpl(n=>Math.log(n));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxImpl(n,e,t,r){const s=getTypedArrayFromDType(r,sizeFromShape(t));for(let a=0;a<s.length;++a){const i=a*e;let l=n[i];for(let u=0;u<e;++u){const h=n[i+u];(Number.isNaN(h)||h>l)&&(l=h)}s[a]=l}return s}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maximumImpl=createSimpleBinaryKernelImpl((n,e)=>Math.max(n,e));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const minimumImpl=createSimpleBinaryKernelImpl((n,e)=>Math.min(n,e));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const multiplyImpl=createSimpleBinaryKernelImpl((n,e)=>n*e);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function negImpl(n,e,t){const r=createScalarValue(-1,t);return multiplyImpl([],e,r,n,t)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const notEqualImpl=createSimpleBinaryKernelImpl((n,e)=>n!==e?1:0);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transposeImpl(n,e,t,r,s){const a=e.length,i=sizeFromShape(e),l=computeStrides(e),u=computeStrides(s),h=getTypedArrayFromDType(t,sizeFromShape(s));for(let f=0;f<i;++f){const c=indexToLoc(f,a,l),o=new Array(c.length);for(let m=0;m<o.length;m++)o[m]=c[r[m]];const d=locToIndex(o,a,u);h[d]=n[f]}return h}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prodImpl(n,e,t,r){const[s,a]=computeOutAndReduceShapes(n,r),i=upcastType(e,"int32"),l=makeZerosTypedArray(sizeFromShape(s),i),u=sizeFromShape(a);for(let h=0;h<l.length;++h){const f=h*u;let c=1;for(let o=0;o<u;++o)c*=t[f+o];l[h]=c}return{outVals:l,outShape:s,outDtype:i}}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function validateIndices(n,e,t){n.forEach((r,s)=>{if(r<0||r>=t){const a=indexToLoc(s,e.length,computeStrides(e)).join(",");throw new Error(`indices[${a}] = ${r} is not in [0, ${t})`)}})}function validateSplits(n,e){for(let t=0;t<n.length;++t){const r=n[t],s=t===n.length-1?e:n[t+1].length;if(r.length===0)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let a=1;a<r.length;++a)if(r[a-1]>r[a])throw new Error("Ragged splits must be sorted in ascending order")}}function makeSplits(n,e,t,r){const s=[];let a=0;const i=e.length-1+t.length,l=new Array(i).fill(null).map(()=>[0]);validateSplits(t,r);let u=1;for(let h=0;h<e.length-1;++h){u*=e[h];const f=e[h+1];for(let c=1;c<u+1;++c)l[h].push(c*f)}for(let h=0;h<n.length;++h){let f=n[h],c=n[h]+1;for(let o=0;o<t.length;++o){const d=t[o],m=o+e.length-1;if(m>=0){const g=l[m],y=g[g.length-1]-d[f];for(let $=f;$<c;++$)l[m].push(d[$+1]+y)}f=d[f],c=d[c]}c!==f&&(s.push([f,c]),a+=c-f)}return{outSplits:l,valueSlices:s,numValues:a}}function getSplits(n){const e=[];for(let t=0;t<n.length;++t){const r=n[t].length,s=getArrayFromDType("int32",r);e.push(s),n[t].forEach((a,i)=>s[i]=a)}return e}function computeFlatOuterDims(n,e){const t=n.slice(0,e);for(;t.length<e;)t.push(1);for(let r=e;r<n.length;r++)t[e-1]*=n[r];return t}function writeValueSlices(n,e,t,r,s,a){const i=computeFlatOuterDims(e,2)[1],l=computeFlatOuterDims(a,2)[1];let u=0;for(const h of t)for(let f=h[0];f<h[1];++f){for(let c=0;c<r;++c)s[u*l+c]=n[f*i+c];++u}}function getValues(n,e,t,r,s){const a=e.slice();a[0]=s;const i=getArrayFromDType(t,sizeFromShape(a)),l=n.length,u=l===0?0:l/e[0];return writeValueSlices(n,e,r,u,i,a),[i,a]}function raggedGatherImpl(n,e,t,r,s,a,i,l){if(n.length===0)throw new Error("paramsNestedSplits must be non empty");if(e[0].length===0)throw new Error("Split tensors must not be scalars");const u=e[0][0]-1;if(validateIndices(a,i,u),r.length===0)throw new Error("params.rank must be nonzero");const h=r[0],{outSplits:f,valueSlices:c,numValues:o}=makeSplits(a,i,n,h),d=getSplits(f),m=getValues(t,r,s,c,o);return[d,m[0],m[1]]}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const INT32_MAX=2147483647;function raggedRangeImpl(n,e,t,r,s,a,i){if(e.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");const l=e.length===0,u=s.length===0,h=i.length===0,f=[];l||f.push(e[0]),u||f.push(s[0]),h||f.push(i[0]);for(let y=1;y<f.length;++y)if(f[y]!==f[y-1])throw new Error("starts, limits, and deltas must have the same shape");const c=f.length===0?1:f[0],o=getArrayFromDType("int32",c+1);o[0]=0;for(let y=0;y<c;++y){const $=l?n[0]:n[y],b=u?r[0]:r[y],x=h?a[0]:a[y];if(x===0)throw new Error("Requires delta != 0");let w;if(x>0&&b<$||x<0&&b>$)w=0;else if(w=Math.ceil(Math.abs((b-$)/x)),w>INT32_MAX)throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);o[y+1]=o[y]+w}const d=o[c],m=getArrayFromDType(t,d);let g=0;for(let y=0;y<c;++y){const $=o[y+1]-o[y];let b=l?n[0]:n[y];const x=h?a[0]:a[y];for(let w=0;w<$;++w)m[g++]=b,b+=x}return[o,m]}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var RowPartitionType=RowPartitionType$1;class RaggedTensorToTensorOp{constructor(e,t,r,s,a,i,l,u,h,f){this.shape=e,this.shapeShape=t,this.values=r,this.valuesShape=s,this.valuesDType=a,this.defaultValue=i,this.defaultValueShape=l,this.rowPartitionValues=u,this.rowPartitionValuesShapes=h,this.rowPartitionTypes=getRowPartitionTypesHelper(f),this.raggedRank=getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===RowPartitionType.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===RowPartitionType.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case RowPartitionType.VALUE_ROWIDS:return RaggedTensorToTensorOp.getMaxWidthValueRowID(t);case RowPartitionType.ROW_SPLITS:return RaggedTensorToTensorOp.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${RowPartitionType[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(t===0||t===1)return 0;let r=0;for(let s=0;s<t-1;++s){const a=e[s+1]-e[s];a>r&&(r=a)}return r}static getMaxWidthValueRowID(e){const t=e.length;if(t===0)return 0;let r=0,s=e[0],a=0;for(let i=1;i<t;++i){const l=e[i];l!==s&&(s=l,a=Math.max(i-r,a),r=i)}return Math.max(t-r,a)}tensorShapeFromTensor(e,t,r=!0){if(t.length===0){if(e[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return makeShape(e,r)}calculateOutputSize(e){const t=this.valuesShape,r=this.defaultValueShape;validateDefaultValueShape(r,t);const s=this.tensorShapeFromTensor(this.shape,this.shapeShape),i=combineRaggedTensorToTensorShapes(this.raggedRank,s,t);i[0]<0&&(i[0]=e);for(let l=1;l<=this.raggedRank;++l)i[l]<0&&(i[l]=this.getMaxWidth(l));return i}calculateFirstParentOutputIndex(e,t,r){const s=Math.min(e,r),a=[];let i=0;for(let l=0;l<s;++l,i+=t)a.push(i);for(let l=s;l<e;++l)a.push(-1);return assert(a.length===e,()=>"Final length of result must be equal to firstDimension."),a}calculateOutputIndexRowSplit(e,t,r,s){const a=e.length,i=[];for(let l=0;l<a-1;++l){const u=e[l+1]-e[l];let h=Math.min(s,u),f=t[l];f===-1&&(h=0);for(let c=0;c<h;++c)i.push(f),f+=r;for(let c=0;c<u-h;++c)i.push(-1)}if(a>0&&i.length!==e[a-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(e,t,r,s){const a=e.length,i=[];if(a===0)return[];let l=0,u=e[0];if(u>=t.length)throw new Error(`Got currentValueRowId=${u}, which is not less than ${t.length}`);let h=t[u];i.push(h);for(let f=1;f<a;++f){const c=e[f];if(c===u)h>=0&&(++l,l<s?h+=r:h=-1);else{if(l=0,u=c,c>=t.length)throw new Error(`Got nextValueRowId=${c} which is not less than ${t.length}`);h=t[c]}i.push(h)}if(i.length!==e.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(e,t,r,s){const a=this.getRowPartitionTensor(e),i=this.getRowPartitionTypeByDimension(e);switch(i){case RowPartitionType.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(a,t,r,s);case RowPartitionType.ROW_SPLITS:if(a.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${a.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(a,t,r,s);default:throw new Error(`Unsupported partition type: ${RowPartitionType[i]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case RowPartitionType.FIRST_DIM_SIZE:return e[0];case RowPartitionType.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case RowPartitionType.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${RowPartitionType[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const t=this.getFirstDimensionSize(),r=this.calculateOutputSize(t),s=new Array(this.raggedRank+1);s[s.length-1]=1;for(let u=s.length-2;u>=0;--u)s[u]=s[u+1]*r[u+1];const a=makeShape(r,!1),i=getArrayFromDType(this.valuesDType,sizeFromShape(a));if(s[0]*r[0]>0){let u=this.calculateFirstParentOutputIndex(t,s[0],r[0]);for(let h=1;h<=this.raggedRank;++h)u=this.calculateOutputIndex(h-1,u,s[h],r[h]);this.setOutput(this.raggedRank,u,i,a)}return[a,i]}setOutput(e,t,r,s){if(r.length===0)return;const a=this.values,i=r;let l=s.slice();l=l.slice(e+1);const u=sizeFromShape(l),h=t.length;let f=this.defaultValue;if(f.length!==u&&f.length!==1){const m=this.defaultValueShape;tidy(()=>{const g=reshape$2(f,m);f=broadcastTo(g,l).dataSync()})}let c=0,o=0,d=0;for(let m=0;m<=h;++m){let g=m<h?t[m]:-1;if(g===d){++d;continue}if(o<d){const y=a.subarray(c*u),$=i.subarray(o*u),b=(d-o)*u;copyArray($,y,b)}if(m>=h){const y=r.length;g=Math.floor(y/u)}if(g>d)if(this.defaultValue.length===1)i.subarray(d*u,g*u).fill(this.defaultValue[0]),d=g;else for(;g>d;){const y=i.slice(d*u);copyArray(y,f,u),++d}g<0?(c=m+1,o=d):(c=m,o=d,d=o+1)}}}function copyArray(n,e,t){for(let r=0;r<t;r++)n[r]=e[r]}function makeShape(n,e){const t=[];for(let r of n){if(r<0){if(!e)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}t.push(r)}return t}function raggedTensorToTensorImpl(n,e,t,r,s,a,i,l,u,h){return new RaggedTensorToTensorOp(n,e,t,r,s,a,i,l,u,h).compute()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rangeImpl(n,e,t,r){const s=n===e,a=n<e&&t<0,i=e<n&&t>1;if(s||a||i)return makeZerosTypedArray(0,r);const l=Math.abs(Math.ceil((e-n)/t)),u=makeZerosTypedArray(l,r);e<n&&t===1&&(t=-1),u[0]=n;for(let h=1;h<u.length;h++)u[h]=u[h-1]+t;return u}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rsqrtImpl=createSimpleUnaryImpl(n=>1/Math.sqrt(n));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterImpl(n,e,t,r,s,a,i,l,u,h){const f=[r/s,s],c=n.values,o=e.values;if(r===0)return buffer(t,e.dtype);const d=u instanceof TensorBuffer?u:buffer(f,e.dtype);typeof u=="string"||typeof u=="number"?d.values.fill(u):typeof u=="boolean"&&d.values.fill(+u);for(let m=0;m<a;m++){const g=[];let y=0;for(let $=0;$<i;$++){const b=c[m*i+$];g.push(b),y+=b*l[$]}if(y<0||y>=r/s)throw new Error(`Invalid indices: ${g} does not index into ${t}`);for(let $=0;$<s;$++)h?d.values[y*s+$]+=o[m*s+$]:d.values[y*s+$]=e.rank===0?o[0]:o[m*s+$]}return d}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sigmoidImpl=createSimpleUnaryImpl(n=>1/(1+Math.exp(-n)));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sliceImpl(n,e,t,r,s){const a=isSliceContinous(r,e,t),i=sizeFromShape(t),l=computeStrides(r);if(a){const c=computeFlatOffset(e,l);return s==="string"?n.slice(c,c+i):n.subarray(c,c+i)}const u=s==="string"?fromUint8ToStringArray(n):n,h=buffer(r,s,u),f=buffer(t,s);for(let c=0;c<f.size;++c){const o=f.indexToLoc(c),d=o.map((m,g)=>m+e[g]);f.set(h.get(...d),...o)}return s==="string"?fromStringArrayToUint8(f.values):f.values}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseFillEmptyRowsImpl(n,e,t,r,s,a,i){const l=e[0],u=a[0],h=new Array(u),f=new Array(l),c=e[1];if(u===0){if(l!==0)throw new Error(getSparseFillEmptyRowsIndicesDenseShapeMismatch(l));const y=getArrayFromDType(t,0),$=getArrayFromDType(s,0);return[y,[0,c],$,h,f]}let o=!0,d=0;const m=new Array(u).fill(0);for(let y=0;y<l;++y){const $=n[y*c];if($<0)throw new Error(getSparseFillEmptyRowsNegativeIndexErrorMessage(y,$));if($>=u)throw new Error(getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(y,$,u));++m[$],o=o&&$>=d,d=$}let g=!0;for(let y=0;y<u;++y){const $=m[y]===0;h[y]=$,g=g&&!$,m[y]=Math.max(m[y],1),y>0&&(m[y]+=m[y-1])}if(g&&o){const y=n,$=r;for(let b=0;b<l;++b)f[b]=b;return[y,[l,c],$,h,f]}else{const y=m[u-1],$=getArrayFromDType(t,y*c),b=getArrayFromDType(s,y),x=new Array(u).fill(0);for(let w=0;w<l;++w){const v=n[w*c],S=x[v],T=(v===0?0:m[v-1])+S;x[v]++;for(let C=0;C<c;++C)$[T*c+C]=n[w*c+C];b[T]=r[w],f[w]=T}for(let w=0;w<u;++w)if(x[w]===0){const S=w===0?0:m[w-1];$[S*c+0]=w;for(let T=1;T<c;++T)$[S*c+T]=0;b[S]=i}return[$,[y,c],b,h,f]}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseReshapeImpl(n,e,t,r,s){const a=sizeFromShape(r),i=e[0],l=s.length,u=[];let h=1,f=-1;for(let y=0;y<l;++y){const $=s[y];if($===-1){if(f!==-1)throw new Error(getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(f,y));f=y,u.push(1)}else{if($<0)throw new Error(getSparseReshapeNegativeOutputDimErrorMessage(y,$));h*=$,u.push($)}}if(f!==-1){if(h<=0)throw new Error(getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const y=Math.trunc(a/h);if(h*y!==a)throw new Error(getSparseReshapeInputOutputMultipleErrorMessage(r,u));u[f]=y}if(sizeFromShape(u)!==a)throw new Error(getSparseReshapeInputOutputMismatchErrorMessage(r,u));const o=r.length,d=[];if(o>0){d[o-1]=1;for(let y=o-2;y>=0;--y)d[y]=d[y+1]*r[y+1]}const m=[];if(l>0){m[l-1]=1;for(let y=l-2;y>=0;--y)m[y]=m[y+1]*u[y+1]}const g=getArrayFromDType(t,i*l);for(let y=0;y<i;++y){let $=0;for(let b=0;b<o;++b)$+=n[y*o+b]*d[b];for(let b=0;b<l;++b)g[y*l+b]=Math.trunc($/m[b]),$%=m[b]}return[g,[i,l],u]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentReductionImpl(n,e,t,r,s,a=!1,i=0){const l=r.length,u=[e[0],n.length/e[0]],h=u[1],c=l>0?s[l-1]+1:0;if(c<0)throw new Error(getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const o=e.slice();o[0]=c;const d=o.reduce((x,w)=>x*w,1),m=getArrayFromDType(t,d);if(l===0)return c>0&&m.fill(i),[m,o];if(c<=0)throw new Error(getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let g=0,y=1,$=0,b=s[g];for(;;){let x=0;if(y<l){if(x=s[y],b===x){++y;continue}if(b>=x)throw new Error(getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=c)throw new Error(getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,c));b>$&&m.fill(i,$*h,b*h);for(let w=g;w<y;++w){const v=r[w];if(v<0||v>=u[0])throw new Error(getSparseSegmentReductionIndicesOutOfRangeErrorMessage(w,r[w],u[0]));for(let S=0;S<h;S++)m[b*h+S]+=n[v*h+S]}if(a)for(let w=0;w<h;w++)m[b*h+w]/=y-g;if(g=y,++y,$=b+1,b=x,y>l)break}return $<c&&m.fill(i,$*h,c*h),[m,o]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sqrtImpl=createSimpleUnaryImpl(n=>Math.sqrt(n));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squaredDifferenceImpl=createSimpleBinaryKernelImpl((n,e)=>{const t=n-e;return t*t});/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const staticRegexReplaceImpl=createSimpleUnaryImpl((n,e)=>{const{pattern:t,replaceGlobal:r,rewrite:s}=e;return n.replace(new RegExp(t,r?"g":""),s)});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSliceImpl(n,e,t,r){const s=buffer(n,e.dtype);for(let a=0;a<s.size;a++){const i=s.indexToLoc(a),l=new Array(i.length);for(let u=0;u<l.length;u++)l[u]=i[u]*t[u]+r[u];s.set(e.get(...l),...i)}return s}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class StringNGramsOp{constructor(e,t,r,s,a,i){this.separator=encodeString(e),this.nGramWidths=t,this.leftPad=encodeString(r),this.rightPad=encodeString(s),this.padWidth=a,this.preserveShort=i}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const r=this.getPadWidth(t);return Math.max(0,e+2*r-t+1)}createNGrams(e,t,r,s,a,i){for(let l=0;l<a;++l){const u=this.getPadWidth(i),h=Math.max(0,u-l),f=Math.max(0,u-(a-(l+1))),c=i-(h+f),o=t+(h>0?0:l-u);let d=0;d+=h*this.leftPad.length;for(let b=0;b<c;++b)d+=e[o+b].length;d+=f*this.rightPad.length;const m=h+f+c-1;d+=m*this.separator.length,r[s+l]=new Uint8Array(d);const g=r[s+l];let y=0;const $=b=>b.forEach(x=>g[y++]=x);for(let b=0;b<h;++b)$(this.leftPad),$(this.separator);for(let b=0;b<c-1;++b)$(e[o+b]),$(this.separator);if(c>0){$(e[o+c-1]);for(let b=0;b<f;++b)$(this.separator),$(this.rightPad)}else{for(let b=0;b<f-1;++b)$(this.rightPad),$(this.separator);$(this.rightPad)}}}compute(e,t){const r=e.length,s=t.length;if(s>0){let u=t[0];if(u!==0)throw new Error(`First split value must be 0, got ${u}`);for(let h=1;h<s;++h){let f=t[h]>=u;if(f=f&&t[h]<=r,!f)throw new Error(`Invalid split value ${t[h]}, must be in [${u}, ${r}]`);u=t[h]}if(u!==r)throw new Error(`Last split value must be data size. Expected ${r}, got ${u}`)}const a=s-1,i=getArrayFromDType("int32",s);if(r===0||s===0){const u=new Array(r);for(let h=0;h<=a;++h)i[h]=0;return[u,i]}i[0]=0;for(let u=1;u<=a;++u){const h=t[u]-t[u-1];let f=0;this.nGramWidths.forEach(c=>{f+=this.getNumNGrams(h,c)}),this.preserveShort&&h>0&&f===0&&(f=1),i[u]=i[u-1]+f}const l=new Array(i[a]);for(let u=0;u<a;++u){const h=t[u];let f=i[u];if(this.nGramWidths.forEach(c=>{const o=t[u+1]-t[u],d=this.getNumNGrams(o,c);this.createNGrams(e,h,l,f,d,c),f+=d}),this.preserveShort&&f===i[u]){const c=t[u+1]-t[u];if(c===0)continue;const o=c+2*this.padWidth,d=1;this.createNGrams(e,h,l,f,d,o)}}return[l,i]}}function stringNGramsImpl(n,e,t,r,s,a,i,l){return new StringNGramsOp(t,r,s,a,i,l).compute(n,e)}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function split(n,e,t,r){if(!n.length)return;if(e.length===0){for(let a=0;a<n.length;++a)r.push(n.subarray(a,a+1));return}if(e.length===1){const a=e[0];let i=n.indexOf(a);for(;i!==-1;){const l=n.subarray(0,i);(!t||l.length!==0)&&r.push(l),n=n.subarray(i+1),i=n.indexOf(a)}(!t||n.length!==0)&&r.push(n);return}let s=0;for(let a=0;a<n.length+1;a++)if(a===n.length||e.indexOf(n[a])!==-1){const i=n.subarray(s,a);(!t||i.length!==0)&&r.push(i),s=a+1}}function stringSplitImpl(n,e,t){const r=n.length,s=[];let a=0,i=0;const l=new Array(r);for(let o=0;o<r;++o){const d=s.length;split(n[o],e,t,s);const m=s.length-d;l[o]=m,a+=m,i=Math.max(i,m)}const u=getArrayFromDType("int32",a*2),h=new Array(a),f=[r,i];let c=0;for(let o=0;o<r;++o)for(let d=0;d<l[o];++d)u[c*2]=o,u[c*2+1]=d,h[c]=s[c],++c;return[u,h,f]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringToHashBucketFastImpl(n,e){const t=getArrayFromDType("int32",n.length);for(let r=0;r<n.length;++r)t[r]=fingerPrint64(n[r]).modulo(e).getLowBitsUnsigned();return t}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const subImpl=createSimpleBinaryKernelImpl((n,e)=>n-e);/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tileImpl(n,e){const t=new Array(n.rank);for(let s=0;s<t.length;s++)t[s]=n.shape[s]*e[s];const r=buffer(t,n.dtype);for(let s=0;s<r.values.length;++s){const a=r.indexToLoc(s),i=new Array(n.rank);for(let u=0;u<i.length;u++)i[u]=a[u]%n.shape[u];const l=n.locToIndex(i);r.values[s]=n.values[l]}return r}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const comparePair=(n,e)=>{const t=e.value-n.value;return t===0?n.index-e.index:t};function select$1(n,e,t=0,r=n.length-1){for(;r>t;){if(r-t>600){const l=r-t+1,u=e-t+1,h=Math.log(l),f=.5*Math.exp(2*h/3),c=.5*Math.sqrt(h*f*(l-f)/l)*Math.sign(u-l/2),o=Math.max(t,Math.floor(e-u*f/l+c)),d=Math.min(r,Math.floor(e+(l-u)*f/l+c));select$1(n,e,o,d)}const s=n[e];let a=t,i=r;for(swap(n,t,e),comparePair(n[r],s)>0&&swap(n,t,r);a<i;){for(swap(n,a,i),a++,i--;comparePair(n[a],s)<0;)a=a+1;for(;comparePair(n[i],s)>0;)i=i-1}comparePair(n[t],s)===0?swap(n,t,i):(i=i+1,swap(n,i,r)),i<=e&&(t=i+1),e<=i&&(r=i-1)}}function topKImpl(n,e,t,r,s){const a=e[e.length-1],[i,l]=[n.length/a,a],u=getTypedArrayFromDType(t,i*r),h=getTypedArrayFromDType("int32",i*r);for(let c=0;c<i;c++){const o=c*l,d=n.subarray(o,o+l);let m=new Array(d.length);d.forEach((b,x)=>m[x]={value:b,index:x}),r<m.length&&(select$1(m,r),m=m.slice(0,r)),s&&m.sort(comparePair);const g=c*r,y=u.subarray(g,g+r),$=h.subarray(g,g+r);for(let b=0;b<r;b++)y[b]=m[b].value,$[b]=m[b].index}const f=e.slice();return f[f.length-1]=r,[buffer(f,t,u),buffer(f,"int32",h)]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function uniqueImpl(n,e,t,r){const s=parseAxisParam(e,t)[0],a=[1,t[0],1];for(let m=0;m<s;m++)a[0]*=t[m];a[1]=t[s];for(let m=s+1;m<t.length;m++)a[2]*=t[m];const i=new Map,l=new Int32Array(t[s]),u=new TensorBuffer(a,r,n),h=[],f=a[0]===1&&a[2]===1;for(let m=0;m<t[s];m++){let g;if(f)g=n[m].toString();else{const $=[];for(let b=0;b<a[0];b++)for(let x=0;x<a[2];x++)$.push(u.get(b,m,x));g=$.join(",")}const y=i.get(g);if(y!=null)l[m]=y;else{const $=i.size;i.set(g,$),l[m]=$,h.push(m)}}const c=a.slice();c[1]=i.size;const o=new TensorBuffer(c,r);h.forEach((m,g)=>{for(let y=0;y<a[0];y++)for(let $=0;$<a[2];$++)o.set(u.get(y,m,$),y,g,$)});const d=t.slice();return d[s]=c[1],{outputValues:o.values,outputShape:d,indices:l}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var shared=Object.freeze({__proto__:null,addImpl,bincountImpl,bincountReduceImpl,bitwiseAndImpl,castImpl,ceilImpl,concatImpl:concatImpl$1,equalImpl,expImpl,expm1Impl,floorDivImpl,floorImpl,gatherNdImpl,gatherV2Impl,greaterEqualImpl,greaterImpl,lessEqualImpl,lessImpl,linSpaceImpl,logImpl,maxImpl,maximumImpl,minimumImpl,multiplyImpl,negImpl,notEqualImpl,prodImpl,raggedGatherImpl,raggedRangeImpl,raggedTensorToTensorImpl,rangeImpl,rsqrtImpl,scatterImpl,sigmoidImpl,simpleAbsImpl,sliceImpl,sparseFillEmptyRowsImpl,sparseReshapeImpl,sparseSegmentReductionImpl,sqrtImpl,squaredDifferenceImpl,staticRegexReplaceImpl,stridedSliceImpl,stringNGramsImpl,stringSplitImpl,stringToHashBucketFastImpl,subImpl,tileImpl,topKImpl,transposeImpl,uniqueImpl});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const{addImpl:addImplCPU,castImpl:castImplCPU,ceilImpl:ceilImplCPU,concatImpl:concatImplCPU,equalImpl:equalImplCPU,expImpl:expImplCPU,expm1Impl:expm1ImplCPU,floorImpl:floorImplCPU,floorDivImpl:floorDivImplCPU,gatherNdImpl:gatherNdImplCPU,gatherV2Impl:gatherV2ImplCPU,greaterEqualImpl:greaterEqualImplCPU,greaterImpl:greaterImplCPU,lessEqualImpl:lessEqualImplCPU,lessImpl:lessImplCPU,logImpl:logImplCPU,maxImpl:maxImplCPU,maximumImpl:maximumImplCPU,minimumImpl:minimumImplCPU,multiplyImpl:multiplyImplCPU,negImpl:negImplCPU,notEqualImpl:notEqualImplCPU,prodImpl:prodImplCPU,rangeImpl:rangeImplCPU,rsqrtImpl:rsqrtImplCPU,scatterImpl:scatterImplCPU,simpleAbsImpl:simpleAbsImplCPU,sliceImpl:sliceImplCPU,stridedSliceImpl:stridedSliceImplCPU,stringNGramsImpl:stringNGramsImplCPU,subImpl:subImplCPU,tileImpl:tileImplCPU,topKImpl:topKImplCPU,transposeImpl:transposeImplCPU,uniqueImpl:uniqueImplCPU}=shared;/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const abs=unaryKernelFunc({opType:UnaryOpType.ABS,cpuKernelImpl:simpleAbsImplCPU}),absConfig={kernelName:Abs,backendName:"webgpu",kernelFunc:abs};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const acos=unaryKernelFunc({opType:UnaryOpType.ACOS}),acosConfig={kernelName:Acos,backendName:"webgpu",kernelFunc:acos};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const acosh=unaryKernelFunc({opType:UnaryOpType.ACOSH}),acoshConfig={kernelName:Acosh,backendName:"webgpu",kernelFunc:acosh};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const addKernelFunc=binaryKernelFunc({opType:BinaryOpType.ADD,cpuKernelImpl:addImplCPU,supportsComplex:!0}),addConfig={kernelName:Add,backendName:"webgpu",kernelFunc:addKernelFunc};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AddNPackedProgram{constructor(e){this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e[0],this.variableNames=e.map((t,r)=>`T${r}`),this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}getUserCode(){const e=[];this.variableNames.forEach(s=>{e.push(`let v${s} = get${s}ByOutputCoords(coords);`)});const t=this.variableNames.map(s=>`v${s}`).join(" + ");return`
      ${getMainHeaderString("index")} {
        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if (flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            ${e.join(`
        `)}
            setOutputAtIndex(flatIndex, ${t});
          }
        }
      }
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function addN(n){const{inputs:e,backend:t}=n,r=e;if(r.length===1)return identity({inputs:{x:r[0]},backend:t});const s=r.map(l=>l.dtype).reduce((l,u)=>upcastType(l,u)),a=r.map(l=>l.shape),i=new AddNPackedProgram(a);return t.runWebGPUProgram(i,r,s)}const addNConfig={kernelName:AddN,backendName:"webgpu",kernelFunc:addN};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TransposeSharedProgram{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[16,16,1];const r=new Array(e.length);for(let s=0;s<r.length;s++)r[s]=e[t[s]];this.outputShape=r,this.dispatchLayout={x:[0],y:[1]},this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize,[1,1,1]),this.shaderKey="transposeShared"}getUserCode(){assert(this.workgroupSize[0]===this.workgroupSize[1],()=>`Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`);const e=this.workgroupSize[0];return`
      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0]+1}>, ${this.workgroupSize[0]}>;
      ${getMainHeaderString()} {
        var x = i32(workgroupId.x) * ${e} + i32(localId.x);
        var y = i32(workgroupId.y) * ${e} + i32(localId.y);
        let width = uniforms.outShape[0];
        let height = uniforms.outShape[1];
        if (x < width && y < height) {
          tile[localId.y][localId.x] = f32(A[y * width + x]);
        }
        workgroupBarrier();

        x = i32(workgroupId.y) * ${e} + i32(localId.x);
        y = i32(workgroupId.x) * ${e} + i32(localId.y);
        if (x < height && y < width) {
          setOutputAtIndex((y * height + x), tile[localId.x]
            [localId.y]);
        }
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TransposeProgram{constructor(e,t){this.variableNames=["A"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0;const r=new Array(e.length);for(let s=0;s<r.length;s++)r[s]=e[t[s]];this.outputShape=r,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.newDim=t,this.shaderKey=`transpose_${t}`}getUserCode(){const e=getCoordsDataType(this.outputShape.length),t=getSwitchedCoords(this.newDim);return`
      ${getMainHeaderString("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(
              ${e}(${t}), uniforms.aShape)]);
          }
        }
      }
    `}}function getSwitchedCoords(n){const e=n.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const t=new Array(e);for(let r=0;r<n.length;r++)t[n[r]]=`coords.${getCoordsXYZ(r)}`;return t.join()}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transpose(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{perm:a}=r,i=t,l=s.shape.length,u=new Array(l);for(let f=0;f<u.length;f++)u[f]=s.shape[a[f]];if(t.shouldExecuteOnCPU([s])){const c=i.tensorMap.get(s.dataId).values,o=transposeImplCPU(c,s.shape,s.dtype,a,u);return t.makeTensorInfo(u,s.dtype,o)}if(s.shape.length===2&&arraysEqual(a,[1,0])){const f=new TransposeSharedProgram(s.shape,a);return i.runWebGPUProgram(f,[s],s.dtype)}const h=new TransposeProgram(s.shape,a);return i.runWebGPUProgram(h,[s],s.dtype)}const transposeConfig={kernelName:Transpose,backendName:"webgpu",kernelFunc:transpose};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ReduceProgram{constructor(e,t,r){this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[e.batchSize,e.inSize];const[s]=computeOutAndReduceShapes(this.inputShape,[1]);this.outputShape=s.length===0?[1]:s,e.inSize>=32768&&r>=512?this.workgroupSize=[512,1,1]:e.inSize>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=t,this.shaderKey=`reduce_${t}`}getUserCode(){let e="",t="0.0";const r=this.workgroupSize[0];this.reduceType==="min"||this.reduceType==="max"?(e=`
         if (isnan(candidate)) {
          bestValue = uniforms.NAN;
         } else if (!isnan(bestValue) && candidate ${this.reduceType==="min"?"<":">"} bestValue)
           {  bestValue = candidate; }`,t="f32(x[offset])"):this.reduceType==="sum"||this.reduceType==="mean"?e=" bestValue = bestValue + candidate; ":this.reduceType==="prod"?(e=" bestValue = bestValue * candidate; ",t="1.0"):this.reduceType==="all"?(e=" bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ",t="1.0"):this.reduceType==="any"&&(e=" bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ",t="0.0");const s=this.reduceType==="mean"?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);";return`
       fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
       }

       ${`
         var<workgroup> xBestValues : array<f32, ${r}>;
       `}
       fn getOffset(outputIndex : i32) -> i32 {
         let outputCoords = getCoordsFromIndex(outputIndex);
         let offset = ${this.outputShape.length===1?"outputCoords":"outputCoords[0]"} * uniforms.reduceSize;
          return offset;
       }
       ${getMainHeaderString("index")} {
         let outputIndex = index / ${r};
         let offset = getOffset(outputIndex);
         var bestValue = ${t};
         let Length = uniforms.reduceSize;
         let WorkPerThread = DIV_CEIL(u32(Length), ${r}u);
         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;
             k = k + ${r}) {
           let candidate = f32(x[offset + k]);
           ${e}
         }
         xBestValues[localId.x] = bestValue;
         workgroupBarrier();

         var reduceSize = min(u32(Length), ${r}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            ${e}
            xBestValues[localId.x] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (localId.x == 0u && outputIndex < uniforms.size) {
          ${s}
        }
       }
     `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RETURN_TYPES={mean:"float32",all:"bool",any:"bool"};function reduce(n,e,t,r,s){const a=n.shape.length,i=[],l=parseAxisParam(e,n.shape);let u=l;const h=getAxesPermutation(u,a);let f=n;h!=null&&(f=transpose({inputs:{x:n},attrs:{perm:h},backend:s}),u=getInnerMostAxes(u.length,a),i.push(f)),assertAxesAreInnerMostDims(r,u,a);const[c,o]=computeOutAndReduceShapes(f.shape,u);let d=c;t&&(d=expandShapeToKeepDim(c,l));let m;if((r==="max"||r==="prod")&&s.shouldExecuteOnCPU([f])){const g=s.tensorMap.get(f.dataId).values;switch(r){case"max":const y=maxImplCPU(g,sizeFromShape(o),d,n.dtype);m=s.makeTensorInfo(d,n.dtype,y);break;case"prod":const{outVals:$,outShape:b,outDtype:x}=prodImplCPU(f.shape,f.dtype,g,u);m=s.makeTensorInfo(b,x,$);break;default:throw new Error(`${r} CPU implementation is not yet supported.`)}}else{const g=sizeFromShape(o),$=sizeFromShape(f.shape)/g,b={windowSize:g,inSize:g,batchSize:$,outSize:1},x=RETURN_TYPES[r]||sumOutType(n.dtype),w=[{type:"int32",data:[g]}],v=new ReduceProgram(b,r,s.device.limits.maxComputeWorkgroupSizeX),S=s.runWebGPUProgram(v,[f],x,w);i.push(S),m=reshape$1({inputs:{x:S},attrs:{shape:d},backend:s})}return i.forEach(g=>s.disposeData(g.dataId)),m}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function all(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{keepDims:a,axis:i}=r;return reduce(s,i,a,"all",t)}const allConfig={kernelName:All,backendName:"webgpu",kernelFunc:all};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function any(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{keepDims:a,axis:i}=r;return reduce(s,i,a,"any",t)}const anyConfig={kernelName:Any,backendName:"webgpu",kernelFunc:any};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ArgMinMaxProgram{constructor(e,t,r){this.workgroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0;const s=[t];this.op=r==="min"?"<":">";const[a,i]=computeOutAndReduceShapes(e,s);this.outputShape=a.length===0?[1]:a,this.dispatchLayout=flatDispatchLayout(this.outputShape),sizeFromShape(i)<32?(this.type="plain",this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize)):(this.type="shared",this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=e,this.shaderKey=`argMinMax_${this.op}_${this.type}`}getUserCode(){const e=this.workgroupSize[0],t=()=>this.inputShape.length===1?"uniforms.xShape":`uniforms.xShape.${getCoordsXYZ(this.inputShape.length-1)}`,r=()=>{let s="";if(this.outputShape.length===1)this.inputShape.length!==1&&(s+="outputCoords,");else for(let a=0;a<this.outputShape.length;a++)s+=`outputCoords.${getCoordsXYZ(a)},`;return s};return this.type==="shared"?`
      fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
      }

      ${`
      var<workgroup> xBestIndices : array<i32, ${e}>;
      var<workgroup> xBestValues : array<f32, ${e}>;
    `}

      ${getMainHeaderString("index")} {
        let outputIndex = index / ${e};
        let reduceLength = ${t()};

        var bestIndex = i32(localId.x);
        var bestValue = uniforms.infinityValue;
        let outputCoords = getCoordsFromIndex(outputIndex);
        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;
            k = k + ${e}) {
          let candidate = getX(${r()} k);
          if (!isnan(candidate) && candidate ${this.op} bestValue) {
            bestValue = candidate;
            bestIndex = k;
          }
        }
        xBestValues[localId.x] = bestValue;
        xBestIndices[localId.x] = bestIndex;
        workgroupBarrier();

        var reduceSize = min(u32(reduceLength), ${e}u);
        for (var currentSize = reduceSize / 2u; reduceSize > 1u;
            currentSize = reduceSize / 2u) {
          let interval = DIV_CEIL(reduceSize, 2u);
          if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              xBestValues[localId.x] = bestValue;
              xBestIndices[localId.x] = xBestIndices[localId.x + interval];
            }
          }
          reduceSize = interval;
          workgroupBarrier();
        }

        if (localId.x == 0u && outputIndex < uniforms.size) {
          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);
        }
      }
    `:`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let outputCoords = getCoordsFromIndex(index);
          var bestIndex = 0;
          var bestValue = getX(${r()} 0);
          let reduceLength = ${t()};
          for (var i = 1; i < reduceLength; i++) {
            let candidate = getX(${r()} i);
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              bestIndex = i;
            }
          }
          setOutputAtIndexI32(index, bestIndex);
        }
      }
      `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMax(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a}=r;let i=parseAxisParam(a,s.shape);const l=getAxesPermutation(i,s.shape.length);let u=s;const h=[];l!=null&&(u=transpose({inputs:{x:s},backend:t,attrs:{perm:l}}),h.push(u),i=getInnerMostAxes(i.length,u.shape.length)),assertAxesAreInnerMostDims("argMax",[i[0]],u.shape.length);const f=new ArgMinMaxProgram(u.shape,i[0],"max"),c=[{type:"float32",data:[Number.NEGATIVE_INFINITY]}],o=t.runWebGPUProgram(f,[u],"int32",c);return h.forEach(d=>t.disposeData(d.dataId)),o}const argMaxConfig={kernelName:ArgMax,backendName:"webgpu",kernelFunc:argMax};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMin(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a}=r;let i=parseAxisParam(a,s.shape);const l=getAxesPermutation(i,s.shape.length);let u=s;const h=[];l!=null&&(u=transpose({inputs:{x:s},backend:t,attrs:{perm:l}}),h.push(u),i=getInnerMostAxes(i.length,u.shape.length)),assertAxesAreInnerMostDims("argMin",[i[0]],u.shape.length);const f=new ArgMinMaxProgram(u.shape,i[0],"min"),c=[{type:"float32",data:[Number.POSITIVE_INFINITY]}],o=t.runWebGPUProgram(f,[u],"int32",c);return h.forEach(d=>t.disposeData(d.dataId)),o}const argMinConfig={kernelName:ArgMin,backendName:"webgpu",kernelFunc:argMin};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const asin=unaryKernelFunc({opType:UnaryOpType.ASIN}),asinConfig={kernelName:Asin,backendName:"webgpu",kernelFunc:asin};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const asinh=unaryKernelFunc({opType:UnaryOpType.ASINH}),asinhConfig={kernelName:Asinh,backendName:"webgpu",kernelFunc:asinh};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atan=unaryKernelFunc({opType:UnaryOpType.ATAN}),atanConfig={kernelName:Atan,backendName:"webgpu",kernelFunc:atan};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atan2=binaryKernelFunc({opType:BinaryOpType.ATAN2}),atan2Config={kernelName:Atan2,backendName:"webgpu",kernelFunc:atan2};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atanh=unaryKernelFunc({opType:UnaryOpType.ATANH}),atanhConfig={kernelName:Atanh,backendName:"webgpu",kernelFunc:atanh};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class PoolWithFilterSizeEqualsOneProgram{constructor(e){this.variableNames=["x"],this.uniforms="strides : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}getUserCode(){return`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];

          let xRCCorner = coords.yz * uniforms.strides;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          let value = getX(batch, xRCorner, xCCorner, d);
          setOutputAtIndex(index, value);
        }
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Pool2DProgram{constructor(e,t,r=!1,s=!1,a=!1){if(this.variableNames=["x"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workgroupSize=[128,1,1],this.size=!0,t==="avg"&&r)throw new Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=r,this.flattenPositions=s,this.includeBatchIndex=a,this.shaderKey=`pool2D_${t}_${r}_${s}_${a}`}getUserCode(){let e;this.poolType==="avg"?e="resultValue = resultValue + value; count = count + 1.0;":this.computePositions?e=`let currMaxValue = mix(value, maxValue, maxValueFound);
      if (value >= currMaxValue) {
        maxValue = value;
        maxValueFound = 1.0;
        maxPosition = ${this.flattenPositions?this.includeBatchIndex?"((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"wR * uniforms.filterDims.y + wC"};
      }`:e="resultValue = max(value, resultValue);";let t="resultValue";return this.poolType==="avg"&&(t="resultValue / max(count, 1.0)"),`
      ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];
          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          ${this.computePositions?`var maxValue = 0.0;
            var maxValueFound = 0.0;
            var maxPosition = 0;`:`var resultValue = ${this.poolType==="avg"?"0.0":"-1.0 / pow(10.0, -20.0)"};`}

          var count = 0.0;
          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {
            let xR = xRCorner + wR;

            if (xR < 0 || xR >= uniforms.convDims.x) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {
              let xC = xCCorner + wC;
              if (xC < 0 || xC >= uniforms.convDims.y) {
                continue;
              }

              let value = getX(batch, xR, xC, d);
              ${e}
            }
          }

          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${t});`}
        }
      }
    `}}class Pool3DProgram{constructor(e,t,r=!1,s=!1,a=!1){if(this.variableNames=["x"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,",this.workgroupSize=[128,1,1],this.size=!0,t==="avg"&&r)throw new Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=r,this.flattenPositions=s,this.includeBatchIndex=a,this.shaderKey=`pool3D_${t}_${r}_${s}_${a}`}getUserCode(){let e;this.poolType==="avg"?e="resultValue += value; count += 1.0;":this.computePositions?e=`let currMaxValue = mix(value, maxValue, maxValueFound);
      if (value >= currMaxValue) {
        maxValue = value;
        maxValueFound = 1.0;
        maxPosition = ${this.flattenPositions?this.includeBatchIndex?"(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC"};
      }`:e="resultValue = max(value, resultValue);";let t="resultValue";return this.poolType==="avg"&&(t="resultValue / max(count, 1.0)"),`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords.x;
          let ch = coords.u;

          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;
          let xDCorner = xCorner.x;
          let xRCorner = xCorner.y;
          let xCCorner = xCorner.z;

          ${this.computePositions?`var maxValue = 0.0;
            var maxValueFound = 0.0;
            var maxPosition = 0;`:`var resultValue = ${this.poolType==="avg"?"0.0":"-1.0 / pow(10.0, -20.0)"};`}

          var count = 0.0;
          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {
            let xD = xDCorner + wD;
            if (xD < 0 || xD >= uniforms.convDims.x) {
              continue;
            }

            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {
              let xR = xRCorner + wR;
              if (xR < 0 || xR >= uniforms.convDims.y) {
                continue;
              }

              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {
                let xC = xCCorner + wC;
                if (xC < 0 || xC >= uniforms.convDims.z) {
                  continue;
                }

                let value = getX(batch, xD, xR, xC, ch);
                ${e}
              }
            }
          }

          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${t});`}
        }
      }
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function max(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{reductionIndices:a,keepDims:i}=r;return reduce(s,a,i,"max",t)}const maxConfig={kernelName:Max,backendName:"webgpu",kernelFunc:max};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mean(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{keepDims:a,axis:i}=r;return reduce(s,i,a,"mean",t)}const meanConfig={kernelName:Mean,backendName:"webgpu",kernelFunc:mean};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function poolImpl(n,e,t,r){if(e.filterWidth===1&&e.filterHeight===1&&arraysEqual(e.inShape,e.outShape))return identity({inputs:{x:n},backend:r});if(e.filterWidth===e.inWidth&&e.filterHeight===e.inHeight&&e.batchSize===1&&e.padInfo.type==="VALID"){const i=n.shape.length,l=reshape$1({inputs:{x:n},backend:r,attrs:{shape:[n.shape[i-3]*n.shape[i-2],n.shape[i-1]]}});let u;t==="avg"?u=mean({inputs:{x:l},backend:r,attrs:{axis:0,keepDims:!1}}):(assert(t==="max",()=>`Invalid pool type ${t}`),u=max({inputs:{x:l},backend:r,attrs:{reductionIndices:0,keepDims:!1}}));const h=reshape$1({inputs:{x:u},backend:r,attrs:{shape:e.outShape}});return r.disposeData(l.dataId),r.disposeData(u.dataId),h}let s;const a=[{type:"int32",data:[e.strideHeight,e.strideWidth]}];return e.filterHeight===1&&e.filterWidth===1?s=new PoolWithFilterSizeEqualsOneProgram(e):(t==="avg"?s=new Pool2DProgram(e,"avg"):(assert(t==="max",()=>`Invalid pool type ${t}`),s=new Pool2DProgram(e,"max")),a.push({type:"int32",data:[e.padInfo.top,e.padInfo.left]},{type:"int32",data:[e.dilationHeight,e.dilationWidth]},{type:"int32",data:[e.inHeight,e.inWidth]},{type:"int32",data:[e.effectiveFilterHeight,e.effectiveFilterWidth]})),r.runWebGPUProgram(s,[n],n.dtype,a)}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=r,h=1,f=computePool2DInfo(s.shape,a,i,h,l,u);return poolImpl(s,f,"avg",t)}const avgPoolConfig={kernelName:AvgPool,backendName:"webgpu",kernelFunc:avgPool};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3D(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{filterSize:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:h}=r,f=[1,1,1],c=computePool3DInfo(s.shape,a,i,f,l,h,u),o=new Pool3DProgram(c,"avg"),d=[{type:"int32",data:[c.strideDepth,c.strideHeight,c.strideWidth]},{type:"int32",data:[c.padInfo.front,c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.inDepth,c.inHeight,c.inWidth]},{type:"int32",data:[c.effectiveFilterDepth,c.effectiveFilterHeight,c.effectiveFilterWidth]}];return t.runWebGPUProgram(o,[s],s.dtype,d)}const avgPool3DConfig={kernelName:AvgPool3D,backendName:"webgpu",kernelFunc:avgPool3D};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AvgPool2DBackpropProgram{constructor(e){this.variableNames=["dy"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32, avgMultiplier : f32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool2DBackprop"}getUserCode(){return`
      ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d = coords[3];

        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;
        let dyRCorner = dyRCCorner.x;
        let dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }
            let idyC = i32(dyC);

            let dyValue = getDy(batch, idyR, idyC, d);

            dotProd = dotProd + dyValue * uniforms.avgMultiplier;
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}class AvgPool3DBackpropProgram{constructor(e){this.variableNames=["dy"],this.uniforms=`strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,
       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool3DBackprop"}getUserCode(){return`
      ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let ch = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyDCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {
          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);

          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {
            continue;
          }
          let idyD = i32(dyD);

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let dyValue = getDy(batch, idyD, idyR, idyC, ch);
              dotProd += dyValue * uniforms.avgMultiplier;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3DGrad(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:a}=e,i=a,{filterSize:l,strides:u,pad:h,dimRoundingMode:f}=r,c=computePool3DInfo(i.shape,l,u,1,h,f),o=new AvgPool3DBackpropProgram(c),d=1/(c.filterDepth*c.filterHeight*c.filterWidth),m=[{type:"int32",data:[c.strideDepth,c.strideHeight,c.strideWidth]},{type:"int32",data:[c.effectiveFilterDepth-1-c.padInfo.front,c.effectiveFilterHeight-1-c.padInfo.top,c.effectiveFilterWidth-1-c.padInfo.left]},{type:"int32",data:[c.effectiveFilterDepth,c.effectiveFilterHeight,c.effectiveFilterWidth]},{type:"int32",data:[c.outDepth]},{type:"int32",data:[c.outHeight]},{type:"int32",data:[c.outWidth]},{type:"float32",data:[d]}];return t.runWebGPUProgram(o,[s],i.dtype,m)}const avgPool3DGradConfig={kernelName:AvgPool3DGrad,backendName:"webgpu",kernelFunc:avgPool3DGrad};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPoolGrad(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:a}=e,i=a;assertNotComplex([s,a],"avgPoolGrad");const{filterSize:l,strides:u,pad:h}=r,f=computePool2DInfo(i.shape,l,u,1,h),c=new AvgPool2DBackpropProgram(f),o=1/(f.filterHeight*f.filterWidth),d=[{type:"int32",data:[f.strideHeight,f.strideWidth]},{type:"int32",data:[f.effectiveFilterHeight-1-f.padInfo.top,f.effectiveFilterWidth-1-f.padInfo.left]},{type:"int32",data:[f.dilationHeight,f.dilationWidth]},{type:"int32",data:[f.effectiveFilterHeight,f.effectiveFilterWidth]},{type:"int32",data:[f.outHeight]},{type:"int32",data:[f.outWidth]},{type:"float32",data:[o]}];return t.runWebGPUProgram(c,[s],i.dtype,d)}const avgPoolGradConfig={kernelName:AvgPoolGrad,backendName:"webgpu",kernelFunc:avgPoolGrad};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchMatMul(n){const{inputs:e,backend:t,attrs:r}=n,{a:s,b:a}=e,{transposeA:i,transposeB:l}=r;return batchMatMulImpl({a:s,b:a,transposeA:i,transposeB:l,backend:t})}const batchMatMulConfig={kernelName:BatchMatMul,backendName:"webgpu",kernelFunc:batchMatMul};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SliceProgram{constructor(e,t){this.variableNames=["source"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.rank=t.length,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.start=e,this.uniforms=`start : ${getCoordsDataType(e.length)}, `,this.shaderKey="slice"}getUserCode(){const e=getCoordsDataType(this.rank),t=getCoords$1(this.rank);let r;return this.start.length===1?r=this.outputShape.map((a,i)=>"sourceLoc = uniforms.start + coords;"):r=this.outputShape.map((a,i)=>`sourceLoc.${coords[i]} = uniforms.start.${getCoordsXYZ(i)} + coords.${coords[i]};`),`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          var sourceLoc : ${e};
          let coords = getCoordsFromIndex(index);
          ${r.join(`
`)}
          setOutputAtIndex(index, getSource(${t}));
        }
      }
    `}}const coords=["x","y","z","w","u","v"];function getCoords$1(n){if(n===1)return"sourceLoc";if(n<=6)return coords.slice(0,n).map(e=>`sourceLoc.${e}`).join(",");throw Error(`Slicing for rank ${n} is not yet supported`)}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{begin:a,size:i}=r,[l,u]=parseSliceParams(s,a,i);if(assertParamsValid(s,l,u),t.shouldExecuteOnCPU([s])||s.dtype==="string"){const c=t.tensorMap.get(s.dataId),o=sliceImplCPU(c.values,l,u,s.shape,s.dtype);return t.makeTensorInfo(u,s.dtype,o)}if(sizeFromShape(u)===0)return t.makeTensorInfo(u,s.dtype,[]);const h=new SliceProgram(l,u),f=[{type:"int32",data:l}];return t.runWebGPUProgram(h,[s],s.dtype,f)}const sliceConfig={kernelName:Slice,backendName:"webgpu",kernelFunc:slice};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchToSpaceND=n=>{const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockShape:a,crops:i}=r;assert(s.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");const l=a.reduce((b,x)=>b*x),u=getReshaped(s.shape,a,l),h=getPermuted(u.length,a.length),f=getReshapedPermuted(s.shape,a,l),c=getSliceBeginCoords(i,a.length),o=getSliceSize(f,i,a.length),d=[],m=reshape$1({inputs:{x:s},backend:t,attrs:{shape:u}}),g=transpose({inputs:{x:m},backend:t,attrs:{perm:h}}),y=reshape$1({inputs:{x:g},backend:t,attrs:{shape:f}}),$=slice({inputs:{x:y},backend:t,attrs:{begin:c,size:o}});return d.push(m),d.push(g),d.push(y),d.forEach(b=>t.disposeData(b.dataId)),$},batchToSpaceNDConfig={kernelName:BatchToSpaceND,backendName:"webgpu",kernelFunc:batchToSpaceND};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const writeSnippet=`
  fn bincount_write(index: i32, value: f32) {
    ${atomicAddSnippet("&result[index]","value","float32")}
  }
`,binaryWriteSnippet=`
  fn bincount_write(index: i32, value: f32) {
    atomicStore(&result[index], bitcast<i32>(value));
  }
`;class BincountProgram{constructor(e,t,r=!1){this.outputShape=[],this.variableNames=["x"],this.uniforms="binCountSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.hasWeights=!0,this.binaryOutput=!1,this.outputShape=e,this.rank=e.length,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.binaryOutput=r,r&&(this.atomic=!1),this.hasWeights=t,this.hasWeights&&this.variableNames.push("w"),this.shaderKey=`bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`}getUserCode(){return`
    ${this.binaryOutput?binaryWriteSnippet:writeSnippet}
  ${getMainHeaderString("index")} {
    ${this.rank===1?`if (index < uniforms.xShape) {
      let indexVal = i32(getX(index));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput?1:this.hasWeights?"getW(index)":"1."};
        bincount_write(indexVal, value);
      }
    }`:`let coord = getCoordsFromIndex(index);
    if (coordsInBounds2D(coord, uniforms.xShape)) {
      let indexVal = i32(getX(coord[0], coord[1]));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput?1:this.hasWeights?"getW(coord[0], coord[1])":"1."};
        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);
      }
    }`}
  }
  `}}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincount(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,weights:a}=e,{size:i}=r,l=sizeFromShape(s.shape),h=sizeFromShape(a.shape)>0,f=[i],c=a.dtype,o=fill({backend:t,attrs:{shape:f,value:0,dtype:c}}),d=new BincountProgram([l],h),m=[{type:"int32",data:[i]}],g=h?[s,a]:[s];return t.runWebGPUProgram(d,g,c,m,o)}const bincountConfig={kernelName:Bincount,backendName:"webgpu",kernelFunc:bincount};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class BroadcastArgsProgram{constructor(e){this.outputShape=[],this.variableNames=["s0","s1"],this.uniforms="s0Size : i32, s1Size : i32, ",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="broadcastArgs"}getUserCode(){return`
  ${getMainHeaderString("index")} {
    if (index < uniforms.size) {
      var s0 = 1.0;
      var s1 = 1.0;
      let indexS0 = index - uniforms.size + uniforms.s0Size;
      let indexS1 = index - uniforms.size + uniforms.s1Size;
      if (indexS0 >= 0) {
        s0 = getS0(indexS0);
      }
      if (indexS1 >= 0) {
        s1 = getS1(indexS1);
      }

      if (s0 == 1.0) {
        setOutputAtIndex(index, s1);
      } else if (s1 == 1.0) {
        setOutputAtIndex(index, s0);
      } else if (s0 != s1) {
        setOutputAtIndex(index, uniforms.NAN);
      } else {
        setOutputAtIndex(index, s0);
      }
    }
  }
  `}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastArgs(n){const{inputs:e,backend:t}=n,{s0:r,s1:s}=e;if(t.shouldExecuteOnCPU([r,s])){const f=t.tensorMap.get(r.dataId),c=t.tensorMap.get(s.dataId),o=f.values,d=c.values,m=assertAndGetBroadcastShape(Array.from(o),Array.from(d));return t.makeTensorInfo([m.length],"int32",Int32Array.from(m))}const a=sizeFromShape(r.shape),i=sizeFromShape(s.shape),l=Math.max(a,i),u=new BroadcastArgsProgram(l),h=[{type:"int32",data:[a]},{type:"int32",data:[i]}];return t.runWebGPUProgram(u,[r,s],"int32",h)}const broadcastArgsConfig={kernelName:BroadcastArgs,backendName:"webgpu",kernelFunc:broadcastArgs};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const notEqual=binaryKernelFunc({opType:BinaryOpType.NOT_EQUAL,dtype:"bool",cpuKernelImpl:notEqualImplCPU}),notEqualConfig={kernelName:NotEqual,backendName:"webgpu",kernelFunc:notEqual};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function real(n){const{inputs:e,backend:t}=n,{input:r}=e,s=t.tensorMap.get(r.dataId);return identity({inputs:{x:s.complexTensorInfos.real},backend:t})}const realConfig={kernelName:Real,backendName:"webgpu",kernelFunc:real};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function int(n,e){const t=new UnaryOpProgram(n.shape,UnaryOpType.TO_INT),r=e.runWebGPUProgram(t,[n],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cast(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{dtype:a}=r;if(a==="complex64"){if(s.dtype==="complex64")return identity({inputs:{x:s},backend:t});const i=zeros(s.shape),l=cast({inputs:{x:s},backend:t,attrs:{dtype:"float32"}}),u=complex({inputs:{real:l,imag:i},backend:t});return i.dispose(),t.disposeData(l.dataId),u}if(s.dtype==="complex64"){const i=real({inputs:{input:s},backend:t}),l=cast({inputs:{x:i},backend:t,attrs:{dtype:a}});return t.disposeData(i.dataId),l}if(!hasEncodingLoss(s.dtype,a)){const i=identity({inputs:{x:s},backend:t});return{dataId:i.dataId,shape:i.shape,dtype:a}}if(t.shouldExecuteOnCPU([s])){const i=t.tensorMap.get(s.dataId).values,[l,u,h]=castImplCPU(i,s.shape,s.dtype,a);return t.makeTensorInfo(l,u,h)}if(a==="int32")return int(s,t);if(a==="bool"){const i=t.makeTensorInfo([],"bool",getTypedArrayFromDType("bool",1)),u=notEqual({inputs:{a:s,b:i},backend:t});return t.disposeData(i.dataId),u}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${a}`)}const castConfig={kernelName:Cast,backendName:"webgpu",kernelFunc:cast};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ceil=unaryKernelFunc({opType:UnaryOpType.CEIL,cpuKernelImpl:ceilImplCPU}),ceilConfig={kernelName:Ceil,backendName:"webgpu",kernelFunc:ceil};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ClipVec4Program{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workgroupSize=[64,1,1],this.outputComponent=4,this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}getUserCode(){return`
      ${getMainHeaderString("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          var clampedValue = clamp(
              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));
          clampedValue = select(clampedValue, value, isnanVec4(value));
          setOutputAtIndex(index, clampedValue);
        }
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ClipProgram{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="clip"}getUserCode(){return`
      ${getMainHeaderString("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          if (isnan(value)) {
            setOutputAtIndex(index, value);
            return;
          }
          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));
        }
      }
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function clipByValue(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{clipValueMin:a,clipValueMax:i}=r;let l;const u=[{type:"float32",data:[a]},{type:"float32",data:[i]}];return sizeFromShape(s.shape)%4===0?l=new ClipVec4Program(s.shape):l=new ClipProgram(s.shape),t.runWebGPUProgram(l,[s],s.dtype,u)}const clipByValueConfig={kernelName:ClipByValue,backendName:"webgpu",kernelFunc:clipByValue};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ComplexAbsProgram{constructor(e){this.outputShape=[],this.variableNames=["real","imag"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="complexAbs"}getUserCode(){return`
    ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let re = abs(getRealByOutputIndex(index));
        let im = abs(getImagByOutputIndex(index));
        let mx = max(re, im);

        // The length function in wgsl may be not underflow-safe on some GPUs.
        // So the safe solution is to ensure underflow-safety in all cases.
        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));
      }
    }
  `}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeComplexComponentTensorInfo(n,e){return{dataId:e.dataId,dtype:e.dtype,shape:n.shape}}function complexAbs(n){const{inputs:e,backend:t}=n,{x:r}=e,s=t.tensorMap.get(r.dataId),a=new ComplexAbsProgram(r.shape),i=[makeComplexComponentTensorInfo(r,s.complexTensorInfos.real),makeComplexComponentTensorInfo(r,s.complexTensorInfos.imag)];return t.runWebGPUProgram(a,i,i[0].dtype)}const complexAbsConfig={kernelName:ComplexAbs,backendName:"webgpu",kernelFunc:complexAbs};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ConcatProgram{constructor(e){this.uniforms="",this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=computeOutShape$1(e,1),this.variableNames=e.map((t,r)=>`T${r}`),this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.offsetLength=e.length-1;for(let t=0;t<this.offsetLength;t++)this.uniforms+=`offset${t} : i32,`;this.shaderKey="concat"}getUserCode(){const e=[];if(this.offsetLength>0){e.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(let a=1;a<this.offsetLength;a++)e.push(`else if (yC < uniforms.offset${[a]}){ setOutputAtCoords(coords.x, coords.y, getT${a}(yR, yC - uniforms.offset${a-1})); }`);const r=this.offsetLength,s=this.offsetLength-1;e.push(`else { setOutputAtCoords(coords.x, coords.y, getT${r}(yR, yC - uniforms.offset${s})); }`)}else e.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return`
      ${getMainHeaderString("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            let yR = coords.x;
            let yC = coords.y;

            ${e.join(`
        `)}
          }
        }
      }
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function imag(n){const{inputs:e,backend:t}=n,{input:r}=e,s=t.tensorMap.get(r.dataId);return identity({inputs:{x:s.complexTensorInfos.imag},backend:t})}const imagConfig={kernelName:Imag,backendName:"webgpu",kernelFunc:imag};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concatImpl(n,e,t){const r=n[0].dtype;if(r==="complex64"){const m=n.map(x=>real({inputs:{input:x},backend:t})),g=n.map(x=>imag({inputs:{input:x},backend:t})),y=concatImpl(m,e,t),$=concatImpl(g,e,t),b=complex({inputs:{real:y,imag:$},backend:t});return m.forEach(x=>t.disposeData(x.dataId)),g.forEach(x=>t.disposeData(x.dataId)),t.disposeData(y.dataId),t.disposeData($.dataId),b}let s=t.shouldExecuteOnCPU(n);if(r==="string"&&(s=!0),s){const m=n.map(v=>{const T=[-1,sizeFromShape(v.shape.slice(e))];return reshape$1({inputs:{x:v},backend:t,attrs:{shape:T}})}),g=m.map(v=>({vals:t.readSync(v.dataId),shape:v.shape})),y=computeOutShape$1(m.map(v=>v.shape),1),$=m[0].shape[0]===1,b=concatImplCPU(g,y,r,$),x=computeOutShape$1(n.map(v=>v.shape),e),w=t.makeTensorInfo(x,r,b);return m.forEach(v=>t.disposeData(v.dataId)),w}const a=t.device.limits.maxStorageBuffersPerShaderStage-1;if(n.length>a){const m=[];for(let y=0;y<n.length;y+=a){const $=n.slice(y,y+a);m.push(concatImpl($,e,t))}const g=concatImpl(m,e,t);for(const y of m)t.disposeData(y.dataId);return g}const{tensors2D:i,outShape:l}=computeTensors2D(n,e,t),u=i.map(m=>m.shape),h=new ConcatProgram(u),f=[],c=new Array(u.length-1);if(c.length>0){c[0]=u[0][1],f.push({type:"int32",data:[c[0]]});for(let m=1;m<c.length;m++)c[m]=c[m-1]+u[m][1],f.push({type:"int32",data:[c[m]]})}const o=t.runWebGPUProgram(h,i,i[0].dtype,f);i.forEach(m=>t.disposeData(m.dataId));const d=reshape$1({inputs:{x:o},backend:t,attrs:{shape:l}});return t.disposeData(o.dataId),d}function computeTensors2D(n,e,t){const r=computeOutShape$1(n.map(a=>a.shape),e);return{tensors2D:n.map(a=>reshape$1({inputs:{x:a},backend:t,attrs:{shape:[sizeFromShape(a.shape.slice(0,e)),sizeFromShape(a.shape.slice(e))]}})),outShape:r}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concat(n){const{inputs:e,backend:t,attrs:r}=n,{axis:s}=r,a=parseAxisParam(s,e[0].shape)[0],i=e.map(h=>h.shape);assertParamsConsistent(i,a);const l=computeOutShape$1(e.map(h=>h.shape),a);if(sizeFromShape(l)===0)return t.makeTensorInfo(l,e[0].dtype,[]);const u=e.filter(h=>sizeFromShape(h.shape)>0);return u.length===1?identity({inputs:{x:u[0]},backend:t}):concatImpl(u,a,t)}const concatConfig={kernelName:Concat,backendName:"webgpu",kernelFunc:concat};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2dCommonSnippet(n,e,t,r,s=!1,a=null,i=!1,l=4,u=4,h=4){const f=I=>{switch(I){case 1:return"resData = f32(x[xIndex]);";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = vec4<f32>(x[xIndex / 4]);";default:throw new Error(`innerElementSize ${I} is not supported.`)}},c=I=>{switch(I){case 1:return"return f32(W[row * uniforms.wShape[3] + col]);";case 4:return"return vec4<f32>(W[(row * uniforms.wShape[3] + col) / 4]);";default:throw new Error(`innerElementSize ${I} is not supported.`)}},o=n?`
      let coord = vec4<i32>(batch, xRow, xCol, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, xRow, xCol);
      `,d=n?`
      let coords = vec4<i32>(
        batch,
        row / outWidth,
        row % outWidth,
        col);
      `:`
      let coords = vec4<i32>(
        batch,
        row,
        col / outWidth,
        col % outWidth);
      `,m=n?"uniforms.xShape[1]":"uniforms.xShape[2]",g=n?"uniforms.xShape[2]":"uniforms.xShape[3]",y=n?"row":"col",$=n?"col":"row",b=`
      let inChannels = uniforms.wShape[2];
      let outWidth = ${n?"uniforms.outShape[2]":"uniforms.outShape[3]"};
      let outRow = ${y} / outWidth;
      let outCol = ${y} % outWidth;

      let WRow = ${$} / (uniforms.filterDims[1] * inChannels);
      let WCol = ${$} / inChannels % uniforms.filterDims[1];
      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];
      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];
      let xCh = ${$} % inChannels;
      var resData = ${typeSnippet(l)}(0.0);
      // The bounds checking is always needed since we use it to pad zero for
      // the 'same' padding type.
      if (xRow >= 0 && xRow < ${m} && xCol >= 0 && xCol < ${g}) {
        ${o}
        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);
        ${f(l)}
      }
      return resData;`,x=n?e&&r?`
      ${b}`:`
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${b}
      }
      return ${typeSnippet(l)}(0.0);`:r&&t?`
      ${b}`:`
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${b}
      }
      return ${typeSnippet(l)}(0.0);`,w=`${c(u)}`,v=typeSnippet(h),S=typeSnippet(n?l:u),T=typeSnippet(n?u:l);return`
      ${activationFnSnippet(a,i,h===4,4)}
      fn mm_readA(batch: i32, row : i32, col : i32) -> ${S} {
        ${n?x:w}
      }

      fn mm_readB(batch: i32, row : i32, col : i32) -> ${T} {
        ${n?w:x}
      }

      fn mm_write(batch: i32, row : i32, col : i32, valueIn : ${v}) {
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
        {
        var value = valueIn;
        let outWidth = ${n?"uniforms.outShape[2]":"uniforms.outShape[3]"};
        ${d}
        ${biasActivationSnippet(s,a)}
        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }`}class Conv2DMMProgram{constructor(e,t,r,s,a=!1,i=null,l=!1,u=!1){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.outShape,this.isChannelsLast=e.dataFormat==="channelsLast",this.isVec4=((e.inChannels%4===0||e.inChannels%3===0)&&this.isChannelsLast||e.outWidth%4===0&&!this.isChannelsLast)&&e.outChannels%4===0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workgroupSize=computeWorkgroupSizeForConv2d(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=computeWorkPerThreadForConv2d(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4?(this.outputComponent=4,this.isChannelsLast&&e.inChannels%4!==0?(this.innerElementSize=3,this.variableComponents=[1,4]):(this.innerElementSize=4,this.variableComponents=[4,4]),a&&(this.variableNames.push("bias"),this.variableComponents.push(4)),l&&(this.variableNames.push("preluActivationWeights"),this.variableComponents.push(4))):(this.innerElementSize=this.elementsPerThread[0],a&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights")),this.sequentialAccessByThreads=u,this.addBias=a,this.activation=i,this.hasPreluActivationWeights=l,this.tileAOuter=this.workgroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workgroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workgroupSize[0]*this.innerElementSize,this.workgroupSize[1]),this.fitAOuter=t%this.tileAOuter===0,this.fitBOuter=r%this.tileBOuter===0,this.fitInner=s%this.tileInner===0,this.shaderKey=`conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`}getUserCode(){const e=this.isVec4?makeMatMulPackedVec4Source(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner):makeMatMulPackedSource(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner,!1,null,this.sequentialAccessByThreads),t=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return`
    ${conv2dCommonSnippet(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,t[0],t[1],t[2])}
    ${e}
  `}}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Conv2DNaiveProgram{constructor(e,t=!1,r=null,s=!1){this.variableNames=["x","W"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,",this.workgroupSize=[4,4,8],this.outputShape=e.outShape,this.isChannelsLast=e.dataFormat==="channelsLast",this.dispatchLayout=this.isChannelsLast?{x:[2],y:[1],z:[0,3]}:{x:[3],y:[2],z:[0,1]},this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=t,this.activation=r,this.hasPreluActivationWeights=s,t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`conv2dnaive_${this.activation}_${this.isChannelsLast}`}getUserCode(){return`
       ${activationFnSnippet(this.activation,this.hasPreluActivationWeights,!1,4)}
       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{
         let coords = vec4<i32>(batch, row, col, chan);
         if (coordsInBounds4D(coords, uniforms.xShape)) {
           return  getX(batch, row, col, chan);
         } else {
          return 0.0;
         }
       }
       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{
         let coords = vec4<i32>(row, col, xChannel, outChannel);
         if(coordsInBounds4D(coords, uniforms.wShape)) {
           return getW(row, col, xChannel, outChannel);
          } else {
            return 0.0;
          }
       }
       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {
         let coords = ${this.isChannelsLast?"vec4<i32>(batch, row, col, chan);":"vec4<i32>(batch, chan, row, col);"}
         if (coordsInBounds4D(coords, uniforms.outShape)) {
           var value = valueIn;
           ${biasActivationSnippet(this.addBias,this.activation)}
           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);
         }
       }
       ${getMainHeaderString("index")} {
         let coords = getOutputCoords();
         let batch = coords[0];
         let outChannel = ${this.isChannelsLast?"coords[3];":"coords[1];"}
         let outRow = ${this.isChannelsLast?"coords[1];":"coords[2];"}
         let outCol = ${this.isChannelsLast?"coords[2];":"coords[3];"}
         var acc : f32 = 0.0;
         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {
           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {
             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];
             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];
             for (var xChannel = 0; xChannel < ${this.isChannelsLast?"uniforms.xShape[3];":"uniforms.xShape[1];"} xChannel = xChannel + 1) {
               ${this.isChannelsLast?"let v = readInp(batch, xRow, xCol, xChannel);":"let v = readInp(batch, xChannel, xRow, xCol);"}
               let f = readFilt(row, col, xChannel, outChannel);
               acc = acc + v * f;
             }
           }
         }
         writeResult(batch, outRow, outCol, outChannel, acc);
       }
     `}}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Im2ColProgram{constructor(e,t){this.variableNames=["x"],this.uniforms=`pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,
       inChannels : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=t,this.shaderKey=`im2col_${this.isChannelsLast}`}getUserCode(){const e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,r=this.isChannelsLast?"coords[1]":"coords[2]",s=this.isChannelsLast?"coords[2]":"coords[1]",a=this.isChannelsLast?"getX(batch, xRow, xCol, ch)":"getX(batch, ch, xRow, xCol)";return`
    ${getMainHeaderString("index")} {
      let coords = getCoordsFromIndex(index);
      if(index < uniforms.size) {
        let batch = coords[0];
        let row = ${r};
        let col = ${s};
        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];
        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);
        var value = 0.0;
        if(xRow < uniforms.xShape[${e}] && xRow >= 0) {
          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -
              uniforms.pads[1];
          let xCol = offsetX + uniforms.dilations[1] * ((col %
              uniforms.itemsPerBlockRow) / uniforms.inChannels);
          let ch = col % uniforms.inChannels;
          if(xCol < uniforms.xShape[${t}] && xCol >= 0) {
            value = ${a};
          }
        }
        setOutputAtIndex(index, value);
      }
    }
   `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getShapeForBatchMatMul(n,e){const t=n.length;return t>=3?e?[...n.slice(0,-3),n[t-3]*n[t-2],n[t-1]]:[...n.slice(0,-3),n[t-3],n[t-2]*n[t-1]]:!e&&t===1&&n[0]>1?[n[0],1]:null}function conv2dByMatMul({x:n,filter:e,convInfo:t,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:l=null}){const u=t.dataFormat==="channelsLast",h=!u,f=!1,c=u&&t.filterHeight===t.inHeight&&t.filterWidth===t.inWidth&&t.padInfo.type==="VALID",o=[];let d,m;if(c){const $=t.inHeight*t.inWidth*t.inChannels;d=reshape$1({inputs:{x:n},backend:r,attrs:{shape:[1,t.batchSize,$]}}),m=reshape$1({inputs:{x:e},backend:r,attrs:{shape:[1,$,t.outChannels]}})}else d=reshape$1({inputs:{x:n},backend:r,attrs:{shape:u?[t.batchSize,t.inHeight*t.inWidth,t.inChannels]:[t.batchSize,t.inChannels,t.inHeight*t.inWidth]}}),m=reshape$1({inputs:{x:e},backend:r,attrs:{shape:[1,t.inChannels,t.outChannels]}});if(o.push(d),o.push(m),a!=null){const $=getShapeForBatchMatMul(a.shape,u);$!=null&&(a=reshape$1({inputs:{x:a},backend:r,attrs:{shape:$}}),o.push(a))}if(s!=null){const $=getShapeForBatchMatMul(s.shape,u);$!=null&&(s=reshape$1({inputs:{x:s},backend:r,attrs:{shape:$}}),o.push(s))}const g=batchMatMulImpl({a:u?d:m,b:u?m:d,transposeA:h,transposeB:f,backend:r,bias:s,activation:l,preluActivationWeights:a,leakyreluAlpha:i}),y=reshape$1({inputs:{x:g},backend:r,attrs:{shape:t.outShape}});o.push(g);for(const $ of o)r.disposeData($.dataId);return y}function conv2dWithIm2Col({x:n,filter:e,convInfo:t,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:l=null}){const{filterWidth:u,filterHeight:h,inChannels:f,strideWidth:c,strideHeight:o,padInfo:d,outWidth:m,outHeight:g,dilationWidth:y,dilationHeight:$,dataFormat:b}=t,x=b==="channelsLast",w=u*h*f,v=g*m,S=x?[t.batchSize,v,w]:[t.batchSize,w,v],T=new Im2ColProgram(S,x),C=[{type:"int32",data:[d.top,d.left]},{type:"int32",data:[o,c]},{type:"int32",data:[$,y]},{type:"int32",data:[m]},{type:"int32",data:[f*u]},{type:"int32",data:[f]}],I=r.runWebGPUProgram(T,[n],n.dtype,C),N=[];N.push(I);const P=reshape$1({inputs:{x:e},backend:r,attrs:{shape:[1,w,-1]}});if(N.push(P),a!=null){const k=getShapeForBatchMatMul(a.shape,x);k!=null&&(a=reshape$1({inputs:{x:a},backend:r,attrs:{shape:k}}),N.push(a))}if(s!=null){const k=getShapeForBatchMatMul(s.shape,x);k!=null&&(s=reshape$1({inputs:{x:s},backend:r,attrs:{shape:k}}),N.push(s))}const D=batchMatMulImpl({a:x?I:P,b:x?P:I,transposeA:!x,transposeB:!1,backend:r,bias:s,activation:l,preluActivationWeights:a,leakyreluAlpha:i}),E=reshape$1({inputs:{x:D},backend:r,attrs:{shape:t.outShape}});N.push(D);for(const k of N)r.disposeData(k.dataId);return E}function conv2DImpl({x:n,filter:e,convInfo:t,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:l=null}){const u=s!=null,h=a!=null,f=t.dataFormat==="channelsLast",c=f&&t.filterHeight===t.inHeight&&t.filterWidth===t.inWidth&&t.padInfo.type==="VALID",o=env().getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");if(!o&&(c||t.filterHeight===1&&t.filterWidth===1&&t.dilationHeight===1&&t.dilationWidth===1&&t.strideHeight===1&&t.strideWidth===1&&(t.padInfo.type==="SAME"||t.padInfo.type==="VALID")))return conv2dByMatMul({x:n,filter:e,convInfo:t,backend:r,bias:s,activation:l,preluActivationWeights:a,leakyreluAlpha:i});const d=env().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),m=d>-1?d:r.thresholdToIncreaseWorkgroups,g=t.batchSize*Math.ceil(t.outHeight*t.outWidth/32)*Math.ceil(t.outChannels/32);if(env().getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER")||g<=m)return conv2dWithIm2Col({x:n,filter:e,convInfo:t,backend:r,bias:s,preluActivationWeights:a,leakyreluAlpha:i,activation:l});let y;const $=[t.padInfo.top,t.padInfo.left],b=[{type:"int32",data:[t.filterHeight,t.filterWidth]},{type:"int32",data:[...$]},{type:"int32",data:[t.strideHeight,t.strideWidth]},{type:"int32",data:[t.dilationHeight,t.dilationWidth]}];if(o)y=new Conv2DNaiveProgram(t,u,l,h);else{const S=f?t.outHeight*t.outWidth:t.outChannels,T=f?t.outChannels:t.outHeight*t.outWidth,C=t.filterHeight*t.filterWidth*t.inChannels;b.push({type:"int32",data:[S]},{type:"int32",data:[T]},{type:"int32",data:[C]});const I=r.adapterInfo.isIntel();y=new Conv2DMMProgram(t,S,T,C,u,l,h,I)}const x=[],w=[n,e];u&&(!f&&s.shape.length===1&&(s=reshape$1({inputs:{x:s},backend:r,attrs:{shape:[s.shape[0],1,1]}}),x.push(s)),w.push(s)),h&&(!f&&a.shape.length===1&&(a=reshape$1({inputs:{x:a},backend:r,attrs:{shape:[a.shape[0],1,1]}}),x.push(a)),w.push(a)),l==="leakyrelu"&&(b.push({type:"float32",data:[i]}),y.uniforms+=" alpha : f32,");const v=r.runWebGPUProgram(y,w,n.dtype,b);for(const S of x)r.disposeData(S.dataId);return v}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2d(n){const{inputs:e,attrs:t,backend:r}=n,{x:s,filter:a}=e,{strides:i,pad:l,dataFormat:u,dilations:h,dimRoundingMode:f}=t,c=convertConv2DDataFormat(u),o=computeConv2DInfo(s.shape,a.shape,i,h,l,f,!1,c);return conv2DImpl({x:s,filter:a,convInfo:o,backend:r})}const conv2DConfig={kernelName:Conv2D,backendName:"webgpu",kernelFunc:conv2d};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Conv2DDerInputProgram{constructor(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,",this.workgroupSize=[64,1,1],this.size=!1,this.isVec4=!1,this.workPerThread=1,this.outputShape=e.inShape,this.isChannelsLast=e.dataFormat==="channelsLast",this.isVec4=this.isChannelsLast&&e.outChannels%4===0&&e.inChannels%4===0,this.isVec4?(this.workPerThread=2,this.outputComponent=4,this.workgroupSize=[4,4,4],this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize,[4,this.workPerThread,1])):(this.size=!0,this.workPerThread=1,this.workgroupSize=[64,1,1],this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize)),this.shaderKey=`conv2DDerInput_${this.isChannelsLast}_${this.isVec4}_${this.workPerThread}`}getUserCode(){const e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,r=this.isChannelsLast?3:1,s=`
    ${getMainHeaderString()} {
      let batch = i32(globalId.z) / uniforms.outShape[1];
      let r = i32(globalId.z) % uniforms.outShape[1];
      let c = i32(globalId.y) * ${this.workPerThread};
      let d1 = i32(globalId.x) * 4;

      let dyCorner = vec2<i32>(r, c) - uniforms.pads;

      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
      // ? = to be determined. : = across all values in that axis.
      var dotProd: array<vec4<f32>, ${this.workPerThread}>;
      for (var i = 0; i < ${this.workPerThread}; i++) {
        dotProd[i] = vec4<f32>(0.0);
      }
      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);
        let wRPerm = uniforms.filterDims.x - 1 - wR;
        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||
            fract(dyR) > 0.0) {
          continue;
        }
        let idyR = i32(dyR);

        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);
          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);
          let wCPerm = uniforms.filterDims.y - 1 - wC;
          var bDyCVal = true;
          var bDyCVal2 = true;
          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
              fract(dyC) > 0.0) {
            bDyCVal = false;
          }
          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||
              fract(dyC2) > 0.0) {
            bDyCVal2 = false;
          }

          let idyC = i32(dyC);
          let idyC2 = i32(dyC2);
          if (bDyCVal && bDyCVal2) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[0] = dotProd[0] + tmpval;
              xValue = getDy(batch, idyR, idyC2, d2);
              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),
                                                  dot(xValue, wValue1),
                                                  dot(xValue, wValue2),
                                                  dot(xValue, wValue3));
            }
          } else if (bDyCVal) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[0] = dotProd[0] + tmpval;
            }
          } else if (bDyCVal2) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC2, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[1] = dotProd[1] + tmpval;
            }
          }
        }
      }

      for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
        let coords = vec4<i32>(batch, r, c + i, d1);
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);
        }
      }
    }
    `;return this.isVec4?`
    ${s}
    `:`
    ${getMainHeaderString("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[${r}];

        let dyCorner = vec2<i32>(coords[${e}], coords[${t}]) - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);
          let wRPerm = uniforms.filterDims.x - 1 - wR;
          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||
              wRPerm < 0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);
            let wCPerm = uniforms.filterDims.y - 1 - wC;
            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
                fract(dyC) > 0.0 || wCPerm < 0) {
              continue;
            }
            let idyC = i32(dyC);

            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {
              let xValue = ${this.isChannelsLast?"getDy(batch, idyR, idyC, d2)":"getDy(batch, d2, idyR, idyC)"};
              let wValue = getW(wRPerm, wCPerm, d1, d2);
              dotProd = dotProd + xValue * wValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}}class Conv2DDerFilterProgram{constructor(e){this.variableNames=["x","dy"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=e.dataFormat==="channelsLast",this.shaderKey=`conv2DDerFilter_${this.isChannelsLast}`}getUserCode(){return`
    ${getMainHeaderString("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wR = coords[0];
        let wC = coords[1];
        let d1 = coords[2];
        let d2 = coords[3];

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b = b + 1) {
          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {
            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];
            if (xR < 0 || xR >= uniforms.inHeight) {
              continue;
            }

            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {
              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];

              if (xC < 0 || xC >= uniforms.inWidth) {
                continue;
              }

              if (${this.isChannelsLast}) {
                let dyValue = getDy(b, yR, yC, d2);
                let xValue = getX(b, xR, xC, d1);
                dotProd = dotProd + xValue * dyValue;
              } else {
                let dyValue = getDy(b, d2, yR, yC);
                let xValue = getX(b, d1, xR, xC);
                dotProd = dotProd + xValue * dyValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}}class Conv3DDerFilterProgram{constructor(e){this.variableNames=["x","dy"],this.uniforms=`pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,
       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerFilter"}getUserCode(){return`
    ${getMainHeaderString("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wF = coords.x;
        let wR = coords.y;
        let wC = coords.z;
        let d1 = coords.w;
        let d2 = coords.u;

        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b++) {
          for (var yF = 0; yF < uniforms.outDepth; yF++) {
            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];
            if (xF < 0 || xF >= uniforms.inDepth) {
              continue;
            }

            for (var yR = 0; yR < uniforms.outHeight; yR++) {
              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];
              if (xR < 0 || xR >= uniforms.inHeight) {
                continue;
              }

              for (var yC = 0; yC < uniforms.outWidth; yC++) {
                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];
                if (xC < 0 || xC >= uniforms.inWidth) {
                  continue;
                }

                let dyValue = getDy(b, yF, yR, yC, d2);
                let xValue = getX(b, xF, xR, xC, d1);
                dotProd += xValue * dyValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}}class Conv3DDerInputProgram{constructor(e){this.variableNames=["dy","W"],this.uniforms=`filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,
      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerInput"}getUserCode(){return`
    ${getMainHeaderString("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let d1 = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyFCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        var dotProd = 0.0;
        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {
          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);
          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {
            continue;
          }
          let idyF = i32(dyF);

          let wFPerm = uniforms.filterDims[0] - 1 - wF;

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            let wRPerm = uniforms.filterDims[1] - 1 - wR;

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let wCPerm = uniforms.filterDims[2] - 1 - wC;

              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {
                let xValue = getDy(batch, idyF, idyR, idyC, d2);
                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropFilter(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:a}=e,{strides:i,pad:l,dataFormat:u,dimRoundingMode:h,filterShape:f}=r,c=convertConv2DDataFormat(u),o=computeConv2DInfo(s.shape,f,i,1,l,h,!1,c),d=new Conv2DDerFilterProgram(o),m=[{type:"int32",data:[o.padInfo.top,o.padInfo.left]},{type:"int32",data:[o.strideHeight,o.strideWidth]},{type:"int32",data:[o.batchSize]},{type:"int32",data:[o.outHeight]},{type:"int32",data:[o.outWidth]},{type:"int32",data:[o.inHeight]},{type:"int32",data:[o.inWidth]}];return t.runWebGPUProgram(d,[s,a],s.dtype,m)}const conv2DBackpropFilterConfig={kernelName:Conv2DBackpropFilter,backendName:"webgpu",kernelFunc:conv2DBackpropFilter};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2dTransposeCommonSnippet(n=4){const e=a=>{switch(a){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];
            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];
            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];
            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${a} is not supported.`)}},r=`if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${`
      let outRow = row / uniforms.outShape[2];
      let outCol = row % uniforms.outShape[2];

      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];
      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);
      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);
      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {
        return ${typeSnippet(n)}(0.0);
      }
      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {
        return ${typeSnippet(n)}(0.0);
      }
      let coord = vec4<i32>(
          batch,
          i32(xR),
          i32(xC),
          col % uniforms.outBackprop[3]);
      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${n}];`}
      }
      return ${typeSnippet(n)}(0.0);`;return`
  fn mm_readA(batch: i32, row : i32, col : i32) -> ${typeSnippet(n)} {
    ${r}
  }

  fn mm_readB(batch: i32, row : i32, col : i32) -> ${typeSnippet(n)} {
    let coordX = uniforms.filterDims.x - 1 -
        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
    let coordY = uniforms.filterDims.y - 1 -
        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];
    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&
        coordX >= 0 && coordY >= 0) {
      let rowInner = row % uniforms.outBackprop[3];
      let coord = vec4<i32>(coordX, coordY, col, rowInner);
      ${e(n)}
    }
    return ${typeSnippet(n)}(0.0);
  }

  fn mm_write(batch: i32, row : i32, col : i32, valueInput : ${typeSnippet(n)}) {
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outCoord = vec4<i32>(
          batch,
          row / uniforms.outShape[2],
          row % uniforms.outShape[2],
          col);
      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${n}] = value;
    }
  }`}class Conv2DDerInputMMProgram{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.inShape,assert(e.dataFormat==="channelsLast",()=>"TODO: NCHW is unimplemented"),this.isVec4=e.inChannels%4===0&&e.outChannels%4===0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workgroupSize=computeWorkgroupSizeForConv2d(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=computeWorkPerThreadForConv2d(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4&&(this.outputComponent=4,this.variableComponents=[4,1]),this.shaderKey=`conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`}getUserCode(){const e=this.isVec4?makeMatMulPackedVec4Source(this.elementsPerThread,this.workgroupSize):makeMatMulPackedSource(this.elementsPerThread,this.workgroupSize);return`
    ${conv2dTransposeCommonSnippet(this.isVec4?4:1)}
    ${e}
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropInput(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:a}=e,{inputShape:i,strides:l,pad:u,dataFormat:h,dimRoundingMode:f}=r,c=convertConv2DDataFormat(h),o=computeConv2DInfo(i,a.shape,l,1,u,f,!1,c),d=[{type:"int32",data:[o.filterHeight,o.filterWidth]},{type:"int32",data:[o.filterHeight-1-o.padInfo.top,o.filterWidth-1-o.padInfo.left]},{type:"int32",data:[o.strideHeight,o.strideWidth]},{type:"int32",data:[o.batchSize,o.outHeight,o.outWidth,o.outChannels]}];let m;if(env().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE")||o.dataFormat!=="channelsLast")m=new Conv2DDerInputProgram(o);else{m=new Conv2DDerInputMMProgram(o);const g=o.inHeight*o.inWidth,y=o.inChannels,$=o.filterHeight*o.filterWidth*o.outChannels;d.push({type:"uint32",data:[g]},{type:"uint32",data:[y]},{type:"uint32",data:[$]})}return t.runWebGPUProgram(m,[s,a],"float32",d)}const conv2DBackpropInputConfig={kernelName:Conv2DBackpropInput,backendName:"webgpu",kernelFunc:conv2DBackpropInput};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Conv3DNaiveProgram{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3dnaive"}getUserCode(){return`
    ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let batch = coords.x;
        let d2 = coords.u;

        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;
        let xFCorner = xFRCCorner.x;
        let xRCorner = xFRCCorner.y;
        let xCCorner = xFRCCorner.z;

        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;
        let inputDepthVec4Remainder = uniforms.xShape.u % 4;

        var dotProd = 0.0;
        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {
          let xF = xFCorner + wF * uniforms.dilations[0];
          if (xF < 0 || xF >= uniforms.xShape.y) {
            continue;
          }

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let xR = xRCorner + wR * uniforms.dilations[1];
            if (xR < 0 || xR >= uniforms.xShape.z) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let xC = xCCorner + wC * uniforms.dilations[2];
              if (xC < 0 || xC >= uniforms.xShape.w) {
                continue;
              }

              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {
                let xValues = vec4<f32>(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                let wValues = vec4<f32>(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (inputDepthVec4Remainder == 1) {
                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *
                  getW(wF, wR, wC, inputDepthNearestVec4, d2);
              } else if (inputDepthVec4Remainder == 2) {
                let xValues = vec2<f32>(
                  getX(batch, xF, xR, xC, inputDepthNearestVec4),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)
                );
                let wValues = vec2<f32>(
                  getW(wF, wR, wC, inputDepthNearestVec4, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (inputDepthVec4Remainder == 3) {
                let xValues = vec3<f32>(
                  getX(batch, xF, xR, xC, inputDepthNearestVec4),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)
                );
                let wValues = vec3<f32>(
                  getW(wF, wR, wC, inputDepthNearestVec4, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }`}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3D(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a}=e,{strides:i,pad:l,dilations:u}=r,h=computeConv3DInfo(s.shape,a.shape,i,u,l),f=[h.padInfo.front,h.padInfo.top,h.padInfo.left],c=[{type:"int32",data:[h.filterDepth,h.filterHeight,h.filterWidth]},{type:"int32",data:[...f]},{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.dilationDepth,h.dilationHeight,h.dilationWidth]}],o=new Conv3DNaiveProgram(h),d=upcastType(s.dtype,a.dtype);return t.runWebGPUProgram(o,[s,a],d,c)}const conv3DConfig={kernelName:Conv3D,backendName:"webgpu",kernelFunc:conv3D};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropFilterV2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:a}=e,{strides:i,pad:l,filterShape:u}=r,h=computeConv3DInfo(s.shape,u,i,1,l),f=new Conv3DDerFilterProgram(h),c=[{type:"int32",data:[h.padInfo.front,h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.batchSize]},{type:"int32",data:[h.outDepth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]},{type:"int32",data:[h.inDepth]},{type:"int32",data:[h.inHeight]},{type:"int32",data:[h.inWidth]}];return t.runWebGPUProgram(f,[s,a],a.dtype,c)}const conv3DBackpropFilterV2Config={kernelName:Conv3DBackpropFilterV2,backendName:"webgpu",kernelFunc:conv3DBackpropFilterV2};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropInputV2(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:a}=e,{strides:i,pad:l,inputShape:u}=r,h=computeConv3DInfo(u,a.shape,i,1,l),f=new Conv3DDerInputProgram(h),c=[{type:"int32",data:[h.filterDepth,h.filterHeight,h.filterWidth]},{type:"int32",data:[h.filterDepth-1-h.padInfo.front,h.filterHeight-1-h.padInfo.top,h.filterWidth-1-h.padInfo.left]},{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.outDepth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]},{type:"int32",data:[h.outChannels]}];return t.runWebGPUProgram(f,[s,a],s.dtype,c)}const conv3DBackpropInputV2Config={kernelName:Conv3DBackpropInputV2,backendName:"webgpu",kernelFunc:conv3DBackpropInputV2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cos=unaryKernelFunc({opType:UnaryOpType.COS}),cosConfig={kernelName:Cos,backendName:"webgpu",kernelFunc:cos};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cosh=unaryKernelFunc({opType:UnaryOpType.COSH}),coshConfig={kernelName:Cosh,backendName:"webgpu",kernelFunc:cosh};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class CropAndResizeProgram{constructor(e,t,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workgroupSize=[64,1,1],this.size=!0;const[a]=t;this.outputShape=[a,r[0],r[1],e],this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.methodId=s==="bilinear"?1:0,this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey=`cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`}getUserCode(){const[e,t]=["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],[r,s,a]=this.cropHeightBiggerThan1?[`(${e} / f32(uniforms.outShape[1] - 1))`,"(y2-y1) * height_ratio",`y1*${e} + f32(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${e}`],[i,l,u]=this.cropWidthBiggerThan1?[`(${t} / f32(uniforms.outShape[2] - 1))`,"(x2-x1) * width_ratio",`x1*${t} + f32(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${t}`];return`
    ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let height_ratio = f32(${r});
        let width_ratio = f32(${i});
        let b = coords[0];
        let y = coords[1];
        let x = coords[2];
        let d = coords[3];
        // get box vals
        let y1 = getBoxes(b, 0);
        let x1 = getBoxes(b, 1);
        let y2 = getBoxes(b, 2);
        let x2 = getBoxes(b, 3);
        // get image in batch index
        let bInd = i32(round(getBoxInd(b)));
        if(bInd < 0 || bInd >= uniforms.outShape[0]) {
          return;
        }
        let height_scale = ${s};
        let width_scale = ${l};
        let in_y = ${a};
        if( in_y < 0.0 || in_y > ${e} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let in_x = ${u};
        if( in_x < 0.0 || in_x > ${t} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let sourceFracIndexCR = vec2<f32>(in_x,in_y);
        if(${this.methodId} == 1) {
          // Compute the four integer indices.
          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);
          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));
          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);
          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);
          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);
          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);
          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);
          let top = topLeft + (topRight - topLeft) * fracCR.x;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          let newValue = top + (bottom - top) * fracCR.y;
          setOutputAtIndex(index, newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          let sourceNearestCR = vec2<i32>(floor(
            sourceFracIndexCR + vec2<f32>(0.5,0.5)));
          let newValue = getImage(
            bInd, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutputAtIndex(index, newValue);
        }
      }
    }
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cropAndResize=n=>{const{inputs:e,backend:t,attrs:r}=n,{image:s,boxes:a,boxInd:i}=e,{cropSize:l,method:u,extrapolationValue:h}=r,f=new CropAndResizeProgram(s.shape[3],a.shape,l,u),c=[{type:"float32",data:[h]}];return t.runWebGPUProgram(f,[s,a,i],"float32",c)},cropAndResizeConfig={kernelName:CropAndResize,backendName:"webgpu",kernelFunc:cropAndResize};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var CumOpType;(function(n){n.Prod="*",n.Sum="+"})(CumOpType||(CumOpType={}));class CumProgram{constructor(e,t,r,s){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=t,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.exclusive=r,this.reverse=s,this.op=e,this.shaderKey=`cum_${this.op}_${this.exclusive}_${this.reverse}`}getUserCode(){const e=this.outputShape.length,t=this.op===CumOpType.Prod?"1.0":"0.0",r=this.exclusive?t:`getX(${getCoords(e,"coords",this.op)})`,s=this.outputShape[this.outputShape.length-1];let a="",i="";return this.exclusive?(a=this.reverse?`end != ${s-1}`:"end != 0",i=this.reverse?"end + 1":"end - 1"):(a=this.reverse?`end + pow2 < ${s}`:"end >= pow2",i=this.reverse?"end + pow2":"end - pow2"),`
      ${getMainHeaderString("index")} {
       if (index < uniforms.size) {
         var coords = getCoordsFromIndex(index);

         let end = ${getFinalCoord(e,"coords",this.op)};
         var val = ${r};
         let pow2 = i32(pow(2.0, uniforms.index));
         if (${a}) {
           let idx = ${i};
           ${getFinalCoord(e,"coords",this.op)} = idx;
           val ${this.op}= getX(${getCoords(e,"coords",this.op)});
         }
         setOutputAtIndex(index, val);
       }
      }
    `}}function getCoords(n,e,t){if(n===1)return`${e}`;if(n===2)return`${e}.x, ${e}.y`;if(n===3)return`${e}.x, ${e}.y, ${e}.z`;if(n===4)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative ${t} for rank ${n} is not yet supported`)}function getFinalCoord(n,e,t){if(n===1)return`${e}`;if(n===2)return`${e}.y`;if(n===3)return`${e}.z`;if(n===4)return`${e}.w`;throw Error(`Cumulative ${t} for rank ${n} is not yet supported`)}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumImpl(n,e,t,r,s,a){const i=e.shape.length,l=getAxesPermutation([r],i);let u=e;l!=null&&(u=transpose({inputs:{x:e},backend:t,attrs:{perm:l}}));const h=getInnerMostAxes(1,i)[0];if(h!==i-1)throw new Error(`WebGPU cumprod shader expects an inner-most axis=${e.shape.length-1} but got axis=${r}`);const f=u.shape[h];let c=identity({inputs:{x:u},backend:t});for(let o=0;o<=Math.ceil(Math.log2(f))-1;o++){const d=new CumProgram(n,u.shape,!1,a),m=c,g=[{type:"float32",data:[o]}];c=t.runWebGPUProgram(d,[c],c.dtype,g),t.disposeData(m.dataId)}if(s){const o=new CumProgram(n,u.shape,s,a),d=c,m=[{type:"float32",data:[0]}];c=t.runWebGPUProgram(o,[c],c.dtype,m),t.disposeData(d.dataId)}if(l!=null){const o=getUndoAxesPermutation(l),d=transpose({inputs:{x:c},backend:t,attrs:{perm:o}});return t.disposeData(c.dataId),t.disposeData(u.dataId),d}return c}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumprod(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,exclusive:i,reverse:l}=r;return cumImpl(CumOpType.Prod,s,t,a,i,l)}const cumprodConfig={kernelName:Cumprod,backendName:"webgpu",kernelFunc:cumprod};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumsum(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,exclusive:i,reverse:l}=r;return cumImpl(CumOpType.Sum,s,t,a,i,l)}const cumsumConfig={kernelName:Cumsum,backendName:"webgpu",kernelFunc:cumsum};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function denseBincount(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,weights:a}=e,{size:i,binaryOutput:l}=r,u=s.shape.length===1,f=sizeFromShape(a.shape)>0,c=a.dtype,o=u?[s.shape[0]]:[s.shape[0],s.shape[1]],d=u?[i]:[s.shape[0],i],m=fill({backend:t,attrs:{shape:d,value:0,dtype:c}}),g=new BincountProgram(o,f,l),y=[{type:"int32",data:[i]}],$=f?[s,a]:[s];return t.runWebGPUProgram(g,$,c,y,m)}const denseBincountConfig={kernelName:DenseBincount,backendName:"webgpu",kernelFunc:denseBincount};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DepthToSpaceProgram{constructor(e,t){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`depthToSpace_${t}`,this.dataFormat=t}getUserCode(){return`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let h = ${this.getHeightCoordString()};
          let w = ${this.getWidthCoordString()};
          let d = ${this.getDepthCoordString()};

          let in_h = h / uniforms.blockSize;
          let offset_h = h % uniforms.blockSize;
          let in_w = w / uniforms.blockSize;
          let offset_w = w % uniforms.blockSize;
          let offset_d = (offset_h * uniforms.blockSize + offset_w) *
            ${this.getOutputDepthSize()};
          let in_d = d + offset_d;

          let rlt = ${this.getInputSamplingString()};
          setOutputAtIndex(index, rlt);
        }
      }`}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?"uniforms.outShape[3]":"uniforms.outShape[1]"}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthToSpace(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockSize:a,dataFormat:i}=r,l=s.shape[0],u=i==="NHWC"?s.shape[1]:s.shape[2],h=i==="NHWC"?s.shape[2]:s.shape[3],f=i==="NHWC"?s.shape[3]:s.shape[1],c=u*a,o=h*a,d=f/(a*a),m=i==="NHWC"?[l,c,o,d]:[l,d,c,o],g=[{type:"int32",data:[a]}],y=new DepthToSpaceProgram(m,i);return t.runWebGPUProgram(y,[s],s.dtype,g)}const depthToSpaceConfig={kernelName:DepthToSpace,backendName:"webgpu",kernelFunc:depthToSpace};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DepthwiseConv2DNCHWSharedProgram{constructor(e,t,r,s=!1,a=null,i=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>,",this.workgroupSize=[16,16,1],this.outputShape=e,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.addBias=s,this.activation=a,this.hasPreluActivation=i,this.filterHeight=t,this.filterWidth=r,this.shaderKey=`depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`}getUserCode(){const e=this.filterWidth*this.filterHeight,t=this.workgroupSize[0]*this.workgroupSize[1]*this.workgroupSize[2],r=this.workgroupSize[1]+this.filterHeight-1,s=this.workgroupSize[0]+this.filterWidth-1;return`
      ${activationFnSnippet(this.activation,this.hasPreluActivation,!1,4)}

      var<workgroup> mm_Asub : array<array<f32, ${s}>, ${r}>;
      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;
      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {
        var value = 0.0;
        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])
        {
          value = getX(batch, channel, row, col);
        }
        return value;
      }

      ${getMainHeaderString()} {
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;
        let channelMul = uniforms.wShape[3];
        let d1 = coords[1] / channelMul;
        let q = coords[1] % channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;

        let localRow = i32(localId.y);
        let localCol = i32(localId.x);

        // Load one tile of X into local memory.
        for (var inputRow = localRow; inputRow < ${r}; inputRow = inputRow + ${this.workgroupSize[1]}) {
          for (var inputCol = localCol; inputCol < ${s}; inputCol = inputCol + ${this.workgroupSize[0]}) {
            let rowOffset = inputRow - localRow;
            let colOffset = inputCol - localCol;
            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);
          }
        }

        // Load one tile of W into local memory.
        var wIndex = i32(localIndex);
        ${e<t?`if (wIndex < ${e})`:`for(; wIndex < ${e}; wIndex = wIndex + ${t})`}

        {
          let wRow = wIndex / ${this.filterWidth};
          let wCol = wIndex % ${this.filterWidth};
          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);
        }

        workgroupBarrier();

        var value = 0.0;
        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {
          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {
            let xVal = mm_Asub[localRow + wR][localCol + wC];
            let wVal = mm_Bsub[wR][wC];
            value = fma(xVal, wVal, value);
          }
        }
        ${biasActivationSnippet(this.addBias,this.activation)}
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DepthwiseConv2DVec4Program{constructor(e,t=!1,r=null,s=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,",this.workgroupSize=[64,1,1],this.workPerThread=4,this.outputComponent=4,this.outputShape=e.outShape,this.virtualWidth=Math.ceil(this.outputShape[2]/this.workPerThread)*this.workPerThread;const a=[this.outputShape[0],this.outputShape[1],this.virtualWidth,this.outputShape[3]];this.dispatchLayout=flatDispatchLayout(a),this.dispatch=computeDispatch(this.dispatchLayout,a,this.workgroupSize,[this.outputComponent*this.workPerThread,1,1]),assert(e.dataFormat==="channelsLast",()=>"TODO: NCHW is unimplemented"),t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=r,this.hasPreluActivation=s,this.shaderKey=`depthwiseVec4_${r}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`}getUserCode(){const e=(this.workPerThread-1)*this.convInfo.strideWidth+this.convInfo.filterWidth,t=this.convInfo.strideHeight,r=this.convInfo.strideWidth;return`
      ${activationFnSnippet(this.activation,this.hasPreluActivation,!0,4)}
      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {
        var value = vec4<f32>(0.0);
        if (col >=0 && col < uniforms.inDims[1]) {
          value = getX(batch, row, col, channel);
        }
        return value;
      }

      ${getMainHeaderString("index")} {
        let width0 = uniforms.outShape[3] / ${this.outputComponent};
        let d1 = (index % width0) * ${this.outputComponent};
        var index1 = index / width0;
        let width1 = uniforms.virtualWidth / ${this.workPerThread};
        let c = (index1 % width1) * ${this.workPerThread};
        index1 = index1 / width1;
        let r = index1 % uniforms.outShape[1];
        let batch = index1 / uniforms.outShape[1];

        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${t}, ${r}) - uniforms.pads;

        let xRCorner = xRCCorner.x;
        let xCCorner = xRCCorner.y;
        var xVals : array<vec4<f32>, ${e}>;
        var dotProd : array<vec4<f32>, ${this.workPerThread}>;
        for (var i = 0; i < ${this.workPerThread}; i++) {
          dotProd[i] = vec4<f32>(0.0);
        }

        // Use constant instead of uniform can give better performance.
        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {
          let xR = xRCorner + wR;
          if (xR >=0 && xR < uniforms.inDims[0]) {
            for (var i = 0; i < ${e}; i++) {
              xVals[i] = readX(batch, xR, xCCorner + i, d1);
            }
            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {
              let wValue = getW(wR, wC, d1, 0);
              for (var i = 0; i < ${this.workPerThread}; i++) {
                dotProd[i] = fma(xVals[i * ${r} + wC], wValue, dotProd[i]);
              }
            }
          }
        }

        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let coords = vec4<i32>(batch, r, c + i, d1);
          if (coordsInBounds4D(coords, uniforms.outShape)) {
            var value = dotProd[i];
            ${biasActivationSnippet(this.addBias,this.activation)}
            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
          }
        }
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DepthwiseConv2DProgram{constructor(e,t=!1,r=null,s=!1){this.variableNames=["x","W"],this.uniforms=`pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,
      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,`,this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=e.dataFormat==="channelsLast",t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=r,this.hasPreluActivation=s,this.shaderKey=`depthwise_${this.activation}_${this.isChannelsLast}`}getUserCode(){const e=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return`
      ${activationFnSnippet(this.activation,this.hasPreluActivation,!1,4)}

      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let batch = coords[0];
          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast?"yz":"zw"}) * uniforms.strides - uniforms.pads;
          let d2 = coords[${this.isChannelsLast?3:1}];
          let channelMul = uniforms.wShape[3];
          let d1 = d2 / channelMul;
          let q = d2 % channelMul;

          let inputRowStart = xRCCorner.x;
          let inputColStart = xRCCorner.y;
          let inputRowEnd = inputRowStart + uniforms.filterHeight *
              uniforms.dilations[0];
          let inputColEnd = inputColStart + uniforms.filterWidth *
              uniforms.dilations[1];

          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get
          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all
          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.
          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.
          var value = 0.0;

          // Extract if checking out of for loop for performance.
          if (inputRowStart >= 0 && inputColStart >= 0 &&
            inputRowEnd < uniforms.inDims[0] &&
                inputColEnd < uniforms.inDims[1]) {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilations[0];

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilations[1];

                  let xVal = ${e};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            } else {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilations[0];

                if (xR < 0 || xR >= uniforms.inDims[0]) {
                  continue;
                }

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilations[1];

                  if (xC < 0 || xC >= uniforms.inDims[1]) {
                    continue;
                  }

                  let xVal = ${e};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            }
            ${biasActivationSnippet(this.addBias,this.activation)}
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNative(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a}=e,{strides:i,pad:l,dataFormat:u,dilations:h,dimRoundingMode:f}=r,c=convertConv2DDataFormat(u);let o=h;o==null&&(o=[1,1]);const d=computeConv2DInfo(s.shape,a.shape,i,o,l,f,!0,c),m=[{type:"int32",data:[d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.inHeight,d.inWidth]}],g=d.dataFormat==="channelsLast";let y;return!g&&d.inHeight>16&&d.inWidth>16&&d.strideHeight===1&&d.strideWidth===1&&d.dilationWidth===1&&d.dilationHeight===1&&d.inChannels===d.outChannels?y=new DepthwiseConv2DNCHWSharedProgram(d.outShape,d.filterHeight,d.filterWidth):g&&d.outHeight>4&&d.outWidth>4&&d.strideWidth<=2&&d.inChannels===d.outChannels&&d.dilationHeight===1&&d.dilationWidth===1&&d.inChannels%4===0?(y=new DepthwiseConv2DVec4Program(d),m.push({type:"int32",data:[y.virtualWidth]})):(y=new DepthwiseConv2DProgram(d),m.push({type:"int32",data:[d.filterHeight]},{type:"int32",data:[d.filterWidth]},{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.dilationHeight,d.dilationWidth]})),t.runWebGPUProgram(y,[s,a],s.dtype,m)}const depthwiseConv2dNativeConfig={kernelName:DepthwiseConv2dNative,backendName:"webgpu",kernelFunc:depthwiseConv2dNative};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DepthwiseConv2DDerFilterProgram{constructor(e){this.variableNames=["x","dy"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,
      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_filter"}getUserCode(){return`
      ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wR = coords[0];
        let wC = coords[1];
        let d1 = coords[2];
        let dm = coords[3];
        let d2 = d1 * uniforms.channelMul + dm;

        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b++) {
          for (var yR = 0; yR < uniforms.outHeight; yR++) {
            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];

            if (xR < 0 || xR >= uniforms.inHeight) {
              continue;
            }

            for (var yC = 0; yC < uniforms.outWidth; yC++) {
              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];

              if (xC < 0 || xC >= uniforms.inWidth) {
                continue;
              }

              let dyValue = getDy(b, yR, yC, d2);
              let xValue = getX(b, xR, xC, d1);
              dotProd += xValue * dyValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}class DepthwiseConv2DDerInputProgram{constructor(e){this.variableNames=["dy","W"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32, channelMul : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_input"}getUserCode(){return`
      ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[3];
        let dyCorner = coords.yz - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }

          let idyR = i32(dyR);
          let wRPerm = uniforms.filterDims[0] - 1 - wR;

          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }

            let idyC = i32(dyC);
            let wCPerm = uniforms.filterDims[1] - 1 - wC;

            for (var dm = 0; dm < uniforms.channelMul; dm++) {
              let d2 = d1 * uniforms.channelMul + dm;
              let xValue = getDy(batch, idyR, idyC, d2);
              let wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropFilter(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:a}=e,{strides:i,dilations:l,pad:u,dimRoundingMode:h,filterShape:f}=r,c=computeConv2DInfo(s.shape,f,i,l,u,h,!0),o=new DepthwiseConv2DDerFilterProgram(c),d=[{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.filterHeight,c.filterWidth]},{type:"int32",data:[c.outHeight]},{type:"int32",data:[c.outWidth]},{type:"int32",data:[c.inHeight]},{type:"int32",data:[c.inWidth]},{type:"int32",data:[c.batchSize]},{type:"int32",data:[c.outChannels/c.inChannels]}];return t.runWebGPUProgram(o,[s,a],"float32",d)}const depthwiseConv2dNativeBackpropFilterConfig={kernelName:DepthwiseConv2dNativeBackpropFilter,backendName:"webgpu",kernelFunc:depthwiseConv2dNativeBackpropFilter};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropInput(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:a}=e,{strides:i,dilations:l,pad:u,dimRoundingMode:h,inputShape:f}=r,c=computeConv2DInfo(f,a.shape,i,l,u,h,!0),o=new DepthwiseConv2DDerInputProgram(c),d=[{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.filterHeight-1-c.padInfo.top,c.filterWidth-1-c.padInfo.left]},{type:"int32",data:[c.filterHeight,c.filterWidth]},{type:"int32",data:[c.outHeight]},{type:"int32",data:[c.outWidth]},{type:"int32",data:[c.outChannels/c.inChannels]}];return t.runWebGPUProgram(o,[s,a],s.dtype,d)}const depthwiseConv2dNativeBackpropInputConfig={kernelName:DepthwiseConv2dNativeBackpropInput,backendName:"webgpu",kernelFunc:depthwiseConv2dNativeBackpropInput};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DiagProgram{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,e],this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="diag"}getUserCode(){return`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);
          setOutputAtIndex(index, value);
        }
      }
    `}}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function diag(n){const{inputs:e,backend:t}=n,{x:r}=e,s=[...r.shape,...r.shape],a=sizeFromShape(r.shape),i=reshape$1({inputs:{x:r},backend:t,attrs:{shape:[a]}}),l=new DiagProgram(a),u=t.runWebGPUProgram(l,[i],i.dtype),h=reshape$1({inputs:{x:u},backend:t,attrs:{shape:s}});return t.disposeData(i.dataId),t.disposeData(u.dataId),h}const diagConfig={kernelName:Diag,backendName:"webgpu",kernelFunc:diag};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Dilation2DProgram{constructor(e){this.variableNames=["x","w"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="dilation2d"}getUserCode(){return`
       ${getMainHeaderString("index")} {
         if (index < uniforms.size) {
           let neg_infinity = -3.4e38;
           let coords = getOutputCoords();
           let batch = coords.x;
           let d1 = coords.w;
           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;
           let hBeg = outTopLeftCorner.x;
           let wBeg = outTopLeftCorner.y;

           var curVal = neg_infinity;
           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {
             let hIn = hBeg + h * uniforms.dilations[0];

             if (hIn >= 0 && hIn < uniforms.xShape[1]) {
               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {
                 let wIn = wBeg + w * uniforms.dilations[1];

                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {
                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);
                   if (val > curVal) {
                     curVal = val;
                   }
                 }
               }
             }
           }

           setOutputAtIndex(index, curVal);
         }
       }
     `}}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dilation2D(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a}=e,{strides:i,pad:l,dilations:u}=r,h=computeDilation2DInfo(s.shape,a.shape,i,l,"NHWC",u),f=[h.padInfo.top,h.padInfo.left],c=[{type:"int32",data:[h.filterHeight,h.filterWidth]},{type:"int32",data:[...f]},{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]}],o=new Dilation2DProgram(h);return t.runWebGPUProgram(o,[s,a],s.dtype,c)}const dilation2DConfig={kernelName:Dilation2D,backendName:"webgpu",kernelFunc:dilation2D};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Dilation2DBackpropInputProgram{constructor(e,t){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.inShape,this.dispatchLayout=flatDispatchLayout(e.outShape),this.dispatch=computeDispatch(this.dispatchLayout,e.outShape,this.workgroupSize),t!=="float32"&&t!=="int32")throw new Error(`Dilation2DBackpropInput only supports float32 and int32
          types, does not support ${t} type.`);this.type=t,this.shaderKey="dilation2DBackpropInput"}getUserCode(){return`
       ${getMainHeaderString("index")} {
         if (index < uniforms.dySize) {
           let coords = getDyCoordsFromIndex(index);
           let b = coords[0];
           let r = coords[1];
           let c = coords[2];
           let d = coords[3];

           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;
           var curVal = -3.4e38;  // neg_infinity
           var xRMax = 0;
           var xCMax = 0;

           // In the case of multiple argmax branches, we only back-propagate
           // along the last branch, i.e., the one with largest value of
           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling
           // backward routines.
           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
             let xR = dyCorner.x + wR * uniforms.dilations[0];

             if (xR >= 0 && xR < uniforms.xShape[1]) {
               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
                 let xC = dyCorner.y + wC * uniforms.dilations[1];

                 if (xC >= 0 && xC < uniforms.xShape[2]) {
                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);
                   if (val > curVal) {
                     curVal = val;
                     xRMax = xR;
                     xCMax = xC;
                   }
                 }
               }
             }
           }

           let flatIndexIn = d + uniforms.xShape[3] *
               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));
           let value = getDy(b, r, c, d);
           ${atomicAddSnippet("&result[flatIndexIn]","value",this.type)}
         }
       }
     `}}class Dilation2DBackpropFilterProgram{constructor(e,t,r){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.filterShape,this.dispatchLayout=flatDispatchLayout(e.outShape),this.dispatch=computeDispatch(this.dispatchLayout,e.outShape,this.workgroupSize),r!=="float32"&&r!=="int32")throw new Error(`Dilation2DBackpropFilter only supports float32 and int32
          types, does not support ${r} type.`);this.type=r,this.shaderKey="dilation2DBackpropFilter"}getUserCode(){return`
       ${getMainHeaderString("index")} {
         if (index < uniforms.dySize) {
           let coords = getDyCoordsFromIndex(index);
           let b = coords[0];
           let r = coords[1];
           let c = coords[2];
           let d = coords[3];

           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;
           var curVal = -3.4e38;  // neg_infinity
           var wRMax = 0;
           var wCMax = 0;

           // In the case of multiple argmax branches, we only back-propagate
           // along the last branch, i.e., the one with largest value of
           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling
           // backward routines.
           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
             let xR = dyCorner.x + wR * uniforms.dilations[0];

             if (xR >= 0 && xR < uniforms.xShape[1]) {
               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
                 let xC = dyCorner.y + wC * uniforms.dilations[1];

                 if (xC >= 0 && xC < uniforms.xShape[2]) {
                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);
                   if (val > curVal) {
                     curVal = val;
                     wRMax = wR;
                     wCMax = wC;
                   }
                 }
               }
             }
           }

           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);
           let value = getDy(b, r, c, d);
           ${atomicAddSnippet("&result[flatIndexIn]","value",this.type)}
         }
       }
     `}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dilation2DBackpropFilter(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a,dy:i}=e,{strides:l,pad:u,dilations:h}=r,f=computeDilation2DInfo(s.shape,a.shape,l,u,"NHWC",h),c=a.dtype,o=new Dilation2DBackpropFilterProgram(f,a.shape,c),d=[{type:"int32",data:[f.filterHeight,f.filterWidth]},{type:"int32",data:[f.padInfo.top,f.padInfo.left]},{type:"int32",data:[f.strideHeight,f.strideWidth]},{type:"int32",data:[f.dilationHeight,f.dilationWidth]},{type:"int32",data:[sizeFromShape(f.outShape)]}],m=fill({backend:t,attrs:{shape:a.shape,value:0,dtype:c}});return t.runWebGPUProgram(o,[s,a,i],c,d,m)}const dilation2DBackpropFilterConfig={kernelName:Dilation2DBackpropFilter,backendName:"webgpu",kernelFunc:dilation2DBackpropFilter};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dilation2DBackpropInput(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a,dy:i}=e,{strides:l,pad:u,dilations:h}=r,f=computeDilation2DInfo(s.shape,a.shape,l,u,"NHWC",h),c=s.dtype,o=new Dilation2DBackpropInputProgram(f,c),d=[{type:"int32",data:[f.filterHeight,f.filterWidth]},{type:"int32",data:[f.padInfo.top,f.padInfo.left]},{type:"int32",data:[f.strideHeight,f.strideWidth]},{type:"int32",data:[f.dilationHeight,f.dilationWidth]},{type:"int32",data:[sizeFromShape(f.outShape)]}],m=fill({backend:t,attrs:{shape:f.inShape,value:0,dtype:c}});return t.runWebGPUProgram(o,[s,a,i],c,d,m)}const dilation2DBackpropInputConfig={kernelName:Dilation2DBackpropInput,backendName:"webgpu",kernelFunc:dilation2DBackpropInput};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DrawProgram{constructor(e,t,r){this.variableNames=["Image"],this.uniforms="alpha: f32,",this.workgroupSize=[64,1,1],this.pixelsOpType=PixelsOpType.DRAW,this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.type=t,this.textureFormat=r,this.shaderKey=`draw_${t}_${r}`}getUserCode(){let e;const t=this.type==="float32"?"value":"value / 255.0";return e=`
      if (uniforms.numChannels == 1) {
        rgba[0] = ${t};
        rgba[1] = ${t};
        rgba[2] = ${t};
      } else {
        rgba[d] = ${t};
      }`,`
       @group(0) @binding(0) var outImage : texture_storage_2d<${this.textureFormat}, write>;
       ${getMainHeaderString("index")} {
         if (index < uniforms.size) {
           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);
           for (var d = 0; d < uniforms.numChannels; d = d + 1) {
             let value = f32(inBuf[index * uniforms.numChannels + d]);
             ${e}
           }
           rgba.x = rgba.x * rgba.w;
           rgba.y = rgba.y * rgba.w;
           rgba.z = rgba.z * rgba.w;
           let coords = getCoordsFromIndex(index);
           textureStore(outImage, vec2<i32>(coords.yx), rgba);
         }
       }
      `}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use backend file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function draw(n){const{inputs:e,backend:t,attrs:r}=n,{image:s}=e,{canvas:a,options:i}=r,[l,u]=s.shape.slice(0,2),{imageOptions:h}=i||{},f=h?.alpha||1,c=t.device.features.has("bgra8unorm-storage")?"bgra8unorm":"rgba8unorm",o=[l,u],d=new DrawProgram(o,s.dtype,c);a.width=u,a.height=l;const m="webgpu";let g=a.getContext(m),y;g||(y=new OffscreenCanvas(u,l),g=y.getContext(m));const $=s.shape.length===3?s.shape[2]:1;g.configure({device:t.device,format:c,usage:GPUTextureUsage.STORAGE_BINDING,alphaMode:"premultiplied"});const b="int32",x=t.makeTensorInfo(o,b),w=t.tensorMap.get(x.dataId);w.resource=g.getCurrentTexture(),w.external=!0;const v=[{type:"uint32",data:[$]},{type:"float32",data:[f]}];if(t.runWebGPUProgram(d,[s],b,v,x),y){const S=a.getContext("2d");if(!S)throw new Error("Please make sure this canvas has only been used for 2d or webgpu context!");S.drawImage(y,0,0)}return t.disposeData(x.dataId),s}const drawConfig={kernelName:Draw,backendName:"webgpu",kernelFunc:draw};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const multiplyKernelFunc=binaryKernelFunc({opType:BinaryOpType.MUL,cpuKernelImpl:multiplyImplCPU,supportsComplex:!0}),multiplyConfig={kernelName:Multiply,backendName:"webgpu",kernelFunc:multiplyKernelFunc};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sum(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,keepDims:i}=r;return reduce(s,a,i,"sum",t)}const sumConfig={kernelName:Sum,backendName:"webgpu",kernelFunc:sum};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function einsum(n){const{inputs:e,backend:t,attrs:r}=n,{equation:s}=r,a=e,{allDims:i,summedDims:l,idDims:u}=decodeEinsumEquation(s,a.length);checkEinsumDimSizes(i.length,u,a);const{path:h,steps:f}=getEinsumComputePath(l,u),c=f.length;let o=null,d=i.length;const m=[];for(let g=0;g<c;++g){for(const y of f[g]){const{permutationIndices:$,expandDims:b}=getEinsumPermutation(d,u[y]);let x;isIdentityPermutation($)?x=a[y]:(x=transpose({inputs:{x:a[y]},backend:t,attrs:{perm:$}}),m.push(x));const w=x.shape.slice();for(let v=0;v<b.length;++v)w.splice(b[v],0,1);arraysEqual(x.shape,w)||(x=reshape$1({inputs:{x},backend:t,attrs:{shape:w}}),m.push(x)),o===null?o=x:(o=multiplyKernelFunc({inputs:{a:x,b:o},backend:t}),m.push(o))}g<c-1&&(h[g]>=0&&(o=sum({inputs:{x:o},backend:t,attrs:{axis:h[g]-(i.length-d),keepDims:!1}}),m.push(o)),d--)}for(const g of m)g!==o&&t.disposeData(g.dataId);return o}const einsumConfig={kernelName:Einsum,backendName:"webgpu",kernelFunc:einsum};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const elu=unaryKernelFunc({opType:UnaryOpType.ELU}),eluConfig={kernelName:Elu,backendName:"webgpu",kernelFunc:elu};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const eluGrad=n=>{const{inputs:e,backend:t}=n,{dy:r,y:s}=e,a=new BinaryOpProgram(BinaryOpType.ELU_DER,r.shape,s.shape);return t.runWebGPUProgram(a,[r,s],r.dtype)},eluGradConfig={kernelName:EluGrad,backendName:"webgpu",kernelFunc:eluGrad};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const equal=binaryKernelFunc({opType:BinaryOpType.EQUAL,dtype:"bool",cpuKernelImpl:equalImplCPU}),equalConfig={kernelName:Equal,backendName:"webgpu",kernelFunc:equal};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const erf=unaryKernelFunc({opType:UnaryOpType.ERF}),erfConfig={kernelName:Erf,backendName:"webgpu",kernelFunc:erf};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const exp=unaryKernelFunc({opType:UnaryOpType.EXP,cpuKernelImpl:expImplCPU,dtype:"float32"}),expConfig={kernelName:Exp,backendName:"webgpu",kernelFunc:exp};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function expandDims(n){const{inputs:e,attrs:t,backend:r}=n,{dim:s}=t,{input:a}=e,i=a.shape.length,l=a.shape.slice();let u=s;return s<0&&(assert(-(i+1)<=s,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),u=i+s+1),l.splice(u,0,1),reshape$1({inputs:{x:a},backend:r,attrs:{shape:l}})}const expandDimsConfig={kernelName:ExpandDims,backendName:"webgpu",kernelFunc:expandDims};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expm1=unaryKernelFunc({opType:UnaryOpType.EXPM1,cpuKernelImpl:expm1ImplCPU}),expm1Config={kernelName:Expm1,backendName:"webgpu",kernelFunc:expm1};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FFTProgram{constructor(e,t){this.variableNames=["real","imag"],this.outputShape=[],this.uniforms="exponentMultiplier : f32, denominator: f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.component=e,this.shaderKey=`fft_${e}`}getUserCode(){return`
    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {
      ${this.component==="real"?"return real * expR - imag * expI;":"return real * expI + imag * expR;"}
    }

    fn mulMatDFT(batch: i32, index: i32) -> f32 {
      let indexRatio = f32(index) / f32(uniforms.realShape[1]);
      let exponentMultiplierTimesIndexRatio =
          uniforms.exponentMultiplier * indexRatio;

      var result = 0.0;

      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {
        // x = (-2|2 * PI / N) * index * i;
        let x = exponentMultiplierTimesIndexRatio * f32(i);
        let expR = cos(x);
        let expI = sin(x);
        let real = getReal(batch, i);
        let imag = getImag(batch, i);

        result = result +
            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;
      }

      return result;
    }

    ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));
      }
    }
  `}}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fftImpl(n,e,t){const r=t.tensorMap.get(n.dataId),s=sizeFromShape(n.shape),a=n.shape[n.shape.length-1],i=s/a,l=[],u=reshape$1({inputs:{x:n},backend:t,attrs:{shape:[i,a]}});l.push(u);const h=u.shape,f=new FFTProgram("real",h),c=new FFTProgram("imag",h),o=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:h},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:h}],d=e?2*Math.PI:-2*Math.PI,m=e?h[1]:1,g=[{type:"float32",data:[d]},{type:"float32",data:[m]}],y=t.runWebGPUProgram(f,o,"float32",g);l.push(y);const $=t.runWebGPUProgram(c,o,"float32",g);l.push($);const b=complex({inputs:{real:y,imag:$},backend:t});l.push(b);const x=reshape$1({inputs:{x:b},backend:t,attrs:{shape:n.shape}});return l.forEach(w=>t.disposeData(w.dataId)),x}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fft(n){const{inputs:e,backend:t}=n,{input:r}=e;return fftImpl(r,!1,t)}const fftConfig={kernelName:FFT,backendName:"webgpu",kernelFunc:fft};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FlipLeftRightProgram{constructor(e){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="flipLeftRight"}getUserCode(){return`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let coordX = uniforms.xShape[2] - coords[2] - 1;
          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);
          setOutputAtIndex(index, outputValue);
        }
      }
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const flipLeftRightConfig={kernelName:FlipLeftRight,backendName:"webgpu",kernelFunc:({inputs:n,backend:e})=>{const{image:t}=n,r=e,s=new FlipLeftRightProgram(t.shape);return r.runWebGPUProgram(s,[t],t.dtype)}};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floor=unaryKernelFunc({opType:UnaryOpType.FLOOR,cpuKernelImpl:floorImplCPU}),floorConfig={kernelName:Floor,backendName:"webgpu",kernelFunc:floor};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorDiv=binaryKernelFunc({opType:BinaryOpType.FLOOR_DIV,cpuKernelImpl:floorDivImplCPU,dtype:"int32"}),floorDivConfig={kernelName:FloorDiv,backendName:"webgpu",kernelFunc:floorDiv};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FromPixelsProgram{constructor(e,t,r=!1){this.pixelsOpType=PixelsOpType.FROM_PIXELS,this.outputShape=[0],this.variableNames=[],this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize,[t,1,1]),this.importVideo=r,this.shaderKey=`fromPixels_${this.importVideo}`}getUserCode(){const e=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)";return`
      @binding(1) @group(0) var src: ${this.importVideo?"texture_external":"texture_2d<f32>"};
      ${getMainHeaderString("index")} {
        let flatIndex = index * uniforms.numChannels;
        if (flatIndex < uniforms.size) {
          let coords = getCoordsFromIndex(flatIndex);
          let values = ${e};
          for (var i = 0; i < uniforms.numChannels; i = i + 1) {
            result[flatIndex + i] = i32(floor(255.0 * values[i]));
          }
        }
      }
  `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use backend file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const fromPixelsConfig={kernelName:FromPixels,backendName:"webgpu",kernelFunc:fromPixels};let fromPixels2DContext,willReadFrequently=env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function fromPixels(n){const{inputs:e,backend:t,attrs:r}=n;let{pixels:s}=e;const{numChannels:a}=r;if(s==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");const i=typeof HTMLVideoElement<"u"&&s instanceof HTMLVideoElement,l=typeof HTMLImageElement<"u"&&s instanceof HTMLImageElement,u=typeof HTMLCanvasElement<"u"&&s instanceof HTMLCanvasElement||typeof OffscreenCanvas<"u"&&s instanceof OffscreenCanvas,h=typeof ImageBitmap<"u"&&s instanceof ImageBitmap,[f,c]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],o=[c,f,a],d=!1,m=i||l;if(h||u||m){let b;{if(m){const _=env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(fromPixels2DContext==null||_!==willReadFrequently)&&(willReadFrequently=_,fromPixels2DContext=document.createElement("canvas").getContext("2d",{willReadFrequently})),fromPixels2DContext.canvas.width=f,fromPixels2DContext.canvas.height=c,fromPixels2DContext.drawImage(s,0,0,f,c),s=fromPixels2DContext.canvas}const N=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,P="rgba8unorm",F=t.textureManager.acquireTexture(o[1],o[0],P,N);t.queue.copyExternalImageToTexture({source:s},{texture:F},[o[1],o[0]]),b=F}const x=sizeFromShape(o),w=computeStrides(o),v=new FromPixelsProgram(o,a,d),S=[{type:"uint32",data:[x]},{type:"uint32",data:[a]},{type:"uint32",data:[...w]}],T=t.makeTensorInfo([c,f],"int32"),C=t.tensorMap.get(T.dataId);C.resource=b;const I=t.runWebGPUProgram(v,[T],"int32",S);return t.disposeData(T.dataId),I}const g=s.data;let y=g;if(a!=null&&a!==4){y=new Uint8Array(s.width*s.height*a);const b=g.length;let x=0;for(let w=0;w<b;w++)w%4<a&&(y[x++]=g[w])}const $=t.makeTensorInfo(o,"int32",new Int32Array(y));return t.uploadToGPU($.dataId),$}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class BatchNormProgram{constructor(e,t,r,s,a){this.uniforms="varianceEpsilon : f32,",this.workgroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],assertAndGetBroadcastShape(e,t),assertAndGetBroadcastShape(e,r),this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),s!=null&&(assertAndGetBroadcastShape(e,s),this.variableNames.push("offset")),a!=null&&(assertAndGetBroadcastShape(e,a),this.variableNames.push("scale")),this.offsetShape=s,this.scaleShape=a,this.shaderKey="batchNorm"}getUserCode(){let e="0.0";this.offsetShape!=null&&(e="getOffsetByOutputIndex(index)");let t="1.0";return this.scaleShape!=null&&(t="getScaleByOutputIndex(index)"),`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size)
        {
          let xValue = getXByOutputIndex(index);
          let meanValue = getMeanByOutputIndex(index);
          let varianValue = getVarianceByOutputIndex(index);
          let offsetValue = ${e};
          let scaleValue = ${t};
          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));
          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));
        }
      }
  `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const fusedBatchNormConfig={kernelName:FusedBatchNorm,backendName:"webgpu",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{x:r,scale:s,offset:a,mean:i,variance:l}=n,{varianceEpsilon:u}=e,h=t,f=[r,i,l];let c=null;a!=null&&(c=a.shape,f.push(a));let o=null;s!=null&&(o=s.shape,f.push(s));const d=new BatchNormProgram(r.shape,i.shape,l.shape,c,o),m=[{type:"float32",data:[u]}];return h.runWebGPUProgram(d,f,r.dtype,m)}};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedConv2d(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a,bias:i,preluActivationWeights:l}=e,{strides:u,pad:h,dataFormat:f,dilations:c,dimRoundingMode:o,activation:d,leakyreluAlpha:m}=r,g=convertConv2DDataFormat(f),y=computeConv2DInfo(s.shape,a.shape,u,c,h,o,!1,g);return conv2DImpl({x:s,filter:a,convInfo:y,backend:t,bias:i,preluActivationWeights:l,leakyreluAlpha:m,activation:d})}const fusedConv2DConfig={kernelName:FusedConv2D,backendName:"webgpu",kernelFunc:fusedConv2d};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedDepthwiseConv2D(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:a,bias:i,preluActivationWeights:l}=e,{strides:u,pad:h,dilations:f,dimRoundingMode:c,activation:o,leakyreluAlpha:d}=r;let m=f;m==null&&(m=[1,1]),assert(eitherStridesOrDilationsAreOne(u,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`);const g=computeConv2DInfo(s.shape,a.shape,u,m,h,c,!0),y=[s,a],$=i!=null,b=l!=null;$&&y.push(i),b&&y.push(l);const x=[{type:"int32",data:[g.padInfo.top,g.padInfo.left]},{type:"int32",data:[g.inHeight,g.inWidth]}];let w;return g.outHeight>4&&g.outWidth>4&&g.strideWidth<=2&&g.inChannels===g.outChannels&&g.dilationHeight===1&&g.dilationWidth===1&&g.inChannels%4===0?(w=new DepthwiseConv2DVec4Program(g,$,o,b),x.push({type:"int32",data:[w.virtualWidth]})):(w=new DepthwiseConv2DProgram(g,$,o,b),x.push({type:"int32",data:[g.filterHeight]},{type:"int32",data:[g.filterWidth]},{type:"int32",data:[g.strideHeight,g.strideWidth]},{type:"int32",data:[g.dilationHeight,g.dilationWidth]})),o==="leakyrelu"&&(x.push({type:"float32",data:[d]}),w.uniforms+=" alpha : f32,"),t.runWebGPUProgram(w,y,"float32",x)}const fusedDepthwiseConv2DConfig={kernelName:FusedDepthwiseConv2D,backendName:"webgpu",kernelFunc:fusedDepthwiseConv2D};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class GatherNDProgram{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`gathernd_${e}`,this.sliceDim=e,this.uniforms=`sliceDim : i32, strides : ${getCoordsDataType(e)},`}getUserCode(){let e;return this.sliceDim>1?e="uniforms.strides[j]":e="uniforms.strides",`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          var flattenIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexTemp = i32(round(getIndices(coords[0], j)));
            let strideNum = ${e};
            flattenIndex = flattenIndex + indexTemp * strideNum;
          }

          setOutputAtIndex(index, getA(flattenIndex, coords[1]));
        }
      }
      `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherNd(n){const{inputs:e,backend:t}=n,{params:r,indices:s}=e,a=s.shape,i=a[a.length-1],l=sizeFromShape(r.shape),[u,h,f,c]=prepareAndValidate(r,s),o=reshape$1({inputs:{x:s},backend:t,attrs:{shape:[h,i]}}),d=reshape$1({inputs:{x:r},backend:t,attrs:{shape:[sizeFromShape(r.shape)/f,f]}});if(t.shouldExecuteOnCPU([r,s])||r.dtype==="string"){const b=t.readSync(s.dataId),x=t.bufferSync(r),w=gatherNdImplCPU(b,x,r.dtype,h,i,f,c,r.shape,l);return t.makeTensorInfo(u,r.dtype,w.values)}const m=new GatherNDProgram(i,[h,f]),g=[{type:"int32",data:[i]},{type:"int32",data:c}],y=t.runWebGPUProgram(m,[d,o],d.dtype,g),$=reshape$1({inputs:{x:y},backend:t,attrs:{shape:u}});return t.disposeData(o.dataId),t.disposeData(d.dataId),t.disposeData(y.dataId),$}const gatherNdConfig={kernelName:GatherNd,backendName:"webgpu",kernelFunc:gatherNd};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class GatherProgram{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.slice(),this.aShape=e,this.outputShape=t,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gather"}getUserCode(){const e=getSourceCoords$1(this.aShape);return`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let indexZ = i32(getIndices(resRC.x, resRC.z));
          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);
          setOutputAtIndex(index, inBounds * getA(${e}));
        }
      }
    `}}function getSourceCoords$1(n){const e=["resRC.x","resRC.y","resRC.z","resRC.w"],t=[];for(let r=0;r<n.length;r++)r===2?t.push("indexZ"):t.push(`${e[r]}`);return t.join()}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherV2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,indices:a}=e,{axis:i,batchDims:l}=r,u=parseAxisParam(i,s.shape)[0],h=collectGatherOpShapeInfo(s,a,u,l),f=sizeFromShape(a.shape),c=[],o=reshape$1({inputs:{x:s},backend:t,attrs:{shape:[h.batchSize,h.outerSize,h.dimSize,h.sliceSize]}}),d=reshape$1({inputs:{x:a},backend:t,attrs:{shape:[h.batchSize,f/h.batchSize]}});c.push(o),c.push(d);const m=[h.batchSize,h.outerSize,f/h.batchSize,h.sliceSize];if(t.shouldExecuteOnCPU([s,a])){const x=t.tensorMap.get(d.dataId).values,w=buffer(d.shape,d.dtype,x),S=t.tensorMap.get(o.dataId).values,T=buffer(o.shape,o.dtype,S),C=gatherV2ImplCPU(T,w,m);return c.forEach(I=>t.disposeData(I.dataId)),t.makeTensorInfo(h.outputShape,C.dtype,C.values)}const g=new GatherProgram(o.shape,m),y=t.runWebGPUProgram(g,[o,d],o.dtype);c.push(y);const $=reshape$1({inputs:{x:y},backend:t,attrs:{shape:h.outputShape}});return c.forEach(b=>t.disposeData(b.dataId)),$}const gatherV2Config={kernelName:GatherV2,backendName:"webgpu",kernelFunc:gatherV2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greater=binaryKernelFunc({opType:BinaryOpType.GREATER,cpuKernelImpl:greaterImplCPU,dtype:"bool"}),greaterConfig={kernelName:Greater,backendName:"webgpu",kernelFunc:greater};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greaterEqual=binaryKernelFunc({opType:BinaryOpType.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:greaterEqualImplCPU}),greaterEqualConfig={kernelName:GreaterEqual,backendName:"webgpu",kernelFunc:greaterEqual};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ifft(n){const{inputs:e,backend:t}=n,{input:r}=e;return fftImpl(r,!0,t)}const ifftConfig={kernelName:IFFT,backendName:"webgpu",kernelFunc:ifft};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isFinite$1=unaryKernelFunc({opType:UnaryOpType.IS_FINITE,dtype:"bool"}),isFiniteConfig={kernelName:IsFinite,backendName:"webgpu",kernelFunc:isFinite$1};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isInf=unaryKernelFunc({opType:UnaryOpType.IS_INF,dtype:"bool"}),isInfConfig={kernelName:IsInf,backendName:"webgpu",kernelFunc:isInf};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isNaN$1=unaryKernelFunc({opType:UnaryOpType.IS_NAN,dtype:"bool"}),isNaNConfig={kernelName:IsNan,backendName:"webgpu",kernelFunc:isNaN$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function leakyRelu(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{alpha:a}=r,i=[{type:"float32",data:[a]}],l=new UnaryOpProgram(s.shape,UnaryOpType.LEAKYRELU,"alpha : f32,");return t.runWebGPUProgram(l,[s],"float32",i)}const leakyReluConfig={kernelName:LeakyRelu,backendName:"webgpu",kernelFunc:leakyRelu};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const less=binaryKernelFunc({opType:BinaryOpType.LESS,dtype:"bool",cpuKernelImpl:lessImplCPU}),lessConfig={kernelName:Less,backendName:"webgpu",kernelFunc:less};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lessEqual=binaryKernelFunc({opType:BinaryOpType.LESS_EQUAL,dtype:"bool",cpuKernelImpl:lessEqualImplCPU}),lessEqualConfig={kernelName:LessEqual,backendName:"webgpu",kernelFunc:lessEqual};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class LinSpaceProgram{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="start : f32, step : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="linSpace"}getUserCode(){return`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);
        }
      }
    `}}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linSpace(n){const{backend:e,attrs:t}=n,{start:r,stop:s,num:a}=t,i=(s-r)/(a-1),l=new LinSpaceProgram(a),u=[{type:"float32",data:[r]},{type:"float32",data:[i]}];return e.runWebGPUProgram(l,[],"float32",u)}const linSpaceConfig={kernelName:LinSpace,backendName:"webgpu",kernelFunc:linSpace};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const log=unaryKernelFunc({opType:UnaryOpType.LOG,cpuKernelImpl:logImplCPU}),logConfig={kernelName:Log,backendName:"webgpu",kernelFunc:log};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const log1p=unaryKernelFunc({opType:UnaryOpType.LOG1P}),log1pConfig={kernelName:Log1p,backendName:"webgpu",kernelFunc:log1p};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logicalAnd=binaryKernelFunc({opType:BinaryOpType.LOGICAL_AND,dtype:"bool"}),logicalAndConfig={kernelName:LogicalAnd,backendName:"webgpu",kernelFunc:logicalAnd};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logicalNot=unaryKernelFunc({opType:UnaryOpType.LOGICAL_NOT}),logicalNotConfig={kernelName:LogicalNot,backendName:"webgpu",kernelFunc:logicalNot};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logicalOr=binaryKernelFunc({opType:BinaryOpType.LOGICAL_OR}),logicalOrConfig={kernelName:LogicalOr,backendName:"webgpu",kernelFunc:logicalOr};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const powOperatorSnippet=`
  var powValue = 0.0;
  let basis = uniforms.bias + uniforms.alpha * sum;
  if (uniforms.beta == 0.5) {
    powValue = inverseSqrt(basis);
  } else if (uniforms.beta == 1.0) {
    powValue = 1.0 / basis;
  } else {
    powValue = exp(log(basis) * (-uniforms.beta));
  }
`;class LRNProgram{constructor(e){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn"}getUserCode(){return`
    ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let b = coords[0];
        let r = coords[1];
        let c = coords[2];
        let d = coords[3];

        let x = getX(b, r, c, d);
        var sum = 0.0;
        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {
          let idx = d + i;
          if (idx >= 0 && idx < uniforms.xShape[3]) {
            let z = getX(b, r, c, idx);
            sum = sum + z * z;
          }
        }
        ${powOperatorSnippet}

        setOutputAtIndex(index, x * powValue);
      }
    }
  `}}class LRNSharedProgram{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[256,1,1],this.maxAllowRadius=16,assert(t<=this.maxAllowRadius,()=>`Radius must be less than or equal to ${this.maxAllowRadius}, current radius is ${t}`),this.outputShape=e,this.elementsPerWorkgroup=this.workgroupSize[0]-2*this.maxAllowRadius,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,[this.elementsPerWorkgroup,this.workgroupSize[1],this.workgroupSize[2]]),this.shaderKey="lrn_shared"}getUserCode(){return`
    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;
    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};
    const maxAllowRadius = ${this.maxAllowRadius};

    ${getMainHeaderString()} {
      let localDepth = i32(localId.x);
      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;
      let xDepth = workgroupDepth + localDepth - maxAllowRadius;
      let b = i32(globalId.z) / uniforms.xShape[1];
      let r = i32(globalId.z) - b * uniforms.xShape[1];
      let c = i32(globalId.y);
      let d = workgroupDepth + localDepth;

      var x = 0.0;
      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {
        x = getX(b, r, c, xDepth);
      }
      lrnSub[localDepth] = x;
      workgroupBarrier();

      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {
        var sum = 0.0;
        let index = localDepth + maxAllowRadius;
        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {
          let z = lrnSub[index + i];
          sum = sum + z * z;
        }
        ${powOperatorSnippet}

        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);
      }
    } `}}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lrn(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{depthRadius:a,bias:i,alpha:l,beta:u}=r;let h;a>16?h=new LRNProgram(s.shape):h=new LRNSharedProgram(s.shape,a);const f=[{type:"int32",data:[a]},{type:"float32",data:[i]},{type:"float32",data:[l]},{type:"float32",data:[u]}];return t.runWebGPUProgram(h,[s],s.dtype,f)}const lrnConfig={kernelName:LRN,backendName:"webgpu",kernelFunc:lrn};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class LRNGradProgram{constructor(e){this.outputShape=[],this.variableNames=["inputImage","outputImage","dy"],this.uniforms="depthRadius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn_grad"}getUserCode(){return`
    ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let b = coords[0];
        let r = coords[1];
        let c = coords[2];

        let MIN_DEPTH_BEGIN = 0;
        let MAX_DEPTH_END = uniforms.outShape[3];
        var result = 0.0;
        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {
          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);
          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);

          var norm = 0.0;
          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {
            if (k < depthBegin) {
              continue;
            } else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            } else {
              break;
            }
          }

          norm = uniforms.alpha * norm + uniforms.bias;

          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {
            if (k < depthBegin) {
              continue;
            } else if (k >= depthBegin && k < depthEnd) {
              var dyi = -2.0 * uniforms.alpha * uniforms.beta
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * uniforms.beta);
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            } else {
              break;
            }
          }
        }

        setOutputAtIndex(index, result);
      }
    }
  `}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lrnGrad(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,y:a,dy:i}=e,{depthRadius:l,bias:u,alpha:h,beta:f}=r,c=new LRNGradProgram(s.shape),o=[{type:"int32",data:[l]},{type:"float32",data:[u]},{type:"float32",data:[h]},{type:"float32",data:[f]}];return t.runWebGPUProgram(c,[s,a,i],s.dtype,o)}const lrnGradConfig={kernelName:LRNGrad,backendName:"webgpu",kernelFunc:lrnGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maximum=binaryKernelFunc({opType:BinaryOpType.MAX,cpuKernelImpl:maximumImplCPU}),maximumConfig={kernelName:Maximum,backendName:"webgpu",kernelFunc:maximum};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=r,h=1,f=computePool2DInfo(s.shape,a,i,h,l,u);return poolImpl(s,f,"max",t)}const maxPoolConfig={kernelName:MaxPool,backendName:"webgpu",kernelFunc:maxPool};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3d(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{filterSize:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:h}=r,f=[1,1,1],c=computePool3DInfo(s.shape,a,i,f,l,h,u),o=new Pool3DProgram(c,"max"),d=[{type:"int32",data:[c.strideDepth,c.strideHeight,c.strideWidth]},{type:"int32",data:[c.padInfo.front,c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.inDepth,c.inHeight,c.inWidth]},{type:"int32",data:[c.effectiveFilterDepth,c.effectiveFilterHeight,c.effectiveFilterWidth]}];return t.runWebGPUProgram(o,[s],s.dtype,d)}const maxPool3DConfig={kernelName:MaxPool3D,backendName:"webgpu",kernelFunc:maxPool3d};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MaxPool2DBackpropProgram{constructor(e){this.variableNames=["dy","maxPos"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool2DBackprop"}getUserCode(){return`
      ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d = coords[3];

        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;
        let dyRCorner = dyRCCorner.x;
        let dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }
            let idyC = i32(dyC);

            let dyValue = getDy(batch, idyR, idyC, d);
            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            let curPosValue = wR * uniforms.filterDims[1] + wC;
            let mask = select(0.0, 1.0, maxPosValue == curPosValue);
            dotProd += dyValue * mask;
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}class MaxPool3DBackpropProgram{constructor(e){this.variableNames=["dy","maxPos"],this.uniforms=`strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,
      outDepth : i32, outHeight : i32, outWidth : i32`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool3DBackprop"}getUserCode(){return`
      ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let ch = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyDCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;

        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {
          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);

          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {
            continue;
          }
          let idyD = i32(dyD);

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let dyValue = getDy(batch, idyD, idyR, idyC, ch);
              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;
              let mask = select(0.0, 1.0, maxPosValue == curPosValue);
              dotProd += dyValue * mask;
            }
          }
        }

        setOutputAtIndex(index, dotProd);
      }
    }
    `}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3DGrad(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:a}=e,i=a,{filterSize:l,strides:u,pad:h,dimRoundingMode:f}=r,c=[1,1,1],o=computePool3DInfo(i.shape,l,u,c,h,f),d=new Pool3DProgram(o,"max",!0);let m=[{type:"int32",data:[o.strideDepth,o.strideHeight,o.strideWidth]},{type:"int32",data:[o.padInfo.front,o.padInfo.top,o.padInfo.left]},{type:"int32",data:[o.inDepth,o.inHeight,o.inWidth]},{type:"int32",data:[o.effectiveFilterDepth,o.effectiveFilterHeight,o.effectiveFilterWidth]}];const g=t.runWebGPUProgram(d,[i],"int32",m),y=new MaxPool3DBackpropProgram(o);m=[{type:"int32",data:[o.strideDepth,o.strideHeight,o.strideWidth]},{type:"int32",data:[o.effectiveFilterDepth-1-o.padInfo.front,o.effectiveFilterHeight-1-o.padInfo.top,o.effectiveFilterWidth-1-o.padInfo.left]},{type:"int32",data:[o.effectiveFilterDepth,o.effectiveFilterHeight,o.effectiveFilterWidth]},{type:"int32",data:[o.outDepth]},{type:"int32",data:[o.outHeight]},{type:"int32",data:[o.outWidth]}];const $=t.runWebGPUProgram(y,[s,g],i.dtype,m);return t.disposeData(g.dataId),$}const maxPool3DGradConfig={kernelName:MaxPool3DGrad,backendName:"webgpu",kernelFunc:maxPool3DGrad};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolGrad(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:a,output:i}=e,l=a;assertNotComplex([a,i],"maxPoolGrad");const{filterSize:u,strides:h,pad:f,dimRoundingMode:c}=r,o=computePool2DInfo(l.shape,u,h,1,f,c),d=new Pool2DProgram(o,"max",!0);let m=[{type:"int32",data:[o.strideHeight,o.strideWidth]},{type:"int32",data:[o.padInfo.top,o.padInfo.left]},{type:"int32",data:[o.dilationHeight,o.dilationWidth]},{type:"int32",data:[o.inHeight,o.inWidth]},{type:"int32",data:[o.effectiveFilterHeight,o.effectiveFilterWidth]}];const g=t.runWebGPUProgram(d,[l],"int32",m),y=new MaxPool2DBackpropProgram(o);m=[{type:"int32",data:[o.strideHeight,o.strideWidth]},{type:"int32",data:[o.effectiveFilterHeight-1-o.padInfo.top,o.effectiveFilterWidth-1-o.padInfo.left]},{type:"int32",data:[o.dilationHeight,o.dilationWidth]},{type:"int32",data:[o.effectiveFilterHeight,o.effectiveFilterWidth]},{type:"int32",data:[o.outHeight]},{type:"int32",data:[o.outWidth]}];const $=t.runWebGPUProgram(y,[s,g],l.dtype,m);return t.disposeData(g.dataId),$}const maxPoolGradConfig={kernelName:MaxPoolGrad,backendName:"webgpu",kernelFunc:maxPoolGrad};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolWithArgmax(n){const{inputs:e,backend:t,attrs:r}=n,{filterSize:s,strides:a,pad:i,includeBatchInIndex:l}=r,{x:u}=e;assert(u.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${u.shape.length}.`);const h=[1,1];assert(eitherStridesOrDilationsAreOne(a,h),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${h}'`);const f=computePool2DInfo(u.shape,s,a,h,i),c=[{type:"int32",data:[f.strideHeight,f.strideWidth]},{type:"int32",data:[f.padInfo.top,f.padInfo.left]},{type:"int32",data:[f.dilationHeight,f.dilationWidth]},{type:"int32",data:[f.inHeight,f.inWidth]},{type:"int32",data:[f.effectiveFilterHeight,f.effectiveFilterWidth]}];let o=new Pool2DProgram(f,"max",!1);const d=t.runWebGPUProgram(o,[u],u.dtype,c);o=new Pool2DProgram(f,"max",!0,!0,l);const m=t.runWebGPUProgram(o,[u],"int32",c);return[d,m]}const maxPoolWithArgmaxConfig={kernelName:MaxPoolWithArgmax,backendName:"webgpu",kernelFunc:maxPoolWithArgmax};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function min(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,keepDims:i}=r;return reduce(s,a,i,"min",t)}const minConfig={kernelName:Min,backendName:"webgpu",kernelFunc:min};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const minimum=binaryKernelFunc({opType:BinaryOpType.MIN,cpuKernelImpl:minimumImplCPU}),minimumConfig={kernelName:Minimum,backendName:"webgpu",kernelFunc:minimum};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MirrorPadProgram{constructor(e,t,r){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((s,a)=>s[0]+e[a]+s[1]),this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,t.map((s,a)=>{this.uniforms+=` pad${a} : vec2<i32>,`}),this.offset=r==="reflect"?0:1,this.shaderKey=`mirrorPad_${r}`}getUserCode(){const e=this.xShape.length,t=this.xShape.map((h,f)=>`uniforms.pad${f}[0]`).join(","),r=this.xShape.map((h,f)=>`uniforms.pad${f}[0] + uniforms.xShape${e>1?`[${f}]`:""}`).join(","),s=e===1?"start":"start[i]",a=e===1?"end":"end[i]",i=e===1?"outC":"outC[i]",l=getCoordsDataType(e),u=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let start = ${l}(${t});
          let end = ${l}(${r});
          var outC = getCoordsFromIndex(index);
          for (var i = 0; i < ${e}; i = i + 1) {
            if (${i} < ${s}) {
              ${i} = ${s} * 2 - ${i} - ${this.offset};
            } else if(${i} >= ${a}) {
              ${i} = (${a} - 1) * 2 - ${i} + ${this.offset};
            }
          }
          let coords = outC - start;
          setOutputAtIndex(index, getX(${u}));
        }
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const mirrorPadConfig={kernelName:MirrorPad,backendName:"webgpu",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{x:r}=n,{paddings:s,mode:a}=e,i=t,l=s.map(f=>({type:"int32",data:[f[0],f[1]]})),u=new MirrorPadProgram(r.shape,s,a);return i.runWebGPUProgram(u,[r],r.dtype,l)}};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const mod=binaryKernelFunc({opType:BinaryOpType.MOD}),modConfig={kernelName:Mod,backendName:"webgpu",kernelFunc:mod};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MultinomialProgram{constructor(e,t){this.variableNames=["probs"],this.outputShape=[],this.uniforms="seed : f32, numOutcomes: i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="multinomial"}getUserCode(){return`
    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {
      let HASHSCALE1 = 443.8975;
      let p = resultUV * seed;
      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);
      p3 = p3 + dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let batch = coords[0];

        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),
            f32(coords[0]) / f32(uniforms.outShape[0]));
        let r = random(uniforms.seed, resUV);
        var cdf = 0.0;
        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {
          cdf = cdf + getProbs(batch, i);

          if (r < cdf) {
            setOutputAtIndexI32(index, i);
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);
      }
    }
  `}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SoftmaxProgram{constructor(e){this.variableNames=["logits"],this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=[this.outputShape[0],1,1],this.outputShape[1]>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.shaderKey="softmax"}getUserCode(){return`
    var<workgroup> buf : array<f32, ${this.workgroupSize[0]}>;
    var<workgroup> rowMaxShared : f32;
    var<workgroup> rowSumShared : f32;
    const blockSize = ${this.workgroupSize[0]};
    ${getMainHeaderString("index")} {
      let row = index / blockSize;
      let tid = i32(localId.x);
      let cols = uniforms.outShape[1];

      var threadMax = -3.402823e+38f;
      for (var col = tid; col < cols; col += blockSize) {
        let value = getLogits(row, col);
        threadMax = max(threadMax, value);
      }
      if (tid < cols) {
        buf[tid] = threadMax;
      }
      workgroupBarrier();

      var reduceSize = min(cols, blockSize);
      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
        reduceSize = currSize + (reduceSize & 1);
        if (tid < currSize) {
          buf[tid] = max(buf[tid], buf[tid + reduceSize]);
        }
        workgroupBarrier();
      }

      if (tid == 0) {
        rowMaxShared = buf[0];
      }
      workgroupBarrier();

      var threadSum = 0.0;
      for (var col = tid; col < cols; col += blockSize) {
        let subExp = exp(getLogits(row, col) - rowMaxShared);
        threadSum += subExp;
      }
      buf[tid] = threadSum;
      workgroupBarrier();

      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {
        if (tid < currSize) {
          buf[tid] = buf[tid] + buf[tid + currSize];
        }
        workgroupBarrier();
      }

      if (tid == 0) {
        rowSumShared = buf[0];
      }
      workgroupBarrier();

      for (var col = tid; col < cols; col += blockSize) {
        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;
        setOutputAtCoords(row, col, value);
      }
  }
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softmax(n){const{inputs:e,backend:t,attrs:r}=n,{logits:s}=e,{dim:a}=r,i=reshape$1({inputs:{x:s},backend:t,attrs:{shape:[sizeFromShape(s.shape)/s.shape[a],s.shape[a]]}}),l=new SoftmaxProgram(i.shape),u=t.runWebGPUProgram(l,[i],s.dtype),h=reshape$1({inputs:{x:u},backend:t,attrs:{shape:s.shape}});return t.disposeData(i.dataId),t.disposeData(u.dataId),h}const softmaxConfig={kernelName:Softmax,backendName:"webgpu",kernelFunc:softmax};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function multinomial(n){const{inputs:e,backend:t,attrs:r}=n,{logits:s}=e,{numSamples:a,seed:i,normalized:l}=r,u=l?s:softmax({inputs:{logits:s},backend:t,attrs:{dim:s.shape.length-1}}),h=u.shape[0],f=u.shape[1],c=new MultinomialProgram(h,a),o=[{type:"float32",data:[i]},{type:"int32",data:[f]}],d=t.runWebGPUProgram(c,[u],"int32",o);return l||t.disposeData(u.dataId),d}const multinomialConfig={kernelName:Multinomial,backendName:"webgpu",kernelFunc:multinomial};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function neg(n){const{inputs:e,backend:t}=n,{x:r}=e;if(t.shouldExecuteOnCPU([r])){const a=t.tensorMap.get(r.dataId),[i,l]=negImplCPU(a.values,r.shape,r.dtype);return t.makeTensorInfo(l,r.dtype,i)}const s=new UnaryOpProgram(r.shape,UnaryOpType.NEG);return t.runWebGPUProgram(s,[r],r.dtype)}const negConfig={kernelName:Neg,backendName:"webgpu",kernelFunc:neg};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppressionV3(n){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:t,attrs:r}=n,{boxes:s,scores:a}=e,{maxOutputSize:i,iouThreshold:l,scoreThreshold:u}=r,h=t.readSync(s.dataId),f=t.readSync(a.dataId),{selectedIndices:c}=nonMaxSuppressionV3Impl(h,f,i,l,u);return t.makeTensorInfo([c.length],"int32",new Int32Array(c))}const nonMaxSuppressionV3Config={kernelName:NonMaxSuppressionV3,backendName:"webgpu",kernelFunc:nonMaxSuppressionV3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppressionV5(n){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:t,attrs:r}=n,{boxes:s,scores:a}=e,{maxOutputSize:i,iouThreshold:l,scoreThreshold:u,softNmsSigma:h}=r,f=t.readSync(s.dataId),c=t.readSync(a.dataId),o=i,d=l,m=u,g=h,{selectedIndices:y,selectedScores:$}=nonMaxSuppressionV5Impl(f,c,o,d,m,g);return[t.makeTensorInfo([y.length],"int32",new Int32Array(y)),t.makeTensorInfo([$.length],"float32",new Float32Array($))]}const nonMaxSuppressionV5Config={kernelName:NonMaxSuppressionV5,backendName:"webgpu",kernelFunc:nonMaxSuppressionV5};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class OneHotProgram{constructor(e,t){this.variableNames=["x"],this.uniforms="onValue : f32, offValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="onehot"}getUserCode(){return`
      ${getMainHeaderString("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,
                                      f32(i32(round(getX(coords.x))) == coords.y)));
        }
      }
    `}}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function oneHot(n){const{inputs:e,backend:t,attrs:r}=n,{indices:s}=e,{dtype:a,depth:i,onValue:l,offValue:u}=r,h=sizeFromShape(s.shape),f=new OneHotProgram(h,i),c=reshape$1({inputs:{x:s},backend:t,attrs:{shape:[h]}}),o=[{type:"float32",data:[l]},{type:"float32",data:[u]}],d=t.runWebGPUProgram(f,[c],a,o);t.disposeData(c.dataId);const m=[...s.shape,i],g=reshape$1({inputs:{x:d},backend:t,attrs:{shape:m}});return t.disposeData(d.dataId),g}const oneHotConfig={kernelName:OneHot,backendName:"webgpu",kernelFunc:oneHot};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zerosLike(n){const{inputs:e,backend:t}=n,{x:r}=e;if(r.dtype==="complex64"){const s=real({inputs:{input:r},backend:t}),a=zerosLike({inputs:{x:s},backend:t}),i=imag({inputs:{input:r},backend:t}),l=zerosLike({inputs:{x:i},backend:t}),u=complex({inputs:{real:a,imag:l},backend:t});return t.disposeData(s.dataId),t.disposeData(a.dataId),t.disposeData(i.dataId),t.disposeData(l.dataId),u}else return fill({attrs:{shape:r.shape,dtype:r.dtype,value:r.dtype==="string"?"":0},backend:t})}const zerosLikeConfig={kernelName:ZerosLike,backendName:"webgpu",kernelFunc:zerosLike};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function onesLike(n){const{inputs:e,backend:t}=n,{x:r}=e;if(r.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(r.dtype==="complex64"){const s=real({inputs:{input:r},backend:t}),a=onesLike({inputs:{x:s},backend:t}),i=imag({inputs:{input:r},backend:t}),l=zerosLike({inputs:{x:i},backend:t}),u=complex({inputs:{real:a,imag:l},backend:t});return t.disposeData(s.dataId),t.disposeData(a.dataId),t.disposeData(i.dataId),t.disposeData(l.dataId),u}else return fill({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:t})}const onesLikeConfig={kernelName:OnesLike,backendName:"webgpu",kernelFunc:onesLike};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pack(n){const{inputs:e,backend:t,attrs:r}=n,{axis:s}=r;if(e.length===1)return expandDims({inputs:{input:e[0]},backend:t,attrs:{dim:s}});const a=e[0].shape,i=e[0].dtype;e.forEach(f=>{assertShapesMatch(a,f.shape,"All tensors passed to stack must have matching shapes"),assert(i===f.dtype,()=>"All tensors passed to stack must have matching dtypes")});const l=[],u=e.map(f=>{const c=expandDims({inputs:{input:f},backend:t,attrs:{dim:s}});return l.push(c),c}),h=concat({inputs:u,backend:t,attrs:{axis:s}});return l.forEach(f=>t.disposeData(f.dataId)),h}const packConfig={kernelName:Pack,backendName:"webgpu",kernelFunc:pack};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function padCommon(n,e=!1){const t=n.length,r=getCoordsDataType(t),s=n.map((c,o)=>`uniforms.pad${o}[0]`).join(","),a=n.map((c,o)=>`uniforms.pad${o}[0] + uniforms.xShape${t>1?`[${o}]`:""}`).join(","),i=t>1?`${r}(${s})`:`${s}`,l=t>1?`${r}(${a})`:`${a}`,u=t>1?"any(paddedCoords < start)":"paddedCoords < start",h=t>1?"any(paddedCoords >= end)":"paddedCoords >= end",f=t>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,t):"coords";return`
        let start = ${i};
        let end = ${l};
        if (${u} || ${h}) {
          setOutputAtIndex(index, ${e?0:"uniforms.constantValue"});
        } else {
          let coords = paddedCoords - start;
          setOutputAtIndex(index, getX(${f}));
        }
  `}class PadProgram{constructor(e,t){this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((r,s)=>r[0]+e[s]+r[1]),this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),t.map((r,s)=>{this.uniforms+=` pad${s} : vec2<i32>,`}),this.xShape=e,this.shaderKey="pad"}getUserCode(){return`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let paddedCoords = getCoordsFromIndex(index);
          ${padCommon(this.xShape)}
        }
      }
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const padV2=n=>{const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{paddings:a,constantValue:i}=r;if(a.every(h=>arraysEqual(h,[0,0])))return identity({inputs:{x:s},backend:t});if(sizeFromShape(s.shape)===0){const h=a.map((f,c)=>f[0]+s.shape[c]+f[1]);return fill({backend:t,attrs:{shape:h,value:i,dtype:s.dtype}})}const l=[{type:"float32",data:[i]}];a.map(h=>l.push({type:"int32",data:[h[0],h[1]]}));const u=new PadProgram(s.shape,a);return t.runWebGPUProgram(u,[s],s.dtype,l)},padV2Config={kernelName:PadV2,backendName:"webgpu",kernelFunc:padV2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const pow=binaryKernelFunc({opType:BinaryOpType.POW}),powConfig={kernelName:Pow,backendName:"webgpu",kernelFunc:pow};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prelu(n){const{inputs:e,backend:t}=n,{x:r,alpha:s}=e,a=new BinaryOpProgram(BinaryOpType.PRELU,r.shape,s.shape);return t.runWebGPUProgram(a,[r,s],"float32")}const preluConfig={kernelName:Prelu,backendName:"webgpu",kernelFunc:prelu};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prod(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:a,keepDims:i}=r;return reduce(s,a,i,"prod",t)}const prodConfig={kernelName:Prod,backendName:"webgpu",kernelFunc:prod};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const range=n=>{const{backend:e,attrs:t}=n,{start:r,stop:s,step:a,dtype:i}=t,l=rangeImplCPU(r,s,a,i);return e.makeTensorInfo([l.length],i,l)},rangeConfig={kernelName:Range,backendName:"webgpu",kernelFunc:range};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const realDiv=binaryKernelFunc({opType:BinaryOpType.DIV}),realDivConfig={kernelName:RealDiv,backendName:"webgpu",kernelFunc:realDiv};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reciprocal=unaryKernelFunc({opType:UnaryOpType.RECIPROCAL}),reciprocalConfig={kernelName:Reciprocal,backendName:"webgpu",kernelFunc:reciprocal};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const relu=unaryKernelFunc({opType:UnaryOpType.RELU}),reluConfig={kernelName:Relu,backendName:"webgpu",kernelFunc:relu};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const relu6=unaryKernelFunc({opType:UnaryOpType.RELU6}),relu6Config={kernelName:Relu6,backendName:"webgpu",kernelFunc:relu6};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeBilinearProgram{constructor(e,t,r){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,r,e[3]],this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="resizeBilinear"}getUserCode(){return`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC =
            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *
            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);

          // Compute the four integer indices.
          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);
          let sourceCeilRC = vec2<i32>(
            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));

          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);
          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);
          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);
          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);

          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);

          let top = topLeft + (topRight - topLeft) * fracRC.y;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
          let newValue = top + (bottom - top) * fracRC.x;

          setOutputAtIndex(index, newValue);
        }
      }
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinear(n){const{inputs:e,backend:t,attrs:r}=n,{images:s}=e,{alignCorners:a,size:i,halfPixelCenters:l}=r,[u,h]=i,f=a&&u>1?1:0,c=a&&h>1?1:0,d=[{type:"float32",data:[f,c]},{type:"float32",data:[l?.5:0]}],m=new ResizeBilinearProgram(s.shape,u,h);return t.runWebGPUProgram(m,[s],"float32",d)}const resizeBilinearConfig={kernelName:ResizeBilinear,backendName:"webgpu",kernelFunc:resizeBilinear};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeBilinearBackpropProgram{constructor(e,t){this.variableNames=["dy"],this.uniforms=`effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,
       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey=`resizeBilinearBackprop_${t}`}getUserCode(){return`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let b = coords[0];
          let d = coords[3];
          let r = coords[1];
          let c = coords[2];

          var accumulator = 0.0;

          // Compute bounds for where in dy we will look
          let startRLerp = floor(f32(r) * uniforms.invHeightScale);
          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));

          let startCLerp = floor(f32(c) * uniforms.invWidthScale);
          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));

          // Loop over dy
          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {
            let dyR = startDyR + dyROffset;

            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {
              continue;
            }

            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {
              let dyC = startDyC + dyCOffset;

              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {
                continue;
              }

              let dxR = f32(dyR) * uniforms.heightScale;
              let topDxRIndex = i32(floor(dxR));
              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));
              let dxRLerp = dxR - f32(topDxRIndex);
              let inverseDxRLerp = 1.0 - dxRLerp;

              let dxC = f32(dyC) * uniforms.widthScale;
              let leftDxCIndex = i32(floor(dxC));
              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));
              let dxCLerp = dxC - f32(leftDxCIndex);
              let inverseDxCLerp = 1.0 - dxCLerp;

              if (r == topDxRIndex && c == leftDxCIndex) {
                // topLeft
                accumulator +=
                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
              }

              if (r == topDxRIndex && c == rightDxCIndex) {
                // topRight
                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
              }

              if (r == bottomDxRIndex && c == leftDxCIndex) {
                // bottomLeft
                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
              }

              if (r == bottomDxRIndex && c == rightDxCIndex) {
                // bottomRight
                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
              }
            }
          }
          // End loop over dy

          setOutputAtIndex(index, accumulator);
        }
      }
    `}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinearGrad(n){const{inputs:e,backend:t,attrs:r}=n,{images:s,dy:a}=e,{alignCorners:i}=r,[,l,u]=s.shape,[,h,f]=a.shape,c=[i&&h>1?l-1:l,i&&f>1?u-1:u],o=[i&&h>1?h-1:h,i&&f>1?f-1:f],d=c[0]/o[0],m=c[1]/o[1],g=1/d,y=1/m,$=Math.ceil(g)*2+2,b=Math.ceil(y)*2+2,x=new ResizeBilinearBackpropProgram(s.shape,i),w=[{type:"int32",data:c},{type:"int32",data:o},{type:"float32",data:[d]},{type:"float32",data:[m]},{type:"float32",data:[g]},{type:"float32",data:[y]},{type:"int32",data:[$]},{type:"int32",data:[b]}];return t.runWebGPUProgram(x,[a],a.dtype,w)}const resizeBilinearGradConfig={kernelName:ResizeBilinearGrad,backendName:"webgpu",kernelFunc:resizeBilinearGrad};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeNearestNeighborProgram{constructor(e,t,r,s){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,r,e[3]],this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.halfPixelCenters=s,this.shaderKey=`resizeNearest_${s}`}getUserCode(){let e;return this.halfPixelCenters?e="max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":e="vec2<f32>(rc) * effectiveInputOverOutputRatioRC",`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC = ${e};

          // Compute the coordinators of nearest neighbor point.
          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));
          let sourceNearestRC = vec2<i32>(
            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));
          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);

          setOutputAtIndex(index, newValue);
        }
      }
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighbor(n){const{inputs:e,backend:t,attrs:r}=n,{images:s}=e,{alignCorners:a,halfPixelCenters:i,size:l}=r,[u,h]=l,f=a&&u>1?1:0,c=a&&h>1?1:0,d=[{type:"float32",data:[f,c]},{type:"float32",data:[a?.5:0]}],m=new ResizeNearestNeighborProgram(s.shape,u,h,i);return t.runWebGPUProgram(m,[s],s.dtype,d)}const resizeNearestNeighborConfig={kernelName:ResizeNearestNeighbor,backendName:"webgpu",kernelFunc:resizeNearestNeighbor};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeNearestNeigborBackpropProgram{constructor(e,t){this.variableNames=["dy"],this.uniforms=`effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,
       winHeight : i32, winWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey=`resizeNearestNeigborBackprop_${t}`}getUserCode(){return`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let b = coords[0];
          let d = coords[3];
          let r = coords[1];
          let c = coords[2];

          var accumulator = 0.0;

          // Compute bounds for where in dy we will look
          let startRLerp = floor(f32(r) * uniforms.invHeightScale);
          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));

          let startCLerp = floor(f32(c) * uniforms.invWidthScale);
          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));

          // Loop over dy
          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {
            let dyR = startDyR + dyROffset;

            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {
              continue;
            }

            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {
              let dyC = startDyC + dyCOffset;

              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {
                continue;
              }

              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *
                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));

              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *
                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));

              let sourceNearestRow =
                  i32(min(f32(uniforms.outShape[1] - 1),
                  ${this.alignCorners?"floor(sourceFracRow + 0.5)":"floor(sourceFracRow)"}));

              let sourceNearestCol =
                  i32(min(f32(uniforms.outShape[2] - 1),
                  ${this.alignCorners?"floor(sourceFracCol + 0.5)":"floor(sourceFracCol)"}));

              if (r == sourceNearestRow && c == sourceNearestCol) {
                accumulator += getDy(b, dyR, dyC, d);
              }
            }
          }
          // End loop over dy

          setOutputAtIndex(index, accumulator);
        }
      }
    `}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighborGrad(n){const{inputs:e,backend:t,attrs:r}=n,{images:s,dy:a}=e,{alignCorners:i}=r,[,l,u]=s.shape,[,h,f]=a.shape,c=[i&&h>1?l-1:l,i&&f>1?u-1:u],o=[i&&h>1?h-1:h,i&&f>1?f-1:f],d=c[0]/o[0],m=c[1]/o[1],g=1/d,y=1/m,$=Math.ceil(g)*2+2,b=Math.ceil(y)*2+2,x=new ResizeNearestNeigborBackpropProgram(s.shape,i),w=[{type:"int32",data:c},{type:"int32",data:o},{type:"float32",data:[g]},{type:"float32",data:[y]},{type:"int32",data:[$]},{type:"int32",data:[b]}];return t.runWebGPUProgram(x,[a],a.dtype,w)}const resizeNearestNeighborGradConfig={kernelName:ResizeNearestNeighborGrad,backendName:"webgpu",kernelFunc:resizeNearestNeighborGrad};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ReverseProgram{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=" axis : vec4<i32>,",this.shaderKey="reverse"}getUserCode(){return`
      
      // Using uniform variables as judging conditions, so the function has
      // coherent execution within all threads.
      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {
        var reverseCoords = coords;
        if (uniforms.axis[0] == 1) {
          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;
        }
        if (uniforms.axis[1] == 1) {
          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;
        }
        if (uniforms.axis[2] == 1) {
          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;
        }
        if (uniforms.axis[3] == 1) {
          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;
        }

        return reverseCoords;
      }
    
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let reverseCoords = getReverseCoords(coords);
          setOutputAtIndex(index, getX(reverseCoords[0],
              reverseCoords[1], reverseCoords[2], reverseCoords[3]));
        }
      }
    `}}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{dims:a}=r,i=s.shape.length;if(i===0)return identity({inputs:{x:s},backend:t});const l=s.shape,u=[1,1,1,1];l.forEach((y,$)=>{const b=$+4-i;u[b]=y});const h=parseAxisParam(a,s.shape),f=[0,0,0,0];h.forEach(y=>{const $=y+4-i;f[$]=1});const c=[{type:"int32",data:f}],o=reshape$1({inputs:{x:s},backend:t,attrs:{shape:u}}),d=new ReverseProgram(u),m=t.runWebGPUProgram(d,[o],o.dtype,c);t.disposeData(o.dataId);const g=reshape$1({inputs:{x:m},backend:t,attrs:{shape:l}});return t.disposeData(m.dataId),g}const reverseConfig={kernelName:Reverse,backendName:"webgpu",kernelFunc:reverse};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class RotateProgram{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=`centerX : f32, centerY : f32, sinRadians : f32,
          cosRadians : f32,`,this.shaderKey="rotate",this.outputShape=e,typeof t=="number"?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}getUserCode(){return`
        ${getMainHeaderString("index")} {
          if (index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *
                uniforms.sinRadians;
            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *
                uniforms.cosRadians;
            let coordX = i32(round(coordXFloat + uniforms.centerX));
            let coordY = i32(round(coordYFloat + uniforms.centerY));
            ${this.fillSnippet}
            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&
                coordY < uniforms.xShape[1]) {
              outputValue = getX(coords[0], coordY, coordX, coords[3]);
            }
            setOutputAtIndex(index, outputValue);
          }
        }
      `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rotateWithOffsetConfig={kernelName:RotateWithOffset,backendName:"webgpu",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{image:r}=n,{radians:s,fillValue:a,center:i}=e,l=t,u=new RotateProgram(r.shape,a),[h,f]=getImageCenter(i,r.shape[1],r.shape[2]),c=[{type:"float32",data:[h]},{type:"float32",data:[f]},{type:"float32",data:[Math.sin(s)]},{type:"float32",data:[Math.cos(s)]}];return typeof a=="number"?c.push({type:"float32",data:[Number.parseFloat(a.toFixed(2))]}):c.push({type:"float32",data:a}),l.runWebGPUProgram(u,[r],r.dtype,c)}};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const round=unaryKernelFunc({opType:UnaryOpType.ROUND}),roundConfig={kernelName:Round,backendName:"webgpu",kernelFunc:round};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rsqrt=unaryKernelFunc({opType:UnaryOpType.RSQRT,cpuKernelImpl:rsqrtImplCPU}),rsqrtConfig={kernelName:Rsqrt,backendName:"webgpu",kernelFunc:rsqrt};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ScatterProgram{constructor(e,t,r,s,a,i,l,u=!0){this.variableNames=["updates","indices"],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=i,this.type=l,this.sumDupeIndices=u,this.dispatchLayout=flatDispatchLayout(e),this.dispatch=computeDispatch(this.dispatchLayout,e,this.workgroupSize),this.sliceDimGreaterThanOne=t>1,this.shaderKey=`scatter_${r}_${s}_${this.sliceDimGreaterThanOne}_${l}_${u}`;const h=getCoordsDataType(a.length);this.uniforms=`sliceDim : i32, strides: ${h}, updatesSize: i32,`,this.updatesRank=s,this.indicesRank=r}getUserCode(){let e="";this.indicesRank===1?e="coords[0]":this.indicesRank===2&&(e="coords[0], j");const t=`getIndices(${e})`,r=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides";let s="",a="";this.dispatchLayout.x.length===1?(s="flattenedIndex",a=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {
        return index;
      }
      `):this.dispatchLayout.x.length===2&&(s="vec2<i32>(flattenedIndex, coords[1])",a=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {
        // N.B. |updates| could be a scalar tensor, conceptually representing a
        // 2D tensor with all values equal to that. By design, its size must be
        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|
        // gives the other.
        let sliceSize = uniforms.outShape[1];
        let d0 = index / sliceSize;
        let d1 = index - d0 * sliceSize;
        return vec2<i32>(d0, d1);
      }
      `);const l=`getUpdates(${Array.from({length:this.updatesRank},(h,f)=>`coords[${f}]`).join(", ")})`;return`
    ${a}
      ${getMainHeaderString("index")} {
        if (index < uniforms.updatesSize) {
          let coords = getUpdatesCoordsFromFlatIndex(index);
          var flattenedIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexInside = i32(round(${t}));
            flattenedIndex = flattenedIndex + indexInside * ${r};
          }
          let updateValue =
              ${dataTypeToGPUType(this.type)}(${l});
          let flatIndex = getOutputIndexFromCoords(${s});

          ${this.sumDupeIndices?atomicAddSnippet("&result[flatIndex]","updateValue",this.type):"atomicStore(&result[flatIndex], bitcast<i32>(updateValue));"}
        }
      }`}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterNd(n){const{inputs:e,backend:t,attrs:r}=n,{indices:s,updates:a}=e,{shape:i}=r,{sliceRank:l,numUpdates:u,sliceSize:h,strides:f,outputSize:c}=calculateShapes(a,s,i),o=[c/h,h];if(c===0)return t.makeTensorInfo(i,s.dtype);const d=reshape$1({inputs:{x:s},backend:t,attrs:{shape:[u,l]}}),m=reshape$1({inputs:{x:a},backend:t,attrs:{shape:[u,h]}}),g=m.dtype,y=fill({backend:t,attrs:{shape:o,value:0,dtype:g}}),$=sizeFromShape(m.shape),b=[{type:"int32",data:[l]},{type:"int32",data:f},{type:"int32",data:[$]}],x=new ScatterProgram(m.shape,l,d.shape.length,m.shape.length,f,o,g),w=t.runWebGPUProgram(x,[m,d],g,b,y),v=reshape$1({inputs:{x:w},backend:t,attrs:{shape:i}});return t.disposeData(d.dataId),t.disposeData(m.dataId),t.disposeData(w.dataId),v}const scatterNdConfig={kernelName:ScatterNd,backendName:"webgpu",kernelFunc:scatterNd};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SearchSortedProgram{constructor(e,t){this.outputShape=[],this.variableNames=["sortedSequence","values"],this.uniforms="numInputs : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.side=t,this.shaderKey=`search_sorted_${t}`}getUserCode(){return`
      fn findBound(batch: i32, value: f32) -> i32 {
        var left = i32(0);
        var right = uniforms.numInputs;
        while (left < right) {
          var mid = (left + right) / 2;
          if (getSortedSequence(batch, mid) ${this.side==="left"?"<":"<="} value) {
            left = mid + 1;
          } else {
            right = mid;
          }
        }
        return right;
      }

      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let value = getValuesByOutputIndex(index);
          setOutputAtIndexI32(index, findBound(coords[0], value));
        }
      }
    `}}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function searchSorted(n){const{inputs:e,backend:t,attrs:r}=n,{sortedSequence:s,values:a}=e,{side:i}=r,l=new SearchSortedProgram([a.shape[0],a.shape[1]],i),u=[{type:"int32",data:[s.shape[1]]}];return t.runWebGPUProgram(l,[s,a],"int32",u)}const searchSortedConfig={kernelName:SearchSorted,backendName:"webgpu",kernelFunc:searchSorted};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SelectProgram{constructor(e,t,r){this.variableNames=["c","a","b"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.cRank=e,this.rank=r,this.shaderKey="select"}getUserCode(){let e,t;if(this.rank>4)throw Error(`Where for rank ${this.rank} is not yet supported`);if(this.rank===1)t="resRC",e="resRC";else{const s=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let l=0;l<this.outputShape.length;l++)i.push(`${s[l]}`),l<this.cRank&&a.push(`${s[l]}`);e=a.join(),t=i.join()}return`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let cVal = getC(${e});
          if (cVal >= 1.0) {
            setOutputAtIndex(index, getA(${t}));
          } else {
            setOutputAtIndex(index, getB(${t}));
          }
        }
      }
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function select(n){const{inputs:e,backend:t}=n,{condition:r,t:s,e:a}=e,i=new SelectProgram(r.shape.length,s.shape,s.shape.length);return t.runWebGPUProgram(i,[r,s,a],upcastType(s.dtype,a.dtype))}const selectConfig={kernelName:Select,backendName:"webgpu",kernelFunc:select};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const selu=unaryKernelFunc({opType:UnaryOpType.SELU}),seluConfig={kernelName:Selu,backendName:"webgpu",kernelFunc:selu};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sigmoid=unaryKernelFunc({opType:UnaryOpType.SIGMOID}),sigmoidConfig={kernelName:Sigmoid,backendName:"webgpu",kernelFunc:sigmoid};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sign=unaryKernelFunc({opType:UnaryOpType.SIGN}),signConfig={kernelName:Sign,backendName:"webgpu",kernelFunc:sign};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sin=unaryKernelFunc({opType:UnaryOpType.SIN}),sinConfig={kernelName:Sin,backendName:"webgpu",kernelFunc:sin};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sinh=unaryKernelFunc({opType:UnaryOpType.SINH}),sinhConfig={kernelName:Sinh,backendName:"webgpu",kernelFunc:sinh};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const softplus=unaryKernelFunc({opType:UnaryOpType.SOFTPLUS}),softplusConfig={kernelName:Softplus,backendName:"webgpu",kernelFunc:softplus};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SpaceToBatchNDProgram{constructor(e,t,r,s,a,i){this.variableNames=["x"],this.outputShape=[],this.uniforms="",this.workgroupSize=[64,1,1],this.size=!0;const l=new Array(s.length);for(let u=0;u<l.length;u++)l[u]=s[a[u]];this.outputShape=l,this.newDim=a,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,this.paddedXShape=t,this.uniforms+=`reshapedPaddedXShape : ${getCoordsDataType(s.length)}, paddedXShapeStrides : ${getCoordsDataType(i)}, `,r.map((u,h)=>{this.uniforms+=` pad${h} : vec2<i32>,`}),this.shaderKey=`spaceToBatchND_${a}`}getUserCode(){const e=getCoordsDataType(this.outputShape.length),t=getSwitchedCoords(this.newDim);return`
      ${getCoordsFromIndexSnippet(this.paddedXShape,"PaddedX")}
      ${getMainHeaderString("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${e}(${t}), uniforms.reshapedPaddedXShape);
          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);
          ${padCommon(this.xShape,!0)}
        }
      }
    `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const spaceToBatchND=n=>{const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockShape:a,paddings:i}=r;assert(s.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");const l=a.reduce((b,x)=>b*x),u=[[0,0]];u.push(...i);for(let b=1+a.length;b<s.shape.length;++b)u.push([0,0]);const h=u.map((b,x)=>b[0]+s.shape[x]+b[1]),f=getReshaped(h,a,l,!1),c=getPermuted(f.length,a.length,!1),o=getReshapedPermuted(h,a,l,!1),d=computeStrides(h),m=new SpaceToBatchNDProgram(s.shape,h,u,f,c,d.length),g=[{type:"int32",data:f},{type:"int32",data:d}];u.map(b=>g.push({type:"int32",data:[b[0],b[1]]}));const y=t.runWebGPUProgram(m,[s],s.dtype,g),$=reshape$1({inputs:{x:y},backend:t,attrs:{shape:o}});return t.disposeData(y.dataId),$},spaceToBatchNDConfig={kernelName:SpaceToBatchND,backendName:"webgpu",kernelFunc:spaceToBatchND};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SparseSegmentSumProgram{constructor(e,t,r){this.variableNames=["input","indices","segmentIds"],this.outputShape=[],this.uniforms="segmentSize : i32, sparseSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e,this.type=r,this.dispatchLayout=flatDispatchLayout([t]),this.dispatch=computeDispatch(this.dispatchLayout,[t],this.workgroupSize),this.shaderKey="sparseSegmentSum"}getUserCode(){return`
    ${getMainHeaderString("index")} {
      if (index < uniforms.sparseSize) {
        let indexInSegmentIds = index / uniforms.segmentSize;
        let indexInSegment = index % uniforms.segmentSize;
        let indexInInput = indices[indexInSegmentIds];
        let segmentId = segmentIds[indexInSegmentIds];

        let value = input[indexInInput * uniforms.segmentSize + indexInSegment];
        let outIndex = segmentId * uniforms.segmentSize + indexInSegment;
        ${atomicAddSnippet("&result[outIndex]","value",this.type)}
      }
    }
  `}}class SparseSegmentIdCountProgram{constructor(e,t){this.variableNames=["segmentIds"],this.outputShape=[],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=[e],this.dispatchLayout=flatDispatchLayout(t),this.dispatch=computeDispatch(this.dispatchLayout,t,this.workgroupSize),this.shaderKey="sparseSegmentIdCountProgram"}getUserCode(){return`
    ${getMainHeaderString("index")} {
      if (index < uniforms.segmentIdsShape) {
        let segmentId = segmentIds[index];
        ${atomicAddSnippet("&result[segmentId]","1","int32")}
      }
    }
  `}}class SparseSegmentMeanProgram{constructor(e,t){this.variableNames=["segmentSum","sameSegmentIdCount"],this.outputShape=[],this.uniforms="segmentSize : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.type=t,this.dispatchLayout=flatDispatchLayout(e),this.dispatch=computeDispatch(this.dispatchLayout,e,this.workgroupSize),this.shaderKey="sparseSegmentMean"}getUserCode(){return`
    ${getMainHeaderString("index")} {
      if (index < uniforms.size) {
        let segmentId = index / uniforms.segmentSize;
        let count = sameSegmentIdCount[segmentId];
        if (count != 0) {
          ${this.type==="float32"?"setOutputAtIndex(index, segmentSum[index] / f32(count));":"setOutputAtIndexI32(index, segmentSum[index] / count);"}
        }
      }
    }
  `}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentReduce(n,e,t,r=!1,s){const i=sizeFromShape(n.shape)/n.shape[0],l=n.dtype,u=sizeFromShape(e.shape),h=s.readSync(t.dataId),c=u>0?h[u-1]+1:0;let o;const d=n.shape.slice();d[0]=c;const m=u*i,g=fill({backend:s,attrs:{shape:d,value:0,dtype:l}});o=new SparseSegmentSumProgram(d,m,l);let y=[{type:"int32",data:[i]},{type:"int32",data:[m]}];const $=s.runWebGPUProgram(o,[n,e,t],l,y,g);if(r)return $;const b=fill({backend:s,attrs:{shape:[c],value:0,dtype:"int32"}});o=new SparseSegmentIdCountProgram(c,t.shape);const x=s.runWebGPUProgram(o,[t],"int32",null,b),w=fill({backend:s,attrs:{shape:d,value:0,dtype:l}});o=new SparseSegmentMeanProgram(d,l),y=[{type:"int32",data:[i]}];const v=s.runWebGPUProgram(o,[$,x],l,y,w);return s.disposeData($.dataId),s.disposeData(x.dataId),v}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentMean(n){const{inputs:e,backend:t}=n,{data:r,indices:s,segmentIds:a}=e;return sparseSegmentReduce(r,s,a,!1,t)}const sparseSegmentMeanConfig={kernelName:SparseSegmentMean,backendName:"webgpu",kernelFunc:sparseSegmentMean};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentSum(n){const{inputs:e,backend:t}=n,{data:r,indices:s,segmentIds:a}=e;return sparseSegmentReduce(r,s,a,!0,t)}const sparseSegmentSumConfig={kernelName:SparseSegmentSum,backendName:"webgpu",kernelFunc:sparseSegmentSum};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TileProgram{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[64,1,1],this.size=!0;const r=new Array(e.length);for(let s=0;s<r.length;s++)r[s]=e[s]*t[s];this.outputShape=r,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}getUserCode(){const e=getSourceCoords(this.rank,"uniforms.");return`
      ${getMainHeaderString("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          setOutputAtIndex(index, getA(${e}));
        }
      }
    `}}function getSourceCoords(n,e=""){if(n>=5)throw Error(`Tile for rank ${n} is not yet supported`);if(n===1)return`(resRC % ${e}aShape)`;const t=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let s=0;s<n;s++)r.push(`(${t[s]} % ${e}aShape[${s}])`);return r.join()}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tile(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{reps:a}=r;if(t.shouldExecuteOnCPU([s])||s.dtype==="string"||s.shape.length>=5){const u=t.readSync(s.dataId),h=s.dtype==="string"?u.map(o=>decodeString(o)):u,f=buffer(s.shape,s.dtype,h),c=tileImplCPU(f,a);return t.makeTensorInfo(c.shape,c.dtype,c.values)}const i=new TileProgram(s.shape,a);return t.runWebGPUProgram(i,[s],s.dtype)}const tileConfig={kernelName:Tile,backendName:"webgpu",kernelFunc:tile};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseToDense(n){const{inputs:e,backend:t,attrs:r}=n,{sparseIndices:s,sparseValues:a,defaultValue:i}=e,{outputShape:l}=r,{sliceRank:u,numUpdates:h,sliceSize:f,strides:c,outputSize:o}=calculateShapes(a,s,l),d=!1;if(a.dtype==="string"){const C=t.bufferSync(s),I=t.bufferSync(a),N=decodeString(t.readSync(i.dataId)[0]),P=scatterImplCPU(C,I,l,o,f,h,u,c,N,d);return t.makeTensorInfo(l,P.dtype,P.values)}const m=[o/f,f],g=reshape$1({inputs:{x:s},backend:t,attrs:{shape:[h,u]}}),y=a.shape.length?reshape$1({inputs:{x:a},backend:t,attrs:{shape:[h,f]}}):identity({inputs:{x:a},backend:t}),$=y.dtype,b=t.makeTensorInfo([],$,makeZerosTypedArray(1,$)),x=reshape$1({inputs:{x:i},backend:t,attrs:{shape:Array(m.length).fill(1)}}),w=tile({inputs:{x},backend:t,attrs:{reps:m}}),v=sizeFromShape([h,f]),S=[{type:"int32",data:[u]},{type:"int32",data:c},{type:"int32",data:[v]}];switch(h){case 0:break;case 1:{const C=new ScatterProgram([h,f],u,g.shape.length,y.shape.length,c,m,$,d);t.runWebGPUProgram(C,[y,g],$,S,w)}break;default:{const C=new ScatterProgram([h,f],u,g.shape.length,b.shape.length,c,m,$,d);t.runWebGPUProgram(C,[b,g],$,S,w)}{const C=new ScatterProgram([h,f],u,g.shape.length,y.shape.length,c,m,$);t.runWebGPUProgram(C,[y,g],$,S,w)}}const T=reshape$1({inputs:{x:w},backend:t,attrs:{shape:l}});return t.disposeData(g.dataId),t.disposeData(y.dataId),t.disposeData(x.dataId),t.disposeData(b.dataId),t.disposeData(w.dataId),T}const sparseToDenseConfig={kernelName:SparseToDense,backendName:"webgpu",kernelFunc:sparseToDense};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function splitV(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{numOrSizeSplits:a,axis:i}=r,l=parseAxisParam(i,s.shape)[0],u=prepareSplitSize(s,a,l),h=s.shape.length,f=new Array(h).fill(0),c=s.shape.slice();return u.map(o=>{const d=[...c];d[l]=o;const m=slice({inputs:{x:s},backend:t,attrs:{begin:f,size:d}});return f[l]+=o,m})}const splitVConfig={kernelName:SplitV,backendName:"webgpu",kernelFunc:splitV};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sqrt=unaryKernelFunc({opType:UnaryOpType.SQRT}),sqrtConfig={kernelName:Sqrt,backendName:"webgpu",kernelFunc:sqrt};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squareConfig={kernelName:Square,backendName:"webgpu",kernelFunc:({inputs:n,backend:e})=>{const{x:t}=n,r=e,s=new UnaryOpProgram(t.shape,UnaryOpType.SQUARE);return r.runWebGPUProgram(s,[t],t.dtype)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squaredDifference=binaryKernelFunc({opType:BinaryOpType.SQUARED_DIFFERENCE}),squaredDifferenceConfig={kernelName:SquaredDifference,backendName:"webgpu",kernelFunc:squaredDifference};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function step({inputs:n,attrs:e,backend:t}){const{x:r}=n,s=new UnaryOpProgram(r.shape,UnaryOpType.STEP,"stepAlpha : f32,"),a=[{type:"float32",data:[e.alpha]}];return t.runWebGPUProgram(s,[r],r.dtype,a)}const stepConfig={kernelName:Step,backendName:"webgpu",kernelFunc:step};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class StridedSliceProgram{constructor(e){this.variableNames=["x"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]);const t=getCoordsDataType(this.outputShape.length);this.uniforms=`begin : ${t},  strides : ${t}, `,this.shaderKey="stridedSlice"}getUserCode(){const e=this.outputShape.length;let t="";if(e===1)t="coords * uniforms.strides + uniforms.begin";else{let s=0;t=this.outputShape.map((a,i)=>(s++,this.outputShape.length===1?`coords * uniforms.strides[${i}] + uniforms.begin[${i}]`:`coords[${s-1}] * uniforms.strides[${i}] + uniforms.begin[${i}]`)).join(",")}return`
       ${getMainHeaderString("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index);
           setOutputAtIndex(index, getX(${t}));
         }
       }
     `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSlice(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{begin:a,end:i,strides:l,beginMask:u,endMask:h,ellipsisMask:f,newAxisMask:c,shrinkAxisMask:o}=r,{finalShapeSparse:d,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:$,begin:b,end:x,strides:w}=sliceInfo(s.shape,a,i,l,u,h,f,c,o);let v;if(g)v=reshape$1({inputs:{x:s},backend:t,attrs:{shape:m}});else if(y||$){assert(s.shape.length>=1,()=>`Input must have rank at least 1, got: ${s.shape.length}`);const S=computeOutShape$2(b,x,w),T=slice({inputs:{x:s},backend:t,attrs:{begin:b,size:S}});v=reshape$1({inputs:{x:T},backend:t,attrs:{shape:m}}),t.disposeData(T.dataId)}else if(t.shouldExecuteOnCPU([s])){const T=t.readSync(s.dataId),C=buffer(s.shape,s.dtype,T),I=stridedSliceImplCPU(d,C,w,b);v=t.makeTensorInfo(m,s.dtype,I.values)}else{const T=new StridedSliceProgram(d),C=[{type:"int32",data:b},{type:"int32",data:w}],I=t.runWebGPUProgram(T,[s],s.dtype,C);v=reshape$1({inputs:{x:I},backend:t,attrs:{shape:m}}),t.disposeData(I.dataId)}return v}const stridedSliceConfig={kernelName:StridedSlice,backendName:"webgpu",kernelFunc:stridedSlice};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringNGrams(n){const{inputs:e,backend:t,attrs:r}=n,{separator:s,nGramWidths:a,leftPad:i,rightPad:l,padWidth:u,preserveShortSequences:h}=r,{data:f,dataSplits:c}=e,o=t.readSync(f.dataId),d=t.readSync(c.dataId),[m,g]=stringNGramsImplCPU(o,d,s,a,i,l,u,h);return[t.makeTensorInfo([m.length],"string",m),t.makeTensorInfo(c.shape,"int32",g)]}const stringNGramsConfig={kernelName:StringNGrams,backendName:"webgpu",kernelFunc:stringNGrams};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sub=binaryKernelFunc({opType:BinaryOpType.SUB,cpuKernelImpl:subImplCPU,supportsComplex:!0}),subConfig={kernelName:Sub,backendName:"webgpu",kernelFunc:sub};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tan=unaryKernelFunc({opType:UnaryOpType.TAN}),tanConfig={kernelName:Tan,backendName:"webgpu",kernelFunc:tan};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tanh=unaryKernelFunc({opType:UnaryOpType.TANH}),tanhConfig={kernelName:Tanh,backendName:"webgpu",kernelFunc:tanh};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensorScatterUpdate(n){const{inputs:e,backend:t,attrs:r}=n,{tensor:s,indices:a,updates:i}=e,{sliceRank:l,numUpdates:u,sliceSize:h,strides:f,outputSize:c}=calculateShapes(i,a,s.shape),o=[c/h,h];if(c===0)return t.makeTensorInfo(s.shape,a.dtype);const d=[],m=reshape$1({inputs:{x:a},backend:t,attrs:{shape:[u,l]}});d.push(m);const g=reshape$1({inputs:{x:i},backend:t,attrs:{shape:[u,h]}});d.push(g);const y=reshape$1({inputs:{x:s},backend:t,attrs:{shape:o}});d.push(y);const $=tile({inputs:{x:y},backend:t,attrs:{reps:Array(o.length).fill(1)}}),b=new ScatterProgram([u,h],l,m.shape.length,g.shape.length,f,o,s.dtype,!1),x=sizeFromShape([u,h]),w=[{type:"int32",data:[l]},{type:"int32",data:f},{type:"int32",data:[x]}],v=t.runWebGPUProgram(b,[g,m],y.dtype,w,$);d.push(v);const S=reshape$1({inputs:{x:v},backend:t,attrs:{shape:s.shape}});return d.forEach(T=>t.disposeData(T.dataId)),S}const tensorScatterUpdateConfig={kernelName:TensorScatterUpdate,backendName:"webgpu",kernelFunc:tensorScatterUpdate};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SwapProgram{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=`inputSize : i32, firstPass : i32, negativeInf : f32,
        dir : i32, inc : i32,`,this.shaderKey="swap"}getUserCode(){return`
        ${getMainHeaderString("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // We compare elements pair-wise within a group of size 2 * inc.
            // The comparing rule for each group alternates between ascending
            // and descending. Within each group, we compare each pair at
            // positions i and i+inc. To decide whether an element at position i
            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
            // inc, it is in the first half of the group, we denote it as x0,
            // otherwise we denote it as x1.
            // For example, as shown in the Bitonic top K paper referenced
            // above, Figure5(a) shows that element[1] is in the second half of
            // the group when group size is 2, but it is in the first half of
            // the group when group size is 4.
            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;
            var i = 0;
            if (isFirstInPair) {
              i = elemIdx;
            } else {
              i = elemIdx - uniforms.inc;
            }

            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }

            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.inc;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.inc));
            }

            var x0 = f32(0.0);
            var x1 = f32(0.0);
            if (i0 < uniforms.inputSize) {
              x0 = getX(batch, i0);
            } else {
              x0 = uniforms.negativeInf;
            }
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = uniforms.negativeInf;
            }

            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;
            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
            if (reverse == isGreater) {
              // Elements in opposite order of direction
              let iTemp = i0;
              i0 = i1;
              i1 = iTemp;
            }
            if (isFirstInPair) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}}class MergeProgram{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}getUserCode(){return`
        ${getMainHeaderString("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // The output size is half of the previous size.
            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _
            // (k=4), we only need to output the indices at positions |, the
            // indices at positions _ can be thrown away, see Figure5(b) After
            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced
            // above.
            // For example, the paper shows we only need to output the orange
            // bars. The output sequence should look like this | | | | | | | |.
            // Because the sequence is halved, to map the output index back to
            // the previous sequence to find the corresponding value, we need
            // to double the index. When we double the index, we basically
            // interpolate a position, so 2i looks like
            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k
            // position of each 2k positions by - elemIdx % k. E.g. for output
            // at index 4,5,6,7, we want to get the corresponding element at
            // original index 8,9,10,11, for output at index 8,9,10,11,
            // we want to get the corresponding element at original index
            // 16,17,18,19, so on and so forth.

            var i = 0;
            if (elemIdx < uniforms.k) {
              i = elemIdx;
            } else {
              i = elemIdx * 2 - elemIdx % uniforms.k;
            }
            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }
            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.k;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.k));
            }

            let x0 = getX(batch, i0);
            var x1 = f32(0.0);
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = x0;
            }

            if (x0 >= x1) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function disposeIntermediateTensorInfoOrNull(n,e){e!==null&&n.disposeData(e.dataId)}function roundUpToPow2(n){let e=1;for(;e<n;)e*=2;return e}function topK(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{k:a,sorted:i}=r,l=s.shape,u=l[l.length-1];if(t.shouldExecuteOnCPU([s])){const v=t.readSync(s.dataId),[S,T]=topKImplCPU(v,l,s.dtype,a,i);return[t.makeTensorInfo(S.shape,S.dtype,S.values),t.makeTensorInfo(T.shape,T.dtype,T.values)]}if(a===0)return l[l.length-1]=0,[t.makeTensorInfo(l,s.dtype,[]),t.makeTensorInfo(l,"int32",[])];if(u===1)return[s,fill({attrs:{shape:l,dtype:"int32",value:0},backend:t})];const f=sizeFromShape(l)/u,c=reshape$1({inputs:{x:s},attrs:{shape:[f,u]},backend:t}),o=roundUpToPow2(a),d=roundUpToPow2(u);let m=null;const g=()=>m===null?[c,c]:[c,m],y=(v,S,T)=>{const C=g(),I=new SwapProgram(T),P=[{type:"int32",data:[u]},{type:"int32",data:[m===null?1:0]},{type:"float32",data:[Number.NEGATIVE_INFINITY]},{type:"int32",data:[v]},{type:"int32",data:[S]}],F=m;m=t.runWebGPUProgram(I,C,"int32",P),disposeIntermediateTensorInfoOrNull(t,F)};for(let v=1;v<o;v*=2){const S=v*2;for(let T=v;T>=1;T/=2)y(S,T,[f,d])}for(let v=d;v>o;v/=2){const S=g(),T=new MergeProgram([f,v/2]),I=[{type:"int32",data:[u]},{type:"int32",data:[m===null?1:0]},{type:"int32",data:[o]}],N=m;m=t.runWebGPUProgram(T,S,"int32",I),disposeIntermediateTensorInfoOrNull(t,N);const P=o/2,F=P*2;for(let _=P;_>=1;_/=2)y(F,_,m.shape)}let $=m;m=slice({inputs:{x:m},backend:t,attrs:{begin:0,size:[f,a]}}),disposeIntermediateTensorInfoOrNull(t,$);let b=gatherV2({inputs:{x:c,indices:m},backend:t,attrs:{axis:1,batchDims:1}});disposeIntermediateTensorInfoOrNull(t,c);const x=l.slice(0,-1);x.push(a),$=m,m=reshape$1({inputs:{x:m},attrs:{shape:x},backend:t}),disposeIntermediateTensorInfoOrNull(t,$);const w=b;return b=reshape$1({inputs:{x:b},attrs:{shape:x},backend:t}),disposeIntermediateTensorInfoOrNull(t,w),[b,m]}const topKConfig={kernelName:TopK,backendName:"webgpu",kernelFunc:topK};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TransformProgram{constructor(e){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=flatDispatchLayout(this.outputShape),this.dispatch=computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="transform"}getUserCode(){return`
          fn mapCoord(outCoord : f32, len : f32) -> f32{
            var inCoord = outCoord;
            if(uniforms.fillModeId == 2) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  if (inCoord < sz2) {
                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +
                    inCoord;
                  }
                  if (inCoord < -len) {
                    inCoord = inCoord + sz2;
                  } else {
                    inCoord = -inCoord - 1.0;
                  }
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));
                  if (inCoord >= len) {
                    inCoord = sz2 - inCoord - 1.0;
                  }
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 3) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 4) {
              return clamp(outCoord, 0.0, len - 1.0);
            }
            return outCoord;
          }
          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,
            channel : i32) -> f32 {
            var outputValue : f32;
            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {
                outputValue = getImage(batch, coordY, coordX, channel);
            } else {
              outputValue = uniforms.fillValue;
            }
            return outputValue;
          }

          ${getMainHeaderString("index")} {
            if (index < uniforms.size) {
              let coords = getCoordsFromIndex(index);
              var outputValue : f32;
              let batch = coords[0];
              let x = coords[2];
              let y = coords[1];
              let channel = coords[3];
              let xf = f32(x);
              let yf = f32(y);
              let a1 = getTransforms(batch, 0);
              let a2 = getTransforms(batch, 1);
              let a3 = getTransforms(batch, 2);
              let b1 = getTransforms(batch, 3);
              let b2 = getTransforms(batch, 4);
              let b3 = getTransforms(batch, 5);
              let c1 = getTransforms(batch, 6);
              let c2 = getTransforms(batch, 7);
              let projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = uniforms.fillValue;
              } else {
                let inX = (a1 * xf + a2 * yf + a3) / projection;
                let inY = (b1 * xf + b2 * yf + b3) / projection;
                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));
                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));

                if (uniforms.interpolationModeId == 1) {
                  let coordY = i32(round(mapY));
                  let coordX = i32(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  let yFloor = floor(mapY);
                  let xFloor = floor(mapX);
                  let yCeil = yFloor + 1.0;
                  let xCeil = xFloor + 1.0;
                  let valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);
                  let valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutputAtIndex(index, outputValue);
            }
          }
        `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transform(n){const{inputs:e,backend:t,attrs:r}=n,{image:s,transforms:a}=e,{interpolation:i,fillMode:l,fillValue:u,outputShape:h}=r,[f,c,o,d]=s.shape,[m,g]=h??[c,o],y=[f,m,g,d],$=new TransformProgram(y),b=i==="nearest"?1:2;let x;switch(l){case"constant":x=1;break;case"reflect":x=2;break;case"wrap":x=3;break;case"nearest":x=4;break;default:x=1;break}const w=[{type:"int32",data:[b]},{type:"int32",data:[x]},{type:"float32",data:[u]}];return t.runWebGPUProgram($,[s,a],"float32",w)}const transformConfig={kernelName:Transform,backendName:"webgpu",kernelFunc:transform};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unpack(n){const{inputs:e,backend:t,attrs:r}=n,{value:s}=e;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s,l=i.shape.length,u=s.shape[a],h=new Array(l-1);let f=0;for(let g=0;g<l;g++)g!==a&&(h[f++]=i.shape[g]);const c=[],o=new Array(l).fill(0),d=i.shape.slice();d[a]=1;const m=new Array(u);for(let g=0;g<m.length;g++){o[a]=g;const y=slice({inputs:{x:i},backend:t,attrs:{begin:o,size:d}}),$=reshape$1({inputs:{x:y},backend:t,attrs:{shape:h}});m[g]=$,c.push(y)}return c.forEach(g=>t.disposeData(g.dataId)),m}const unpackConfig={kernelName:Unpack,backendName:"webgpu",kernelFunc:unpack};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class UnsortedSegmentSumProgram{constructor(e,t,r){if(this.outputShape=[],this.variableNames=["x","segmentIds"],this.uniforms="numSegments : i32, xSize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=t,this.dispatchLayout=flatDispatchLayout(e),this.dispatch=computeDispatch(this.dispatchLayout,e,this.workgroupSize),r!=="float32"&&r!=="int32")throw new Error(`UnsortedSegmentSum only supports float32 and int32
              types, does not support ${r} type.`);this.type=r,this.shaderKey="unsortedSegmentSum"}getUserCode(){return`
    ${getMainHeaderString("index")} {
      if (index < uniforms.xSize) {
        let coords = getXCoordsFromIndex(index);
        let b = coords[0];
        let inCol = coords[1];

        let segmentId = i32(getSegmentIds(inCol));
        if (segmentId >= 0) {
          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;
          let value = getX(b, inCol);

          ${atomicAddSnippet("&result[flatIndex]","value",this.type)}
        }
      }
    }
  `}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unsortedSegmentSum(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,segmentIds:a}=e,{numSegments:i}=r,l=s.shape.length,u=[];let h=0;const f=getAxesPermutation([h],l);let c=s;f!=null&&(c=transpose({inputs:{x:s},backend:t,attrs:{perm:f}}),u.push(c),h=getInnerMostAxes(1,l)[0]);const o=computeOutShape(c.shape,h,i),d=sizeFromShape([c.shape[h]]),m=reshape$1({inputs:{x:c},backend:t,attrs:{shape:[-1,d]}});u.push(m);const g=s.dtype,y=[m.shape[0],i],$=fill({backend:t,attrs:{shape:y,value:0,dtype:g}}),b=new UnsortedSegmentSumProgram(m.shape,y,g),x=[{type:"int32",data:[i]},{type:"int32",data:[sizeFromShape(m.shape)]}],w=t.runWebGPUProgram(b,[m,a],g,x,$),v=reshape$1({inputs:{x:w},backend:t,attrs:{shape:o}});u.push(w);let S=v;if(f!=null){u.push(v);const T=getUndoAxesPermutation(f);S=transpose({inputs:{x:S},backend:t,attrs:{perm:T}})}return u.forEach(T=>t.disposeData(T.dataId)),S}const unsortedSegmentSumConfig={kernelName:UnsortedSegmentSum,backendName:"webgpu",kernelFunc:unsortedSegmentSum};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const kernelConfigs=[_fusedMatMulConfig,absConfig,acosConfig,acoshConfig,addConfig,addNConfig,allConfig,anyConfig,argMaxConfig,argMinConfig,asinConfig,asinhConfig,atanConfig,atan2Config,atanhConfig,avgPoolConfig,avgPool3DConfig,avgPool3DGradConfig,avgPoolGradConfig,batchMatMulConfig,batchToSpaceNDConfig,bincountConfig,broadcastArgsConfig,castConfig,ceilConfig,clipByValueConfig,complexConfig,complexAbsConfig,concatConfig,conv2DConfig,conv2DBackpropFilterConfig,conv2DBackpropInputConfig,conv3DConfig,conv3DBackpropFilterV2Config,conv3DBackpropInputV2Config,cosConfig,coshConfig,cropAndResizeConfig,cumprodConfig,cumsumConfig,denseBincountConfig,depthToSpaceConfig,depthwiseConv2dNativeBackpropFilterConfig,depthwiseConv2dNativeBackpropInputConfig,depthwiseConv2dNativeConfig,diagConfig,dilation2DConfig,dilation2DBackpropFilterConfig,dilation2DBackpropInputConfig,drawConfig,einsumConfig,eluConfig,eluGradConfig,equalConfig,erfConfig,expConfig,expandDimsConfig,expm1Config,fftConfig,fillConfig,flipLeftRightConfig,fromPixelsConfig,floorConfig,floorDivConfig,fusedBatchNormConfig,fusedConv2DConfig,fusedDepthwiseConv2DConfig,gatherNdConfig,gatherV2Config,greaterConfig,greaterEqualConfig,identityConfig,ifftConfig,imagConfig,isFiniteConfig,isInfConfig,isNaNConfig,leakyReluConfig,lessConfig,lessEqualConfig,linSpaceConfig,log1pConfig,logConfig,logicalAndConfig,logicalNotConfig,logicalOrConfig,lrnConfig,lrnGradConfig,maxConfig,maximumConfig,maxPoolConfig,maxPoolGradConfig,maxPool3DConfig,maxPool3DGradConfig,maxPoolWithArgmaxConfig,meanConfig,minConfig,minimumConfig,mirrorPadConfig,modConfig,multinomialConfig,multiplyConfig,negConfig,nonMaxSuppressionV3Config,nonMaxSuppressionV5Config,notEqualConfig,oneHotConfig,onesLikeConfig,packConfig,padV2Config,powConfig,preluConfig,prodConfig,rangeConfig,realConfig,realDivConfig,reciprocalConfig,reluConfig,relu6Config,reshapeConfig,resizeBilinearConfig,resizeBilinearGradConfig,resizeNearestNeighborConfig,resizeNearestNeighborGradConfig,reverseConfig,rotateWithOffsetConfig,roundConfig,rsqrtConfig,scatterNdConfig,searchSortedConfig,selectConfig,seluConfig,sigmoidConfig,signConfig,sinConfig,sinhConfig,sliceConfig,stepConfig,stridedSliceConfig,stringNGramsConfig,softmaxConfig,softplusConfig,spaceToBatchNDConfig,sparseSegmentMeanConfig,sparseSegmentSumConfig,sparseToDenseConfig,splitVConfig,sqrtConfig,squareConfig,squaredDifferenceConfig,subConfig,sumConfig,tanConfig,tanhConfig,tensorScatterUpdateConfig,tileConfig,topKConfig,transformConfig,transposeConfig,unpackConfig,unsortedSegmentSumConfig,zerosLikeConfig];for(const n of kernelConfigs)registerKernel(n);class TfjsService{model;gridSize;batchSize;channelSize;outputChannelSize;mass;fpsLimit;density;velocity;pressure;isPaused;curFrameCountbyLastSecond;outputCallback;constructor(){this.density=variable(zeros$2([0,0,0,0])),this.velocity=variable(zeros$2([0,0,0,0])),this.pressure=buffer$1([0,0,0,0]),this.mass=variable(zeros$2([0])),this.gridSize=[0,0],this.batchSize=0,this.isPaused=!0,this.channelSize=0,this.outputChannelSize=0,this.fpsLimit=30,this.curFrameCountbyLastSecond=0}static async createService(e,t=[64,64],r=1,s=5,a=3,i=15,l="webgl"){await setBackend(l);const u=new TfjsService;return u.model=await loadGraphModel(e),u.gridSize=t,u.batchSize=r,u.channelSize=s,u.outputChannelSize=a,u.fpsLimit=i,u}loadDataArray(e){console.log(e);const t=tensor4d(e,[this.batchSize,...this.gridSize,this.channelSize],"float32"),r=t.slice([0,0,0,0],[this.batchSize,...this.gridSize,1]),s=TfjsService.normalizeTensor(r);r.dispose(),this.density=variable(s.maximum(0));const a=t.slice([0,0,0,1],[this.batchSize,...this.gridSize,1]),i=t.slice([0,0,0,2],[this.batchSize,...this.gridSize,1]),l=TfjsService.normalizeTensor(a),u=TfjsService.normalizeTensor(i);a.dispose(),i.dispose(),this.velocity=variable(concat$3([l,u],3)),l.dispose(),u.dispose();const h=t.slice([0,0,0,3],[this.batchSize,...this.gridSize,1]),f=t.slice([0,0,0,4],[this.batchSize,...this.gridSize,1]),c=TfjsService.normalizeTensor(h),o=TfjsService.normalizeTensor(f);h.dispose(),f.dispose(),this.pressure=concat$3([c,o],3).bufferSync(),c.dispose(),this.density.assign(this.density.maximum(0)),this.mass=this.density.sum(),this.mass.print()}static normalizeTensor(e){return tidy$1(()=>{const{mean:t,variance:r}=moments(e);return e.sub(t).div(r.sqrt())})}pauseSimulation(){this.isPaused=!0}bindOutput(e){this.outputCallback=e}startSimulation(){this.isPaused=!1,this.curFrameCountbyLastSecond=0,this.fpsHeartbeat(),this.iterate()}fpsHeartbeat(){setTimeout(()=>{this.curFrameCountbyLastSecond=0,this.curFrameCountbyLastSecond>=this.fpsLimit?this.startSimulation():this.fpsHeartbeat()},1e3)}getInput(){const e=this.pressure.toTensor(),t=concat$3([this.density,this.velocity,e],3);return e.dispose(),t}iterate(){if(this.isPaused)return;this.curFrameCountbyLastSecond+=1;const e=this.getInput(),t=this.velocity.square().sum();this.model?.predictAsync(e).then(r=>{const s=r;this.density.assign(s?.slice([0,0,0,0],[this.batchSize,...this.gridSize,1])),this.velocity.assign(s?.slice([0,0,0,1],[this.batchSize,...this.gridSize,2]));const a=this.velocity.square().sum(),i=t.div(a);i.print(),this.velocity.assign(this.velocity.mul(i.sqrt()));const l=this.density.sum(),u=this.mass.div(l);this.density.assign(this.density.mul(u)),u.print(),l.dispose(),a.dispose(),t.dispose(),i.dispose(),this.outputCallback(s?.dataSync()),s.dispose(),setTimeout(()=>{this.curFrameCountbyLastSecond+=1,console.log(this.curFrameCountbyLastSecond),this.iterate()},0)})}updateForce(e,t,r=0){this.pressure.set(this.pressure.get(r,e.x,e.y,0)+t.x,r,e.x,e.y,3),this.pressure.set(this.pressure.get(r,e.x,e.y,1)+t.y,r,e.x,e.y,4)}getInputTensor(){const e=this.getInput(),t=e.dataSync();return e.dispose(),t}getMass(){return this.mass.dataSync()[0]}getInputShape(){return[this.batchSize,...this.gridSize,this.channelSize]}setMass(e){this.mass.dispose(),this.mass=scalar$1(e)}dispose(){this.density.dispose(),this.velocity.dispose(),this.model.dispose()}getType(){return"tfjs"}}var ort_webgpu_min={exports:{}};/*!
* ONNX Runtime Web v1.16.0
* Copyright (c) Microsoft Corporation. All rights reserved.
* Licensed under the MIT License.
*/(function(module,exports){(function(n,e){module.exports=e()})(self,()=>(()=>{var __webpack_modules__={5716:(n,e,t)=>{e.R=void 0;const r=t(6027),s=t(1723);e.R=new class{async init(){}async createSessionHandler(a,i){const l=new r.Session(i);return await l.loadModel(a),new s.OnnxjsSessionHandler(l)}}},2818:(n,e,t)=>{e.c8=e.rX=void 0;const r=t(2235),s=t(5381),a=t(9544),i=t(6640);e.rX=()=>{if((typeof r.env.wasm.initTimeout!="number"||r.env.wasm.initTimeout<0)&&(r.env.wasm.initTimeout=0),typeof r.env.wasm.simd!="boolean"&&(r.env.wasm.simd=!0),typeof r.env.wasm.proxy!="boolean"&&(r.env.wasm.proxy=!1),typeof r.env.wasm.numThreads!="number"||!Number.isInteger(r.env.wasm.numThreads)||r.env.wasm.numThreads<=0){const l=typeof navigator>"u"?(0,s.cpus)().length:navigator.hardwareConcurrency;r.env.wasm.numThreads=Math.min(4,Math.ceil((l||1)/2))}},e.c8=new class{async init(){(0,e.rX)(),await(0,a.initializeWebAssemblyInstance)()}async createSessionHandler(l,u){const h=new i.OnnxruntimeWebAssemblySessionHandler;return await h.loadModel(l,u),Promise.resolve(h)}}},1057:function(n,e,t){var r=this&&this.__createBinding||(Object.create?function(l,u,h,f){f===void 0&&(f=h);var c=Object.getOwnPropertyDescriptor(u,h);c&&!("get"in c?!u.__esModule:c.writable||c.configurable)||(c={enumerable:!0,get:function(){return u[h]}}),Object.defineProperty(l,f,c)}:function(l,u,h,f){f===void 0&&(f=h),l[f]=u[h]}),s=this&&this.__exportStar||function(l,u){for(var h in l)h==="default"||Object.prototype.hasOwnProperty.call(u,h)||r(u,l,h)};Object.defineProperty(e,"__esModule",{value:!0}),s(t(2235),e);const a=t(2235),i=t(8408);{const l=t(5716).R;(0,a.registerBackend)("webgl",l,-10)}{const l=t(2818).c8;typeof navigator<"u"&&navigator.gpu&&(0,a.registerBackend)("webgpu",l,5),(0,a.registerBackend)("cpu",l,10),(0,a.registerBackend)("wasm",l,10),(0,a.registerBackend)("xnnpack",l,9),(0,a.registerBackend)("webnn",l,9)}a.env.versions.web=i.version},4910:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createAttributeWithCacheKey=void 0;class t{constructor(s){Object.assign(this,s)}get cacheKey(){return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map(s=>`${this[s]}`).join(";")),this._cacheKey}}e.createAttributeWithCacheKey=r=>new t(r)},6874:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Attribute=void 0;const r=t(5127),s=t(2446),a=t(9240),i=t(7273);var l=r.onnxruntime.experimental.fbs;class u{constructor(f){if(this._attributes=new Map,f!=null){for(const c of f)c instanceof s.onnx.AttributeProto?this._attributes.set(c.name,[u.getValue(c),u.getType(c)]):c instanceof l.Attribute&&this._attributes.set(c.name(),[u.getValue(c),u.getType(c)]);if(this._attributes.size<f.length)throw new Error("duplicated attribute names")}}set(f,c,o){this._attributes.set(f,[o,c])}delete(f){this._attributes.delete(f)}getFloat(f,c){return this.get(f,"float",c)}getInt(f,c){return this.get(f,"int",c)}getString(f,c){return this.get(f,"string",c)}getTensor(f,c){return this.get(f,"tensor",c)}getFloats(f,c){return this.get(f,"floats",c)}getInts(f,c){return this.get(f,"ints",c)}getStrings(f,c){return this.get(f,"strings",c)}getTensors(f,c){return this.get(f,"tensors",c)}get(f,c,o){const d=this._attributes.get(f);if(d===void 0){if(o!==void 0)return o;throw new Error(`required attribute not found: ${f}`)}if(d[1]!==c)throw new Error(`type mismatch: expected ${c} but got ${d[1]}`);return d[0]}static getType(f){const c=f instanceof s.onnx.AttributeProto?f.type:f.type();switch(c){case s.onnx.AttributeProto.AttributeType.FLOAT:return"float";case s.onnx.AttributeProto.AttributeType.INT:return"int";case s.onnx.AttributeProto.AttributeType.STRING:return"string";case s.onnx.AttributeProto.AttributeType.TENSOR:return"tensor";case s.onnx.AttributeProto.AttributeType.FLOATS:return"floats";case s.onnx.AttributeProto.AttributeType.INTS:return"ints";case s.onnx.AttributeProto.AttributeType.STRINGS:return"strings";case s.onnx.AttributeProto.AttributeType.TENSORS:return"tensors";default:throw new Error(`attribute type is not supported yet: ${s.onnx.AttributeProto.AttributeType[c]}`)}}static getValue(f){const c=f instanceof s.onnx.AttributeProto?f.type:f.type();if(c===s.onnx.AttributeProto.AttributeType.GRAPH||c===s.onnx.AttributeProto.AttributeType.GRAPHS)throw new Error("graph attribute is not supported yet");const o=this.getValueNoCheck(f);if(c===s.onnx.AttributeProto.AttributeType.INT&&i.LongUtil.isLong(o))return i.LongUtil.longToNumber(o);if(c===s.onnx.AttributeProto.AttributeType.INTS){const d=o,m=new Array(d.length);for(let g=0;g<d.length;g++){const y=d[g];m[g]=i.LongUtil.longToNumber(y)}return m}if(c===s.onnx.AttributeProto.AttributeType.TENSOR)return f instanceof s.onnx.AttributeProto?a.Tensor.fromProto(o):a.Tensor.fromOrtTensor(o);if(c===s.onnx.AttributeProto.AttributeType.TENSORS){if(f instanceof s.onnx.AttributeProto)return o.map(d=>a.Tensor.fromProto(d));if(f instanceof l.Attribute)return o.map(d=>a.Tensor.fromOrtTensor(d))}if(c===s.onnx.AttributeProto.AttributeType.STRING&&f instanceof s.onnx.AttributeProto){const d=o;return(0,i.decodeUtf8String)(d)}return c===s.onnx.AttributeProto.AttributeType.STRINGS&&f instanceof s.onnx.AttributeProto?o.map(i.decodeUtf8String):o}static getValueNoCheck(f){return f instanceof s.onnx.AttributeProto?this.getValueNoCheckFromOnnxFormat(f):this.getValueNoCheckFromOrtFormat(f)}static getValueNoCheckFromOnnxFormat(f){switch(f.type){case s.onnx.AttributeProto.AttributeType.FLOAT:return f.f;case s.onnx.AttributeProto.AttributeType.INT:return f.i;case s.onnx.AttributeProto.AttributeType.STRING:return f.s;case s.onnx.AttributeProto.AttributeType.TENSOR:return f.t;case s.onnx.AttributeProto.AttributeType.GRAPH:return f.g;case s.onnx.AttributeProto.AttributeType.FLOATS:return f.floats;case s.onnx.AttributeProto.AttributeType.INTS:return f.ints;case s.onnx.AttributeProto.AttributeType.STRINGS:return f.strings;case s.onnx.AttributeProto.AttributeType.TENSORS:return f.tensors;case s.onnx.AttributeProto.AttributeType.GRAPHS:return f.graphs;default:throw new Error(`unsupported attribute type: ${s.onnx.AttributeProto.AttributeType[f.type]}`)}}static getValueNoCheckFromOrtFormat(f){switch(f.type()){case l.AttributeType.FLOAT:return f.f();case l.AttributeType.INT:return f.i();case l.AttributeType.STRING:return f.s();case l.AttributeType.TENSOR:return f.t();case l.AttributeType.GRAPH:return f.g();case l.AttributeType.FLOATS:return f.floatsArray();case l.AttributeType.INTS:{const c=[];for(let o=0;o<f.intsLength();o++)c.push(f.ints(o));return c}case l.AttributeType.STRINGS:{const c=[];for(let o=0;o<f.stringsLength();o++)c.push(f.strings(o));return c}case l.AttributeType.TENSORS:{const c=[];for(let o=0;o<f.tensorsLength();o++)c.push(f.tensors(o));return c}default:throw new Error(`unsupported attribute type: ${l.AttributeType[f.type()]}`)}}}e.Attribute=u},1975:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.resolveBackend=e.backend=void 0;const r=t(4418),s=new Map;async function a(i){const l=e.backend;if(l[i]!==void 0&&function(u){const h=u;return"initialize"in h&&typeof h.initialize=="function"&&"createSessionHandler"in h&&typeof h.createSessionHandler=="function"&&"dispose"in h&&typeof h.dispose=="function"}(l[i])){const u=l[i];let h=u.initialize();if(typeof h=="object"&&"then"in h&&(h=await h),h)return s.set(i,u),u}}e.backend={webgl:new r.WebGLBackend},e.resolveBackend=async function i(l){if(!l)return i(["webgl"]);{const u=typeof l=="string"?[l]:l;for(const h of u){const f=s.get(h);if(f)return f;const c=await a(h);if(c)return c}}throw new Error("no available backend to use")}},4418:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.WebGLBackend=void 0;const r=t(2235),s=t(1315),a=t(2171),i=t(3389);e.WebGLBackend=class{get contextId(){return r.env.webgl.contextId}set contextId(l){r.env.webgl.contextId=l}get matmulMaxBatchSize(){return r.env.webgl.matmulMaxBatchSize}set matmulMaxBatchSize(l){r.env.webgl.matmulMaxBatchSize=l}get textureCacheMode(){return r.env.webgl.textureCacheMode}set textureCacheMode(l){r.env.webgl.textureCacheMode=l}get pack(){return r.env.webgl.pack}set pack(l){r.env.webgl.pack=l}get async(){return r.env.webgl.async}set async(l){r.env.webgl.async=l}initialize(){try{return this.glContext=(0,i.createWebGLContext)(this.contextId),typeof this.matmulMaxBatchSize!="number"&&(this.matmulMaxBatchSize=16),typeof this.textureCacheMode!="string"&&(this.textureCacheMode="full"),typeof this.pack!="boolean"&&(this.pack=!1),typeof this.async!="boolean"&&(this.async=!1),s.Logger.setWithEnv(r.env),s.Logger.verbose("WebGLBackend",`Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${this.async}.`),!0}catch(l){return s.Logger.warning("WebGLBackend",`Unable to initialize WebGLBackend. ${l}`),!1}}createSessionHandler(l){return new a.WebGLSessionHandler(this,l)}dispose(){this.glContext.dispose()}}},6859:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CoordsGlslLib=void 0;const r=t(7273),s=t(1997),a=t(6757),i=t(7618),l=t(432);class u extends s.GlslLib{constructor(f){super(f)}getFunctions(){return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},this.offsetToCoords()),this.coordsToOffset()),this.toVec()),this.valueFrom()),this.getCommonUtilFuncs()),this.getInputsSamplingSnippets()),this.getOutputSamplingSnippet())}getCustomTypes(){return{}}offsetToCoords(){return{offsetToCoords:new s.GlslLibRoutine(`
      vec2 offsetToCoords(int offset, int width, int height) {
        int t = offset / width;
        int s = offset - t*width;
        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);
        return coords;
      }
      `)}}coordsToOffset(){return{coordsToOffset:new s.GlslLibRoutine(`
      int coordsToOffset(vec2 coords, int width, int height) {
        float s = coords.s * float(width);
        float t = coords.t * float(height);
        int offset = int(t) * width + int(s);
        return offset;
      }
      `)}}getOutputSamplingSnippet(){const f=this.context.outputTextureLayout;return f.isPacked?this.getPackedOutputSamplingSnippet(f):this.getUnpackedOutputSamplingSnippet(f)}getPackedOutputSamplingSnippet(f){const c=f.unpackedShape,o=[f.width,f.height],d={},m="getOutputCoords";switch(c.length){case 0:d[m]=this.getOutputScalarCoords();break;case 1:d[m]=this.getOutputPacked1DCoords(c,o);break;case 2:d[m]=this.getOutputPacked2DCoords(c,o);break;case 3:d[m]=this.getOutputPacked3DCoords(c,o);break;default:d[m]=this.getOutputPackedNDCoords(c,o)}const g=`
      void setOutput(vec4 val) {
        ${(0,a.getGlsl)(this.context.glContext.version).output} = val;
      }
    `;return d.floatTextureSetRGBA=new s.GlslLibRoutine(g),d}getUnpackedOutputSamplingSnippet(f){const c=f.unpackedShape,o=[f.width,f.height],d={},m="getOutputCoords";switch(c.length){case 0:d[m]=this.getOutputScalarCoords();break;case 1:d[m]=this.getOutputUnpacked1DCoords(c,o);break;case 2:d[m]=this.getOutputUnpacked2DCoords(c,o);break;case 3:d[m]=this.getOutputUnpacked3DCoords(c,o);break;case 4:d[m]=this.getOutputUnpacked4DCoords(c,o);break;case 5:d[m]=this.getOutputUnpacked5DCoords(c,o);break;case 6:d[m]=this.getOutputUnpacked6DCoords(c,o);break;default:throw new Error(`Unsupported output dimensionality: ${c.length}`)}const g=`
        void setOutput(float val) {
          ${(0,a.getGlsl)(this.context.glContext.version).output} = vec4(val, 0, 0, 0);
        }
    `;return d.floatTextureSetR=new s.GlslLibRoutine(g),d}getOutputScalarCoords(){return new s.GlslLibRoutine(`
      int getOutputCoords() {
        return 0;
      }
    `)}getOutputPacked1DCoords(f,c){const o=c;let d="";return o[0]===1?(d=`
          int getOutputCoords() {
            return 2 * int(TexCoords.y * ${o[1]}.0);
          }
        `,new s.GlslLibRoutine(d)):o[1]===1?(d=`
          int getOutputCoords() {
            return 2 * int(TexCoords.x * ${o[0]}.0);
          }
        `,new s.GlslLibRoutine(d)):(d=`
        int getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                 vec2(${o[0]}, ${o[1]}));
          return 2 * (resTexRC.y * ${o[0]} + resTexRC.x);
        }
      `,new s.GlslLibRoutine(d))}getOutputPacked2DCoords(f,c){let o="";if(r.ArrayUtil.arraysEqual(f,c))return o=`
        ivec2 getOutputCoords() {
          return 2 * ivec2(TexCoords.xy * vec2(${c[0]}, ${c[1]}));
        }
      `,new s.GlslLibRoutine(o);const d=c,m=Math.ceil(f[1]/2);return o=`
        ivec2 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${d[0]}, ${d[1]}));

          int index = resTexRC.y * ${d[0]} + resTexRC.x;

          // reverse r and c order for packed texture
          int r = imod(index, ${m}) * 2;
          int c = 2 * (index / ${m});

          return ivec2(r, c);
        }
      `,new s.GlslLibRoutine(o)}getOutputPacked3DCoords(f,c){const o=[c[0],c[1]],d=Math.ceil(f[2]/2),m=d*Math.ceil(f[1]/2),g=`
        ivec3 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${o[0]}, ${o[1]}));
          int index = resTexRC.y * ${o[0]} + resTexRC.x;

          int b = index / ${m};
          index -= b * ${m};

          // reverse r and c order for packed texture
          int r = imod(index, ${d}) * 2;
          int c = 2 * (index / ${d});

          return ivec3(b, r, c);
        }
      `;return new s.GlslLibRoutine(g)}getOutputPackedNDCoords(f,c){const o=[c[0],c[1]],d=Math.ceil(f[f.length-1]/2),m=d*Math.ceil(f[f.length-2]/2);let g=m,y="",$="b, r, c";for(let x=2;x<f.length-1;x++)g*=f[f.length-x-1],y=`
      int b${x} = index / ${g};
      index -= b${x} * ${g};
    `+y,$=`b${x}, `+$;const b=`
      ivec${f.length} getOutputCoords() {
        ivec2 resTexRC = ivec2(TexCoords.xy *
                              vec2(${o[0]}, ${o[1]}));
        int index = resTexRC.y * ${o[0]} + resTexRC.x;

        ${y}

        int b = index / ${m};
        index -= b * ${m};

        // reverse r and c order for packed texture
        int r = imod(index, ${d}) * 2;
        int c = 2 * (index / ${d});

        return ivec${f.length}(${$});
      }
    `;return new s.GlslLibRoutine(b)}getOutputUnpacked1DCoords(f,c){const o=`
        int getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${c[0]}, ${c[1]}));
          return resTexRC.y * ${c[0]} + resTexRC.x;
        }
      `;return new s.GlslLibRoutine(o)}getOutputUnpacked2DCoords(f,c){const o=`
        ivec2 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${c[0]}, ${c[1]}));
          int index = resTexRC.y * ${c[0]} + resTexRC.x;
          int r = index / ${f[1]};
          int c = index - r * ${f[1]};
          return ivec2(r, c);
        }
      `;return new s.GlslLibRoutine(o)}getOutputUnpacked3DCoords(f,c){let o="";const d=f.length;let m=null;d<2&&(m=[]),m=new Array(d-1),m[d-2]=f[d-1];for(let $=d-3;$>=0;--$)m[$]=m[$+1]*f[$+1];const g=["r","c","d"],y=m.map(($,b)=>`int ${g[b]} = index / ${$}; ${b===m.length-1?`int ${g[b+1]} = index - ${g[b]} * ${$}`:`index -= ${g[b]} * ${$}`};`).join("");return o=`
        ivec3 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${c[0]}, ${c[1]}));
          int index = resTexRC.y * ${c[0]} + resTexRC.x;
          ${y}
          return ivec3(r, c, d);
        }
      `,new s.GlslLibRoutine(o)}getOutputUnpacked4DCoords(f,c){let o="";const d=f.length;let m=null;d<2&&(m=[]),m=new Array(d-1),m[d-2]=f[d-1];for(let $=d-3;$>=0;--$)m[$]=m[$+1]*f[$+1];const g=["r","c","d","d2"],y=m.map(($,b)=>`int ${g[b]} = index / ${$}; ${b===m.length-1?`int ${g[b+1]} = index - ${g[b]} * ${$}`:`index -= ${g[b]} * ${$}`};`).join("");return o=`
      ivec4 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${c[0]}, ${c[1]}));
          int index = resTexRC.y * ${c[0]} + resTexRC.x;
          ${y}
          return ivec4(r, c, d, d2);
        }
      `,new s.GlslLibRoutine(o)}getOutputUnpacked5DCoords(f,c){let o="";const d=f.length;let m=null;d<2&&(m=[]),m=new Array(d-1),m[d-2]=f[d-1];for(let $=d-3;$>=0;--$)m[$]=m[$+1]*f[$+1];const g=["r","c","d","d2","d3"],y=m.map(($,b)=>`int ${g[b]} = index / ${$}; ${b===m.length-1?`int ${g[b+1]} = index - ${g[b]} * ${$}`:`index -= ${g[b]} * ${$}`};`).join("");return o=`
      ivec5 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${c[0]}, ${c[1]}));
          int index = resTexRC.y * ${c[0]} + resTexRC.x;
          ${y}
          return ivec5(r, c, d, d2, d3);
        }
      `,new s.GlslLibRoutine(o)}getOutputUnpacked6DCoords(f,c){let o="";const d=f.length;let m=null;d<2&&(m=[]),m=new Array(d-1),m[d-2]=f[d-1];for(let $=d-3;$>=0;--$)m[$]=m[$+1]*f[$+1];const g=["r","c","d","d2","d3","d4"],y=m.map(($,b)=>`int ${g[b]} = index / ${$}; ${b===m.length-1?`int ${g[b+1]} = index - ${g[b]} * ${$}`:`index -= ${g[b]} * ${$}`};`).join("");return o=`
     ivec6 getOutputCoords() {
         ivec2 resTexRC = ivec2(TexCoords.xy *
                               vec2(${c[0]}, ${c[1]}));
         int index = resTexRC.y * ${c[0]} + resTexRC.x;
         ${y}
         return ivec6(r, c, d, d2, d3, d4);
       }
     `,new s.GlslLibRoutine(o)}getCommonUtilFuncs(){const f={};let c="uvFromFlat";f[c]=new s.GlslLibRoutine(`
    vec2 uvFromFlat(int texNumR, int texNumC, int index) {
      int texC = index / texNumR;
      int texR = index - texC * texNumR;
      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to
      //       v.
      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);
    }
    `),c="packedUVfrom1D",f[c]=new s.GlslLibRoutine(`
      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
        int texelIndex = index / 2;
        int texR = texelIndex / texNumC;
        int texC = texelIndex - texR * texNumC;
        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
      }
      `),c="packedUVfrom2D",f[c]=new s.GlslLibRoutine(`
      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {
        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
        int texR = texelIndex / texNumC;
        int texC = texelIndex - texR * texNumC;
        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
      }
      `),c="packedUVfrom3D",f[c]=new s.GlslLibRoutine(`
      vec2 packedUVfrom3D(int texNumR, int texNumC,
          int texelsInBatch, int texelsInLogicalRow, int b,
          int row, int col) {
        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
        int texR = index / texNumC;
        int texC = index - texR * texNumC;
        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
      }
      `),c="sampleTexture";const o=(0,a.getGlsl)(this.context.glContext.version);return f[c]=new s.GlslLibRoutine(`
        float sampleTexture(sampler2D textureSampler, vec2 uv) {
            return ${o.texture2D}(textureSampler, uv).r;
        }`),f}getInputsSamplingSnippets(){const f={},c=this.context.outputTextureLayout;return this.context.programInfo.inputNames.forEach((o,d)=>{const m=this.context.inputTextureLayouts[d],g=(0,l.generateShaderFuncNameFromInputSamplerName)(o);m.isPacked?f[g]=this.getPackedSamplerFromInput(g,o,m):f[g]=this.getUnpackedSamplerFromInput(g,o,m);const y=(0,l.generateShaderFuncNameFromInputSamplerNameAtOutCoords)(o);m.unpackedShape.length<=c.unpackedShape.length&&(m.isPacked?f[y]=this.getPackedSamplerAtOutputCoords(y,m,c,o):f[y]=this.getUnpackedSamplerAtOutputCoords(y,m,c,o))}),f}getPackedSamplerAtOutputCoords(f,c,o,d){const m=c.unpackedShape,g=o.unpackedShape,y=d,$=(0,l.generateShaderFuncNameFromInputSamplerName)(y),b=m.length,x=g.length,w=r.BroadcastUtil.getBroadcastDims(m,g),v=(0,l.getCoordsDataType)(x),S=x-b;let T;const C=(0,l.getGlChannels)();T=b===0?"":x<2&&w.length>=1?"coords = 0;":w.map(D=>`coords.${C[D+S]} = 0;`).join(`
`);let I="";I=x<2&&b>0?"coords":m.map((D,E)=>`coords.${C[E+S]}`).join(", ");let N="return outputValue;";const P=r.ShapeUtil.size(m)===1,F=r.ShapeUtil.size(g)===1;if(b!==1||P||F){if(P&&!F)N=x===1?`
          return vec4(outputValue.x, outputValue.x, 0., 0.);
        `:`
          return vec4(outputValue.x);
        `;else if(w.length){const D=b-2,E=b-1;w.indexOf(D)>-1&&w.indexOf(E)>-1?N="return vec4(outputValue.x);":w.indexOf(D)>-1?N="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":w.indexOf(E)>-1&&(N="return vec4(outputValue.xx, outputValue.zz);")}}else N=`
        return vec4(outputValue.xy, outputValue.xy);
      `;const _=`
      vec4 ${f}() {
        ${v} coords = getOutputCoords();
        
        int lastDim = coords.${C[x-1]};
        coords.${C[x-1]} = coords.${C[x-2]};
        coords.${C[x-2]} = lastDim;
      
        ${T}
        vec4 outputValue = ${$}(${I});
        ${N}
      }
    `;return new s.GlslLibRoutine(_,["coordinates.getOutputCoords"])}getUnpackedSamplerAtOutputCoords(f,c,o,d){const m=[o.width,o.height],g=[c.width,c.height],y=c.unpackedShape.length,$=o.unpackedShape.length,b=c.unpackedShape,x=o.unpackedShape,w=(0,l.generateShaderFuncNameFromInputSamplerName)(d);if(y===$&&r.ArrayUtil.arraysEqual(g,m)){const F=`
          float ${f}() {
            return sampleTexture(${d}, TexCoords);
          }
        `;return new s.GlslLibRoutine(F,["coordinates.sampleTexture"])}const v=(0,l.getCoordsDataType)($),S=r.BroadcastUtil.getBroadcastDims(b,x),T=$-y;let C;const I=(0,l.getGlChannels)();C=y===0?"":$<2&&S.length>=1?"coords = 0;":S.map(F=>`coords.${I[F+T]} = 0;`).join(`
`);let N="";N=$<2&&y>0?"coords":c.unpackedShape.map((F,_)=>`coords.${I[_+T]}`).join(", ");const P=`
        float ${f}() {
          ${v} coords = getOutputCoords();
          ${C}
          return ${w}(${N});
        }
      `;return new s.GlslLibRoutine(P,["coordinates.getOutputCoords"])}getPackedSamplerFromInput(f,c,o){switch(o.unpackedShape.length){case 0:return this.getPackedSamplerScalar(f,c);case 1:return this.getPackedSampler1D(f,c,o);case 2:return this.getPackedSampler2D(f,c,o);case 3:return this.getPackedSampler3D(f,c,o);default:return this.getPackedSamplerND(f,c,o)}}getUnpackedSamplerFromInput(f,c,o){const d=o.unpackedShape;switch(d.length){case 0:return this.getUnpackedSamplerScalar(f,c,o);case 1:return this.getUnpackedSampler1D(f,c,o);case 2:return this.getUnpackedSampler2D(f,c,o);case 3:return this.getUnpackedSampler3D(f,c,o);case 4:return this.getUnpackedSampler4D(f,c,o);case 5:return this.getUnpackedSampler5D(f,c,o);case 6:return this.getUnpackedSampler6D(f,c,o);default:throw new Error(`Unsupported dimension ${d.length}-D`)}}getPackedSamplerScalar(f,c){const o=`
          vec4 ${f}() {
            return ${(0,a.getGlsl)(this.context.glContext.version).texture2D}(${c}, halfCR);
          }
        `;return new s.GlslLibRoutine(o)}getPackedSampler1D(f,c,o){const d=[o.width,o.height],m=[d[1],d[0]],g=(0,a.getGlsl)(this.context.glContext.version),y=`vec4 ${f}(int index) {
      vec2 uv = packedUVfrom1D(
      ${m[0]}, ${m[1]}, index);
      return ${g.texture2D}(${c}, uv);
    }`;return new s.GlslLibRoutine(y,["coordinates.packedUVfrom1D"])}getPackedSampler2D(f,c,o){const d=o.unpackedShape,m=[o.width,o.height],g=(0,a.getGlsl)(this.context.glContext.version),y=m[0],$=m[1];if(m!=null&&r.ArrayUtil.arraysEqual(d,m)){const v=`vec4 ${f}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${$}.0, ${y}.0);
        return ${g.texture2D}(${c}, uv);
      }`;return new s.GlslLibRoutine(v)}const b=m,x=Math.ceil(d[1]/2),w=`vec4 ${f}(int row, int col) {
      vec2 uv = packedUVfrom2D(${b[1]}, ${b[0]}, ${x}, row, col);
      return ${g.texture2D}(${c}, uv);
    }`;return new s.GlslLibRoutine(w,["coordinates.packedUVfrom2D"])}getPackedSampler3D(f,c,o){const d=o.unpackedShape,m=[o.width,o.height],g=[m[0],m[1]],y=(0,a.getGlsl)(this.context.glContext.version);if(d[0]===1){const v=d.slice(1),S=[1,2],T=(0,l.squeezeInputShape)(d,v),C=["b","row","col"],I=JSON.parse(JSON.stringify(o));I.unpackedShape=T;const N=this.getPackedSamplerFromInput(f,c,I),P=`${N.routineBody}
      vec4 ${f}(int b, int row, int col) {
        return ${f}(${(0,l.getSqueezedParams)(C,S)});
      } `;return new s.GlslLibRoutine(P,N.dependencies)}const $=g[0],b=g[1],x=Math.ceil(d[2]/2),w=`vec4 ${f}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${b}, ${$}, ${x*Math.ceil(d[1]/2)}, ${x}, b, row, col);
      return ${y.texture2D}(${c}, uv);}`;return new s.GlslLibRoutine(w,["coordinates.packedUVfrom3D"])}getPackedSamplerND(f,c,o){const d=o.unpackedShape,m=d.length,g=[o.width,o.height],y=(0,a.getGlsl)(this.context.glContext.version),$=[g[0],g[1]],b=$[1],x=$[0],w=Math.ceil(d[m-1]/2);let v=w*Math.ceil(d[m-2]/2),S="int b, int row, int col",T=`b * ${v} + (row / 2) * ${w} + (col / 2)`;for(let I=2;I<m-1;I++)S=`int b${I}, `+S,v*=d[m-I-1],T=`b${I} * ${v} + `+T;const C=`vec4 ${f}(${S}) {
      int index = ${T};
      int texR = index / ${x};
      int texC = index - texR * ${x};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${x}, ${b});
      return ${y.texture2D}(${c}, uv);
    }`;return new s.GlslLibRoutine(C)}getUnpackedSamplerScalar(f,c,o){const[d,m]=[o.width,o.height];if(d===1&&m===1){const y=`
          float ${f}() {
            return sampleTexture(${c}, halfCR);
          }
        `;return new s.GlslLibRoutine(y,["coordinates.sampleTexture"])}const g=`
        float ${f}() {
          int offset_${c} = coordsToOffset(TexCoords, ${d}, ${m});
          vec2 uv = uvFromFlat(${d}, ${m}, offset_${c});
          return sampleTexture(${c}, uv);
        }
      `;return new s.GlslLibRoutine(g,["coordinates.uvFromFlat","coordinates.sampleTexture","coordinates.coordsToOffset"])}getUnpackedSampler1D(f,c,o){const d=o.width,m=o.height;if(m===1&&d===1){const y=`
        float ${f}(int index) {
          return sampleTexture(${c}, halfCR);
        }
      `;return new s.GlslLibRoutine(y,["coordinates.sampleTexture"])}if(m===1){const y=`
          float ${f}(int index) {
            vec2 uv = vec2((float(index) + 0.5) / ${d}.0, 0.5);
            return sampleTexture(${c}, uv);
          }
        `;return new s.GlslLibRoutine(y,["coordinates.sampleTexture"])}if(d===1){const y=`
          float ${f}(int index) {
            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${m}.0);
            return sampleTexture(${c}, uv);
          }
        `;return new s.GlslLibRoutine(y,["coordinates.sampleTexture"])}const g=`
        float ${f}(int index) {
          vec2 uv = uvFromFlat(${d}, ${m}, index);
          return sampleTexture(${c}, uv);
        }
      `;return new s.GlslLibRoutine(g,["coordinates.uvFromFlat","coordinates.sampleTexture"])}getUnpackedSampler2D(f,c,o){const d=o.unpackedShape,m=[o.height,o.width];if(m!=null&&r.ArrayUtil.arraysEqual(d,m)){const v=`
          float ${f}(int row, int col) {
            vec2 uv = (vec2(row, col) + halfCR) / vec2(${m[1]}.0, ${m[0]}.0);
            return sampleTexture(${c}, uv);
          }
        `;return new s.GlslLibRoutine(v,["coordinates.sampleTexture"])}const{newShape:g,keptDims:y}=(0,i.squeezeShape)(d),$=g;if($.length<d.length){const v=(0,l.squeezeInputShape)(d,$),S=JSON.parse(JSON.stringify(o));S.unpackedShape=v;const T=["col","row"],C=`
          ${this.getUnpackedSamplerFromInput(f,c,S).routineBody}
          float ${f}(int row, int col) {
            return ${f}(${(0,l.getSqueezedParams)(T,y)});
          }
        `;return new s.GlslLibRoutine(C,["coordinates.sampleTexture"])}const b=m[1],x=m[0];if(x===1){const v=`
          float ${f}(int row, int col) {
            int offset_${c} = coordsToOffset(TexCoords, ${b}, ${x});
            float index = dot(vec3(row, col, offset_${c}), vec3(${d[1]}, 1, 1));
            vec2 uv = vec2(0.5, (index + 0.5) / ${b}.0);
            return sampleTexture(${c}, uv);
          }
        `;return new s.GlslLibRoutine(v,["coordinates.sampleTexture","coordinates.coordsToOffset"])}if(b===1){const v=`
          float ${f}(int row, int col) {
            int offset_${c} = coordsToOffset(TexCoords, ${b}, ${x});
            float index = dot(vec3(row, col, offset_${c}), vec3(${d[1]}, 1, 1));
            vec2 uv = vec2((index + 0.5) / ${x}.0, 0.5);
            return sampleTexture(${c}, uv);
          }
        `;return new s.GlslLibRoutine(v,["coordinates.sampleTexture","coordinates.coordsToOffset"])}const w=`
        float ${f}(int row, int col) {
          int index = col * ${d[1]} + row;
          vec2 uv = uvFromFlat(${b}, ${x}, index);
          return sampleTexture(${c}, uv);
        }
      `;return new s.GlslLibRoutine(w,["coordinates.uvFromFlat","coordinates.sampleTexture","coordinates.coordsToOffset"])}getUnpackedSampler3D(f,c,o){const d=o.unpackedShape,m=d[1]*d[2],g=d[2],{newShape:y,keptDims:$}=(0,i.squeezeShape)(d),b=y;if(b.length<d.length){const w=(0,l.squeezeInputShape)(d,b),v=["batch","col","row"],S=JSON.parse(JSON.stringify(o));S.unpackedShape=w;const T=this.getUnpackedSamplerFromInput(f,c,S),C=$.reverse(),I=`
          ${T.routineBody}
          float ${f}(int batch, int row, int col) {
            return ${f}(${(0,l.getSqueezedParams)(v,C)});
          }
        `;return new s.GlslLibRoutine(I,T.dependencies)}const x=`
          float ${f}(int depth, int row, int col) {
            // Explicitly use integer operations as dot() only works on floats.
            int index = depth * ${m} + col * ${g} + row;
            vec2 uv = uvFromFlat(${o.width}, ${o.height}, index);
            return sampleTexture(${c}, uv);
          }
      `;return new s.GlslLibRoutine(x,["coordinates.uvFromFlat","coordinates.sampleTexture","coordinates.coordsToOffset"])}getUnpackedSampler4D(f,c,o){const d=o.unpackedShape,m=d[3],g=d[2]*m,y=`
        float ${f}(int row, int col, int depth, int depth2) {
          int index = row * ${d[1]*g} + col * ${g} +
              depth2 * ${m} + depth;
          vec2 uv = uvFromFlat(${o.width}, ${o.height}, index);
          return sampleTexture(${c}, uv);
        }
      `;return new s.GlslLibRoutine(y,["coordinates.uvFromFlat","coordinates.sampleTexture"])}getUnpackedSampler5D(f,c,o){const d=o.unpackedShape,m=d[4],g=d[3]*m,y=d[2]*g,$=d[1]*y,{newShape:b,keptDims:x}=(0,i.squeezeShape)(d);if(b.length<d.length){const v=(0,l.squeezeInputShape)(d,b),S=["row","col","depth","depth2","depth3"],T=JSON.parse(JSON.stringify(o));T.unpackedShape=v;const C=`
          ${this.getUnpackedSamplerFromInput(f,c,T).routineBody}
          float ${f}(int row, int col, int depth, int depth2, int depth3) {
            return ${f}(${(0,l.getSqueezedParams)(S,x)});
          }
        `;return new s.GlslLibRoutine(C,["coordinates.sampleTexture","coordinates.uvFromFlat"])}const w=`
        float ${f}(int row, int col, int depth, int depth2, int depth3) {
          int index = row * ${$} + col * ${y} + depth * ${g} +
          depth3 * ${m} + depth2;
          vec2 uv = uvFromFlat(${o.width}, ${o.height}, index);
          return sampleTexture(${c}, uv);
        }
      `;return new s.GlslLibRoutine(w,["coordinates.sampleTexture","coordinates.uvFromFlat"])}getUnpackedSampler6D(f,c,o){const d=o.unpackedShape,m=d[5],g=d[4]*m,y=d[3]*g,$=d[2]*y,b=d[1]*$,{newShape:x,keptDims:w}=(0,i.squeezeShape)(d);if(x.length<d.length){const S=(0,l.squeezeInputShape)(d,x),T=["row","col","depth","depth2","depth3","depth4"],C=JSON.parse(JSON.stringify(o));C.unpackedShape=S;const I=`
            ${this.getUnpackedSamplerFromInput(f,c,C).routineBody}
            float ${f}(int row, int col, int depth,
              int depth2, int depth3, int depth4) {
              return ${f}(${(0,l.getSqueezedParams)(T,w)});
            }
          `;return new s.GlslLibRoutine(I,["coordinates.sampleTexture","coordinates.uvFromFlat"])}const v=`
          float ${f}(int row, int col, int depth,
            int depth2, int depth3, int depth4) {
            int index = row * ${b} + col * ${$} + depth * ${y} +
            depth2 * ${g} + depth3 * ${m} + depth4;
            vec2 uv = uvFromFlat(${o.width}, ${o.height}, index);
            return sampleTexture(${c}, uv);
          }
        `;return new s.GlslLibRoutine(v,["coordinates.uvFromFlat","coordinates.sampleTexture","coordinates.coordsToOffset"])}toVec(){const f=this.context.outputTextureLayout,c=f.shape.length,o=f.strides,d=f.width,m=f.height,g=[];for(let $=0;$<c-1;++$)g.push(`
        c[${$}] = offset / ${o[$]};`),g.push(`
        offset -= c[${$}] * ${o[$]};`);g.push(`
        c[${c-1}] = offset;`);const y=`
      void toVec(vec2 texCoords, out int c[${c}]) {
        int offset = coordsToOffset(texCoords, ${d}, ${m});
        ${g.join("")}
      }
      void toVec(int offset, out int c[${c}]) {
        ${g.join("")}
      }
    `;return{toVec:new s.GlslLibRoutine(y,["coordinates.coordsToOffset"])}}valueFrom(){const f={};return this.context.programInfo.inputNames.forEach((c,o)=>{const d=this.context.inputTextureLayouts[o],m=(d.unpackedShape.length>0?d.unpackedShape:d.shape).length;let g=`_${c}`;f[g]=new s.GlslLibRoutine(this.getValueFromSingle(c,m,d.width,d.height,!1),[`shapeUtils.indicesToOffset${g}`,"coordinates.offsetToCoords","fragcolor.getColorAsFloat"]),g+="_T",f[g]=new s.GlslLibRoutine(this.getValueFromSingle(c,m,d.width,d.height,!0),[`shapeUtils.indicesToOffset${g}`,"coordinates.offsetToCoords","fragcolor.getColorAsFloat"])}),f}getValueFromSingle(f,c,o,d,m){let g=`_${f}`;return m&&(g+="_T"),`
        float ${g}(int m[${c}]) {
          int offset = indicesToOffset${g}(m);
          vec2 coords = offsetToCoords(offset, ${o}, ${d});
          float value = getColorAsFloat(${(0,a.getGlsl)(this.context.glContext.version).texture2D}(${f}, coords));
          return value;
        }
        `}getPackedValueFrom(f,c,o,d,m){let g=`_${f}_Pack`;return m&&(g+="_T"),`
        vec4 ${g}(int m[${c}]) {
          int offset = indicesToOffset_${f}(m);
          vec2 coords = offsetToCoords(offset, ${o}, ${d});
          return ${(0,a.getGlsl)(this.context.glContext.version).texture2D}(${f}, coords);
        }
        `}}e.CoordsGlslLib=u},1997:(n,e)=>{var t;Object.defineProperty(e,"__esModule",{value:!0}),e.TopologicalSortGlslRoutines=e.GlslLibRoutineNode=e.GlslLibRoutine=e.GlslLib=e.GlslContext=e.FunctionType=void 0,(t=e.FunctionType||(e.FunctionType={}))[t.ValueBased=0]="ValueBased",t[t.Positional=1]="Positional",e.GlslContext=class{constructor(r,s,a,i){this.glContext=r,this.programInfo=s,this.inputTextureLayouts=a,this.outputTextureLayout=i}},e.GlslLib=class{constructor(r){this.context=r}},e.GlslLibRoutine=class{constructor(r,s){this.routineBody=r,this.dependencies=s}},e.GlslLibRoutineNode=class{constructor(r,s,a){this.name=r,this.dependencies=a||[],s&&(this.routineBody=s)}addDependency(r){r&&this.dependencies.push(r)}},e.TopologicalSortGlslRoutines=class{static returnOrderedNodes(r){if(!r||r.length===0)return[];if(r.length===1)return r;const s=new Set,a=new Set,i=new Array;return this.createOrderedNodes(r,s,a,i),i}static createOrderedNodes(r,s,a,i){for(let l=0;l<r.length;++l)this.dfsTraverse(r[l],s,a,i)}static dfsTraverse(r,s,a,i){if(!r||a.has(r.name))return;if(s.has(r.name))throw new Error("Cyclic dependency detected. Can't topologically sort routines needed for shader.");s.add(r.name);const l=r.dependencies;if(l&&l.length>0)for(let u=0;u<l.length;++u)this.dfsTraverse(l[u],s,a,i);i.push(r),a.add(r.name),s.delete(r.name)}}},1371:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.EncodingGlslLib=void 0;const r=t(1997);class s extends r.GlslLib{constructor(i){super(i)}getFunctions(){return Object.assign(Object.assign({},this.encodeFloat32()),this.decodeFloat32())}getCustomTypes(){return{}}encodeFloat32(){return{encode:new r.GlslLibRoutine(`highp vec4 encode(highp float f) {
        return vec4(f, 0.0, 0.0, 0.0);
      }
        `)}}decodeFloat32(){return{decode:new r.GlslLibRoutine(`highp float decode(highp vec4 rgba) {
        return rgba.r;
      }
        `)}}encodeUint8(){const i=s.isLittleEndian()?"rgba.rgba=rgba.abgr;":"";return{encode:new r.GlslLibRoutine(`
      highp vec4 encode(highp float f) {
        highp float F = abs(f);
        highp float Sign = step(0.0,-f);
        highp float Exponent = floor(log2(F));
        highp float Mantissa = (exp2(- Exponent) * F);
        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));
        highp vec4 rgba;
        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));
        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);
        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));
        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));
        ${i}
        rgba = rgba / 255.0; // values need to be normalized to [0,1]
        return rgba;
    }
        `)}}decodeUint8(){const i=s.isLittleEndian()?"rgba.rgba=rgba.abgr;":"";return{decode:new r.GlslLibRoutine(`
        highp float decode(highp vec4 rgba) {
          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]
          ${i}
          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;
          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;
          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);
          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));
          return Result;
      }
        `)}}static isLittleEndian(){const i=new ArrayBuffer(4),l=new Uint32Array(i),u=new Uint8Array(i);if(l[0]=3735928559,u[0]===239)return!0;if(u[0]===222)return!1;throw new Error("unknown endianness")}}e.EncodingGlslLib=s},2691:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.FragColorGlslLib=void 0;const r=t(1997),s=t(6757);class a extends r.GlslLib{constructor(l){super(l)}getFunctions(){return Object.assign(Object.assign({},this.setFragColor()),this.getColorAsFloat())}getCustomTypes(){return{}}setFragColor(){const l=(0,s.getGlsl)(this.context.glContext.version);return{setFragColor:new r.GlslLibRoutine(`
        void setFragColor(float value) {
            ${l.output} = encode(value);
        }
        `,["encoding.encode"])}}getColorAsFloat(){return{getColorAsFloat:new r.GlslLibRoutine(`
        float getColorAsFloat(vec4 color) {
            return decode(color);
        }
        `,["encoding.decode"])}}}e.FragColorGlslLib=a},3878:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.replaceInlines=void 0;const t=/@inline[\s\n\r]+(\w+)[\s\n\r]+([0-9a-zA-Z_]+)\s*\(([^)]*)\)\s*{(([^}]|[\n\r])*)}/gm;e.replaceInlines=function(r){const s={};let a;for(;(a=t.exec(r))!==null;){const i=a[3].split(",").map(l=>{const u=l.trim().split(" ");return u&&u.length===2?{type:u[0],name:u[1]}:null}).filter(l=>l!==null);s[a[2]]={params:i,body:a[4]}}for(const i in s){const l="(\\w+)?\\s+([_0-9a-zA-Z]+)\\s+=\\s+__FUNC__\\((.*)\\)\\s*;".replace("__FUNC__",i),u=new RegExp(l,"gm");for(;(a=u.exec(r))!==null;){const h=a[1],f=a[2],c=a[3].split(","),o=h?`${h} ${f};`:"";let d=s[i].body,m="";s[i].params.forEach((y,$)=>{y&&(m+=`${y.type} ${y.name} = ${c[$]};
`)}),d=`${m}
 ${d}`,d=d.replace("return",`${f} = `);const g=`
      ${o}
      {
        ${d}
      }
      `;r=r.replace(a[0],g)}}return r.replace(t,"")}},8897:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GlslPreprocessor=void 0;const r=t(1997),s=t(3878),a=t(1248),i=t(6757);e.GlslPreprocessor=class{constructor(l,u,h,f){this.libs={},this.glslLibRoutineDependencyGraph={},this.context=new r.GlslContext(l,u,h,f),Object.keys(a.glslRegistry).forEach(o=>{const d=new a.glslRegistry[o](this.context);this.libs[o]=d});const c=this.glslLibRoutineDependencyGraph;for(const o in this.libs){const d=this.libs[o].getFunctions();for(const m in d){const g=o+"."+m;let y;c[g]?(y=c[g],y.routineBody=d[m].routineBody):(y=new r.GlslLibRoutineNode(g,d[m].routineBody),c[g]=y);const $=d[m].dependencies;if($)for(let b=0;b<$.length;++b)if(c[$[b]])y.addDependency(c[$[b]]);else{const x=new r.GlslLibRoutineNode($[b]);c[$[b]]=x,y.addDependency(x)}}}}preprocess(){const l=this.context.programInfo;let u=l.shaderSource;return this.context.programInfo.hasMain||(u=`${u}
      ${(0,i.getDefaultFragShaderMain)(this.context.glContext.version,this.context.outputTextureLayout.shape.length)}`),u=(0,s.replaceInlines)(u),`${(0,i.getFragShaderPreamble)(this.context.glContext.version)}
    ${this.getUniforms(l.inputNames,l.variables)}
    ${this.getImports(u)}
    ${u}`}getImports(l){const u=this.selectGlslLibRoutinesToBeIncluded(l);if(u.length===0)return"";let h="";for(let f=0;f<u.length;++f){if(!u[f].routineBody)throw new Error(`Missing body for the Glsl Library routine: ${u[f].name}`);h+=u[f].routineBody+`
`}return h}selectGlslLibRoutinesToBeIncluded(l){const u=[];return Object.keys(this.glslLibRoutineDependencyGraph).forEach(h=>{const f=h.split(".")[1];l.indexOf(f)!==-1&&u.push(this.glslLibRoutineDependencyGraph[h])}),r.TopologicalSortGlslRoutines.returnOrderedNodes(u)}getUniforms(l,u){const h=[];if(l)for(const f of l)h.push(`uniform sampler2D ${f};`);if(u)for(const f of u)h.push(`uniform ${f.type} ${f.name}${f.arrayLength?`[${f.arrayLength}]`:""};`);return h.join(`
`)}}},1248:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.glslRegistry=void 0;const r=t(6859),s=t(1371),a=t(2691),i=t(9183),l=t(9314);e.glslRegistry={encoding:s.EncodingGlslLib,fragcolor:a.FragColorGlslLib,vec:l.VecGlslLib,shapeUtils:i.ShapeUtilsGlslLib,coordinates:r.CoordsGlslLib}},9183:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ShapeUtilsGlslLib=void 0;const r=t(1997);class s extends r.GlslLib{constructor(i){super(i)}getFunctions(){return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},this.bcastIndex()),this.bcastMatmulIndex()),this.offsetToIndices()),this.indicesToOffset()),this.incrementIndices())}getCustomTypes(){return{}}bcastIndex(){const i=this.context.outputTextureLayout.shape.length,l={};return this.context.programInfo.inputNames.forEach((u,h)=>{const f=this.context.inputTextureLayouts[h].unpackedShape;if(f.length<=i){const c=f.length,o=i-c,d=`bcastIndices_${u}`;let m="";for(let y=0;y<c;++y)m+=`
          realIndices[${y}] = int( mod(float(bcastedIndices[${o+y}]), ${f[y]}.0) );
          `;const g=`
        void ${d} (int bcastedIndices[${i}], out int realIndices[${c}]) {
          ${m}
        }
        `;l[d]=new r.GlslLibRoutine(g)}}),l}bcastMatmulIndex(){const i=this.context.outputTextureLayout.shape.length,l={};return this.context.programInfo.inputNames.forEach((u,h)=>{const f=this.context.inputTextureLayouts[h].shape;if(!(f.length<2||f.length>i)){const c=f.length,o=i-c,d=`bcastMatmulIndices_${u}`;let m="";for(let y=0;y<c-2;++y)m+=`
          realIndices[${y}] = int( mod(float(bcastedIndices[${o+y}]), ${f[y]}.0) );
          `;const g=`
        void ${d}(int bcastedIndices[${i}], out int realIndices[${c}]) {
          ${m}
          realIndices[${c-1}] = bcastedIndices[${i-1}];
          realIndices[${c-2}] = bcastedIndices[${i-2}];
        }
        `;l[d]=new r.GlslLibRoutine(g)}}),l}indicesToOffset(){const i={};return this.context.programInfo.inputNames.forEach((l,u)=>{const h=this.context.inputTextureLayouts[u].shape,f=this.context.inputTextureLayouts[u].strides,c=h.length;let o=`indicesToOffset_${l}`;i[o]=new r.GlslLibRoutine(s.indexToOffsetSingle(o,c,f)),o=`indicesToOffset_${l}_T`,i[o]=new r.GlslLibRoutine(s.indexToOffsetSingle(o,c,f.slice().reverse()))}),i}static indexToOffsetSingle(i,l,u){let h="";for(let f=l-1;f>=0;--f)h+=`
        offset += indices[${f}] * ${u[f]};
        `;return`
      int ${i}(int indices[${l}]) {
        int offset = 0;
        ${h}
        return offset;
      }
      `}offsetToIndices(){const i={};return this.context.programInfo.inputNames.forEach((l,u)=>{const h=this.context.inputTextureLayouts[u].shape,f=this.context.inputTextureLayouts[u].strides,c=h.length;let o=`offsetToIndices_${l}`;i[o]=new r.GlslLibRoutine(s.offsetToIndicesSingle(o,c,f)),o=`offsetToIndices_${l}_T`,i[o]=new r.GlslLibRoutine(s.offsetToIndicesSingle(o,c,f.slice().reverse()))}),i}static offsetToIndicesSingle(i,l,u){const h=[];for(let f=0;f<l-1;++f)h.push(`
      indices[${f}] = offset / ${u[f]};`),h.push(`
        offset -= indices[${f}] * ${u[f]};`);return h.push(`
      indices[${l-1}] = offset;`),`
      void ${i}(int offset, out int indices[${l}]) {
        ${h.join("")}
      }
      `}incrementIndices(){const i={};return this.context.programInfo.inputNames.forEach((l,u)=>{const h=this.context.inputTextureLayouts[u].shape,f=h.length,c=`incrementIndices_${l}`;let o="";for(let m=0;m<f;++m)o+=`
        shape[${m}] = ${h[m]};`;const d=`
        void ${c}(int axis, out int indices[${f}]) {
          int shape[${f}];
          ${o};
          for(int i = ${f} -1 ; i >= 0; --i) {
            if(i > axis) continue;
            indices[i] += 1;
            if(indices[i] < shape[i]) {
              break;
            }
            indices[i] = 0;
          }
        }
        `;i[c]=new r.GlslLibRoutine(d)}),i}}e.ShapeUtilsGlslLib=s},6757:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getDefaultFragShaderMain=e.getFragShaderPreamble=e.getVertexShaderSource=e.getGlsl=void 0;const t={version:"",attribute:"attribute",varyingVertex:"varying",varyingFrag:"varying",texture2D:"texture2D",output:"gl_FragColor",outputDeclaration:""},r={version:"#version 300 es",attribute:"in",varyingVertex:"out",varyingFrag:"in",texture2D:"texture",output:"outputColor",outputDeclaration:"out vec4 outputColor;"};function s(a){return a===1?t:r}e.getGlsl=s,e.getVertexShaderSource=function(a){const i=s(a);return`${i.version}
      precision highp float;
      ${i.attribute} vec3 position;
      ${i.attribute} vec2 textureCoord;

      ${i.varyingVertex} vec2 TexCoords;

      void main()
      {
          gl_Position = vec4(position, 1.0);
          TexCoords = textureCoord;
      }`},e.getFragShaderPreamble=function(a){const i=s(a);return`${i.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${i.varyingFrag} vec2 TexCoords;
    ${i.outputDeclaration}
    const vec2 halfCR = vec2(0.5, 0.5);

    // Custom vector types to handle higher dimenalities.
    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    `},e.getDefaultFragShaderMain=function(a,i){return`
  void main() {
    int indices[${i}];
    toVec(TexCoords, indices);
    vec4 result = vec4(process(indices));
    ${s(a).output} = result;
  }
  `}},9314:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.VecGlslLib=void 0;const r=t(1997);class s extends r.GlslLib{constructor(i){super(i)}getCustomTypes(){return{}}getFunctions(){return Object.assign(Object.assign(Object.assign(Object.assign({},this.binaryVecFunctions()),this.copyVec()),this.setVecItem()),this.getVecItem())}binaryVecFunctions(){const i=this.context.outputTextureLayout.shape.length,l={add:"+=",sub:"-=",mul:"*=",div:"/="},u={};for(const h in l){const f=`${h}Vec`;let c="";for(let d=0;d<i;++d)c+=`
          dest[${d}] ${l[h]} src[${d}];
          `;const o=`
        void ${f}(int src[${i}], out int dest[${i}]) {
          ${c}
        }
        `;u[f]=new r.GlslLibRoutine(o)}return u}copyVec(){const i=this.context.outputTextureLayout.shape.length;let l="";for(let h=0;h<i;++h)l+=`
        dest[${h}] = src[${h}];
        `;const u=`
      void copyVec(int src[${i}], out int dest[${i}]) {
        ${l}
      }
      `;return{copyVec:new r.GlslLibRoutine(u)}}setVecItem(){const i=this.context.outputTextureLayout.shape.length;let l=`
        if(index < 0)
            index =${i} + index;
        if (index == 0)
            m[0] = value;
        `;for(let h=1;h<i-1;++h)l+=`
        else if (index == ${h})
            m[${h}] = value;
            `;l+=`
        else
            m[${i-1}] = value;
        `;const u=`
      void setVecItem(out int m[${i}], int index, int value) {
        ${l}
      }
        `;return{setVecItem:new r.GlslLibRoutine(u)}}getVecItem(){const i=this.context.outputTextureLayout.shape.length;let l=`
        if(index < 0)
            index = ${i} + index;
        if (index == 0)
            return m[0];
      `;for(let h=1;h<i-1;++h)l+=`
        else if (index == ${h})
            return m[${h}];
      `;l+=`
        else
            return m[${i-1}];
        `;const u=`
      int getVecItem(int m[${i}], int index) {
        ${l}
      }
    `;return{getVecItem:new r.GlslLibRoutine(u)}}}e.VecGlslLib=s},7860:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.WebGLInferenceHandler=void 0;const r=t(1315),s=t(9240),a=t(7273),i=t(9),l=t(7379),u=t(2488),h=t(540),f=t(3314),c=t(5639);e.WebGLInferenceHandler=class{constructor(o){this.session=o,this.packedTextureDataCache=new Map,this.unpackedTextureDataCache=new Map}calculateTextureWidthAndHeight(o,d){return(0,f.calculateTextureWidthAndHeight)(this.session.layoutStrategy,o,d)}executeProgram(o,d){if(d.length<o.inputNames.length)throw new Error(`Input size mustn't be less than ${o.inputNames.length}.`);if(o.inputNames.length!==o.inputTypes.length)throw new Error("input names size does not match input types");const m=[];for(let w=0;w<o.inputNames.length;++w)m[w]=this.getOrCreateTextureData(d[w],o.inputTypes[w]);const g=((w,v)=>{const S=v.map(C=>`${C.unpackedShape.join(",")};${C.width}x${C.height}`).join("_");let T=w.name;return w.cacheHint&&(T+="["+w.cacheHint+"]"),T+=":"+S,T})(o,m);let y=this.session.programManager.getArtifact(g);const $=y?y.programInfo:typeof o.get=="function"?o.get():o,b=(0,f.createTextureLayoutFromTextureType)(this.session.layoutStrategy,$.output.dims,$.output.textureType),x=this.createTextureData(b,$.output.type);return y||(y=this.session.programManager.build($,m,x),this.session.programManager.setArtifact(g,y)),this.runProgram(y,m,x),x}run(o,d){return this.executeProgram(o,d).tensor}runProgram(o,d,m){for(let g=0;g<d.length;++g)if(!!d[g].isPacked!=(o.programInfo.inputTypes[g]===c.TextureType.packed))throw new Error(`input[${g}] property packed inconsistent`);if(!!m.isPacked!=(o.programInfo.output.textureType===c.TextureType.packed))throw new Error("output property packed inconsistent");this.session.programManager.run(o,d,m)}getOrCreateTextureData(o,d){let m=this.getTextureData(o.dataId,d===c.TextureType.packed);if(!m&&(m=this.getTextureData(o.dataId,d!==c.TextureType.packed),m))return d===c.TextureType.packed?this.pack(m):this.unpack(m);if(!m){const g=(0,f.createTextureLayoutFromTextureType)(this.session.layoutStrategy,o.dims,d);if(d===c.TextureType.packedLastDimension){const b=o.dims;if(b.length===4){const x=[b[0],Math.ceil(b[1]*b[2]*b[3]/4)],w=(0,f.createTextureLayoutFromTextureType)(this.session.layoutStrategy,x,d);let v=o.numberData;if(b[1]*b[2]*b[3]%4!=0){const S=b[0],T=b[1]*b[2]*b[3],C=Math.ceil(T*1/4)*4;v=new Float32Array(S*C);for(let I=0;I<S;++I){const N=I*T,P=I*C+I%1*T;v.set(o.numberData.subarray(N,N+T),P)}}return this.createTextureData(w,o.type,v,o,1)}}if(d===c.TextureType.packed){const y=(0,f.createTextureLayoutFromShape)(this.session.layoutStrategy,o.dims,1,[],{reverseWH:!0}),$=this.createTextureData(y,o.type,o.numberData,o,1);m=this.pack($)}else m=this.createTextureData(g,o.type,o.numberData,o,1)}return m}createTextureDataFromLayoutBindTensor(o,d,m,g){return this.createTextureData(o,d,m,g,1)}createTextureData(o,d,m,g,y){r.Logger.verbose("InferenceHandler",`Creating TextureData: layout:[${JSON.stringify(o)}]`);const $=this.session.textureManager.createTextureFromLayout(d,o,m,y);return this.createTextureDataFromTexture(o,d,$,g)}reshapeUnpacked(o,d){const m=this.getOrCreateTextureData(o,c.TextureType.unpacked),g={channels:m.channels,height:m.height,width:m.width,shape:d.length!==0?d:[1],strides:a.ShapeUtil.computeStrides(d),unpackedShape:d};return this.createTextureDataFromTexture(g,o.type,m.texture).tensor}reshapePacked(o,d){const m=this.getOrCreateTextureData(o,c.TextureType.packed);if((0,l.isReshapeCheap)(o.dims,d)){const x={channels:m.channels,height:m.height,width:m.width,shape:d.length!==0?d:[1],strides:a.ShapeUtil.computeStrides(d),unpackedShape:d,isPacked:!0};return this.createTextureDataFromTexture(x,o.type,m.texture).tensor}const g=(0,l.processDims3D)(o.dims),y=(0,l.processDims3D)(d),$=this.reshapePacked(o,g),b=this.run((0,l.createPackedReshape3DProgramInfoLoader)(this,$,y),[$]);return this.reshapePacked(b,d)}cast(o,d){const m=this.getOrCreateTextureData(o,c.TextureType.unpacked);return this.createTextureDataFromTexture(m,d,m.texture).tensor}createTextureDataFromTexture(o,d,m,g,y){const $=Object.assign(Object.assign({},o),{tensor:g||new s.Tensor(o.unpackedShape,d,b=>this.readTexture($),async b=>this.readTextureAsync($),void 0,y),texture:m});return this.setTextureData($.tensor.dataId,$,o.isPacked),$}getTextureData(o,d=!1){return this.session.isInitializer(o)?this.session.getTextureData(o,d):d?this.packedTextureDataCache.get(o):this.unpackedTextureDataCache.get(o)}setTextureData(o,d,m=!1){this.session.isInitializer(o)?this.session.setTextureData(o,d,m):(m?this.packedTextureDataCache:this.unpackedTextureDataCache).set(o,d)}isTextureLayoutCached(o,d=!1){return!!this.getTextureData(o.dataId,d)}dispose(){this.session.textureManager.clearActiveTextures(),this.packedTextureDataCache.forEach(o=>this.session.textureManager.releaseTexture(o)),this.packedTextureDataCache=new Map,this.unpackedTextureDataCache.forEach(o=>this.session.textureManager.releaseTexture(o)),this.unpackedTextureDataCache=new Map}readTexture(o){return o.isPacked?this.readTexture(this.unpack(o)):this.session.backend.glContext.isFloat32DownloadSupported?this.session.textureManager.readTexture(o,o.tensor.type,o.channels):this.session.textureManager.readUint8TextureAsFloat((0,u.encodeAsUint8)(this,o))}async readTextureAsync(o){return o.isPacked?this.readTextureAsync(this.unpack(o)):this.session.backend.glContext.isFloat32DownloadSupported?this.session.textureManager.readTextureAsync(o,o.tensor.type,o.channels):this.session.textureManager.readUint8TextureAsFloat((0,u.encodeAsUint8)(this,o))}pack(o){return this.executeProgram((0,i.createPackProgramInfoLoader)(this,o.tensor),[o.tensor])}unpack(o){return this.executeProgram((0,h.createUnpackProgramInfoLoader)(this,o.tensor),[o.tensor])}}},4110:function(n,e,t){var r=this&&this.__createBinding||(Object.create?function(G,j,K,X){X===void 0&&(X=K);var Y=Object.getOwnPropertyDescriptor(j,K);Y&&!("get"in Y?!j.__esModule:Y.writable||Y.configurable)||(Y={enumerable:!0,get:function(){return j[K]}}),Object.defineProperty(G,X,Y)}:function(G,j,K,X){X===void 0&&(X=K),G[X]=j[K]}),s=this&&this.__setModuleDefault||(Object.create?function(G,j){Object.defineProperty(G,"default",{enumerable:!0,value:j})}:function(G,j){G.default=j}),a=this&&this.__importStar||function(G){if(G&&G.__esModule)return G;var j={};if(G!=null)for(var K in G)K!=="default"&&Object.prototype.hasOwnProperty.call(G,K)&&r(j,G,K);return s(j,G),j};Object.defineProperty(e,"__esModule",{value:!0}),e.WEBGL_OP_RESOLVE_RULES=void 0;const i=t(8817),l=a(t(5194)),u=t(4752),h=t(6668),f=t(9754),c=t(5042),o=t(6742),d=t(4125),m=t(6149),g=t(5378),y=t(6981),$=t(7413),b=t(7006),x=t(8276),w=t(5565),v=t(2834),S=t(1010),T=t(8126),C=t(2801),I=t(565),N=t(2444),P=t(815),F=t(564),_=t(5416),D=t(1240),E=t(5944),k=t(5707),O=a(t(9087)),M=t(7862),z=t(3980);e.WEBGL_OP_RESOLVE_RULES=[["Abs","","6+",O.abs],["Acos","","7+",O.acos],["Add","","7+",l.add],["And","","7+",l.and],["Asin","","7+",O.asin],["Atan","","7+",O.atan],["AveragePool","","7+",v.averagePool,v.parseAveragePoolAttributes],["BatchNormalization","","7+",i.batchNormalization,i.parseBatchNormalizationAttributes],["Cast","","6+",u.cast,u.parseCastAttributes],["Ceil","","6+",O.ceil],["Clip","","6-10",O.clip,O.parseClipAttributes],["Clip","","11+",O.clipV11],["Concat","","4+",h.concat,h.parseConcatAttributes],["Conv","","1+",f.conv,f.parseConvAttributes],["ConvTranspose","","1+",c.convTranspose,c.parseConvTransposeAttributes],["Cos","","7+",O.cos],["Div","","7+",l.div],["Dropout","","7+",O.identity],["DepthToSpace","","1+",o.depthToSpace,o.parseDepthToSpaceAttributes],["Equal","","7+",l.equal],["Elu","","6+",O.elu,O.parseEluAttributes],["Exp","","6+",O.exp],["Flatten","","1+",d.flatten,d.parseFlattenAttributes],["Floor","","6+",O.floor],["FusedConv","com.microsoft","1+",f.conv,f.parseConvAttributes],["Gather","","1+",m.gather,m.parseGatherAttributes],["Gemm","","7-10",g.gemm,g.parseGemmAttributesV7],["Gemm","","11+",g.gemm,g.parseGemmAttributesV11],["GlobalAveragePool","","1+",v.globalAveragePool,v.parseGlobalAveragePoolAttributes],["GlobalMaxPool","","1+",v.globalMaxPool],["Greater","","7+",l.greater],["Identity","","1+",O.identity],["ImageScaler","","1+",y.imageScaler,y.parseImageScalerAttributes],["InstanceNormalization","","6+",$.instanceNormalization,$.parseInstanceNormalizationAttributes],["LeakyRelu","","6+",O.leakyRelu,O.parseLeakyReluAttributes],["Less","","7+",l.less],["LRN","","1+",b.lrn,b.parseLrnAttributes],["Log","","6+",O.log],["MatMul","","1+",x.matMul,x.parseMatMulAttributes],["MaxPool","","1+",v.maxPool,v.parseMaxPoolAttributes],["Mul","","7+",l.mul],["Neg","","6+",O.neg],["Not","","1+",O.not],["Or","","7+",l.or],["Pad","","2-10",w.padV2,w.parsePadAttributesV2],["Pad","","11+",w.padV11,w.parsePadAttributesV11],["Pow","","7+",l.pow],["PRelu","","7+",l.pRelu],["ReduceLogSum","","1+",S.reduceLogSum,S.parseReduceAttributes],["ReduceMax","","1+",S.reduceMax,S.parseReduceAttributes],["ReduceMean","","1+",S.reduceMean,S.parseReduceAttributes],["ReduceMin","","1+",S.reduceMin,S.parseReduceAttributes],["ReduceProd","","1+",S.reduceProd,S.parseReduceAttributes],["ReduceSum","","1-12",S.reduceSum,S.parseReduceAttributes],["ReduceSumSquare","","1+",S.reduceLogSumSquare,S.parseReduceAttributes],["Relu","","6+",O.relu],["Reshape","","5+",T.reshape],["Resize","","10",C.resize,C.parseResizeAttributesV10],["Resize","","11+",C.resize,C.parseResizeAttributesV11],["Shape","","1+",I.shape],["Sigmoid","","6+",O.sigmoid],["Sin","","7+",O.sin],["Slice","","10+",N.sliceV10],["Slice","","1-9",N.slice,N.parseSliceAttributes],["Softmax","","1-12",P.softmax,P.parseSoftmaxAttributes],["Softmax","","13+",P.softmaxV13,P.parseSoftmaxAttributesV13],["Split","","2-12",F.split,F.parseSplitAttributes],["Sqrt","","6+",O.sqrt],["Squeeze","","1-12",_.squeeze,_.parseSqueezeAttributes],["Squeeze","","13+",_.squeezeV13],["Sub","","7+",l.sub],["Sum","","6+",D.sum],["Tan","","7+",O.tan],["Tanh","","6+",O.tanh],["Tile","","6+",E.tile],["Transpose","","1+",k.transpose,k.parseTransposeAttributes],["Upsample","","7-8",z.upsample,z.parseUpsampleAttributesV7],["Upsample","","9",z.upsample,z.parseUpsampleAttributesV9],["Unsqueeze","","1-12",M.unsqueeze,M.parseUnsqueezeAttributes],["Unsqueeze","","13+",M.unsqueezeV13],["Xor","","7+",l.xor]]},8817:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseBatchNormalizationAttributes=e.batchNormalization=void 0;const r=t(4910),s=t(6757),a=t(5639),i={name:"BatchNormalization",inputNames:["A","Scale","B","Mean","Variance"],inputTypes:[a.TextureType.unpacked,a.TextureType.unpacked,a.TextureType.unpacked,a.TextureType.unpacked,a.TextureType.unpacked]};e.batchNormalization=(h,f,c)=>(u(f),[h.run(Object.assign(Object.assign({},i),{cacheHint:c.cacheKey,get:()=>l(h,f,c)}),f)]),e.parseBatchNormalizationAttributes=h=>{const f=h.attributes.getFloat("epsilon",1e-5),c=h.attributes.getFloat("momentum",.9),o=h.attributes.getInt("spatial",1);return(0,r.createAttributeWithCacheKey)({epsilon:f,momentum:c,spatial:o})};const l=(h,f,c)=>{const o=(0,s.getGlsl)(h.session.backend.glContext.version),d=f[0].dims.length,[m,g]=h.calculateTextureWidthAndHeight(f[1].dims,a.TextureType.unpacked),y=`
  float process(int[${d}] indices) {
    vec2 position = offsetToCoords(indices[1], ${m}, ${g});
    float scale = getColorAsFloat(${o.texture2D}(Scale, position));
    float mean = getColorAsFloat(${o.texture2D}(Mean, position));
    float variance = getColorAsFloat(${o.texture2D}(Variance, position));
    float b = getColorAsFloat(${o.texture2D}(B, position));

    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${c.epsilon})) ) + b;
  }`;return Object.assign(Object.assign({},i),{output:{dims:f[0].dims,type:f[0].type,textureType:a.TextureType.unpacked},shaderSource:y})},u=h=>{if(!h||h.length!==5)throw new Error("BatchNormalization requires 5 inputs.");const f=h[0],c=h[1],o=h[2],d=h[3],m=h[4];if(f.dims.length<3||c.dims.length!==1||o.dims.length!==1||d.dims.length!==1||m.dims.length!==1)throw new Error("invalid input shape.");if(c.dims[0]!==f.dims[1]||o.dims[0]!==f.dims[1]||d.dims[0]!==f.dims[1]||m.dims[0]!==f.dims[1])throw new Error("invalid input shape.");if(f.type!=="float32"&&f.type!=="float64"||c.type!=="float32"&&c.type!=="float64"||o.type!=="float32"&&o.type!=="float64"||d.type!=="float32"&&d.type!=="float64"||m.type!=="float32"&&m.type!=="float64")throw new Error("invalid input tensor types.")}},5194:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.xor=e.sub=e.pRelu=e.pow=e.or=e.mul=e.less=e.greater=e.equal=e.div=e.and=e.add=e.glslPRelu=e.glslPow=e.glslXor=e.glslOr=e.glslAnd=e.glslLess=e.glslGreater=e.glslEqual=e.glslSub=e.glslMul=e.glslDiv=e.glslAdd=void 0;const r=t(7273),s=t(1997),a=t(6757),i=t(5639);function l(){const v="add_";return{body:`
  float ${v}(float a, float b) {
    return a + b;
  }
  vec4 ${v}(vec4 v1, vec4 v2) {
    return v1 + v2;
  }
  `,name:v,type:s.FunctionType.ValueBased}}function u(){const v="div_";return{body:`
  float ${v}(float a, float b) {
    return a / b;
  }
  vec4 ${v}(vec4 v1, vec4 v2) {
    return v1 / v2;
  }
  `,name:v,type:s.FunctionType.ValueBased}}function h(){const v="mul_";return{body:`
  float ${v}(float a, float b) {
    return a * b;
  }
  vec4 ${v}(vec4 v1, vec4 v2) {
    return v1 * v2;
  }
  `,name:v,type:s.FunctionType.ValueBased}}function f(){const v="sub_";return{body:`
  float ${v}(float a, float b) {
    return a - b;
  }
  vec4 ${v}(vec4 v1, vec4 v2) {
    return v1 - v2;
  }
  `,name:v,type:s.FunctionType.ValueBased}}function c(){const v="equal_";return{body:`
  float ${v}(float a, float b) {
    return float(a == b);
  }
  vec4 ${v}(vec4 v1, vec4 v2) {
    return vec4(equal(v1, v2));
  }
  `,name:v,type:s.FunctionType.ValueBased}}function o(){const v="greater_";return{body:`
  float ${v}(float a, float b) {
    return float(a > b);
  }
  vec4 ${v}(vec4 v1, vec4 v2) {
    return vec4( v1.r > v2.r ,
      v1.g > v2.g,
      v1.b > v2.b,
      v1.a > v2.a );
  }
  `,name:v,type:s.FunctionType.ValueBased}}function d(){const v="less_";return{body:`
  float ${v}(float a, float b) {
    return float(a < b);
  }
  vec4 ${v}(vec4 v1, vec4 v2) {
    return vec4( v1.r < v2.r ,
                v1.g < v2.g,
                v1.b < v2.b,
                v1.a < v2.a );
  }
  `,name:v,type:s.FunctionType.ValueBased}}function m(){const v="and_";return{body:`
  float ${v}(float a, float b) {
    return float( bool(a) && bool(b) );
  }
  vec4 ${v}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r && b2.r ,
                b1.g && b2.g,
                b1.b && b2.b,
                b1.a && b2.a );
  }
  `,name:v,type:s.FunctionType.ValueBased}}function g(){const v="or_";return{body:`
  float ${v}(float a, float b) {
    return float( bool(a) || bool(b) );
  }
  vec4 ${v}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r || b2.r ,
                b1.g || b2.g,
                b1.b || b2.b,
                b1.a || b2.a );
  }
  `,name:v,type:s.FunctionType.ValueBased}}function y(){const v="xor_";return{body:`
  float ${v}(float a, float b) {
    return float( bool(a) ^^ bool(b) );
  }
  vec4 ${v}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r ^^ b2.r ,
                b1.g ^^ b2.g,
                b1.b ^^ b2.b,
                b1.a ^^ b2.a );
  }
  `,name:v,type:s.FunctionType.ValueBased}}function $(){return function(v){const S=`${v}_`;return{body:`
  float ${S}(float a, float b) {
    return ${v}(a, b);
  }
  vec4 ${S}(vec4 v1, vec4 v2) {
    return ${v}(v1, v2);
  }
  `,name:S,type:s.FunctionType.ValueBased}}("pow")}function b(){const v="prelu_";return{body:`
  float ${v}(float a, float b) {
    return a < 0.0 ? a * b: a;
  }
  vec4 ${v}(vec4 v1, vec4 v2) {
    return vec4(
      v1.r < 0.0 ? v1.r * v2.r: v1.r,
      v1.g < 0.0 ? v1.g * v2.g: v1.g,
      v1.b < 0.0 ? v1.b * v2.b: v1.b,
      v1.a < 0.0 ? v1.a * v2.a: v1.a
      );
  }
  `,name:v,type:s.FunctionType.ValueBased}}e.glslAdd=l,e.glslDiv=u,e.glslMul=h,e.glslSub=f,e.glslEqual=c,e.glslGreater=o,e.glslLess=d,e.glslAnd=m,e.glslOr=g,e.glslXor=y,e.glslPow=$,e.glslPRelu=b;const x=(v,S,T,C=S[0].type,I)=>{const N=v.session.pack?i.TextureType.packed:i.TextureType.unpacked;return{name:T.name,inputNames:["A","B"],inputTypes:[N,N],cacheHint:I,get:()=>w(v,S,T,C)}},w=(v,S,T,C=S[0].type)=>{const I=v.session.pack?i.TextureType.packed:i.TextureType.unpacked,N=!r.ShapeUtil.areEqual(S[0].dims,S[1].dims);let P=S[0].dims;const F=v.session.pack;if(N){const E=r.BroadcastUtil.calcShape(S[0].dims,S[1].dims,!1);if(!E)throw new Error("Can't perform binary op on the given tensors");P=E;const k=P.length,O=S[0].dims.length!==0?S[0].dims.length:1,M=S[1].dims.length!==0?S[1].dims.length:1,z=S[0].dims.length!==0?"bcastIndices_A(indices, aindices);":"aindices[0] = 0;",G=S[1].dims.length!==0?"bcastIndices_B(indices, bindices);":"bindices[0] = 0;",j=(0,a.getGlsl)(v.session.backend.glContext.version),K=F?`
      ${T.body}
      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();
        vec4 result = ${T.name}(a, b);
        ${j.output} = result;
      }`:`
      ${T.body}
      float process(int indices[${k}]) {
        int aindices[${O}];
        int bindices[${M}];
        ${z}
        ${G}
        return ${T.name}(_A(aindices), _B(bindices));
      }`;return{name:T.name,inputNames:["A","B"],inputTypes:[I,I],output:{dims:P,type:C,textureType:I},shaderSource:K,hasMain:F}}const _=(0,a.getGlsl)(v.session.backend.glContext.version),D=`
    ${T.body}
    void main() {
      vec4 v1 = ${_.texture2D}(A, TexCoords);
      vec4 v2 = ${_.texture2D}(B, TexCoords);
      vec4 result = ${T.name}(v1, v2);
      ${_.output} = result;
    }
    `;return{name:T.name,inputNames:["A","B"],inputTypes:[I,I],output:{dims:S[0].dims,type:C,textureType:I},shaderSource:D,hasMain:!0}};e.add=(v,S)=>[v.run(x(v,S,l()),S)],e.and=(v,S)=>[v.run(x(v,S,m(),"bool"),S)],e.div=(v,S)=>[v.run(x(v,S,u()),S)],e.equal=(v,S)=>[v.run(x(v,S,c(),"bool"),S)],e.greater=(v,S)=>[v.run(x(v,S,o(),"bool"),S)],e.less=(v,S)=>[v.run(x(v,S,d(),"bool"),S)],e.mul=(v,S)=>[v.run(x(v,S,h()),S)],e.or=(v,S)=>[v.run(x(v,S,g(),"bool"),S)],e.pow=(v,S)=>[v.run(x(v,S,$()),S)],e.pRelu=(v,S)=>[v.run(x(v,S,b()),S)],e.sub=(v,S)=>[v.run(x(v,S,f()),S)],e.xor=(v,S)=>[v.run(x(v,S,y(),"bool"),S)]},4752:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseCastAttributes=e.cast=void 0;const r=t(7273);e.cast=(a,i,l)=>(s(i),[a.cast(i[0],l)]),e.parseCastAttributes=a=>r.ProtoUtil.tensorDataTypeFromProto(a.attributes.getInt("to"));const s=a=>{if(!a||a.length!==1)throw new Error("Cast requires 1 input.");if(a[0].type==="string")throw new Error("Invalid input type.")}},4595:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createPackedConcatProgramInfoLoader=void 0;const r=t(6757),s=t(5639),a=t(432),i=t(5614);e.createPackedConcatProgramInfoLoader=(u,h,f)=>{const c=(o=h.length,d=f.cacheKey,{name:"Concat (packed)",inputNames:Array.from({length:o},(m,g)=>`X${g}`),inputTypes:Array(o).fill(s.TextureType.packed),cacheHint:d});var o,d;return Object.assign(Object.assign({},c),{get:()=>((m,g,y,$)=>{const b=y[0].dims.slice();if($>=b.length||$<-1*b.length)throw new Error("axis specified for concat doesn't match input dimensionality");$<0&&($=b.length+$);const x=b.slice(0);for(let z=1;z<y.length;z++){const G=y[z].dims.slice();for(let j=0;j<b.length;j++)if(j===$)x[$]+=G[j];else if(b[j]!==G[j])throw new Error("non concat dimensions must match")}const w=x.length,v=(0,i.getChannels)("coords",w),S=(0,a.getCoordsDataType)(w),T=(0,i.unpackFromChannel)(),C=y.map(z=>z.dims),I=(0,a.getGlChannels)(w),N=new Array(C.length-1);N[0]=C[0][$];for(let z=1;z<N.length;z++)N[z]=N[z-1]+C[z][$];const P=I[$],F=I.slice(-2),_=I.join();let D=`if (${P} < ${N[0]}) {
        return getChannel(
            getX0(${_}), vec2(${F.join()}));
        }`;for(let z=1;z<N.length;z++){const G=N[z-1];D+=`
            if (${P} < ${N[z]}  && ${P} >= ${N[z-1]}) {
              return getChannel(
                getX${z}(${l(I,P,G)}),
                vec2(${l(F,P,G)}));
            }`}const E=N.length,k=N[N.length-1];D+=`
            return getChannel(
              getX${E}(${l(I,P,k)}),
              vec2(${l(F,P,k)}));`;const O=(0,r.getGlsl)(m.session.backend.glContext.version),M=`
          ${T}
          float getValue(${I.map(z=>"int "+z)}) {
            ${D}
          }

          void main() {
            ${S} coords = getOutputCoords();
            int lastDim = coords.${I[w-1]};
            coords.${I[w-1]} = coords.${I[w-2]};
            coords.${I[w-2]} = lastDim;

            vec4 result = vec4(getValue(${v}), 0., 0., 0.);

            ${v[w-1]} = ${v[w-1]} + 1;
            if (${v[w-1]} < ${x[w-1]}) {
              result.g = getValue(${v});
            }

            ${v[w-2]} = ${v[w-2]} + 1;
            if (${v[w-2]} < ${x[w-2]}) {
              result.a = getValue(${v});
            }

            ${v[w-1]} = ${v[w-1]} - 1;
            if (${v[w-2]} < ${x[w-2]} &&
                ${v[w-1]} < ${x[w-1]}) {
              result.b = getValue(${v});
            }
            ${O.output} = result;
          }
        `;return Object.assign(Object.assign({},g),{output:{dims:x,type:y[0].type,textureType:s.TextureType.packed},shaderSource:M,hasMain:!0})})(u,c,h,f.axis)})};const l=(u,h,f)=>{const c=u.indexOf(h);return u.map((o,d)=>d===c?`${o} - ${f}`:o).join()}},6668:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseConcatAttributes=e.concat=void 0;const r=t(4910),s=t(5639),a=t(4595);e.concat=(o,d,m)=>(c(d),o.session.pack&&d[0].dims.length>1?[o.run((0,a.createPackedConcatProgramInfoLoader)(o,d,m),d)]:[o.run(i(o,d,m),d)]);const i=(o,d,m)=>{const g=(y=d.length,$=m.cacheKey,{name:"Concat",inputNames:Array.from({length:y},(b,x)=>`X${x}`),inputTypes:Array(y).fill(s.TextureType.unpacked),cacheHint:$});var y,$;return Object.assign(Object.assign({},g),{get:()=>((b,x,w,v)=>{const S=w[0].dims.slice();if(v>=S.length||v<-1*S.length)throw new Error("axis specified for concat doesn't match input dimensionality");v<0&&(v=S.length+v);const T=S.slice(0);for(let _=1;_<w.length;_++){const D=w[_].dims.slice();for(let E=0;E<S.length;E++)if(E===v)T[v]+=D[E];else if(S[E]!==D[E])throw new Error("non concat dimensions must match")}const C=T.length,I=new Array(w.length);let N=0;for(let _=0;_<I.length;++_)N+=w[_].dims[v],I[_]=N;let P="";P=w.length<5?l(I):u(I);const F=`
        ${h(w.length,C)}
        ${f(I)}
        ${P}
        float process(int indices[${C}]) {
          int textureIndex = getTextureWhereDataResides (indices[${v}]);

          if(textureIndex != 0) {
            indices[${v}] = indices[${v}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));
          }

          return fetchDataFromCorrectTexture(textureIndex, indices);
        }`;return Object.assign(Object.assign({},x),{output:{dims:T,type:w[0].type,textureType:s.TextureType.unpacked},shaderSource:F})})(0,g,d,m.axis)})},l=o=>`int getTextureWhereDataResides(int index) {
      ${o.map((d,m)=>`if(index<${d}) {return ${m};}
`).join("")}
    }`,u=o=>l(o),h=(o,d)=>{const m=[`float fetchDataFromCorrectTexture(int textureIndex, int indices[${d}]) {`];for(let g=0;g<o;++g)g===0?m.push(`	if (textureIndex == ${g}) { return _X${g}(indices); }`):g===o-1?m.push(`	else { return _X${g}(indices); }`):m.push(`	else if (textureIndex == ${g}) { return _X${g}(indices); }`);return m.push("	}"),m.join(`
`)},f=o=>{const d=["int getSizeInConcatAxisValueFromIndex(int index) {"];for(let m=0;m<o.length;++m)m===0?d.push(`	if (index == ${m}) { return ${o[m]}; }`):m===o.length-1?d.push(`	else { return ${o[m]}; }`):d.push(`	else if (index == ${m}) { return ${o[m]}; }`);return d.push("	}"),d.join(`
`)};e.parseConcatAttributes=o=>(0,r.createAttributeWithCacheKey)({axis:o.attributes.getInt("axis")});const c=o=>{if(!o||o.length<1)throw new Error("too few inputs");const d=o[0].type,m=o[0].dims.length;if(d==="string")throw new Error("string tensor is not supported yet");for(const g of o){if(g.type!==d)throw new Error("input tensors should be one type");if(g.dims.length!==m)throw new Error("input tensors should have the same shape")}}},7825:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createUnpackedGroupedConvProgramInfoLoader=void 0;const r=t(1315),s=t(6757),a=t(5639),i=t(9754),l=t(2150);e.createUnpackedGroupedConvProgramInfoLoader=(u,h,f)=>{const c=(o=h.length>2,d=f.cacheKey,{name:"GroupedConv",inputNames:o?["X","W","Bias"]:["X","W"],inputTypes:o?[a.TextureType.unpacked,a.TextureType.unpacked,a.TextureType.unpacked]:[a.TextureType.unpacked,a.TextureType.unpacked],cacheHint:d});var o,d;return Object.assign(Object.assign({},c),{get:()=>((m,g,y,$)=>{const b=g.length>2?"value += getBias(output_channel);":"",x=g[0].dims.slice(),w=g[1].dims.slice(),v=w[0]/$.group;r.Logger.verbose("GroupedConv",`autpPad:${$.autoPad}, dilations:${$.dilations}, group:${$.group}, kernelShape:${$.kernelShape}, pads:${$.pads}, strides:${$.strides}`);const S=(0,i.calculateOutputShape)(x,w,$.dilations,$.pads,$.strides),T=(0,s.getGlsl)(m.session.backend.glContext.version),{activationFunction:C,applyActivation:I}=(0,l.getActivationSnippet)($),N=`
  const ivec2 strides = ivec2(${$.strides[0]}, ${$.strides[1]});
  const ivec2 pads = ivec2(${$.pads[0]}, ${$.pads[1]});
  ${C}
  void main() {
    ivec4 coords = getOutputCoords();
    int batch = coords.x;
    int output_channel = coords.y;
    ivec2 xRCCorner = coords.zw * strides - pads;
    int group_id = output_channel / ${v};

    float value = 0.0;
    for (int wInChannel = 0; wInChannel < ${w[1]}; wInChannel++) {
      int input_channel = group_id * ${w[1]} + wInChannel;
      for (int wHeight = 0; wHeight < ${w[2]}; wHeight++) {
        int xHeight = xRCCorner.x + wHeight * ${$.dilations[0]};

        if (xHeight < 0 || xHeight >= ${x[2]}) {
          continue;
        }

        for (int wWidth = 0; wWidth < ${w[3]}; wWidth++) {
          int xWidth = xRCCorner.y + wWidth * ${$.dilations[1]};
          if (xWidth < 0 || xWidth >= ${x[3]}) {
            continue;
          }

          float xVal = getX(batch, input_channel, xWidth, xHeight);
          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);
          value += xVal*wVal;
        }
      }
    }
    ${b}
    ${I}
    ${T.output} = vec4(value, .0, .0, .0);
  }
`;return Object.assign(Object.assign({},y),{output:{dims:S,type:g[0].type,textureType:a.TextureType.unpacked},shaderSource:N,hasMain:!0})})(u,h,c,f)})}},7708:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.conv2DPacked=e.conv2DPackedPointwise=void 0;const r=t(9754),s=t(5950),a=t(5632);e.conv2DPackedPointwise=(i,l,u)=>{const h=l[0].dims,f=l[1].dims,c=(0,r.calculateOutputShape)(h,f,u.dilations,u.pads,u.strides),o=i.reshapePacked(l[0],[h[1],h[2]*h[3]]),d=i.reshapePacked(l[1],[f[0],f[1]]),m=l.length>2?[d,o,l[2]]:[d,o],g=i.run((0,a.createPackedMatmulProgramInfoLoader)(i,m,u),m);return i.reshapePacked(g,c)},e.conv2DPacked=(i,l,u)=>{const h=l[0].dims,f=l[1].dims,c=(0,r.calculateOutputShape)(h,f,u.dilations,u.pads,u.strides),o=i.run((0,s.createPackedIm2ColProgramInfoLoader)(i,l[0],l[1],c,u),[l[0]]),d=i.reshapePacked(l[1],[f[0],f[1]*f[2]*f[3]]),m=l.length===3?[d,o,l[2]]:[d,o],g=i.run((0,a.createPackedMatmulProgramInfoLoader)(i,m,u),m);return i.reshapePacked(g,c)}},5042:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseConvTransposeAttributes=e.convTranspose=void 0;const r=t(4910),s=t(6757),a=t(5639),i=t(2150),l=(d,m,g,y,$,b)=>(d-1)*m+g+(y-1)*$+1-b,u=(d,m,g,y,$)=>{const b=Math.floor(d/2);m==="SAME_UPPER"?(g[y]=b,g[$]=d-b):m==="SAME_LOWER"&&(g[y]=d-b,g[$]=b)};e.convTranspose=(d,m,g)=>(o(m,g),h(d,m,g));const h=(d,m,g)=>{const y=c(g,m);return[f(d,m,y)]},f=(d,m,g)=>d.run(((y,$,b)=>{const x=(w=$.length>2,v=b.cacheKey,{name:"ConvTranspose",inputNames:w?["X","W","B"]:["X","W"],inputTypes:w?[a.TextureType.unpacked,a.TextureType.unpacked,a.TextureType.unpacked]:[a.TextureType.unpacked,a.TextureType.unpacked],cacheHint:v});var w,v;return Object.assign(Object.assign({},x),{get:()=>((S,T,C,I)=>{const N=T.length>2?"getB(output_channel)":"0.0",P=T[0].dims,F=T[1].dims,_=F[1],D=F[0]/I.group,E=[T[0].dims[0],T[1].dims[1]*I.group,...I.outputShape],k=(0,s.getGlsl)(S.session.backend.glContext.version),{activationFunction:O,applyActivation:M}=(0,i.getActivationSnippet)(I),z=`
  const ivec2 strides = ivec2(${I.strides[0]}, ${I.strides[1]});
  const ivec2 pads = ivec2(${I.pads[0]}, ${I.pads[1]});
  ${O}
  void main() {
    ivec4 coords = getOutputCoords();
    int batch = coords.x;
    int output_channel = coords.y;

    ivec2 loc = coords.zw + pads;

    int group_id = output_channel / ${_};
    int wOutChannel = output_channel - group_id * ${_};

    float value = ${N};
    for (int inChannelOffset = 0; inChannelOffset < ${D}; inChannelOffset++) {
      int input_channel = group_id * ${D} + inChannelOffset;
      for (int wWOff = 0; wWOff < ${F[2]}; wWOff++) {
        for (int wHOff = 0; wHOff < ${F[3]}; wHOff++) {
          ivec2 wOff = ivec2(wWOff * ${I.dilations[0]}, wHOff * ${I.dilations[1]});
          ivec2 wLoc = loc - wOff;
          ivec2 wLocIn = wLoc / strides;
          if (
            wLocIn * strides == wLoc &&
            wLocIn.x >= 0 && wLocIn.x < ${P[2]} &&
            wLocIn.y >= 0 && wLocIn.y < ${P[3]}
          ) {
            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);
            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);
            value += xVal * wVal;
          }
        }
      }
    }
    ${M}
    ${k.output} = vec4(value, .0, .0, .0);
  }
`;return Object.assign(Object.assign({},C),{output:{dims:E,type:T[0].type,textureType:a.TextureType.unpacked},shaderSource:z,hasMain:!0})})(y,$,x,b)})})(d,m,g),m),c=(d,m)=>{const g=d.kernelShape.slice();if(d.kernelShape.length===0)for(let x=2;x<m[1].dims.length;++x)g.push(m[1].dims[x]);const y=d.pads.slice(),$=d.outputShape.slice();((x,w,v,S,T,C,I,N)=>{const P=x.length-2,F=N.length===0;for(let _=0;_<P;++_){const D=F?x[_+2]*C[_]:N[_],E=l(x[_+2],C[_],T[_],w[_],v[_],D);u(E,S,T,_,_+P),F&&N.push(C[_]*(x[_+2]-1)+I[_]+(w[_]-1)*v[_]+1-T[_]-T[_+P])}})(m[0].dims,g,d.dilations,d.autoPad,y,d.strides,d.outputPadding,$);const b=Object.assign({},d);return Object.assign(b,{kernelShape:g,pads:y,outputShape:$,cacheKey:d.cacheKey}),b};e.parseConvTransposeAttributes=d=>{const m=d.attributes,g=(0,i.parseInternalActivationAttributes)(m),y=m.getString("auto_pad","NOTSET"),$=m.getInts("dilations",[1,1]),b=m.getInt("group",1),x=m.getInts("kernel_shape",[]),w=m.getInts("output_padding",[0,0]),v=m.getInts("output_shape",[]),S=m.getInts("pads",[0,0,0,0]),T=m.getInts("strides",[1,1]);return(0,r.createAttributeWithCacheKey)(Object.assign({autoPad:y,dilations:$,group:b,kernelShape:x,outputPadding:w,outputShape:v,pads:S,strides:T},g))};const o=(d,m)=>{if(!d||d.length!==2&&d.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(d[0].dims.length!==4||d[1].dims.length!==4)throw new Error("currently only support 2-dimensional conv");if(d[0].dims[1]!==d[1].dims[0])throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");const g=d[1].dims[1]*m.group;if(d.length===3&&(d[2].dims.length!==1||d[2].dims[0]!==g))throw new Error("invalid bias");const y=d[0].dims.length-2;if(m.dilations.length!==y)throw new Error(`dilations should be ${y}D`);if(m.strides.length!==y)throw new Error(`strides should be ${y}D`);if(m.pads.length!==2*y)throw new Error(`pads should be ${2*y}D`);if(m.outputPadding.length!==y)throw new Error(`output_padding should be ${y}D`);if(m.kernelShape.length!==0&&m.kernelShape.length!==d[1].dims.length-2)throw new Error("invalid kernel shape");if(m.outputShape.length!==0&&m.outputShape.length!==d[0].dims.length-2)throw new Error("invalid output shape");if(d[0].type!=="float32"||d[1].type!=="float32")throw new Error("ConvTranspose input(X,W) should be float tensor");if(d.length===3&&d[2].type!=="float32")throw new Error("ConvTranspose input(bias) should be float tensor")}},9754:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseConvAttributes=e.conv=e.calculateOutputShape=void 0;const r=t(4910),s=t(7273),a=t(7825),i=t(7708),l=t(3281),u=t(2150),h=t(1625),f=t(8276);e.calculateOutputShape=(y,$,b,x,w)=>{const v=y[0],S=y.slice(2),T=S.length,C=$[0],I=$.slice(2).map((P,F)=>P+(P-1)*(b[F]-1)),N=S.map((P,F)=>P+x[F]+x[F+T]).map((P,F)=>Math.floor((P-I[F]+w[F])/w[F]));return[v,C].concat(...N)},e.conv=(y,$,b)=>(g($,b),c(y,$,b));const c=(y,$,b)=>{const x=m(b,$),w=y.session.pack,v=x.kernelShape[0]===1&&x.kernelShape[1]===1;return x.group>1?[y.run((0,a.createUnpackedGroupedConvProgramInfoLoader)(y,$,x),$)]:v&&w?[o(y,$,x)]:w&&$[0].dims.length===4&&$[0].dims[0]===1&&!v?[(0,i.conv2DPacked)(y,$,x)]:[d(y,$,x)]},o=(y,$,b)=>{const x=$[0].dims,w=$[1].dims,v=(0,e.calculateOutputShape)(x,w,b.dilations,b.pads,b.strides),S=y.reshapeUnpacked($[0],[x[1],x[2]*x[3]]),T=y.reshapeUnpacked($[1],[w[0],w[1]]),C=$.length>2?[T,S,$[2]]:[T,S],I=y.run((0,f.createMatmulProgramInfoLoader)(C,b),C);return y.reshapeUnpacked(I,v)},d=(y,$,b)=>{const x=$[0].dims,w=$[1].dims,v=(0,e.calculateOutputShape)(x,w,b.dilations,b.pads,b.strides),S=y.run((0,h.createIm2ColProgramInfoLoader)(y,$[0],$[1],v,b),[$[0]]),T=$.length===3?[S,$[1],$[2]]:[S,$[1]];return y.run((0,l.createDotProductProgramInfoLoader)(y,$,v,b),T)},m=(y,$)=>{const b=y.kernelShape.slice();if(y.kernelShape.length===0)for(let v=2;v<$[1].dims.length;++v)b.push($[1].dims[v]);const x=y.pads.slice();s.PoolConvUtil.adjustPadsBasedOnAutoPad($[0].dims,y.strides,y.dilations,b,x,y.autoPad);const w=Object.assign({},y);return Object.assign(w,{kernelShape:b,pads:x,cacheKey:y.cacheKey}),w};e.parseConvAttributes=y=>{const $=y.attributes,b=(0,u.parseInternalActivationAttributes)($),x=$.getString("auto_pad","NOTSET"),w=$.getInts("dilations",[1,1]),v=$.getInt("group",1),S=$.getInts("kernel_shape",[]),T=$.getInts("pads",[0,0,0,0]),C=$.getInts("strides",[1,1]);return(0,r.createAttributeWithCacheKey)(Object.assign({autoPad:x,dilations:w,group:v,kernelShape:S,pads:T,strides:C},b))};const g=(y,$)=>{if(!y||y.length!==2&&y.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(y[0].dims.length!==4||y[1].dims.length!==4)throw new Error("currently only support 2-dimensional conv");if(y[0].dims[1]!==y[1].dims[1]*$.group)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(y.length===3&&(y[2].dims.length!==1||y[1].dims[0]!==y[2].dims[0]))throw new Error("invalid bias");const b=y[0].dims.length-2;if($.dilations.length!==b)throw new Error(`dilations should be ${b}D`);if($.strides.length!==b)throw new Error(`strides should be ${b}D`);if($.pads.length!==2*b)throw new Error(`pads should be ${2*b}D`);if($.kernelShape.length!==0&&$.kernelShape.length!==y[1].dims.length-2)throw new Error("invalid kernel shape");if(y[0].type!=="float32"||y[1].type!=="float32")throw new Error("Conv input(X,W) should be float tensor");if(y.length===3&&y[2].type!=="float32")throw new Error("Conv input(bias) should be float tensor")}},6742:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseDepthToSpaceAttributes=e.depthToSpace=void 0;const r=t(5707);e.depthToSpace=(a,i,l)=>{s(i);const u=l.blocksize,h=u*u,f=l.mode==="DCR"?[0,3,4,1,5,2]:[0,1,4,2,5,3],c=l.mode==="DCR"?[i[0].dims[0],u,u,i[0].dims[1]/h,i[0].dims[2],i[0].dims[3]]:[i[0].dims[0],i[0].dims[1]/h,u,u,i[0].dims[2],i[0].dims[3]],o=a.reshapeUnpacked(i[0],c),d={perm:f,cacheKey:`${f}`},[m]=(0,r.transpose)(a,[o],d),g=[i[0].dims[0],i[0].dims[1]/h,i[0].dims[2]*u,i[0].dims[3]*u];return[a.reshapeUnpacked(m,g)]},e.parseDepthToSpaceAttributes=a=>{const i=a.attributes.getInt("blocksize");if(i<1)throw new Error(`blocksize must be >= 1, but got : ${i} for DepthToSpace`);const l=a.attributes.getString("mode","DCR");if(l!=="DCR"&&l!=="CRD")throw new Error(`unrecognized mode: ${l} for DepthToSpace`);return{mode:l,blocksize:i}};const s=a=>{if(a.length!==1)throw new Error(`DepthToSpace expect 1 inputs, but got ${a.length}`);if(a[0].type==="string"||a[0].dims.length!==4)throw new TypeError("DepthToSpace input should be a 4-D numeric tensor")}},3281:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createDotProductProgramInfoLoader=void 0;const r=t(7273),s=t(6757),a=t(5639),i=t(2150),l=t(1625);e.createDotProductProgramInfoLoader=(u,h,f,c)=>{const o=((d,m)=>({name:"ConvDotProduct",inputNames:d?["Im2Col","K","B"]:["Im2Col","K"],inputTypes:d?[a.TextureType.unpacked,a.TextureType.packedLastDimension,a.TextureType.unpacked]:[a.TextureType.unpacked,a.TextureType.packedLastDimension],cacheKey:m.activationCacheKey}))(h.length>2,c);return Object.assign(Object.assign({},o),{get:()=>((d,m,g,y,$)=>{const b=g[0].dims,x=g[1].dims,w=[x[0],Math.ceil(b[1]*x[2]*x[3]/4)],v=(0,l.calculateIm2ColDims)(b,x,y),[S,T]=d.calculateTextureWidthAndHeight(w,a.TextureType.packedLastDimension),C=r.ShapeUtil.computeStrides(v),[I,N]=d.calculateTextureWidthAndHeight(v,a.TextureType.packedLastDimension),P=y.length,F=g.length<3?"0.0":"_B(b)",_=Math.ceil(b[1]*x[2]*x[3]/4),{activationFunction:D,applyActivation:E}=(0,i.getActivationSnippet)($),k=(0,s.getGlsl)(d.session.backend.glContext.version),O=`
${D}
float process(int indices[${P}]) {
  int b[1];
  b[0] = indices[1];
  int im2col[4];
  im2col[0] = indices[0];
  im2col[1] = indices[2];
  im2col[2] = indices[3];
  int im2colOffset = im2col[0] * ${C[0]} + im2col[1] * ${C[1]} + im2col[2] * ${C[2]};
  int kernelOffset = indices[1] * ${w[1]};
  float value = ${F};
  for (int i = 0; i < ${_}; ++i) {
    vec2 im2colCoords = offsetToCoords(im2colOffset, ${I}, ${N});
    vec2 kernelCoords = offsetToCoords(kernelOffset, ${S}, ${T});
    value += dot(${k.texture2D}(Im2Col, im2colCoords), ${k.texture2D}(K, kernelCoords));
    ++im2colOffset;
    ++kernelOffset;
  }
  ${E}
  return value;
}`;return Object.assign(Object.assign({},m),{output:{dims:y,type:g[0].type,textureType:a.TextureType.unpacked},shaderSource:O})})(u,o,h,f,c)})}},4125:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseFlattenAttributes=e.flatten=void 0;const r=t(7273);e.flatten=(a,i,l)=>{s(i,l);const u=r.ShapeUtil.flattenShape(i[0].dims,l);return[a.reshapeUnpacked(i[0],u)]},e.parseFlattenAttributes=a=>a.attributes.getInt("axis",1);const s=(a,i)=>{if(!a||a.length!==1)throw new Error("Flatten requires 1 input.");const l=a[0].dims.length;if(l===0)throw new Error("scalar tensor is not supported.");if(i<-l||i>l)throw new Error("Invalid axis");if(a[0].type==="string")throw new Error("string tensor is not supported.")}},2150:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseInternalActivationAttributes=e.getActivationSnippet=void 0;const r=t(7273),s=t(9087);e.getActivationSnippet=function(a){let i;switch(a.activation){case"Relu":i=(0,s.glslRelu)();break;case"Sigmoid":i=(0,s.glslSigmoid)();break;case"Clip":i=(0,s.glslClip)(a.clipMin,a.clipMax);break;default:return{activationFunction:"",applyActivation:""}}const l=i.name;return{activationFunction:i.body,applyActivation:`value = ${l}_(value);`}},e.parseInternalActivationAttributes=a=>{const i=a.getString("activation","");if(i==="Clip"){const[l,u]=a.getFloats("activation_params",[r.MIN_CLIP,r.MAX_CLIP]);return{activation:i,clipMax:u,clipMin:l,activationCacheKey:`${i}:${l},${u}`}}return{activation:i,activationCacheKey:i}}},6149:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseGatherAttributes=e.gather=void 0;const r=t(4910),s=t(6145),a=t(7273),i=t(5639);e.gather=(f,c,o)=>(h(c,o.axis),[f.run(u(f,c,o),c)]),e.parseGatherAttributes=f=>(0,r.createAttributeWithCacheKey)({axis:f.attributes.getInt("axis",0)});const l={name:"Gather",inputNames:["A","B"],inputTypes:[i.TextureType.unpacked,i.TextureType.unpacked]},u=(f,c,o)=>{const d=Object.assign(Object.assign({},l),{cacheHint:o.cacheKey});return Object.assign(Object.assign({},d),{get:()=>((m,g,y,$)=>{const b=y[0].dims.slice(),x=y[1].dims.slice(),w=new Array(b.length+x.length-1);$=a.ShapeUtil.normalizeAxis($,b.length);const v=[];for(let T=0;T<w.length;T++)T<$?(w[T]=b[T],v.push(`inputIdx[${T}] = outputIdx[${T}];`)):T<$+x.length?(w[T]=x[T-$],v.push(`indexDataIdx[${T-$}] = outputIdx[${T}];`)):(w[T]=b[T-x.length+1],v.push(`inputIdx[${T-x.length+1}] = outputIdx[${T}];`));const S=`
      float process(int outputIdx[${w.length||1}]) {
        int inputIdx[${b.length}];
        int indexDataIdx[${x.length||1}];
        indexDataIdx[0] = 0;
        ${v.join(`
        `)}
        int idx = int(_B(indexDataIdx));
        inputIdx[${$}] = idx < 0 ? idx + ${b[$]} : idx;
        return _A(inputIdx);
      }`;return Object.assign(Object.assign({},g),{output:{dims:w,type:y[0].type,textureType:i.TextureType.unpacked},shaderSource:S})})(0,d,c,o.axis)})},h=(f,c)=>{if(!f||f.length!==2)throw new Error("Gather requires 2 inputs.");const o=f[0].dims.length;if(o<1)throw new Error("Invalid input shape.");if(c<-o||c>o-1)throw new Error("Invalid axis.");if(s.NUMBER_TYPES.indexOf(f[0].type)===-1)throw new Error("Invaid input type.");if(f[1].type!=="int32"&&f[1].type!=="int16")throw new Error("Invaid input type.")}},5378:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseGemmAttributesV11=e.parseGemmAttributesV7=e.gemm=void 0;const r=t(4910),s=t(7273),a=t(5639);e.gemm=(f,c,o)=>(h(c,o),[f.run(l(c,o),c)]);const i=(f,c)=>{const o=f.attributes.getInt("transA",0)!==0,d=f.attributes.getInt("transB",0)!==0,m=f.attributes.getFloat("alpha",1),g=f.attributes.getFloat("beta",1);return(0,r.createAttributeWithCacheKey)({transA:o,transB:d,alpha:m,beta:g,isOptionalC:c})};e.parseGemmAttributesV7=f=>i(f,!1),e.parseGemmAttributesV11=f=>i(f,!0);const l=(f,c)=>{const o={name:"Gemm",inputNames:f.length===3?["A","B","C"]:["A","B"],inputTypes:f.length===3?[a.TextureType.unpacked,a.TextureType.unpacked,a.TextureType.unpacked]:[a.TextureType.unpacked,a.TextureType.unpacked],key:c.cacheKey};return Object.assign(Object.assign({},o),{get:()=>u(o,f,c)})},u=(f,c,o)=>{const d=c[0].dims.slice(),m=c[1].dims.slice(),[g,y]=s.GemmUtil.getShapeOfGemmResult(d,o.transA,m,o.transB,c.length===3?c[2].dims:void 0),$=[g,y];if(!$)throw new Error("Can't use gemm on the given tensors");let b=d[d.length-1],x="";o.transA&&(b=d[0]),o.transA&&o.transB?x="value += _A_T(a) * _B_T(b);":o.transA&&!o.transB?x="value += _A_T(a) * _B(b);":!o.transA&&o.transB?x="value += _A(a) * _B_T(b);":o.transA||o.transB||(x="value += _A(a) * _B(b);");const w=$.length,v=`
      float process(int indices[${w}]) {
          int a[${w}];
          int b[${w}];
          ${c.length===3?`int c[${c[2].dims.length}];`:""}

          copyVec(indices, a);
          copyVec(indices, b);
          ${c.length===3?"bcastIndices_C(indices, c);":""}

          float value = 0.0;
          for (int k=0; k<${b}; ++k) {
              a[${w-1}] = k;
              b[${w-2}] = k;
              ${x}
          }

          value = value * alpha;
          ${c.length===3?"value += beta * _C(c);":""}
          return value;
      }`;return Object.assign(Object.assign({},f),{output:{dims:$,type:c[0].type,textureType:a.TextureType.unpacked},variables:[{name:"alpha",type:"float",data:o.alpha},{name:"beta",type:"float",data:o.beta}],shaderSource:v})},h=(f,c)=>{if(!f)throw new Error("Input is missing");if(c.isOptionalC&&(f.length<2||f.length>3))throw new Error("Invaid input shape.");if(!c.isOptionalC&&f.length!==3)throw new Error("Gemm requires 3 inputs");if(f.length===3&&f[2].dims.length!==1&&f[2].dims.length!==2)throw new Error("Invalid input shape of C");if(f[0].type!=="float32"&&f[0].type!=="float64"||f[1].type!=="float32"&&f[1].type!=="float64"||f.length===3&&f[2].type!=="float32"&&f[2].type!=="float64")throw new Error("Invalid input type.");if(f[0].type!==f[1].type||f.length===3&&f[0].type!==f[2].type)throw new Error("Input types are mismatched")}},5950:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createPackedIm2ColProgramInfoLoader=void 0;const r=t(6757),s=t(5639),a=t(5614);e.createPackedIm2ColProgramInfoLoader=(i,l,u,h,f)=>{const c=(o=f.cacheKey,{name:"Im2Col (packed)",inputNames:["A"],inputTypes:[s.TextureType.packed],cacheHint:o});var o;return Object.assign(Object.assign({},c),{get:()=>((d,m,g,y,$,b)=>{const x=g.dims,w=y.dims,v=$.length,S=[w[1]*w[2]*w[3],$[2]*$[3]],T=w[2]*w[3],C=(0,a.unpackFromChannel)(),I=(0,r.getGlsl)(d.session.backend.glContext.version);let N="";for(let F=0;F<=1;F++)for(let _=0;_<=1;_++)N+=`
            blockIndex = rc.x + ${_};
            pos = rc.y + ${F};

            if(blockIndex < ${S[1]} && pos < ${S[0]}) {
              offsetY = int(blockIndex / (${$[v-1]})) * ${b.strides[0]} -
                ${b.pads[0]};
              d0 = offsetY + ${b.dilations[0]} * (imod(pos, ${T}) / ${w[2]});

              if(d0 < ${x[2]} && d0 >= 0) {
                offsetX = imod(blockIndex, ${$[v-1]}) * ${b.strides[1]} -
                  ${b.pads[1]};
                d1 = offsetX + ${b.dilations[1]} * imod(imod(pos, ${T}), ${w[2]});

                if(d1 < ${x[3]} && d1 >= 0) {

                  ch = int(float(pos)/ ${T}.);
                    innerDims = vec2(d0, d1);
                    result[${2*F+_}] = getChannel(
                      getA(0, ch, int(innerDims.x),
                      int(innerDims.y)), innerDims);
                }
              }
            }

          `;const P=`
      ${C}

      void main() {
        ivec2 rc = getOutputCoords();
          vec4 result = vec4(0.0);
          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
          vec2 innerDims;
          ${N}
          ${I.output} = result;
      }
            `;return Object.assign(Object.assign({},m),{output:{dims:S,type:g.type,textureType:s.TextureType.packed},shaderSource:P,hasMain:!0})})(i,c,l,u,h,f)})}},1625:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.calculateIm2ColDims=e.createIm2ColProgramInfoLoader=void 0;const r=t(5639);e.createIm2ColProgramInfoLoader=(s,a,i,l,u)=>{const h=(f=u.cacheKey,{name:"Im2Col",inputNames:["X"],inputTypes:[r.TextureType.unpacked],cacheHint:f});var f;return Object.assign(Object.assign({},h),{get:()=>((c,o,d,m,g,y)=>{const $=d.dims,b=m.dims,x=g.length,w=(0,e.calculateIm2ColDims)($,b,g,4),v=`
        const int XC = ${$[1]};
        const int XH = ${$[2]};
        const int XW = ${$[3]};
        const int KH = ${y.kernelShape[0]};
        const int KW = ${y.kernelShape[1]};
        const int dilationH = ${y.dilations[0]};
        const int dilationW = ${y.dilations[1]};
        const int strideH = ${y.strides[0]};
        const int strideW = ${y.strides[1]};
        const int padH = ${y.pads[0]};
        const int padW = ${y.pads[1]};
        const int KHKW = KH*KW;
        const int XCKHKW = XC * KHKW;
        const int outputChannels = 4;
        vec4 process(int indices[${x}]) {
          int b  = indices[0]; // batch size
          int oh = indices[1] * strideH - padH; //output height
          int ow = indices[2] * strideW - padW; //output width
          int p = indices[3] * outputChannels; //patch
          vec4 value = vec4(0.0);
          for(int i=0; i < outputChannels; ++i) {
            if(p < XCKHKW) {
              int patchC = p / KHKW;
              int patchH = (p - patchC*KHKW) / KW;
              int patchW = (p - patchC*KHKW) - patchH * KW;
              int xh2 = oh + patchH * dilationH;
              int xw2 = ow + patchW * dilationW;
              int x[${$.length}];
              x[0] = b;
              x[1] = patchC;
              x[2] = xh2;
              x[3] = xw2;
              if(xh2 >= 0 &&
                  xh2 < XH &&
                  xw2 >= 0 &&
                  xw2 < XW) {
                value[i] = _X(x);
              }
            }
            ++p;
          }
          return value;
        }
        `;return Object.assign(Object.assign({},o),{output:{dims:w,type:d.type,textureType:r.TextureType.packedLastDimension},shaderSource:v})})(0,h,a,i,l,u)})},e.calculateIm2ColDims=(s,a,i,l=4)=>[i[0],i[2],i[3],Math.ceil(s[1]*a[2]*a[3]/l)]},6981:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseImageScalerAttributes=e.imageScaler=void 0;const r=t(4910),s=t(5639);e.imageScaler=(h,f,c)=>(u(f),[h.run(i(h,f,c),f)]),e.parseImageScalerAttributes=h=>{const f=h.attributes.getFloat("scale"),c=h.attributes.getFloats("bias");return(0,r.createAttributeWithCacheKey)({scale:f,bias:c})};const a={name:"ImageScaler",inputNames:["X"],inputTypes:[s.TextureType.unpacked]},i=(h,f,c)=>{const o=Object.assign(Object.assign({},a),{cacheHint:c.cacheKey});return Object.assign(Object.assign({},o),{get:()=>((d,m,g,y)=>{const $=g[0].dims.slice(),b=$.length,x=`
      ${l(y.bias.length)}
      float process(int indices[${b}]) {
        return _X(indices) * scale + getBias(bias, indices[1]);
      }`;return Object.assign(Object.assign({},m),{output:{dims:$,type:g[0].type,textureType:s.TextureType.unpacked},variables:[{name:"bias",type:"float",arrayLength:y.bias.length,data:y.bias},{name:"scale",type:"float",data:y.scale}],shaderSource:x})})(0,o,f,c)})},l=h=>{const f=[`float getBias(float bias[${h}], int channel) {`];for(let c=0;c<h;++c)c===0?f.push(`	if (channel == ${c}) { return bias[${c}]; }`):c===h-1?f.push(`	else { return bias[${c}]; }`):f.push(`	else if (channel == ${c}) { return bias[${c}]; }`);return f.push("	}"),f.join(`
`)},u=h=>{if(!h||h.length!==1)throw new Error("ImageScaler requires 1 input.");if(h[0].dims.length!==4)throw new Error("Invalid input shape.");if(h[0].type!=="float32"&&h[0].type!=="float64")throw new Error("Invalid input type.")}},7413:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseInstanceNormalizationAttributes=e.instanceNormalization=void 0;const r=t(6757),s=t(5639);e.instanceNormalization=(f,c,o)=>{h(c);const d=f.run(i(c[0]),c);return[f.run(u(f,c[0],o,d.dims),[c[0],d,c[1],c[2]])]},e.parseInstanceNormalizationAttributes=f=>f.attributes.getFloat("epsilon",1e-5);const a={name:"InstanceNormalization_MeanAndVariance",inputNames:["X"],inputTypes:[s.TextureType.unpacked]},i=f=>Object.assign(Object.assign({},a),{get:()=>((c,o)=>{const d=o.dims.slice(),m=d[1],g=d[2]*d[3],y=[d[0],m],$=`
      vec4 process(int[2] indices) {
        vec4 v = vec4(0.0);
        int a[4];
        a[0] = indices[0];
        a[1] = indices[1];
        float temp = 0.0;
        for(int a2=0; a2<${d[2]}; a2++) {
          a[2] = a2;
          for(int a3=0; a3<${d[3]}; a3++) {
            a[3] = a3;
            float x = _X(a);
            temp += x;
          }
        }
        float mean = temp / float(${g});
        temp = 0.0;
        for(int a2=0; a2<${d[2]}; a2++) {
          a[2] = a2;
          for(int a3=0; a3<${d[3]}; a3++) {
            a[3] = a3;
            float x = _X(a);
            temp += (x - mean) * (x - mean);
          }
        }
        v.r = mean;
        v.g = temp / float(${g});

        return v;
      }`;return Object.assign(Object.assign({},c),{output:{dims:y,type:o.type,textureType:s.TextureType.packedLastDimension},shaderSource:$})})(a,f)}),l={name:"InstanceNormalization_ComputeOutput",inputNames:["X","MeanAndVariance","Scale","B"],inputTypes:[s.TextureType.unpacked,s.TextureType.packedLastDimension,s.TextureType.unpacked,s.TextureType.unpacked]},u=(f,c,o,d)=>{const m=Object.assign(Object.assign({},l),{cacheHint:`${o}`});return Object.assign(Object.assign({},m),{get:()=>((g,y,$,b,x)=>{const w=(0,r.getGlsl)(g.session.backend.glContext.version),[v,S]=g.calculateTextureWidthAndHeight(x,s.TextureType.packedLastDimension),[T,C]=[v/4,S],I=`
      vec4 get_MeanAndVariance(int[2] mv) {
        int offset = indicesToOffset_MeanAndVariance(mv);
        vec2 coords = offsetToCoords(offset, ${T}, ${C});
        return ${w.texture2D}(MeanAndVariance, coords);
      }

      float process(int[4] indices) {
        int mv[2];
        mv[0] = indices[0];
        mv[1] = indices[1];
        vec4 mean_and_variance = get_MeanAndVariance(mv);
        float mean = mean_and_variance.r;
        float variance = mean_and_variance.g;

        int sb[1];
        sb[0] = indices[1];
        float scale = _Scale(sb);
        float b = _B(sb);

        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;
      }`;return Object.assign(Object.assign({},y),{output:{dims:$.dims,type:$.type,textureType:s.TextureType.unpacked},variables:[{name:"epsilon",type:"float",data:b}],shaderSource:I})})(f,m,c,o,d)})},h=f=>{if(!f||f.length!==3)throw new Error("InstanceNormalization requires 3 inputs.");const c=f[0],o=f[1],d=f[2];if(c.dims.length<3||o.dims.length!==1||d.dims.length!==1)throw new Error("Invalid input shape.");if(o.dims[0]!==c.dims[1]||d.dims[0]!==c.dims[1])throw new Error("Input shapes are mismatched.");if(c.type!=="float32"&&c.type!=="float64"||o.type!=="float32"&&o.type!=="float64"||d.type!=="float32"&&d.type!=="float64")throw new Error("Invalid input type.");if(f[0].dims.length!==4)throw new Error("Only support 4-D input shape.")}},7006:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createLrnProgramInfoLoader=e.parseLrnAttributes=e.lrn=void 0;const r=t(4910),s=t(5639);e.lrn=(u,h,f)=>(l(h),[u.run(i(h,f),h)]),e.parseLrnAttributes=u=>{const h=u.attributes.getFloat("alpha",1e-4),f=u.attributes.getFloat("beta",.75),c=u.attributes.getFloat("bias",1),o=u.attributes.getInt("size");return(0,r.createAttributeWithCacheKey)({alpha:h,beta:f,bias:c,size:o})};const a={name:"LRN",inputNames:["X"],inputTypes:[s.TextureType.unpacked]};function i(u,h){return Object.assign(Object.assign({},a),{cacheHint:h.cacheKey,get:()=>function(f,c){const o=f[0].dims[1],d=f[0].dims.length,m=-Math.floor((c.size-1)/2),g=Math.ceil((c.size-1)/2),y=`float(${c.alpha}) / float(${c.size})`,$=`
    float process(int indices[${d}]) {
        int c = indices[1];
        float x = _X(indices);
        float square_sum = 0.0;

        for (int i = ${m}; i <= ${g}; i++) {
          int idx = c + i;
          if (c >= 0 && c < ${o}) {
            indices[1] = idx;
            float j = _X(indices);
            square_sum += j * j;
          }
        }
        return x / pow(float(${c.bias}) + ${y} * square_sum, float(${c.beta}));
    }`;return Object.assign(Object.assign({},a),{cacheHint:c.cacheKey,output:{dims:f[0].dims,type:f[0].type,textureType:s.TextureType.unpacked},shaderSource:$})}(u,h)})}e.createLrnProgramInfoLoader=i;const l=u=>{if(!u||u.length!==1)throw new Error("LRN requires 1 input.");if(u[0].dims.length!==4)throw new Error('currently only support LRN for input with "NCHW" format');if(u[0].type!=="float32")throw new Error("input should be float type")}},5632:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createPackedMatmulProgramInfoLoader=void 0;const r=t(7273),s=t(6757),a=t(5639),i=t(432),l=t(2150),u=t(8276);e.createPackedMatmulProgramInfoLoader=(h,f,c)=>{const o=(d=f.length>2,m=c.activationCacheKey,{name:"MatMul (packed)",inputNames:d?["A","B","Bias"]:["A","B"],inputTypes:d?[a.TextureType.packed,a.TextureType.packed,a.TextureType.packed]:[a.TextureType.packed,a.TextureType.packed],cacheHint:m});var d,m;return Object.assign(Object.assign({},o),{get:()=>((g,y,$,b)=>{const x=$.length>2,w=x?"value += getBiasForMatmul();":"",v=$[0].dims,S=$[1].dims,T=r.BroadcastUtil.calcShape(v,S,!0),C=!r.ShapeUtil.areEqual($[0].dims,$[1].dims);if(!T)throw new Error("Can't use matmul on the given tensors");const I=v[v.length-1],N=Math.ceil(I/2),P=v.length,F=S.length,_=(0,s.getGlsl)(g.session.backend.glContext.version),D=(0,i.getCoordsDataType)(T.length),E=T.length,k=(0,i.getGlChannels)(),{activationFunction:O,applyActivation:M}=(0,l.getActivationSnippet)(b),z=x?`${(0,u.getBiasForMatmul)(D,k,$[2].dims,T,!0)}`:"",G=C?`${function(Y,J,te,re){let ue=[],ie=[];const ce=te[0].dims,se=te[1].dims,xe=ce.length,me=se.length,$e=re.length,Se=$e-xe,ve=$e-me;ue=ce.map((Ne,Ve)=>`coords.${J[Ve+Se]}`),ue[xe-1]="i*2",ue.join(", "),ie=se.map((Ne,Ve)=>`coords.${J[Ve+ve]}`),ie[me-2]="i*2",ie.join(", ");const Ee=r.BroadcastUtil.getBroadcastDims(ce,re),Ae=r.BroadcastUtil.getBroadcastDims(se,re),Fe=Ee.map(Ne=>`coords.${J[Ne+Se]} = 0;`).join(`
`),ke=Ae.map(Ne=>`coords.${J[Ne+ve]} = 0;`).join(`
`),Be=`int lastDim = coords.${J[$e-1]};
  coords.${J[$e-1]} = coords.${J[$e-2]};
  coords.${J[$e-2]} = lastDim;`;return`
vec4 getAAtOutCoordsMatmul(int i) {
  ${Y} coords = getOutputCoords();
  ${Be}
  ${Fe}
  vec4 outputValue = getA(${ue});
  return outputValue;
}

vec4 getBAtOutCoordsMatmul(int i) {
  ${Y} coords = getOutputCoords();
  ${Be}
  ${ke}
  vec4 outputValue = getB(${ie});
  return outputValue;
}`}(D,k,$,T)}`:"",j=C?"getAAtOutCoordsMatmul(i)":`getA(${function(Y,J){let te="";for(let re=0;re<J-2;re++)te+=`rc.${Y[re]}, `;return te+=`rc.${Y[J-2]}, i*2`,te}(k,P)})`,K=C?"getBAtOutCoordsMatmul(i)":`getB(${function(Y,J){let te="";for(let re=0;re<J-2;re++)te+=`rc.${Y[re]}, `;return te+=`i*2, rc.${Y[J-1]}`,te}(k,F)})`,X=`
            ${G}
            ${z}
            ${O}
            void main() {
              ${C?"":`${D} rc =
          getOutputCoords(); int lastDim = rc.${k[E-1]}; rc.${k[E-1]} =
          rc.${k[E-2]}; rc.${k[E-2]} = lastDim;
      `}

              vec4 value = vec4(0);
              for (int i = 0; i < ${N}; i++) {
                vec4 a = ${j};
                vec4 b = ${K};

                value += (a.rrbb * b.rgrg);
                value += (a.ggaa * b.baba);
              }
              ${w}
              ${M}
              ${_.output} = value;
            }`;return Object.assign(Object.assign({},y),{output:{dims:T,type:$[0].type,textureType:a.TextureType.packed},shaderSource:X,hasMain:!0})})(h,o,f,c)})}},8276:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getBiasForMatmul=e.createMatmulProgramInfoLoader=e.parseMatMulAttributes=e.matMul=void 0;const r=t(7273),s=t(5639),a=t(432),i=t(2150),l=t(5632);e.matMul=(o,d,m)=>(f(d),o.session.pack?[o.run((0,l.createPackedMatmulProgramInfoLoader)(o,d,m),d)]:[o.run(h(d,m),d)]),e.parseMatMulAttributes=o=>(0,i.parseInternalActivationAttributes)(o.attributes);const u=(o,d)=>({name:"MatMul",inputNames:o?["A","B","Bias"]:["A","B"],inputTypes:o?[s.TextureType.unpacked,s.TextureType.unpacked,s.TextureType.unpacked]:[s.TextureType.unpacked,s.TextureType.unpacked],cacheHint:d});function h(o,d){const m=u(o.length>2,d.activationCacheKey);return Object.assign(Object.assign({},m),{get:()=>function(g,y,$){const b=y[0].dims,x=y[1].dims,w=r.BroadcastUtil.calcShape(b,x,!0);if(!w)throw new Error("Can't use matmul on the given tensors");const v=(0,a.getCoordsDataType)(w.length),S=(0,a.getGlChannels)(),{activationFunction:T,applyActivation:C}=(0,i.getActivationSnippet)($),I=y.length>2,N=I?"value += getBiasForMatmul();":"",P=I?`${c(v,S,y[2].dims,w,!1)}`:"",F=w.length,_=b.length,D=x.length,E=`
    ${T}
    ${P}
    float process(int indices[${F}]) {
        int a[${_}];
        int b[${D}];
        bcastMatmulIndices_A(indices, a);
        bcastMatmulIndices_B(indices, b);

        float value;
        for (int k=0; k<${b[b.length-1]}; ++k) {
            a[${_-1}] = k;
            b[${D-2}] = k;
            value += _A(a) * _B(b);
        }
        ${N}
        ${C}
        return value;
    }`;return Object.assign(Object.assign({},g),{output:{dims:w,type:y[0].type,textureType:s.TextureType.unpacked},shaderSource:E})}(m,o,d)})}e.createMatmulProgramInfoLoader=h;const f=o=>{if(!o||o.length!==2)throw new Error("MatMul requires 2 inputs.");if(o[0].dims[o[0].dims.length-1]!==o[1].dims[o[1].dims.length-2])throw new Error("shared dimension does not match.");if(o[0].type!=="float32"&&o[0].type!=="float64"||o[1].type!=="float32"&&o[1].type!=="float64")throw new Error("inputs should be float type");if(o[0].type!==o[1].type)throw new Error("inputs types should match")};function c(o,d,m,g,y){let $="";const b=m.length,x=g.length,w=x-b;$=x<2&&b>0?"coords":m.map((T,C)=>`coords.${d[C+w]}`).join(", ");const v=r.BroadcastUtil.getBroadcastDims(m,g).map(T=>`coords.${d[T+w]} = 0;`).join(`
`);let S="vec4(outputValue.xx, outputValue.yy)";return r.ShapeUtil.size(m)===1&&(S="vec4(outputValue.x)"),y?`
vec4 getBiasForMatmul() {
  ${o} coords = getOutputCoords();
  ${v}
  vec4 outputValue = getBias(${$});
  return ${S};
}`:`
float getBiasForMatmul() {
  ${o} coords = getOutputCoords();
  ${v}
  return getBias(coords.x);
}`}e.getBiasForMatmul=c},9:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createPackProgramInfoLoader=void 0;const r=t(6757),s=t(5639),a=t(432),i=t(5614),l={name:"pack",inputNames:["A"],inputTypes:[s.TextureType.unpackedReversed]};e.createPackProgramInfoLoader=(u,h)=>Object.assign(Object.assign({},l),{get:()=>((f,c)=>{const o=(0,r.getGlsl)(f.session.backend.glContext.version),d=c.dims,m=d.length,g=c.dims.length,y=(0,a.getCoordsDataType)(g),$=(0,i.getChannels)("rc",g),b=(x=g,w=$,v=d[d.length-2],S=d[d.length-1],x===0||x===1?"":`
    int r = ${w[x-2]};
    int c = ${w[x-1]};
    int rp1 = ${w[x-2]} + 1;
    int cp1 = ${w[x-1]} + 1;
    bool rEdge = rp1 >= ${S};
    bool cEdge = cp1 >= ${v};
    `);var x,w,v,S;let T;T=m===0?[1,1]:m===1?[d[0],1]:[d[g-1],d[g-2]];const C=function(P,F,_){if(P===0)return"false";if(P===1)return`rc > ${F[0]}`;let D="";for(let E=P-2;E<P;E++)D+=`${_[E]} >= ${F[E-P+2]}`,E<P-1&&(D+="||");return D}(g,T,$),I=function(P,F){const _=P.length;if(_===0)return"getA(), 0, 0, 0";if(_===1)return`getA(rc),
            rc + 1 >= ${P[0]} ? 0. : getA(rc + 1),
            0, 0`;let D="";if(_>2)for(let E=0;E<_-2;++E)D+=`${F[E]},`;return`getA(${D}r, c),
          rEdge ? 0. : getA(${D}rp1, c),
          cEdge ? 0. : getA(${D}r, cp1),
          rEdge || cEdge ? 0. : getA(${D}rp1, cp1)`}(d,$),N=`
        void main() {
          ${y} rc = getOutputCoords();

          if(${C}) {
            ${o.output} = vec4(0);
          } else {
            ${b}

            ${o.output} = vec4(${I});
          }
        }
      `;return Object.assign(Object.assign({},l),{hasMain:!0,output:{dims:c.dims,type:c.type,textureType:s.TextureType.packed},shaderSource:N})})(u,h)})},5614:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.unpackFromChannel=e.getChannels=e.getVecChannels=void 0;const r=t(432);function s(a,i){return(0,r.getGlChannels)(i).map(l=>`${a}.${l}`)}e.getVecChannels=s,e.getChannels=function(a,i){return i===1?[a]:s(a,i)},e.unpackFromChannel=function(){return`
    float getChannel(vec4 frag, int dim) {
      int modCoord = imod(dim, 2);
      return modCoord == 0 ? frag.r : frag.g;
    }

    float getChannel(vec4 frag, vec2 innerDims) {
      vec2 modCoord = mod(innerDims, 2.);
      return modCoord.x == 0. ?
        (modCoord.y == 0. ? frag.r : frag.g) :
        (modCoord.y == 0. ? frag.b : frag.a);
    }
  `}},5565:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parsePadAttributesV11=e.padV11=e.parsePadAttributesV2=e.padV2=void 0;const r=t(4910),s=t(7273),a=t(6757),i=t(5639),l={name:"Pad",inputNames:["A"],inputTypes:[i.TextureType.unpacked]};e.padV2=(y,$,b)=>(f($),[y.run(Object.assign(Object.assign({},l),{cacheHint:b.cacheKey,get:()=>h(y,$[0],b)}),$)]),e.parsePadAttributesV2=y=>{const $=y.attributes.getString("mode","constant"),b=y.attributes.getFloat("value",0),x=y.attributes.getInts("pads");return(0,r.createAttributeWithCacheKey)({mode:$,value:b,pads:x})},e.padV11=(y,$,b)=>{c($);const x=u(y,$,b);return(0,e.padV2)(y,[$[0]],x)},e.parsePadAttributesV11=y=>y.attributes.getString("mode","constant");const u=(y,$,b)=>{if(!y.session.isInitializer($[1].dataId)||$.length>=3&&!y.session.isInitializer($[2].dataId))throw new Error("dynamic pad attributes are not allowed");const x=Array.from($[1].integerData),w=$.length>=3?$[2].floatData[0]:0;return(0,r.createAttributeWithCacheKey)({mode:b,pads:x,value:w})},h=(y,$,b)=>{const x=s.ShapeUtil.padShape($.dims.slice(),b.pads),w=x.length,v=`
      ${o(y,$,b)}
      float process(int[${w}] indices) {
          return padA(indices);
      }`;return{name:"Pad",inputNames:["A"],inputTypes:[i.TextureType.unpacked],output:{dims:x,type:$.type,textureType:i.TextureType.unpacked},shaderSource:v}},f=y=>{if(!y||y.length!==1)throw new Error("Pad requires 1 input");if(y[0].type!=="float32"&&y[0].type!=="float64")throw new Error("Invalid input type.")},c=y=>{if(!y||y.length!==2&&y.length!==3)throw new Error("Pad requires 2 or 3 inputs");if(y[1].type!=="int32")throw new Error("Invalid input type.");if(y.length>=3&&y[2].type==="string")throw new Error("Invalid input type.")},o=(y,$,b)=>{const x=(0,a.getGlsl)(y.session.backend.glContext.version),[w,v]=y.calculateTextureWidthAndHeight($.dims,i.TextureType.unpacked),S=s.ShapeUtil.computeStrides($.dims);switch(b.mode){case"constant":return d(x,$.dims,S,w,v,b.pads,b.value);case"reflect":return m(x,$.dims,S,w,v,b.pads);case"edge":return g(x,$.dims,S,w,v,b.pads);default:throw new Error("Invalid mode")}},d=(y,$,b,x,w,v,S)=>{const T=$.length;let C="";for(let I=T-1;I>=0;--I)C+=`
        k = m[${I}] - ${v[I]};
        if (k < 0)  return constant;
        if (k >= ${$[I]}) return constant;
        offset += k * ${b[I]};
        `;return`
      float padA(int m[${T}]) {
        const float constant = float(${S});
        int offset = 0;
        int k = 0;
        ${C}
        vec2 coords = offsetToCoords(offset, ${x}, ${w});
        float value = getColorAsFloat(${y.texture2D}(A, coords));
        return value;
      }
      `},m=(y,$,b,x,w,v)=>{const S=$.length;let T="";for(let C=S-1;C>=0;--C)T+=`
        k = m[${C}] - ${v[C]};
        if (k < 0) { k = -k; }
        {
          const int _2n_1 = ${2*($[C]-1)};
          k = int( mod( float(k), float(_2n_1) ) ) ;
          if(k >= ${$[C]}) { k = _2n_1 - k; }
        }
        offset += k * ${b[C]};
        `;return`
      float padA(int m[${S}]) {
        int offset = 0;
        int k = 0;
        ${T}
        vec2 coords = offsetToCoords(offset, ${x}, ${w});
        float value = getColorAsFloat(${y.texture2D}(A, coords));
        return value;
      }
      `},g=(y,$,b,x,w,v)=>{const S=$.length;let T="";for(let C=S-1;C>=0;--C)T+=`
        k = m[${C}] - ${v[C]};
        if (k < 0)  k = 0;
        if (k >= ${$[C]}) k = ${$[C]-1};
        offset += k * ${b[C]};
      `;return`
      float padA(int m[${S}]) {
        int offset = 0;
        int k = 0;
        ${T}
        vec2 coords = offsetToCoords(offset, ${x}, ${w});
        float value = getColorAsFloat(${y.texture2D}(A, coords));
        return value;
      }
      `}},2834:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.globalMaxPool=e.parseMaxPoolAttributes=e.maxPool=e.parseGlobalAveragePoolAttributes=e.globalAveragePool=e.parseAveragePoolAttributes=e.averagePool=void 0;const r=t(4910),s=t(7273),a=t(5639);e.averagePool=(g,y,$)=>{c(y);const b={name:"AveragePool",inputNames:["X"],inputTypes:[a.TextureType.unpacked],cacheHint:$.cacheKey};return[g.run(Object.assign(Object.assign({},b),{get:()=>i(y,b,!1,$)}),y)]},e.parseAveragePoolAttributes=g=>{const y=g.attributes.getString("auto_pad","NOTSET"),$=g.attributes.getInt("ceil_mode",0),b=g.attributes.getInt("count_include_pad",0)!==0,x=g.attributes.getInts("kernel_shape"),w=g.attributes.getInts("strides",[]),v=g.attributes.getInts("pads",[]);if($!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return(0,r.createAttributeWithCacheKey)({autoPad:y,ceilMode:$,countIncludePad:b,kernelShape:x,strides:w,pads:v})};const i=(g,y,$,b)=>{const[x,w]=u(g,b,$),v=s.ShapeUtil.size(x.kernelShape);let S="";x.countIncludePad?S+=`value /= float(${v});`:S+=`value /= float(${v} - pad);`;const T=`
        ${o(g[0].dims,x,"value += _X(x);",S,"0.0")}
      `;return Object.assign(Object.assign({},y),{output:{dims:w,type:g[0].type,textureType:a.TextureType.unpacked},shaderSource:T})};e.globalAveragePool=(g,y,$)=>{c(y);const b={name:"GlobalAveragePool",inputNames:["X"],inputTypes:[a.TextureType.unpacked],cacheHint:`${$.countIncludePad}`};return[g.run(Object.assign(Object.assign({},b),{get:()=>i(y,b,!0,$)}),y)]},e.parseGlobalAveragePoolAttributes=g=>{const y=g.attributes.getInt("count_include_pad",0)!==0;return(0,r.createAttributeWithCacheKey)({autoPad:"",ceilMode:0,countIncludePad:y,kernelShape:[],strides:[],pads:[]})},e.maxPool=(g,y,$)=>{c(y);const b={name:"MaxPool",inputNames:["X"],inputTypes:[a.TextureType.unpacked],cacheHint:$.cacheKey};return[g.run(Object.assign(Object.assign({},b),{get:()=>l(y,b,!1,$)}),y)]},e.parseMaxPoolAttributes=g=>{const y=g.attributes.getString("auto_pad","NOTSET"),$=g.attributes.getInt("ceil_mode",0),b=g.attributes.getInts("kernel_shape"),x=g.attributes.getInts("strides",[]),w=g.attributes.getInts("pads",[]),v=g.attributes.getInt("storage_order",0),S=g.attributes.getInts("dilations",[]);if(v!==0)throw new Error("column major storage order is not yet supported for MaxPool");if($!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return(0,r.createAttributeWithCacheKey)({autoPad:y,ceilMode:$,countIncludePad:!1,kernelShape:b,strides:x,pads:w,storageOrder:v,dilations:S})};const l=(g,y,$,b)=>{const[x,w]=u(g,b,$),v=`
      ${o(g[0].dims,x,`
      value = max(_X(x), value);
    `,"","-1e5")}
    `;return Object.assign(Object.assign({},y),{output:{dims:w,type:g[0].type,textureType:a.TextureType.unpacked},shaderSource:v})},u=(g,y,$)=>{const b=g[0].dims.slice(),x=Object.hasOwnProperty.call(y,"dilations"),w=y.kernelShape.slice(),v=y.strides.slice(),S=x?y.dilations.slice():[],T=y.pads.slice();s.PoolConvUtil.adjustPoolAttributes($,b,w,v,S,T);const C=s.PoolConvUtil.computePoolOutputShape($,b,v,S,w,T,y.autoPad),I=Object.assign({},y);return x?Object.assign(I,{kernelShape:w,strides:v,pads:T,dilations:S,cacheKey:y.cacheKey}):Object.assign(I,{kernelShape:w,strides:v,pads:T,cacheKey:y.cacheKey}),[I,C]},h={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},f={name:"GlobalMaxPool",inputNames:["X"],inputTypes:[a.TextureType.unpacked]};e.globalMaxPool=(g,y)=>(c(y),[g.run(Object.assign(Object.assign({},f),{get:()=>l(y,f,!0,h)}),y)]);const c=g=>{if(!g||g.length!==1)throw new Error("Pool ops requires 1 input.");if(g[0].type!=="float32"&&g[0].type!=="float64")throw new Error("Invalid input type.")},o=(g,y,$,b,x)=>{const w=g.length;if(y.kernelShape.length<=2){const v=y.kernelShape[y.kernelShape.length-1],S=y.strides[y.strides.length-1],T=y.pads[y.pads.length/2-1],C=y.pads[y.pads.length-1],I=g[w-1];let N="",P="",F="";if(N=T+C!==0?`
          for (int i = 0; i < ${v}; i++) {
            x[${w} - 1] = indices[${w} - 1] * ${S} - ${T} + i;
            if (x[${w} - 1] < 0 || x[${w} - 1] >= ${I}) {
              pad++;
              continue;
            }
            ${$}
          }`:`
          for (int i = 0; i < ${v}; i++) {
            x[${w} - 1] = indices[${w} - 1] * ${S} - ${T} + i;
            ${$}
          }`,y.kernelShape.length===2){const _=y.kernelShape[y.kernelShape.length-2],D=y.strides[y.strides.length-2],E=y.pads[y.pads.length/2-2],k=y.pads[y.pads.length-2],O=g[w-2];P=E+k!==0?`
            for (int j = 0; j < ${_}; j++) {
              x[${w} - 2] = indices[${w} - 2] * ${D} - ${E} + j;
              if (x[${w} - 2] < 0 || x[${w} - 2] >= ${O}) {
                pad+= ${v};
                continue;
              }
          `:`
            for (int j = 0; j < ${_}; j++) {
              x[${w} - 2] = indices[${w} - 2] * ${D} - ${E} + j;
            `,F=`
          }
        `}return`
        float process(int indices[${w}]) {
          int x[${w}];
          copyVec(indices, x);

          float value = ${x};
          int pad = 0;
          ${P}
          ${N}
          ${F}
          ${b}
          return value;
        }
      `}{const v=s.ShapeUtil.size(y.kernelShape),S=s.ShapeUtil.computeStrides(y.kernelShape),T=S.length,C=y.pads.length,I=m(T),N=d(g,"inputDims"),P=d(y.pads,"pads"),F=d(S,"kernelStrides"),_=d(y.strides,"strides");let D="";return D=y.pads.reduce((E,k)=>E+k)?`
            if (x[j] >= inputDims[j] || x[j] < 0) {
              pad++;
              isPad = true;
              break;
            }
          }
          if (!isPad) {
            ${$}
          }`:`
          }
          ${$}
        `,`
        ${I}
        float process(int indices[${w}]) {
          int x[${w}];
          copyVec(indices, x);
          int offset[${T}];
          int pads[${C}];
          int inputDims[${w}];
          int kernelStrides[${T}];
          int strides[${T}];
          ${P}
          ${N}
          ${_}
          ${F}

          float value = ${x};
          int pad = 0;
          bool isPad = false;
          for (int i = 0; i < ${v}; i++) {
            offsetToIndices(i, kernelStrides, offset);
            isPad = false;
            for (int j = ${w} - ${T}; j < ${w}; j++) {
              x[j] = indices[j] * strides[j - ${w} + ${T}]
                + offset[j - ${w} + ${T}] - pads[j - 2];
              ${D}
          }
          ${b}

          return value;
        }
      `}},d=(g,y)=>{let $="";for(let b=0;b<g.length;b++)$+=`
      ${y}[${b}] = ${g[b]};
    `;return $},m=g=>`
  void offsetToIndices(int offset, int[${g}] strides, out int[${g}] indices) {
    if (${g} == 0) {
      return;
    }
    for (int i = 0; i < ${g} - 1; ++i) {
      indices[i] = offset / strides[i];
      offset -= indices[i] * strides[i];
    }
    indices[${g} - 1] = offset;
  }`},1010:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.reduceLogSumSquare=e.reduceLogSum=e.reduceProd=e.reduceMin=e.reduceMax=e.reduceMean=e.reduceSum=e.parseReduceAttributes=void 0;const r=t(4910),s=t(6145),a=t(7273),i=t(5639),l=(f,c,o,d,m)=>{h(c);const g={name:d,inputNames:["A"],inputTypes:[i.TextureType.unpacked]};return[f.run(Object.assign(Object.assign({},g),{cacheHint:o.cacheKey,get:()=>u(f,c,o,d,m,g)}),c)]};e.parseReduceAttributes=f=>{const c=f.attributes.getInts("axes",[]),o=f.attributes.getInt("keepdims",1)===1;return(0,r.createAttributeWithCacheKey)({axes:c,keepDims:o})};const u=(f,c,o,d,m,g)=>{const y=[],$=c[0].dims.length||1,b=[],x=a.ShapeUtil.normalizeAxes(o.axes,c[0].dims.length),w=m(c,x);let v=w[1];for(let T=0;T<c[0].dims.length;T++)x.indexOf(T)>=0||x.length===0?(o.keepDims&&y.push(1),v=`
          for(int j${T} = 0; j${T} < ${c[0].dims[T]}; j${T}++) {
            inputIdx[${T}] = j${T};
            ${v}
          }`):(b.push(`inputIdx[${T}] = outputIdx[${y.length}];`),y.push(c[0].dims[T]));const S=`
      float process(int outputIdx[${y.length||1}]) {
        float value;                 // final result
        int inputIdx[${$}];      // addressing input data
        ${b.join(`
`)}
        ${w[0]}       // init ops for reduce max/min
        ${v}
        ${w[2]}       // final computation for reduce mean
        return value;
      }`;return Object.assign(Object.assign({},g),{output:{dims:y,type:c[0].type,textureType:i.TextureType.unpacked},shaderSource:S})},h=f=>{if(!f||f.length!==1)throw new Error("Reduce op requires 1 input.");if(s.NUMBER_TYPES.indexOf(f[0].type)===-1)throw new Error("Invalid input type.")};e.reduceSum=(f,c,o)=>l(f,c,o,"ReduceSum",()=>["value = 0.0;","value += _A(inputIdx);",""]),e.reduceMean=(f,c,o)=>l(f,c,o,"ReduceMean",(d,m)=>{let g=1;for(let y=0;y<d[0].dims.length;y++)(m.indexOf(y)>=0||m.length===0)&&(g*=d[0].dims[y]);return["value = 0.0;","value += _A(inputIdx);",`value /= ${g}.;`]}),e.reduceMax=(f,c,o)=>l(f,c,o,"ReduceMax",(d,m)=>{const g=[];for(let y=0;y<d[0].dims.length;y++)(m.indexOf(y)>=0||m.length===0)&&g.push(`inputIdx[${y}] = 0;`);return[`${g.join(`
`)}
value = _A(inputIdx);`,"value = max(value, _A(inputIdx));",""]}),e.reduceMin=(f,c,o)=>l(f,c,o,"ReduceMin",(d,m)=>{const g=[];for(let y=0;y<d[0].dims.length;y++)(m.indexOf(y)>=0||m.length===0)&&g.push(`inputIdx[${y}] = 0;`);return[`${g.join(`
`)}
value = _A(inputIdx);`,"value = min(value, _A(inputIdx));",""]}),e.reduceProd=(f,c,o)=>l(f,c,o,"ReduceProd",()=>["value = 1.0;","value *= _A(inputIdx);",""]),e.reduceLogSum=(f,c,o)=>l(f,c,o,"ReduceLogSum",()=>["value = 0.0;","value += _A(inputIdx);","value = log(value);"]),e.reduceLogSumSquare=(f,c,o)=>l(f,c,o,"ReduceLogSumSquare",()=>["float t; value = 0.0;","t = _A(inputIdx); value += t * t;",""])},7379:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.isReshapeCheap=e.processDims3D=e.createPackedReshape3DProgramInfoLoader=void 0;const r=t(7273),s=t(6757),a=t(5639),i=t(5614);e.createPackedReshape3DProgramInfoLoader=(l,u,h)=>{const f=(c=>({name:"Reshape (packed)",inputTypes:[a.TextureType.packed],inputNames:["A"],cacheHint:`${c}`}))(h);return Object.assign(Object.assign({},f),{get:()=>((c,o,d,m)=>{const g=o.dims,y=m;let $="";for(let w=0;w<4;w++){let v="";switch(w){case 0:v="outputCoords = rc;";break;case 1:v="outputCoords = ivec3(rc.x, rc.y+1, rc.z);";break;case 2:v="outputCoords = ivec3(rc.x, rc.y, rc.z+1);";break;case 3:v="outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);";break;default:throw new Error}$+=`
        ${v}
        ${w>0?"if(outputCoords.y < rows && outputCoords.z < cols){":""}
          int flattenedIndex = getFlattenedIndex(outputCoords);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);
          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${w}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);

        ${w>0?"}":""}
      `}const b=(0,s.getGlsl)(c.session.backend.glContext.version),x=`
      ${function(w){const v=r.ShapeUtil.computeStrides(w),S=["b","r","c"],T="index";return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${v.map((C,I)=>`int ${S[I]} = ${T} / ${C}; ${I===v.length-1?`int ${S[I+1]} = ${T} - ${S[I]} * ${C}`:`index -= ${S[I]} * ${C}`};`).join("")}
      return ivec3(b, r, c);
    }
  `}(g)}
      ${function(w){const v=r.ShapeUtil.computeStrides(w);return`
  int getFlattenedIndex(ivec3 coords) {
    // reverse y, z order
    return coords.x * ${v[0]} + coords.z * ${v[1]} + coords.y;
  }
`}(y)}
      ${(0,i.unpackFromChannel)()}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.0);

        ivec3 outputCoords;
        int rows = ${y[2]};
        int cols = ${y[1]};

        ${$}
        ${b.output} = result;
      }
    `;return Object.assign(Object.assign({},d),{output:{dims:y,type:o.type,textureType:a.TextureType.packed},shaderSource:x,hasMain:!0})})(l,u,f,h)})},e.processDims3D=function(l){if(l.length===0)return[1,1,1];let u=1;for(let h=0;h<l.length-2;++h)u*=l[h];return[u,l.length>1?l[l.length-2]:1,l[l.length-1]]},e.isReshapeCheap=function(l,u){let h=!1;return h=l.length===0||u.length===0||(l.length<2||u.length<2?l[l.length-1]===u[u.length-1]:l[l.length-1]===u[u.length-1]&&l[l.length-2]===u[u.length-2]),h}},8126:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.reshape=void 0;const r=t(7273);e.reshape=(s,a)=>{const i=r.ShapeUtil.calculateReshapedDims(a[0].dims,a[1].integerData);return s.session.pack?[s.reshapePacked(a[0],i)]:[s.reshapeUnpacked(a[0],i)]}},2801:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseResizeAttributesV11=e.parseResizeAttributesV10=e.resize=void 0;const r=t(6757),s=t(5639),a=t(432),i=t(5614),l=t(3980),u={name:"Resize",inputNames:["A"],inputTypes:[s.TextureType.packed]};e.resize=(d,m,g)=>((0,l.validateInputs)(m,g),[d.run(Object.assign(Object.assign({},u),{cacheHint:g.cacheKey,get:()=>h(d,m,g)}),m)]),e.parseResizeAttributesV10=d=>(0,l.parseUpsampleAttributes)(d,10),e.parseResizeAttributesV11=d=>(0,l.parseUpsampleAttributes)(d,11);const h=(d,m,g)=>{const y=(0,r.getGlsl)(d.session.backend.glContext.version),[$,b]=f(m,g);if($.every(D=>D===1)&&g.coordinateTransformMode!=="tf_crop_and_resize")return Object.assign(Object.assign({},u),{output:{dims:b,type:m[0].type,textureType:s.TextureType.packed},hasMain:!0,shaderSource:`void main() {
                    vec4 v = ${y.texture2D}(X, TexCoords);
                    ${y.output} = v;
                }`});const x=b.length;if(x<2)throw new Error(`output dimension should be at least 2, but got ${x}`);const w=b[x-2],v=b[x-1],S=m[0].dims;if(x!==S.length)throw new Error(`output dimension should match input ${S.length}, but got ${x}`);const T=S[x-2],C=S[x-1],I=$[x-2],N=$[x-1];let P="";if(g.mode!=="linear")throw new Error(`resize (packed) does not support mode: '${g.mode}'`);switch(g.coordinateTransformMode){case"asymmetric":P=`
                    vec4 getSourceFracIndex(ivec4 coords) {
                        return vec4(coords) / scaleWHWH;
                    }
                `;break;case"half_pixel":P=`
                    vec4 getSourceFracIndex(ivec4 coords) {
                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;
                    }
                `;break;case"pytorch_half_pixel":P=`
                    vec4 getSourceFracIndex(ivec4 coords) {
                        vec4 fcoords = vec4(coords);
                        return vec4(
                            ${v}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,
                            ${w}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,
                            ${v}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,
                            ${w}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0
                          );
                    }
                `;break;case"align_corners":P=`
                    vec4 getSourceFracIndex(ivec4 coords) {
                        vec4 resized = vec4(${v}.0 - 1.0, ${w}.0 - 1.0, ${v}.0 - 1.0,
                            ${w}.0 - 1.0);
                        vec4 original = vec4(${C}.0 - 1.0, ${T}.0 - 1.0, ${C}.0 - 1.0,
                            ${T}.0 - 1.0);
                        vec4 new_scale = original / resized;
                        return vec4(coords) * new_scale;
                    }
                `;break;default:throw new Error(`resize (packed) does not support coordinateTransformMode:                                 '${g.coordinateTransformMode}'`)}const F=(0,a.getCoordsDataType)(x),_=`
            const vec2 inputWH = vec2(${T}.0, ${C}.0);
            const vec4 scaleWHWH = vec4(float(${I}), float(${N}), float(${I}), float(${N}));
            ${(0,i.unpackFromChannel)()}
            ${P}
            float getAValue(int x10, int r, int c, int d) {
                return getChannel(getA(x10, r, c, d), vec2(c, d));
            }
            void main() {
                ${F} rc = getOutputCoords();

                int batch = rc[0];
                int depth = rc[1];

                // retrieve the 4 coordinates that is used in the 4 packed output values.
                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);

                // calculate the source index in fraction
                vec4 sourceFrac = getSourceFracIndex(coords);

                // get the lower and upper bound of the 4 values that will be packed into one texel.
                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));
                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));
                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));
                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));

                bool hasNextRow = rc.w < ${w-1};
                bool hasNextCol = rc.z < ${v-1};

                // pack x00, x01, x10, x11's top-left corner into one vec4 structure
                vec4 topLeft = vec4(
                    getAValue(batch, depth, x00.x, x00.y),
                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);

                // pack x00, x01, x10, x11's top-right corner into one vec4 structure
                vec4 topRight = vec4(
                    getAValue(batch, depth, x00.x, x00.w),
                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);

                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure
                vec4 bottomLeft = vec4(
                    getAValue(batch, depth, x00.z, x00.y),
                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);

                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure
                vec4 bottomRight = vec4(
                    getAValue(batch, depth, x00.z, x00.w),
                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);

                // calculate the interpolation fraction on u and v direction
                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);
                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));

                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);
                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);
                vec4 newValue = mix(top, bottom, clampFrac.xxzz);

                ${y.output} = vec4(newValue);
            }
        `;return Object.assign(Object.assign({},u),{output:{dims:b,type:m[0].type,textureType:s.TextureType.packed},hasMain:!0,shaderSource:_})},f=(d,m)=>{const g=d[0].dims;let y,$=m.scales;if($.length===0){const x=d[m.scalesInputIdx];if(x&&x.size!==0){if(d[m.sizesInputIdx])throw new Error("Only one of scales or sizes must be provided as input.");$=c(x,m.mode,m.isResize)}else{const w=d[m.sizesInputIdx];if(!w||w.size===0)throw new Error("Either scales or sizes MUST be provided as input.");y=Array.from(w.integerData),$=o(y,g,m.mode,m.isResize)}}else if(d[m.sizesInputIdx])throw new Error("Only one of scales or sizes must be provided as input.");const b=y||g.map((x,w)=>Math.floor(x*$[w]));return[$,b]},c=(d,m,g)=>{const y=Array.from(d.floatData);return(0,l.scalesValidation)(y,m,g),y},o=(d,m,g,y)=>{const $=m.length,b=new Array($);for(let x=0,w=$;x<w;x++)if(m[x]===0){if(d[x]!==0)throw new Error("Input dim is zero but required output dim is non-zero.");b[x]=1}else b[x]=d[x]/m[x];return(0,l.scalesValidation)(b,g,y),b}},565:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.shape=void 0;const r=t(9240);e.shape=(a,i)=>(s(i),[new r.Tensor([i[0].dims.length],"int32",void 0,void 0,new Int32Array(i[0].dims))]);const s=a=>{if(!a||a.length!==1)throw new Error("Shape requires 1 input.")}},2444:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.sliceV10=e.parseSliceAttributes=e.slice=void 0;const r=t(4910),s=t(6145),a=t(7273),i=t(5639),l={name:"Slice",inputNames:["A"],inputTypes:[i.TextureType.unpacked]};e.slice=(o,d,m)=>(h(d),[o.run(Object.assign(Object.assign({},l),{cacheHint:m.cacheKey,get:()=>u(o,d[0],m)}),d)]),e.parseSliceAttributes=o=>{const d=o.attributes.getInts("starts"),m=o.attributes.getInts("ends"),g=o.attributes.getInts("axes",[]);return(0,r.createAttributeWithCacheKey)({starts:d,ends:m,axes:g})};const u=(o,d,m)=>{const g=m.axes.length===0?d.dims.slice(0).map((S,T)=>T):m.axes,y=a.ShapeUtil.normalizeAxes(g,d.dims.length),$=m.starts.map((S,T)=>S>d.dims[y[T]]-1?d.dims[y[T]]:a.ShapeUtil.normalizeAxis(S,d.dims[y[T]])),b=m.ends.map((S,T)=>S>d.dims[y[T]]-1?d.dims[y[T]]:a.ShapeUtil.normalizeAxis(S,d.dims[y[T]])),x=d.dims.slice(),w=[];for(let S=0;S<y.length;S++)x[y[S]]=b[S]-$[S],$[S]>0&&w.push(`outputIdx[${y[S]}] += ${$[S]};`);const v=`
      float process(int outputIdx[${x.length}]) {
        ${w.join(`
      `)}
        return _A(outputIdx);
      }`;return Object.assign(Object.assign({},l),{output:{dims:x,type:d.type,textureType:i.TextureType.unpacked},shaderSource:v})},h=o=>{if(!o||o.length!==1)throw new Error("Slice requires 1 input.");if(s.NUMBER_TYPES.indexOf(o[0].type)===-1)throw new Error("Invalid input type.")};e.sliceV10=(o,d)=>{c(d);const m=f(o,d);return[o.run(Object.assign(Object.assign({},l),{cacheHint:m.cacheKey,get:()=>u(o,d[0],m)}),[d[0]])]};const f=(o,d)=>{if(!o.session.isInitializer(d[1].dataId)||!o.session.isInitializer(d[2].dataId)||d.length>=4&&!o.session.isInitializer(d[3].dataId)||d.length>=5&&!o.session.isInitializer(d[4].dataId))throw new Error("dynamic slice attributes are not allowed");if(d.length>=5&&d[4].integerData.some($=>$!==1))throw new Error("currently non-1 steps is not supported for Slice");const m=Array.from(d[1].integerData),g=Array.from(d[2].integerData),y=d.length>=4?Array.from(d[3].integerData):[];return{starts:m,ends:g,axes:y,cacheKey:`${y};${m};${g}`}},c=o=>{if(!o||o.length<3||o.length>5)throw new Error("Invalid input number.");if(o[1].type!=="int32"||o[1].dims.length!==1)throw new Error("Invalid input type.");if(o[2].type!=="int32"||o[2].dims.length!==1)throw new Error("Invalid input type.");if(o.length>=4&&(o[3].type!=="int32"||o[3].dims.length!==1))throw new Error("Invalid input type.");if(o.length>=5&&(o[4].type!=="int32"||o[4].dims.length!==1))throw new Error("Invalid input type.")}},815:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.softmaxV13=e.parseSoftmaxAttributesV13=e.parseSoftmaxAttributes=e.softmax=void 0;const r=t(4910),s=t(7273),a=t(6757),i=t(5639),l=t(5707),u={name:"SoftmaxComputeMax",inputNames:["A"],inputTypes:[i.TextureType.unpacked]},h={name:"SoftmaxComputeScale",inputNames:["A","Max"],inputTypes:[i.TextureType.unpacked,i.TextureType.unpacked]},f={name:"SoftMax",inputNames:["A","Max","Norm"],inputTypes:[i.TextureType.unpacked,i.TextureType.unpacked,i.TextureType.unpacked]};e.softmax=(y,$,b)=>{g($);const x=$[0].dims.slice(),w=s.ShapeUtil.normalizeAxis(b.axis,x.length),v=s.ShapeUtil.sizeToDimension(x,w),S=s.ShapeUtil.sizeFromDimension(x,w);return c(y,$,b,v,S)},e.parseSoftmaxAttributes=y=>(0,r.createAttributeWithCacheKey)({axis:y.attributes.getInt("axis",1)}),e.parseSoftmaxAttributesV13=y=>(0,r.createAttributeWithCacheKey)({axis:y.attributes.getInt("axis",-1)}),e.softmaxV13=(y,$,b)=>{g($);const x=$[0].dims.slice(),w=s.ShapeUtil.normalizeAxis(b.axis,x.length),v=x.length,S=w!==v-1,T=[];let C,I=[],N=[];S&&(I=Array.from({length:v}).map((D,E)=>E),I[w]=v-1,I[v-1]=w,I.map(D=>T.push(x[D])),C=(0,r.createAttributeWithCacheKey)({perm:I}),N=(0,l.transpose)(y,$,C));const P=S?s.ShapeUtil.sizeToDimension(T,v-1):s.ShapeUtil.sizeToDimension(x,v-1),F=S?s.ShapeUtil.sizeFromDimension(T,v-1):s.ShapeUtil.sizeFromDimension(x,v-1),_=c(y,S?N:$,b,P,F);return S?(0,l.transpose)(y,_,C):_};const c=(y,$,b,x,w)=>{const v=o(y,$[0],x,w,[x]),S=y.run(Object.assign(Object.assign({},u),{cacheHint:b.cacheKey,get:()=>v}),$),T=d(y,$[0],x,w,v.output.dims,[x]),C=y.run(Object.assign(Object.assign({},h),{cacheHint:b.cacheKey,get:()=>T}),[$[0],S]),I=m(y,$[0],x,w,v.output.dims,T.output.dims);return[y.run(Object.assign(Object.assign({},f),{cacheHint:b.cacheKey,get:()=>I}),[$[0],S,C])]},o=(y,$,b,x,w)=>{const[v,S]=y.calculateTextureWidthAndHeight($.dims,i.TextureType.unpacked),T=w.length;if(b<1||x<1)throw new Error("Logical row count N and feature count D must be greater than or equal to 1");if(w.length!==1)throw new Error("Dimensionality of the output should be 1");if(w[0]!==b)throw new Error("Shape of the output should be equal to logical row count");const C=(0,a.getGlsl)(y.session.backend.glContext.version),I=`
      float process(int[${T}] indices) {
        int logical_row_start_offset = indices[0] * ${x};

        float max = getColorAsFloat(${C.texture2D}(A, offsetToCoords(logical_row_start_offset, ${v},
        ${S} )));
        for(int i=1; i<${x}; ++i)
        {
          float current = getColorAsFloat(${C.texture2D}(A, offsetToCoords(logical_row_start_offset + i,
            ${v}, ${S})));
          if(current > max)
          max = current;
        }

        return max;
      }`;return Object.assign(Object.assign({},u),{output:{dims:w,type:$.type,textureType:i.TextureType.unpacked},shaderSource:I})},d=(y,$,b,x,w,v)=>{const[S,T]=y.calculateTextureWidthAndHeight($.dims,i.TextureType.unpacked),C=v.length;if(b<1||x<1)throw new Error("Logical row count N and feature count D must be greater than or equal to 1");if(v.length!==1)throw new Error("Dimensionality of the output should be 1");if(v[0]!==b)throw new Error("Shape of the output should be equal to logical row count");if(w.length!==1)throw new Error("Dimensionality of the intermediate results should be 1");if(w[0]!==b)throw new Error("Shape of the intermediate results should be equal to logical row count");const I=`
      float process(int[${C}] indices) {
        int logical_row_start_offset = indices[0] * ${x};

        float norm_factor = 0.0;
        float max = _Max(indices);
        for(int i=0; i<${x}; ++i)
        {
          norm_factor += exp(getColorAsFloat(${(0,a.getGlsl)(y.session.backend.glContext.version).texture2D}(A, offsetToCoords(logical_row_start_offset + i,
            ${S}, ${T}))) - max);
        }

        return norm_factor;
      }`;return Object.assign(Object.assign({},h),{output:{dims:v,type:$.type,textureType:i.TextureType.unpacked},shaderSource:I})},m=(y,$,b,x,w,v)=>{const[S,T]=y.calculateTextureWidthAndHeight($.dims,i.TextureType.unpacked),C=$.dims.length;if(b<1||x<1)throw new Error("Logical row count N and feature count D must be greater than or equal to 1");if(w.length!==1||v.length!==1)throw new Error("Dimensionality of the intermediate results should be 1");if(w[0]!==b||v[0]!==b)throw new Error("Shape of the intermediate results should be equal to logical row count");const I=`
      float process(int[${C}] indices) {

      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)
      int offset = coordsToOffset(TexCoords, ${S}, ${T});

      //determine the logical row for this index
      int logical_row_index[1];
      logical_row_index[0] = offset / ${x};

      float norm_factor = _Norm(logical_row_index);

      // avoid possible division by 0
      // if norm_facor is 0, all elements are zero
      // if so, return 0
      if(norm_factor == 0.0)
        return 0.0;

      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;
    }`;return Object.assign(Object.assign({},f),{output:{dims:$.dims,type:$.type,textureType:i.TextureType.unpacked},shaderSource:I})},g=y=>{if(!y||y.length!==1)throw new Error("Softmax requires 1 input.");if(y[0].type!=="float32"&&y[0].type!=="float64")throw new Error("Invalid input type")}},564:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseSplitAttributes=e.split=void 0;const r=t(4910),s=t(7273),a=t(5639),i={name:"Split",inputNames:["A"],inputTypes:[a.TextureType.unpacked]};e.split=(f,c,o)=>{h(c);const d=s.ShapeUtil.normalizeAxis(o.axis,c[0].dims.length),m=l(f,c,d,o),g=[];for(let y=0;y<m;++y)g.push(f.run(Object.assign(Object.assign({},i),{cacheHint:`${o.cacheKey};${y}`,get:()=>u(f,c[0],o,d,y)}),c));return g},e.parseSplitAttributes=f=>{const c=f.attributes.getInt("axis",0),o=f.attributes.getInts("split",[]),d=f.outputs.length;return(0,r.createAttributeWithCacheKey)({axis:c,split:o,numOutputs:d})};const l=(f,c,o,d)=>{const[,m]=s.SplitUtil.splitShape(c[0].dims,o,d.split,d.numOutputs);return m.length},u=(f,c,o,d,m)=>{const[g,y]=s.SplitUtil.splitShape(c.dims,d,o.split,o.numOutputs),$=y[m],b=g[m],x=`
      float process(int indices[${b.length}]) {
        indices[${d}] += ${$};
        return _A(indices);
      }
    `;return Object.assign(Object.assign({},i),{cacheHint:`${o.cacheKey}:${m}`,output:{dims:b,type:c.type,textureType:a.TextureType.unpacked},shaderSource:x})},h=f=>{if(!f||f.length!==1)throw new Error("Split requires one input.");if(f[0].type!=="int8"&&f[0].type!=="uint8"&&f[0].type!=="int16"&&f[0].type!=="uint16"&&f[0].type!=="int32"&&f[0].type!=="uint32"&&f[0].type!=="float32"&&f[0].type!=="float64"&&f[0].type!=="bool")throw new Error("Invalid input type.")}},5416:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseSqueezeAttributes=e.squeezeV13=e.squeeze=void 0;const r=t(7273);e.squeeze=(i,l,u)=>{s(l);const h=r.ShapeUtil.squeezeShape(l[0].dims,u);return[i.reshapeUnpacked(l[0],h)]},e.squeezeV13=(i,l)=>(a(l),(0,e.squeeze)(i,[l[0]],Array.from(l[1].integerData))),e.parseSqueezeAttributes=i=>i.attributes.getInts("axes");const s=i=>{if(!i||i.length!==1)throw new Error("Squeeze requires 1 input.");if(i[0].type==="string")throw new Error("invalid input tensor types.")},a=i=>{if(!i||i.length!==2)throw new Error("Squeeze requires 2 inputs.");if(i[1].type!=="int32")throw new Error("Invalid input type.")}},1240:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.sum=void 0;const r=t(6757),s=t(5639);e.sum=(l,u)=>{i(u);const h={name:"Sum",inputNames:u.map((f,c)=>`X${c}`),inputTypes:new Array(u.length).fill(s.TextureType.unpacked)};return[l.run(Object.assign(Object.assign({},h),{get:()=>a(l,u,h)}),u)]};const a=(l,u,h)=>{const f=(0,r.getGlsl)(l.session.backend.glContext.version),c=u[0].dims.slice(),o=`
      void main() {
        vec4 result = ${u.map((d,m)=>`${f.texture2D}(X${m},TexCoords)`).join(" + ")};
        ${f.output} = result;
      }
    `;return Object.assign(Object.assign({},h),{output:{dims:c,type:u[0].type,textureType:s.TextureType.unpacked},hasMain:!0,shaderSource:o})},i=l=>{if(!l||l.length===0)throw new Error("Sum requires inputs.");const u=l[0].dims.length;for(let h=1;h<l.length;h++){if(u!==l[h].dims.length)throw new Error("Input shapes are mismatched.");for(let f=0;f<u;f++)if(l[0].dims[f]!==l[h].dims[f])throw new Error("Input shapes are not matched.")}if(l[0].type!=="float32"&&l[0].type!=="float64")throw new Error("Invalid input type.");for(let h=1;h<l.length;h++)if(l[0].type!==l[h].type)throw new Error("Input types are not matched.")}},5944:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.tile=void 0;const r=t(6145),s=t(5639);e.tile=(l,u)=>{i(u);const h={name:"Tile",inputNames:["A"],inputTypes:[s.TextureType.unpacked]};return[l.run(Object.assign(Object.assign({},h),{get:()=>a(l,u,h)}),u)]};const a=(l,u,h)=>{const f=u[0].dims.slice(),c=new Array(f.length),o=[];for(let g=0;g<f.length;g++)c[g]=f[g]*u[1].numberData[g],o.push(`inputIdx[${g}] = int(mod(float(outputIdx[${g}]), ${f[g]}.));`);const d=c.length,m=`
      float process(int outputIdx[${d}]) {
        int inputIdx[${d}];
        ${o.join(`
`)}
        return _A(inputIdx);
      }
    `;return Object.assign(Object.assign({},h),{output:{dims:c,type:u[0].type,textureType:s.TextureType.unpacked},shaderSource:m})},i=l=>{if(!l||l.length!==2)throw new Error("Tile requires 2 input.");if(l[1].dims.length!==1)throw new Error("The second input shape must 1 dimension.");if(l[1].dims[0]!==l[0].dims.length)throw new Error("Invalid input shape.");if(r.NUMBER_TYPES.indexOf(l[0].type)===-1)throw new Error("Invalid input type.");if(l[1].type!=="int32"&&l[1].type!=="int16")throw new Error("Invalid repeat type.")}},5707:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseTransposeAttributes=e.transpose=void 0;const r=t(4910),s=t(7273),a=t(5639),i={name:"Transpose",inputNames:["A"],inputTypes:[a.TextureType.unpacked]};e.transpose=(o,d,m)=>(c(d),[o.run(Object.assign(Object.assign({},i),{cacheHint:m.cacheKey,get:()=>l(o,d[0],m.perm)}),d)]),e.parseTransposeAttributes=o=>(0,r.createAttributeWithCacheKey)({perm:o.attributes.getInts("perm",[])});const l=(o,d,m)=>{const g=d.dims;m=u(g,m);const y=h(g,m),$=g.length,b=`
      ${f("perm",m,$)}
      float process(int indices[${$}]) {
        int a[${$}];
        perm(a, indices);
        return _A(a);
      }`;return Object.assign(Object.assign({},i),{output:{dims:y,type:d.type,textureType:a.TextureType.unpacked},shaderSource:b})},u=(o,d)=>(d&&d.length!==o.length&&(d=[...o.keys()].reverse()),d),h=(o,d)=>(d=u(o,d),s.ShapeUtil.sortBasedOnPerm(o,d)),f=(o,d,m)=>{const g=[];g.push(`void ${o}(out int a[${m}], int src[${m}]) {`);for(let y=0;y<m;++y)g.push(`	a[${d[y]}]=src[${y}];`);return g.push("	}"),g.join(`
`)},c=o=>{if(!o||o.length!==1)throw new Error("Transpose requires 1 input.");if(o[0].type!=="float32"&&o[0].type!=="float64")throw new Error("input should be float tensor")}},2488:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.encodeAsUint8=void 0;const r=t(6757),s=t(5639);e.encodeAsUint8=(a,i)=>{const l=i.shape,u=(0,r.getGlsl)(a.session.backend.glContext.version),h=`
    const float FLOAT_MAX = 1.70141184e38;
    const float FLOAT_MIN = 1.17549435e-38;

    bool isNaN(float val) {
      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;
    }

    highp vec4 encodeAsUint8(highp float v) {
      if (isNaN(v)) {
        return vec4(255, 255, 255, 255);
      }

      highp float av = abs(v);

      if(av < FLOAT_MIN) {
        return vec4(0.0, 0.0, 0.0, 0.0);
      } else if(v > FLOAT_MAX) {
        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
      } else if(v < -FLOAT_MAX) {
        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
      }

      highp vec4 c = vec4(0,0,0,0);

      highp float e = floor(log2(av));
      highp float m = exp2(fract(log2(av))) - 1.0;

      c[2] = floor(128.0 * m);
      m -= c[2] / 128.0;
      c[1] = floor(32768.0 * m);
      m -= c[1] / 32768.0;
      c[0] = floor(8388608.0 * m);

      highp float ebias = e + 127.0;
      c[3] = floor(ebias / 2.0);
      ebias -= c[3] * 2.0;
      c[2] += floor(ebias) * 128.0;

      c[3] += 128.0 * step(0.0, -v);

      return c / 255.0;
    }

    void main() {
      float value = ${u.texture2D}(X,TexCoords).r;
      ${u.output} = encodeAsUint8(value);
    }`,f={name:"Uint8Encode",inputTypes:[s.TextureType.unpacked],inputNames:["X"],output:{dims:l,type:i.tensor.type,textureType:s.TextureType.downloadUint8AsFloat},shaderSource:h,hasMain:!0};return a.executeProgram(f,[i.tensor])}},9087:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.tanh=e.tan=e.sqrt=e.sin=e.sigmoid=e.relu=e.not=e.neg=e.log=e.parseLeakyReluAttributes=e.leakyRelu=e.identity=e.floor=e.exp=e.parseEluAttributes=e.elu=e.cos=e.ceil=e.clipV11=e.parseClipAttributes=e.clip=e.atan=e.asin=e.acos=e.abs=e.glslTanh=e.glslTan=e.glslSqrt=e.glslSigmoid=e.glslRelu=e.glslSin=e.glslNot=e.glslNeg=e.glslLog=e.glslLeakyRelu=e.glslIdentity=e.glslClip=e.glslFloor=e.glslExp=e.glslElu=e.glslCos=e.glslCeil=e.glslAtan=e.glslAsin=e.glslAcos=e.glslAbs=void 0;const r=t(4910),s=t(7273),a=t(1997),i=t(6757),l=t(5639);function u(){return _("abs")}function h(){return _("acos")}function f(){return _("asin")}function c(){return _("atan")}function o(){return _("ceil")}function d(){return _("cos")}function m(k){const O="elu";return{body:`
  const float alpha = float(${k});

  float ${O}_(float a) {
    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;
  }
  vec4 ${O}_(vec4 v) {
    return vec4(${O}_(v.x), ${O}_(v.y), ${O}_(v.z), ${O}_(v.w));
  }
  `,name:O,type:a.FunctionType.ValueBased}}function g(){return _("exp")}function y(){return _("floor")}function $(k,O){const M="clip";return{body:`
  const float min = float(${k});
  const float max = float(${O});

  float ${M}_(float a) {
    return clamp(a, min, max);
  }
  vec4 ${M}_(vec4 v) {
    return clamp(v, min, max);
  }
  `,name:M,type:a.FunctionType.ValueBased}}function b(){const k="indentity";return{body:`
  float ${k}_(float a) {
    return a;
  }
  vec4 ${k}_(vec4 v) {
    return v;
  }
  `,name:k,type:a.FunctionType.ValueBased}}function x(k){const O="leakyRelu";return{body:`
  const float alpha = float(${k});

  float ${O}_(float a) {
    return a < 0.0 ? a * alpha : a;
  }
  vec4 ${O}_(vec4 v) {
    return vec4(${O}_(v.x), ${O}_(v.y), ${O}_(v.z), ${O}_(v.w));
  }
  `,name:O,type:a.FunctionType.ValueBased}}function w(){return _("log")}function v(){const k="neg";return{body:`
  float ${k}_(float a) {
    return -a;
  }
  vec4 ${k}_(vec4 v) {
    return -v;
  }
  `,name:k,type:a.FunctionType.ValueBased}}function S(){const k="not";return{body:`
  float ${k}_(float a) {
    return float( ! bool(a) );
  }
  bool ${k}_(bool a) {
    return !a;
  }
  vec4 ${k}_(vec4 v) {
    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));
  }
  bvec4 ${k}_(bvec4 v) {
    return bvec4(!v.x, !v.y, !v.z, !v.w);
  }
  `,name:k,type:a.FunctionType.ValueBased}}function T(){return _("sin")}function C(){const k="relu";return{body:`
  float ${k}_(float a) {
    return max( a, 0.0 );
  }
  vec4 ${k}_(vec4 v) {
    return max( v, 0.0 );
  }
  `,name:k,type:a.FunctionType.ValueBased}}function I(){const k="sigmoid";return{body:`
  float ${k}_(float a) {
    return 1.0 / (1.0 + exp(-a));
  }
  vec4 ${k}_(vec4 v) {
    return 1.0 / (1.0 + exp(-v));
  }
  `,name:k,type:a.FunctionType.ValueBased}}function N(){return _("sqrt")}function P(){return _("tan")}function F(){const k="tanh";return{body:`
  float ${k}_(float a) {
    a = clamp(a, -10., 10.);
    a = exp(2.*a);
    return (a - 1.) / (a + 1.);
  }
  vec4 ${k}_(vec4 v) {
    v = clamp(v, -10., 10.);
    v = exp(2.*v);
    return (v - 1.) / (v + 1.);
  }
  `,name:k,type:a.FunctionType.ValueBased}}function _(k){return{body:`
  float ${k}_(float a) {
    return ${k}(a);
  }
  vec4 ${k}_(vec4 v) {
    return ${k}(v);
  }
  `,name:k,type:a.FunctionType.ValueBased}}e.glslAbs=u,e.glslAcos=h,e.glslAsin=f,e.glslAtan=c,e.glslCeil=o,e.glslCos=d,e.glslElu=m,e.glslExp=g,e.glslFloor=y,e.glslClip=$,e.glslIdentity=b,e.glslLeakyRelu=x,e.glslLog=w,e.glslNeg=v,e.glslNot=S,e.glslSin=T,e.glslRelu=C,e.glslSigmoid=I,e.glslSqrt=N,e.glslTan=P,e.glslTanh=F;const D=(k,O,M,z)=>{const G=k.session.pack?l.TextureType.packed:l.TextureType.unpacked,j={name:M.name,inputTypes:[G],inputNames:["A"],cacheHint:z};return Object.assign(Object.assign({},j),{get:()=>((K,X,Y,J)=>{const te=K.session.pack?l.TextureType.packed:l.TextureType.unpacked,re=(0,i.getGlsl)(K.session.backend.glContext.version);return Object.assign(Object.assign({},X),{output:{dims:Y.dims,type:Y.type,textureType:te},shaderSource:`
     ${J.body}
     void main() {
       vec4 v = ${re.texture2D}(A, TexCoords);
       v = ${J.name}_(v);
       ${re.output} = v;
     }
     `,hasMain:!0})})(k,j,O,M)})};e.abs=(k,O)=>[k.run(D(k,O[0],u()),O)],e.acos=(k,O)=>[k.run(D(k,O[0],h()),O)],e.asin=(k,O)=>[k.run(D(k,O[0],f()),O)],e.atan=(k,O)=>[k.run(D(k,O[0],c()),O)],e.clip=(k,O,M)=>[k.run(D(k,O[0],$(M.min,M.max),M.cacheKey),O)],e.parseClipAttributes=k=>(0,r.createAttributeWithCacheKey)({min:k.attributes.getFloat("min",s.MIN_CLIP),max:k.attributes.getFloat("max",s.MAX_CLIP)}),e.clipV11=(k,O)=>{const M=E(k,O);return(0,e.clip)(k,[O[0]],M)};const E=(k,O)=>{if(O.length>=3&&(!k.session.isInitializer(O[1].dataId)||!k.session.isInitializer(O[2].dataId)))throw new Error("dynamic clip attributes are not allowed");const M=O.length>=3?O[1].numberData[0]:s.MIN_CLIP,z=O.length>=3?O[2].numberData[0]:s.MAX_CLIP;return(0,r.createAttributeWithCacheKey)({min:M,max:z})};e.ceil=(k,O)=>[k.run(D(k,O[0],o()),O)],e.cos=(k,O)=>[k.run(D(k,O[0],d()),O)],e.elu=(k,O,M)=>[k.run(D(k,O[0],m(M.alpha),M.cacheKey),O)],e.parseEluAttributes=k=>(0,r.createAttributeWithCacheKey)({alpha:k.attributes.getFloat("alpha",1)}),e.exp=(k,O)=>[k.run(D(k,O[0],g()),O)],e.floor=(k,O)=>[k.run(D(k,O[0],y()),O)],e.identity=(k,O)=>[k.run(D(k,O[0],b()),O)],e.leakyRelu=(k,O,M)=>[k.run(D(k,O[0],x(M.alpha),M.cacheKey),O)],e.parseLeakyReluAttributes=k=>(0,r.createAttributeWithCacheKey)({alpha:k.attributes.getFloat("alpha",.01)}),e.log=(k,O)=>[k.run(D(k,O[0],w()),O)],e.neg=(k,O)=>[k.run(D(k,O[0],v()),O)],e.not=(k,O)=>[k.run(D(k,O[0],S()),O)],e.relu=(k,O)=>[k.run(D(k,O[0],C()),O)],e.sigmoid=(k,O)=>[k.run(D(k,O[0],I()),O)],e.sin=(k,O)=>[k.run(D(k,O[0],T()),O)],e.sqrt=(k,O)=>[k.run(D(k,O[0],N()),O)],e.tan=(k,O)=>[k.run(D(k,O[0],P()),O)],e.tanh=(k,O)=>[k.run(D(k,O[0],F()),O)]},540:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createUnpackProgramInfoLoader=e.createUnpackProgramInfo=void 0;const r=t(6757),s=t(5639),a=t(432),i=t(5614),l={name:"unpack",inputNames:["A"],inputTypes:[s.TextureType.packed]};e.createUnpackProgramInfo=(u,h)=>{const f=h.dims.length,c=(0,i.getChannels)("rc",f),o=c.slice(-2),d=(0,a.getCoordsDataType)(f),m=(0,i.unpackFromChannel)(),g=h.dims.length===0?"":function(b,x){if(b===1)return"rc";let w="";for(let v=0;v<b;v++)w+=x[v],v<b-1&&(w+=",");return w}(f,c),y=f<=1?"rc":`vec2(${o.join(",")})`,$=`
    ${m}
    void main() {
      ${d} rc = getOutputCoords();

       // Sample the texture with the coords to get the rgba channel value.
       vec4 packedInput = getA(${g});

       ${(0,r.getGlsl)(u.session.backend.glContext.version).output} = vec4(getChannel(packedInput, ${y}), 0, 0, 0);
     }
   `;return Object.assign(Object.assign({},l),{hasMain:!0,output:{dims:h.dims,type:h.type,textureType:s.TextureType.unpacked},shaderSource:$})},e.createUnpackProgramInfoLoader=(u,h)=>Object.assign(Object.assign({},l),{get:()=>(0,e.createUnpackProgramInfo)(u,h)})},7862:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseUnsqueezeAttributes=e.unsqueezeV13=e.unsqueeze=void 0;const r=t(7273);e.unsqueeze=(i,l,u)=>{s(l);const h=r.ShapeUtil.unsqueezeShape(l[0].dims,u);return[i.reshapeUnpacked(l[0],h)]},e.unsqueezeV13=(i,l)=>(a(l),(0,e.unsqueeze)(i,[l[0]],Array.from(l[1].integerData))),e.parseUnsqueezeAttributes=i=>i.attributes.getInts("axes");const s=i=>{if(!i||i.length!==1)throw new Error("Unsqueeze requires 1 input.");if(i[0].type==="string")throw new Error("invalid input tensor types.")},a=i=>{if(!i||i.length!==2)throw new Error("Unsqueeze requires 2 inputs.");if(i[1].type!=="int32")throw new Error("Invalid input type.")}},3980:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.scalesValidation=e.validateInputs=e.parseUpsampleAttributes=e.parseUpsampleAttributesV9=e.parseUpsampleAttributesV7=e.upsample=void 0;const r=t(4910),s=t(6757),a=t(5639),i={name:"Upsample",inputNames:["X"],inputTypes:[a.TextureType.unpacked]};e.upsample=(u,h,f)=>((0,e.validateInputs)(h,f),[u.run(Object.assign(Object.assign({},i),{cacheHint:f.cacheKey,get:()=>l(u,h,f)}),h)]),e.parseUpsampleAttributesV7=u=>(0,e.parseUpsampleAttributes)(u,7),e.parseUpsampleAttributesV9=u=>(0,e.parseUpsampleAttributes)(u,9),e.parseUpsampleAttributes=(u,h)=>{const f=h>=10,c=u.attributes.getString("mode","nearest");if(c!=="nearest"&&c!=="linear"&&(h<11||c!=="cubic"))throw new Error(`unrecognized mode: ${c}`);let o=[];h<9&&(o=u.attributes.getFloats("scales"),(0,e.scalesValidation)(o,c,f));const d=u.attributes.getFloat("extrapolation_value",0),m=h>10?u.attributes.getString("coordinate_transformation_mode","half_pixel"):"asymmetric";if(["asymmetric","pytorch_half_pixel","tf_half_pixel_for_nn","align_corners","tf_crop_and_resize","half_pixel"].indexOf(m)===-1)throw new Error(`coordinate_transform_mode '${m}' is not supported`);const g=m==="tf_crop_and_resize",y=g,$=c==="nearest"&&h>=11?u.attributes.getString("nearest_mode","round_prefer_floor"):"";if(["round_prefer_floor","round_prefer_ceil","floor","ceil",""].indexOf($)===-1)throw new Error(`nearest_mode '${$}' is not supported`);const b=u.attributes.getFloat("cubic_coeff_a",-.75),x=u.attributes.getInt("exclude_outside",0)!==0;if(x&&c!=="cubic")throw new Error("exclude_outside can be set to 1 only when mode is CUBIC.");const w=h<11||c==="nearest"&&m==="asymmetric"&&$==="floor";let v=0,S=0,T=0;return h>10?u.inputs.length>2?(v=1,S=2,T=3):(S=1,T=2):h===9&&(S=1),(0,r.createAttributeWithCacheKey)({opset:h,isResize:f,mode:c,scales:o,extrapolationValue:d,coordinateTransformMode:m,useExtrapolation:y,needRoiInput:g,nearestMode:$,cubicCoefficientA:b,excludeOutside:x,useNearest2xOptimization:w,roiInputIdx:v,scalesInputIdx:S,sizesInputIdx:T})};const l=(u,h,f)=>{const c=(0,s.getGlsl)(u.session.backend.glContext.version),[o,d]=u.calculateTextureWidthAndHeight(h[0].dims,a.TextureType.unpacked),m=h[0].dims.map((T,C)=>Math.floor(T*f.scales[C])),[g,y]=u.calculateTextureWidthAndHeight(m,a.TextureType.unpacked),$=m.length,b=new Array($),x=new Array($);let w=`
      int output_pitches[${$}];
      int input_pitches[${$}];
      `;for(let T=$-1;T>=0;T--)b[T]=T===$-1?1:b[T+1]*m[T+1],x[T]=T===$-1?1:x[T+1]*h[0].dims[T+1],w+=`
        output_pitches[${T}] = ${b[T]};
        input_pitches[${T}] = ${x[T]};
        `;const v=`
      float getInputFloat(int index) {
        vec2 coords = offsetToCoords(index, ${o}, ${d});
        float value = getColorAsFloat(${c.texture2D}(X, coords));
        return value;
      }
      `,S=f.mode==="nearest"?`
    ${v}
    float process(int indices[${$}]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${g}, ${y});

      ${w}

      int d, m;
      for (int dim = 0; dim < ${$}; ++dim) {
        d = output_index / output_pitches[dim];
        m = output_index - d * output_pitches[dim];
        output_index = m;

        if (scales[dim] != 1 && d > 0) {
          int d2 = d / scales[dim];
          m = d - d2 * scales[dim];
          d = d2;
        }
        input_index += input_pitches[dim] * d;
      }

      return getInputFloat(input_index);
    }`:$===4?`
    ${v}
    float process(int indices[4]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${g}, ${y});

      ${w}

      int m;
      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;
      index_of_dim0 = output_index / output_pitches[0];
      m = output_index - index_of_dim0 * output_pitches[0];
      index_of_dim1 = m / output_pitches[1];
      m = m - index_of_dim1 * output_pitches[1];
      index_of_dim2 = m / output_pitches[2];
      m = m - index_of_dim2 * output_pitches[2];
      index_of_dim3 = m;

      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;
      index_of_input_dim2 = index_of_dim2 / scales[2];
      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];
      index_of_input_dim3 = index_of_dim3 / scales[3];
      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];

      input_index = index_of_dim0 * input_pitches[0] +
            index_of_dim1 * input_pitches[1] +
            index_of_input_dim2 * input_pitches[2] +
            index_of_input_dim3;

      float x00 = getInputFloat(input_index);
      float x10, x01, x11;

      bool end_of_dim2 = false;
      if (index_of_input_dim2 == (${h[0].dims[2]} - 1)) {
        // It's the end in dimension 2
        x01 = x00;
        end_of_dim2 = true;
      } else {
        x01 = getInputFloat(input_index + input_pitches[2]);
      }

      if (index_of_input_dim3 == (input_pitches[2] - 1)) {
        // It's the end in dimension 3
        x10 = x00;
        x11 = x01;
      }
      else {
        x10 = getInputFloat(input_index + 1);
        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);
      }

      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);
      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);
      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);
    }`:`
    ${v}
    float process(int indices[2]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${g}, ${y});

      ${w}

      int m;
      int index_of_dim0, index_of_dim1;
      index_of_dim0 = output_index / output_pitches[0];
      m = output_index - index_of_dim0 * output_pitches[0];
      index_of_dim1 = m;

      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;
      index_of_input_dim0 = index_of_dim0 / scales[0];
      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];
      index_of_input_dim1 = index_of_dim1 / scales[1];
      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];

      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;

      float x00 = getInputFloat(input_index);
      float x10, x01, x11;

      bool end_of_dim0 = false;
      if (index_of_input_dim0 == (${h[0].dims[0]} - 1)) {
        // It's the end in dimension 0
        x01 = x00;
        end_of_dim0 = true;
      } else {
        x01 = getInputFloat(input_index + input_pitches[0]);
      }

      if (index_of_input_dim1 == (input_pitches[0] - 1)) {
        // It's the end in dimension 1
        x10 = x00;
        x11 = x01;
      }
      else {
        x10 = getInputFloat(input_index + 1);
        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);
      }

      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);
      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);
      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);
    }`;return Object.assign(Object.assign({},i),{output:{dims:m,type:h[0].type,textureType:a.TextureType.unpacked},shaderSource:S,variables:[{name:"scales",type:"int",arrayLength:f.scales.length,data:f.scales.map(T=>Math.ceil(T))}]})};e.validateInputs=(u,h)=>{if(!u||h.opset<9&&u.length!==1||h.opset>=9&&h.opset<11&&u.length!==2||h.opset>=11&&u.length<2)throw new Error("invalid inputs.");if(h.scales.length>0&&u[0].dims.length!==h.scales.length)throw new Error("Invalid input shape.");if(u[0].type==="string")throw new Error("Invalid input tensor types.")},e.scalesValidation=(u,h,f)=>{if(f){for(const c of u)if(c<=0)throw new Error("Scale value should be greater than 0.")}else for(const c of u)if(c<1)throw new Error("Scale value should be greater than or equal to 1.");if(!(h!=="linear"&&h!=="cubic"||u.length===2||u.length===4&&u[0]===1&&u[1]===1))throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic')         or 4-D inputs with the corresponding outermost 2 scale values being 1         in the ${f?"Resize":"Upsample"} opeartor.`)}},2757:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ProgramManager=void 0;const r=t(2235),s=t(1315),a=t(8897),i=t(6757);e.ProgramManager=class{constructor(l,u,h){this.profiler=l,this.glContext=u,this.textureLayoutStrategy=h,this.repo=new Map,this.attributesBound=!1}getArtifact(l){return this.repo.get(l)}setArtifact(l,u){this.repo.set(l,u)}run(l,u,h){var f;this.profiler.event("op",`ProgramManager.run ${(f=l.programInfo.name)!==null&&f!==void 0?f:"unknown kernel"}`,()=>{var c;const o=this.glContext.gl,d=l.program;o.useProgram(d);try{this.bindOutput(h),this.attributesBound||this.bindAttributes(l.attribLocations),this.bindUniforms(l.uniformLocations,(c=l.programInfo.variables)!==null&&c!==void 0?c:[],u)}catch(m){throw s.Logger.error("ProgramManager",l.programInfo.shaderSource),m}this.profiler.event("backend","GlContext.draw()",()=>{this.glContext.draw()})},this.glContext)}dispose(){this.vertexShader&&this.glContext.deleteShader(this.vertexShader),this.repo.forEach(l=>this.glContext.deleteProgram(l.program))}build(l,u,h){return this.profiler.event("backend","ProgramManager.build",()=>{const f=new a.GlslPreprocessor(this.glContext,l,u,h),c=f.preprocess(),o=this.compile(c);return{programInfo:l,program:o,uniformLocations:this.getUniformLocations(o,f.context.programInfo.inputNames,f.context.programInfo.variables),attribLocations:this.getAttribLocations(o)}})}compile(l){if(!this.vertexShader){s.Logger.verbose("ProrgramManager","Compiling and caching Vertex shader for the first time");const f=(0,i.getVertexShaderSource)(this.glContext.version);this.vertexShader=this.glContext.compileShader(f,this.glContext.gl.VERTEX_SHADER)}r.env.debug&&s.Logger.verbose("ProrgramManager",`FragShader:
${l}
`);const u=this.glContext.compileShader(l,this.glContext.gl.FRAGMENT_SHADER),h=this.glContext.createProgram(this.vertexShader,u);return this.glContext.deleteShader(u),h}bindOutput(l){const u=l.width,h=l.height;s.Logger.verbose("ProrgramManager",`Binding output texture to Framebuffer: w/h=${u}/${h}, shape=${l.shape}, type=${l.tensor.type}`),this.glContext.attachFramebuffer(l.texture,u,h)}bindAttributes(l){const u=l.position,h=l.textureCoord;this.glContext.setVertexAttributes(u,h),this.attributesBound=!0}bindUniforms(l,u,h){var f;const c=this.glContext.gl;let o=0;for(const{name:d,type:m,location:g,arrayLength:y}of l){const $=(f=u.find(b=>b.name===d))===null||f===void 0?void 0:f.data;if(m!=="sampler2D"&&!$)throw new Error(`variable '${d}' does not have data defined in program info`);switch(m){case"sampler2D":this.bindTexture(h[o],g,o),o++;break;case"float":y?c.uniform1fv(g,$):c.uniform1f(g,$);break;case"int":y?c.uniform1iv(g,$):c.uniform1i(g,$);break;default:throw new Error(`Uniform not implemented: ${m}`)}}}bindTexture(l,u,h){this.glContext.bindTextureToUniform(l.texture,h,u)}getAttribLocations(l){return{position:this.getAttribLocation(l,"position"),textureCoord:this.getAttribLocation(l,"textureCoord")}}getUniformLocations(l,u,h){const f=[];if(u)for(const c of u)f.push({name:c,type:"sampler2D",location:this.getUniformLocation(l,c)});if(h)for(const c of h)f.push(Object.assign(Object.assign({},c),{location:this.getUniformLocation(l,c.name)}));return f}getUniformLocation(l,u){const h=this.glContext.gl.getUniformLocation(l,u);if(h===null)throw new Error(`Uniform ${u} not found.`);return h}getAttribLocation(l,u){return this.glContext.gl.getAttribLocation(l,u)}}},2171:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.WebGLSessionHandler=void 0;const r=t(1315),s=t(5881),a=t(7860),i=t(4110),l=t(2757),u=t(7618),h=t(5243);e.WebGLSessionHandler=class{constructor(f,c){this.backend=f,this.context=c,this.layoutStrategy=new u.PreferLogicalStrategy(f.glContext.maxTextureSize),this.programManager=new l.ProgramManager(this.context.profiler,f.glContext,this.layoutStrategy),this.textureManager=new h.TextureManager(f.glContext,this.layoutStrategy,this.context.profiler,{reuseTextures:f.textureCacheMode==="full"}),this.packedTextureDataCache=new Map,this.unpackedTextureDataCache=new Map,this.pack=f.pack,this.pack2unpackMap=new Map,this.unpack2packMap=new Map}createInferenceHandler(){return new a.WebGLInferenceHandler(this)}onGraphInitialized(f){const c=f.getValues().filter(o=>o.from===-1&&o.tensor).map(o=>o.tensor.dataId);this.initializers=new Set(c)}isInitializer(f){return!!this.initializers&&this.initializers.has(f)}addInitializer(f){this.initializers.add(f)}getTextureData(f,c){return c?this.packedTextureDataCache.get(f):this.unpackedTextureDataCache.get(f)}setTextureData(f,c,o=!1){r.Logger.verbose("WebGLSessionHandler","Storing Texture data in cache"),o?this.packedTextureDataCache.set(f,c):this.unpackedTextureDataCache.set(f,c)}dispose(){this.programManager.dispose(),this.textureManager.clearActiveTextures(),this.packedTextureDataCache.forEach(f=>this.textureManager.releaseTexture(f,!0)),this.packedTextureDataCache=new Map,this.unpackedTextureDataCache.forEach(f=>this.textureManager.releaseTexture(f,!0)),this.unpackedTextureDataCache=new Map}resolve(f,c,o){const d=(0,s.resolveOperator)(f,c,i.WEBGL_OP_RESOLVE_RULES);return{impl:d.opImpl,context:d.opInit?d.opInit(f,o):f}}}},9622:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Uint8DataEncoder=e.RGBAFloatDataEncoder=e.RedFloat32DataEncoder=void 0;const r=t(1315);e.RedFloat32DataEncoder=class{constructor(s,a=1){if(a===1)this.internalFormat=s.R32F,this.format=s.RED,this.textureType=s.FLOAT,this.channelSize=a;else{if(a!==4)throw new Error(`Invalid number of channels: ${a}`);this.internalFormat=s.RGBA32F,this.format=s.RGBA,this.textureType=s.FLOAT,this.channelSize=a}}encode(s,a){let i,l;return s.constructor!==Float32Array&&(r.Logger.warning("Encoder","data was not of type Float32; creating new Float32Array"),l=new Float32Array(s)),a*this.channelSize>s.length?(r.Logger.warning("Encoder","Source data too small. Allocating larger array"),l=s,i=this.allocate(a*this.channelSize),l.forEach((u,h)=>i[h]=u)):(l=s,i=l),i}allocate(s){return new Float32Array(4*s)}decode(s,a){return this.channelSize===1?s.filter((i,l)=>l%4==0).subarray(0,a):s.subarray(0,a)}},e.RGBAFloatDataEncoder=class{constructor(s,a=1,i){if(a!==1&&a!==4)throw new Error(`Invalid number of channels: ${a}`);this.internalFormat=s.RGBA,this.format=s.RGBA,this.channelSize=a,this.textureType=i||s.FLOAT}encode(s,a){let i=s;return this.channelSize===1&&(r.Logger.verbose("Encoder","Exploding into a larger array"),i=this.allocate(a),s.forEach((l,u)=>i[4*u]=l)),i}allocate(s){return new Float32Array(4*s)}decode(s,a){return this.channelSize===1?s.filter((i,l)=>l%4==0).subarray(0,a):s.subarray(0,a)}},e.Uint8DataEncoder=class{constructor(s,a=1){if(this.channelSize=4,a===1)this.internalFormat=s.ALPHA,this.format=s.ALPHA,this.textureType=s.UNSIGNED_BYTE,this.channelSize=a;else{if(a!==4)throw new Error(`Invalid number of channels: ${a}`);this.internalFormat=s.RGBA,this.format=s.RGBA,this.textureType=s.UNSIGNED_BYTE,this.channelSize=a}}encode(s,a){return new Uint8Array(s.buffer,s.byteOffset,s.byteLength)}allocate(s){return new Uint8Array(s*this.channelSize)}decode(s,a){if(s instanceof Uint8Array)return s.subarray(0,a);throw new Error(`Invalid array type: ${s.constructor}`)}}},7618:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getBatchDim=e.sizeToSquarishShape=e.getRowsCols=e.sizeFromShape=e.isInt=e.parseAxisParam=e.squeezeShape=e.PreferLogicalStrategy=e.AlwaysKeepOriginalSizeStrategy=void 0;const r=t(1315),s=t(7273);function a(f,c){const o=[],d=[],m=c!=null&&Array.isArray(c)&&c.length===0,g=c==null||m?null:i(c,f).sort();let y=0;for(let $=0;$<f.length;++$){if(g!=null){if(g[y]===$&&f[$]!==1)throw new Error(`Can't squeeze axis ${$} since its dim '${f[$]}' is not 1`);(g[y]==null||g[y]>$)&&f[$]===1&&(o.push(f[$]),d.push($)),g[y]<=$&&y++}f[$]!==1&&(o.push(f[$]),d.push($))}return{newShape:o,keptDims:d}}function i(f,c){const o=c.length;return f=f==null?c.map((d,m)=>m):[].concat(f),(0,s.assert)(f.every(d=>d>=-o&&d<o),()=>`All values in axis param must be in range [-${o}, ${o}) but got axis ${f}`),(0,s.assert)(f.every(l),()=>`All values in axis param must be integers but got axis ${f}`),f.map(d=>d<0?o+d:d)}function l(f){return f%1==0}function u(f){if(f.length===0)return 1;let c=f[0];for(let o=1;o<f.length;o++)c*=f[o];return c}function h(f){const c=Math.ceil(Math.sqrt(f));return[c,Math.ceil(f/c)]}e.AlwaysKeepOriginalSizeStrategy=class{constructor(f){this.maxTextureSize=f}computeTextureWH(f,c){if(f.length===0)return[1,1];const o=this.maxTextureSize;if(c&&c.breakAxis!==void 0){const g=c.breakAxis>=f.length?1:f.slice(c.breakAxis).reduce(($,b)=>$*b),y=c.breakAxis<=0?1:f.slice(0,c.breakAxis).reduce(($,b)=>$*b);if(!(g>o||y>o))return[g,y];r.Logger.verbose("TextureLayout",`Given width/height preferences were unattainable: shape:${f}, breakAxis:${c.breakAxis}`)}const d=f.reduce((g,y)=>g*y);let m=Math.floor(Math.sqrt(d));for(;m<o&&m<d&&d%m!=0;m++);if(m>=o||d%m!=0)throw new Error(`The given dimensions are outside this GPU's boundaries: ${f}`);return[m,d/m]}},e.PreferLogicalStrategy=class{constructor(f){this.maxTextureSize=f}computeTextureWH(f,c){const o=this.computeTexture(f,c);return c&&c.isPacked&&(o[0]/=2,o[1]/=2),c&&c.reverseWH?[o[1],o[0]]:o}computeTexture(f,c){const o=c&&c.isPacked;if(f.length===0)return o?[2,2]:[1,1];let d=this.maxTextureSize;if(c&&c.breakAxis!==void 0){const y=c.breakAxis>=f.length?1:f.slice(c.breakAxis).reduce((b,x)=>b*x),$=c.breakAxis<=0?1:f.slice(0,c.breakAxis).reduce((b,x)=>b*x);if(!(y>d||$>d))return[y,$];r.Logger.verbose("TextureLayout",`Given width/height preferences were unattainable: shape:${f}, breakAxis:${c.breakAxis}`)}let m=f.slice(0);o&&(d*=2,m=m.map((y,$)=>$>=m.length-2?m[$]%2==0?m[$]:m[$]+1:m[$]),m.length===1&&(m=[2,m[0]])),m.length!==2&&(m=a(m).newShape);const g=u(m);return m.length<=1&&g<=d?[1,g]:m.length===2&&m[0]<=d&&m[1]<=d?m:m.length===3&&m[0]*m[1]<=d&&m[2]<=d?[m[0]*m[1],m[2]]:m.length===3&&m[0]<=d&&m[1]*m[2]<=d?[m[0],m[1]*m[2]]:m.length===4&&m[0]*m[1]*m[2]<=d&&m[3]<=d?[m[0]*m[1]*m[2],m[3]]:m.length===4&&m[0]<=d&&m[1]*m[2]*m[3]<=d?[m[0],m[1]*m[2]*m[3]]:o?h(g/4).map(y=>2*y):h(g)}},e.squeezeShape=a,e.parseAxisParam=i,e.isInt=l,e.sizeFromShape=u,e.getRowsCols=function(f){if(f.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[f.length>1?f[f.length-2]:1,f[f.length-1]]},e.sizeToSquarishShape=h,e.getBatchDim=function(f,c=2){return u(f.slice(0,f.length-c))}},3314:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createTextureLayoutFromShape=e.calculateTextureWidthAndHeight=e.createTextureLayoutFromTextureType=void 0;const r=t(7273),s=t(5639);e.createTextureLayoutFromTextureType=(a,i,l)=>{const u=l===s.TextureType.unpacked||l===s.TextureType.unpackedReversed?1:4,h=l===s.TextureType.packed,f=l===s.TextureType.unpackedReversed||l===s.TextureType.packed,c=l===s.TextureType.packedLastDimension?i.length-1:void 0,o=l===s.TextureType.packedLastDimension?i.map((d,m)=>m===i.length-1?4*d:d):void 0;return(0,e.createTextureLayoutFromShape)(a,i,u,o,{isPacked:h,reverseWH:f,breakAxis:c})},e.calculateTextureWidthAndHeight=(a,i,l)=>{const u=(0,e.createTextureLayoutFromTextureType)(a,i,l);return[u.width,u.height]},e.createTextureLayoutFromShape=(a,i,l=1,u,h)=>{const f=!(!h||!h.isPacked),[c,o]=a.computeTextureWH(f&&u||i,h),d=i.length;let m=i.slice(0);if(d===0&&(m=[1]),l===1)u=i;else if(f){if(l!==4)throw new Error("a packed texture must be 4-channel");u=i,d>0&&(m[d-1]=Math.ceil(m[d-1]/2)),d>1&&(m[d-2]=Math.ceil(m[d-2]/2))}else if(!u)throw new Error("Unpacked shape is needed when using channels > 1");return{width:c,height:o,channels:l,isPacked:f,shape:m,strides:r.ShapeUtil.computeStrides(m),unpackedShape:u,reversedWH:h&&h.reverseWH}}},5243:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TextureManager=void 0;const r=t(1315);e.TextureManager=class{constructor(s,a,i,l){this.glContext=s,this.layoutStrategy=a,this.profiler=i,this.config=l,this.pendingRead=new Map,l.reuseTextures&&(this.inUseTextures=new Map,this.idleTextures=new Map,this.textureLookup=new Map)}createTextureFromLayout(s,a,i,l){const u=this.toEncoderType(s),h=this.glContext.getEncoder(u,a.channels||1,l);if(a.isPacked&&l===1)throw new Error("not implemented");const f=a.width,c=a.height;let o,d;if(this.config.reuseTextures){o=`${f}x${c}_${h.format}_${h.internalFormat}_${h.textureType}`,d=this.inUseTextures.get(o),d||(d=[],this.inUseTextures.set(o,d));const g=this.idleTextures.get(o);if(g&&g.length>0){const y=g.pop();return d.push(y),l===1&&this.glContext.updateTexture(y,f,c,h,this.toTextureData(s,i)),y}}r.Logger.verbose("TextureManager",`Creating new texture of size ${a.width}x${a.height}`);const m=this.glContext.allocateTexture(f,c,h,this.toTextureData(s,i));return this.config.reuseTextures&&(d.push(m),this.textureLookup.set(m,o)),m}readTexture(s,a,i){return i||(i=1),this.profiler.event("backend","TextureManager.readTexture",()=>{const l=s.shape.reduce((h,f)=>h*f)*i,u=this.glContext.readTexture(s.texture,s.width,s.height,l,this.toEncoderType(a),i);return this.toTensorData(a,u)})}async readTextureAsync(s,a,i){const l=s.tensor.dataId;if(i||(i=1),this.pendingRead.has(l)){const u=this.pendingRead.get(l);return new Promise(h=>u?.push(h))}return this.profiler.event("backend","TextureManager.readTextureAsync",async()=>{this.pendingRead.set(l,[]);const u=s.shape.reduce((o,d)=>o*d)*i;await this.glContext.createAndWaitForFence();const h=this.glContext.readTexture(s.texture,s.width,s.height,u,this.toEncoderType(a),i),f=this.toTensorData(a,h),c=this.pendingRead.get(l);return this.pendingRead.delete(l),c?.forEach(o=>o(f)),f})}readUint8TextureAsFloat(s){return this.profiler.event("backend","TextureManager.readUint8TextureAsFloat",()=>{const a=s.shape.reduce((l,u)=>l*u),i=this.glContext.readTexture(s.texture,s.width,s.height,4*a,"byte",4);return new Float32Array(i.buffer,i.byteOffset,a)})}releaseTexture(s,a){let i;if(this.config.reuseTextures&&(i=this.textureLookup.get(s.texture),i)){a&&this.textureLookup.delete(i);const l=this.inUseTextures.get(i);if(l){const u=l.indexOf(s.texture);if(u!==-1){l.splice(u,1);let h=this.idleTextures.get(i);h||(h=[],this.idleTextures.set(i,h)),h.push(s.texture)}}}i&&!a||(r.Logger.verbose("TextureManager",`Deleting texture of size ${s.width}x${s.height}`),this.glContext.deleteTexture(s.texture))}toTensorData(s,a){switch(s){case"int16":return a instanceof Int16Array?a:Int16Array.from(a);case"int32":return a instanceof Int32Array?a:Int32Array.from(a);case"int8":return a instanceof Int8Array?a:Int8Array.from(a);case"uint16":return a instanceof Uint16Array?a:Uint16Array.from(a);case"uint32":return a instanceof Uint32Array?a:Uint32Array.from(a);case"uint8":case"bool":return a instanceof Uint8Array?a:Uint8Array.from(a);case"float32":return a instanceof Float32Array?a:Float32Array.from(a);case"float64":return a instanceof Float64Array?a:Float64Array.from(a);default:throw new Error(`TensorData type ${s} is not supported`)}}toTextureData(s,a){if(a)return a instanceof Float32Array?a:new Float32Array(a)}toEncoderType(s){return"float"}clearActiveTextures(){this.glContext.clearActiveTextures()}}},5639:(n,e)=>{var t;Object.defineProperty(e,"__esModule",{value:!0}),e.TextureType=void 0,(t=e.TextureType||(e.TextureType={}))[t.unpacked=0]="unpacked",t[t.unpackedReversed=1]="unpackedReversed",t[t.packed=2]="packed",t[t.downloadUint8AsFloat=3]="downloadUint8AsFloat",t[t.packedLastDimension=4]="packedLastDimension"},432:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getGlChannels=e.getCoordsDataType=e.getSqueezedParams=e.squeezeInputShape=e.generateShaderFuncNameFromInputSamplerNameAtOutCoords=e.generateShaderFuncNameFromInputSamplerName=e.repeatedTry=e.getPackedShape=void 0;const r=t(7273);e.getPackedShape=function(s){const a=s.length;return s.slice(0,a-1).concat(s[a-1]/4)},e.repeatedTry=async function(s,a=l=>0,i){return new Promise((l,u)=>{let h=0;const f=()=>{if(s())return void l();h++;const c=a(h);i!=null&&h>=i?u():setTimeout(f,c)};f()})},e.generateShaderFuncNameFromInputSamplerName=function(s){return(0,r.assert)(s!==void 0&&s.length!==0,()=>"empty string found for sampler name"),"get"+s.charAt(0).toUpperCase()+s.slice(1)},e.generateShaderFuncNameFromInputSamplerNameAtOutCoords=function(s){return(0,r.assert)(s!==void 0&&s.length!==0,()=>"empty string found for sampler name"),"get"+s.charAt(0).toUpperCase()+s.slice(1)+"AtOutCoords"},e.squeezeInputShape=function(s,a){let i=JSON.parse(JSON.stringify(s));return i=a,i},e.getSqueezedParams=function(s,a){return a.map(i=>s[i]).join(", ")},e.getCoordsDataType=function(s){if(s<=1)return"int";if(s===2)return"ivec2";if(s===3)return"ivec3";if(s===4)return"ivec4";if(s===5)return"ivec5";if(s===6)return"ivec6";throw Error(`GPU for rank ${s} is not yet supported`)},e.getGlChannels=function(s=6){return["x","y","z","w","u","v"].slice(0,s)}},3389:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createNewWebGLContext=e.createWebGLContext=void 0;const r=t(1315),s=t(3524),a={};function i(l,u){let h;const f={alpha:!1,depth:!1,antialias:!1,stencil:!1,preserveDrawingBuffer:!1,premultipliedAlpha:!1,failIfMajorPerformanceCaveat:!1};if((!u||u==="webgl2")&&(h=l.getContext("webgl2",f),h))try{return new s.WebGLContext(h,2)}catch(c){r.Logger.warning("GlContextFactory",`failed to create WebGLContext using contextId 'webgl2'. Error: ${c}`)}if((!u||u==="webgl")&&(h=l.getContext("webgl",f)||l.getContext("experimental-webgl",f),h))try{return new s.WebGLContext(h,1)}catch(c){r.Logger.warning("GlContextFactory",`failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${c}`)}throw new Error("WebGL is not supported")}e.createWebGLContext=function l(u){let h;if(u&&u!=="webgl2"||!("webgl2"in a)?u&&u!=="webgl"||!("webgl"in a)||(h=a.webgl):h=a.webgl2,!h)try{h=i(function(){if(typeof OffscreenCanvas>"u")throw new TypeError("failed to create offscreen canvas: OffscreenCanvas is not supported");return new OffscreenCanvas(1,1)}(),u)}catch{h=i(function(){if(typeof document>"u")throw new TypeError("failed to create canvas: document is not supported");const o=document.createElement("canvas");return o.width=1,o.height=1,o}(),u)}u=u||h.version===1?"webgl":"webgl2";const f=h.gl;return a[u]=h,f.isContextLost()?(delete a[u],l(u)):(f.disable(f.DEPTH_TEST),f.disable(f.STENCIL_TEST),f.disable(f.BLEND),f.disable(f.DITHER),f.disable(f.POLYGON_OFFSET_FILL),f.disable(f.SAMPLE_COVERAGE),f.enable(f.SCISSOR_TEST),f.enable(f.CULL_FACE),f.cullFace(f.BACK),h)},e.createNewWebGLContext=i},3524:function(n,e,t){var r=this&&this.__createBinding||(Object.create?function(f,c,o,d){d===void 0&&(d=o);var m=Object.getOwnPropertyDescriptor(c,o);m&&!("get"in m?!c.__esModule:m.writable||m.configurable)||(m={enumerable:!0,get:function(){return c[o]}}),Object.defineProperty(f,d,m)}:function(f,c,o,d){d===void 0&&(d=o),f[d]=c[o]}),s=this&&this.__setModuleDefault||(Object.create?function(f,c){Object.defineProperty(f,"default",{enumerable:!0,value:c})}:function(f,c){f.default=c}),a=this&&this.__importStar||function(f){if(f&&f.__esModule)return f;var c={};if(f!=null)for(var o in f)o!=="default"&&Object.prototype.hasOwnProperty.call(f,o)&&r(c,f,o);return s(c,f),c};Object.defineProperty(e,"__esModule",{value:!0}),e.WebGLContext=e.linearSearchLastTrue=void 0;const i=t(2235),l=a(t(9622)),u=t(432);function h(f){let c=0;for(;c<f.length&&f[c]();++c);return c-1}e.linearSearchLastTrue=h,e.WebGLContext=class{constructor(f,c){this.frameBufferBound=!1,this.itemsToPoll=[],this.gl=f,this.version=c,this.getExtensions(),this.vertexbuffer=this.createVertexbuffer(),this.framebuffer=this.createFramebuffer(),this.queryVitalParameters()}allocateTexture(f,c,o,d){const m=this.gl,g=m.createTexture();m.bindTexture(m.TEXTURE_2D,g),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,m.NEAREST),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,m.NEAREST),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE);const y=d?o.encode(d,f*c):null;return m.texImage2D(m.TEXTURE_2D,0,o.internalFormat,f,c,0,o.format,o.textureType,y),this.checkError(),g}updateTexture(f,c,o,d,m){const g=this.gl;g.bindTexture(g.TEXTURE_2D,f);const y=d.encode(m,c*o);g.texSubImage2D(g.TEXTURE_2D,0,0,0,c,o,d.format,d.textureType,y),this.checkError()}attachFramebuffer(f,c,o){const d=this.gl;d.bindTexture(d.TEXTURE_2D,f),d.bindFramebuffer(d.FRAMEBUFFER,this.framebuffer),d.framebufferTexture2D(d.FRAMEBUFFER,d.COLOR_ATTACHMENT0,d.TEXTURE_2D,f,0),this.checkError(),d.viewport(0,0,c,o),d.scissor(0,0,c,o)}readTexture(f,c,o,d,m,g){const y=this.gl;g||(g=1),this.frameBufferBound||this.attachFramebuffer(f,c,o);const $=this.getEncoder(m,g),b=$.allocate(c*o);return y.bindTexture(y.TEXTURE_2D,f),y.framebufferTexture2D(y.FRAMEBUFFER,y.COLOR_ATTACHMENT0,y.TEXTURE_2D,f,0),y.readPixels(0,0,c,o,y.RGBA,$.textureType,b),this.checkError(),$.decode(b,d)}isFramebufferReady(){return!0}getActiveTexture(){const f=this.gl;return"TEXTURE"+(f.getParameter(this.gl.ACTIVE_TEXTURE)-f.TEXTURE0)}getTextureBinding(){return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D)}getFramebufferBinding(){return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING)}setVertexAttributes(f,c){const o=this.gl;o.vertexAttribPointer(f,3,o.FLOAT,!1,20,0),o.enableVertexAttribArray(f),c!==-1&&(o.vertexAttribPointer(c,2,o.FLOAT,!1,20,12),o.enableVertexAttribArray(c)),this.checkError()}createProgram(f,c){const o=this.gl,d=o.createProgram();return o.attachShader(d,f),o.attachShader(d,c),o.linkProgram(d),d}compileShader(f,c){const o=this.gl,d=o.createShader(c);if(!d)throw new Error(`createShader() returned null with type ${c}`);if(o.shaderSource(d,f),o.compileShader(d),o.getShaderParameter(d,o.COMPILE_STATUS)===!1)throw new Error(`Failed to compile shader: ${o.getShaderInfoLog(d)}
Shader source:
${f}`);return d}deleteShader(f){this.gl.deleteShader(f)}bindTextureToUniform(f,c,o){const d=this.gl;d.activeTexture(d.TEXTURE0+c),this.checkError(),d.bindTexture(d.TEXTURE_2D,f),this.checkError(),d.uniform1i(o,c),this.checkError()}draw(){this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4),this.checkError()}checkError(){if(i.env.debug){const f=this.gl,c=f.getError();let o="";switch(c){case f.NO_ERROR:return;case f.INVALID_ENUM:o="INVALID_ENUM";break;case f.INVALID_VALUE:o="INVALID_VALUE";break;case f.INVALID_OPERATION:o="INVALID_OPERATION";break;case f.INVALID_FRAMEBUFFER_OPERATION:o="INVALID_FRAMEBUFFER_OPERATION";break;case f.OUT_OF_MEMORY:o="OUT_OF_MEMORY";break;case f.CONTEXT_LOST_WEBGL:o="CONTEXT_LOST_WEBGL";break;default:o=`Unknown WebGL Error: ${c.toString(16)}`}throw new Error(o)}}deleteTexture(f){this.gl.deleteTexture(f)}deleteProgram(f){this.gl.deleteProgram(f)}getEncoder(f,c,o=0){if(this.version===2)return new l.RedFloat32DataEncoder(this.gl,c);switch(f){case"float":return o===1||this.isRenderFloat32Supported?new l.RGBAFloatDataEncoder(this.gl,c):new l.RGBAFloatDataEncoder(this.gl,c,this.textureHalfFloatExtension.HALF_FLOAT_OES);case"int":throw new Error("not implemented");case"byte":return new l.Uint8DataEncoder(this.gl,c);default:throw new Error(`Invalid dataType: ${f}`)}}clearActiveTextures(){const f=this.gl;for(let c=0;c<this.maxTextureImageUnits;++c)f.activeTexture(f.TEXTURE0+c),f.bindTexture(f.TEXTURE_2D,null)}dispose(){if(this.disposed)return;const f=this.gl;f.bindFramebuffer(f.FRAMEBUFFER,null),f.deleteFramebuffer(this.framebuffer),f.bindBuffer(f.ARRAY_BUFFER,null),f.deleteBuffer(this.vertexbuffer),f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,null),f.finish(),this.disposed=!0}createDefaultGeometry(){return new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0])}createVertexbuffer(){const f=this.gl,c=f.createBuffer();if(!c)throw new Error("createBuffer() returned null");const o=this.createDefaultGeometry();return f.bindBuffer(f.ARRAY_BUFFER,c),f.bufferData(f.ARRAY_BUFFER,o,f.STATIC_DRAW),this.checkError(),c}createFramebuffer(){const f=this.gl.createFramebuffer();if(!f)throw new Error("createFramebuffer returned null");return f}queryVitalParameters(){const f=this.gl;if(this.isFloatTextureAttachableToFrameBuffer=this.checkFloatTextureAttachableToFrameBuffer(),this.isRenderFloat32Supported=this.checkRenderFloat32(),this.isFloat32DownloadSupported=this.checkFloat32Download(),this.version===1&&!this.textureHalfFloatExtension&&!this.isRenderFloat32Supported)throw new Error("both float32 and float16 TextureType are not supported");this.isBlendSupported=!this.isRenderFloat32Supported||this.checkFloat32Blend(),this.maxTextureSize=f.getParameter(f.MAX_TEXTURE_SIZE),this.maxTextureImageUnits=f.getParameter(f.MAX_TEXTURE_IMAGE_UNITS),this.version}getExtensions(){this.version===2?(this.colorBufferFloatExtension=this.gl.getExtension("EXT_color_buffer_float"),this.disjointTimerQueryWebgl2Extension=this.gl.getExtension("EXT_disjoint_timer_query_webgl2")):(this.textureFloatExtension=this.gl.getExtension("OES_texture_float"),this.textureHalfFloatExtension=this.gl.getExtension("OES_texture_half_float"))}checkFloatTextureAttachableToFrameBuffer(){const f=this.gl,c=f.createTexture();f.bindTexture(f.TEXTURE_2D,c);const o=this.version===2?f.RGBA32F:f.RGBA;f.texImage2D(f.TEXTURE_2D,0,o,1,1,0,f.RGBA,f.FLOAT,null);const d=f.createFramebuffer();f.bindFramebuffer(f.FRAMEBUFFER,d),f.framebufferTexture2D(f.FRAMEBUFFER,f.COLOR_ATTACHMENT0,f.TEXTURE_2D,c,0);const m=f.checkFramebufferStatus(f.FRAMEBUFFER)===f.FRAMEBUFFER_COMPLETE;return f.bindTexture(f.TEXTURE_2D,null),f.bindFramebuffer(f.FRAMEBUFFER,null),f.deleteTexture(c),f.deleteFramebuffer(d),m}checkRenderFloat32(){if(this.version===2){if(!this.colorBufferFloatExtension)return!1}else if(!this.textureFloatExtension)return!1;return this.isFloatTextureAttachableToFrameBuffer}checkFloat32Download(){if(this.version===2){if(!this.colorBufferFloatExtension)return!1}else if(!this.textureFloatExtension||!this.gl.getExtension("WEBGL_color_buffer_float"))return!1;return this.isFloatTextureAttachableToFrameBuffer}checkFloat32Blend(){const f=this.gl;let c,o,d,m,g;try{c=f.createTexture(),o=f.createFramebuffer(),f.bindTexture(f.TEXTURE_2D,c);const y=this.version===2?f.RGBA32F:f.RGBA;return f.texImage2D(f.TEXTURE_2D,0,y,1,1,0,f.RGBA,f.FLOAT,null),f.bindFramebuffer(f.FRAMEBUFFER,o),f.framebufferTexture2D(f.FRAMEBUFFER,f.COLOR_ATTACHMENT0,f.TEXTURE_2D,c,0),f.enable(f.BLEND),d=f.createShader(f.VERTEX_SHADER),!!d&&(f.shaderSource(d,"void main(){}"),f.compileShader(d),m=f.createShader(f.FRAGMENT_SHADER),!!m&&(f.shaderSource(m,"precision highp float;void main(){gl_FragColor=vec4(0.5);}"),f.compileShader(m),g=f.createProgram(),!!g&&(f.attachShader(g,d),f.attachShader(g,m),f.linkProgram(g),f.useProgram(g),f.drawArrays(f.POINTS,0,1),f.getError()===f.NO_ERROR)))}finally{f.disable(f.BLEND),g&&f.deleteProgram(g),d&&f.deleteShader(d),m&&f.deleteShader(m),o&&(f.bindFramebuffer(f.FRAMEBUFFER,null),f.deleteFramebuffer(o)),c&&(f.bindTexture(f.TEXTURE_2D,null),f.deleteTexture(c))}}beginTimer(){if(this.version===2&&this.disjointTimerQueryWebgl2Extension){const f=this.gl,c=this.disjointTimerQueryWebgl2Extension,o=f.createQuery();return f.beginQuery(c.TIME_ELAPSED_EXT,o),o}throw new Error("WebGL1 profiling currently not supported.")}endTimer(){if(this.version!==2||!this.disjointTimerQueryWebgl2Extension)throw new Error("WebGL1 profiling currently not supported");{const f=this.gl,c=this.disjointTimerQueryWebgl2Extension;f.endQuery(c.TIME_ELAPSED_EXT)}}isTimerResultAvailable(f){let c=!1,o=!1;if(this.version!==2||!this.disjointTimerQueryWebgl2Extension)throw new Error("WebGL1 profiling currently not supported");{const d=this.gl,m=this.disjointTimerQueryWebgl2Extension;c=d.getQueryParameter(f,d.QUERY_RESULT_AVAILABLE),o=d.getParameter(m.GPU_DISJOINT_EXT)}return c&&!o}getTimerResult(f){let c=0;if(this.version!==2)throw new Error("WebGL1 profiling currently not supported");{const o=this.gl;c=o.getQueryParameter(f,o.QUERY_RESULT),o.deleteQuery(f)}return c/1e6}async waitForQueryAndGetTime(f){return await(0,u.repeatedTry)(()=>this.isTimerResultAvailable(f)),this.getTimerResult(f)}async createAndWaitForFence(){const f=this.createFence(this.gl);return this.pollFence(f)}createFence(f){let c;const o=f,d=o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE,0);return f.flush(),c=d===null?()=>!0:()=>{const m=o.clientWaitSync(d,0,0);return m===o.ALREADY_SIGNALED||m===o.CONDITION_SATISFIED},{query:d,isFencePassed:c}}async pollFence(f){return new Promise(c=>{this.addItemToPoll(()=>f.isFencePassed(),()=>c())})}pollItems(){const f=h(this.itemsToPoll.map(c=>c.isDoneFn));for(let c=0;c<=f;++c){const{resolveFn:o}=this.itemsToPoll[c];o()}this.itemsToPoll=this.itemsToPoll.slice(f+1)}async addItemToPoll(f,c){this.itemsToPoll.push({isDoneFn:f,resolveFn:c}),this.itemsToPoll.length>1||await(0,u.repeatedTry)(()=>(this.pollItems(),this.itemsToPoll.length===0))}}},6496:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ExecutionPlan=void 0;const r=t(1315);class s{constructor(i,l){this.op=i,this.node=l}}e.ExecutionPlan=class{constructor(a,i,l){this.graph=a,this.profiler=l,this.initialize(i)}initialize(a){this.profiler.event("session","ExecutionPlan.initialize",()=>{const i=this.graph.getNodes();if(i.length!==a.length)throw new Error("The size of nodes and OPs do not match.");this._ops=a.map((l,u)=>new s(l,i[u])),this.reset(),this._starter=[],this._ops.forEach((l,u)=>{let h=!0;for(const f of l.node.inputs)if(!this._values[f]&&this.graph.getInputIndices().indexOf(f)===-1){h=!1;break}h&&this._starter.push(u)})})}reset(){this._values=this.graph.getValues().map(a=>a.tensor)}async execute(a,i){return this.profiler.event("session","ExecutionPlan.execute",async()=>{this.reset();const l=a.createInferenceHandler(),u=this.graph.getInputIndices();if(i.length!==u.length)throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${i.length} expected: ${u.length}`);i.forEach((m,g)=>{const y=u[g];this._values[y]=m});const h=this._starter.slice(0),f=this.graph.getValues(),c=this.graph.getNodes();let o=0;for(;o<h.length;){const m=h[o++],g=this._ops[m],y=g.node.inputs.map(w=>this._values[w]);if(y.indexOf(void 0)!==-1)throw new Error(`unresolved input detected: op: ${g.node}`);const $=y;r.Logger.verbose("ExecPlan",`Runing op:${g.node.name} (${$.map((w,v)=>`'${g.node.inputs[v]}': ${w.type}[${w.dims.join(",")}]`).join(", ")})`);const b=await this.profiler.event("node",g.node.name,async()=>g.op.impl(l,$,g.op.context));if(b.length!==g.node.outputs.length)throw new Error("the size of output does not match model definition.");b.forEach((w,v)=>{const S=g.node.outputs[v];if(this._values[S])throw new Error(`output [${S}] already has value: op:${g.node.name}`);this._values[S]=w});const x=new Set;b.forEach((w,v)=>{const S=g.node.outputs[v];for(const T of f[S].to){const C=c[T];let I=!0;for(const N of C.inputs)if(!this._values[N]){I=!1;break}I&&x.add(T)}}),h.push(...x)}const d=[];for(let m=0;m<this.graph.getOutputIndices().length;m++){const g=this.graph.getOutputIndices()[m],y=this._values[g];if(y===void 0)throw new Error(`required output [${g}] does not have value`);g===0?await y.getData():y.data,d.push(y)}return r.Logger.verbose("ExecPlan","disposing of inferenceHandler"),l.dispose(),d})}}},4662:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Graph=void 0;const r=t(6874),s=t(5127),a=t(2446),i=t(9240),l=t(7273);var u=s.onnxruntime.experimental.fbs;e.Graph={from:(o,d)=>new c(o,d)};class h{constructor(d){this._from=void 0,this._to=[],this.tensor=void 0,this.type=void 0,d&&(this.type=l.ProtoUtil.tensorValueTypeFromProto(d.type.tensorType))}get from(){return this._from}get to(){return this._to}}class f{constructor(d,m){d instanceof a.onnx.NodeProto?(this.name=d.name,this.opType=d.opType,this.attributes=new r.Attribute(d.attribute)):d instanceof u.Node&&(this.name=m??d.name(),this.opType=d.opType(),this.attributes=new r.Attribute(l.ProtoUtil.tensorAttributesFromORTFormat(d))),this.inputs=[],this.outputs=[],this.executeNode=!0}}class c{constructor(d,m){if(!d)throw new TypeError("graph is empty");this.buildGraph(d),this.transformGraph(m),this.checkIsAcyclic()}getInputIndices(){return this._allInputIndices}getInputNames(){return this._allInputNames}getOutputIndices(){return this._allOutputIndices}getOutputNames(){return this._allOutputNames}getValues(){return this._allData}getNodes(){return this._nodes}buildGraph(d){if(d instanceof a.onnx.GraphProto)this.buildGraphFromOnnxFormat(d);else{if(!(d instanceof u.Graph))throw new TypeError("Graph type is not supported.");this.buildGraphFromOrtFormat(d)}}buildGraphFromOnnxFormat(d){const m=new Map;this._allData=[],this._allInputIndices=[],this._allInputNames=[],this._allOutputIndices=[],this._allOutputNames=[],this._nodes=[];const g=new Map;if(!d.input)throw new Error("missing information in graph: input");const y=[];for(const $ of d.input){if(m.has($.name))throw new Error(`duplicated input name: ${$.name}`);const b=this._allData.push(new h($))-1;m.set($.name,b),y.push($.name)}if(!d.initializer)throw new Error("missing information in graph: initializer");for(const $ of d.initializer){let b=m.get($.name);if(b===void 0){const x=new h;x.type={shape:{dims:l.ProtoUtil.tensorDimsFromProto($.dims)},tensorType:l.ProtoUtil.tensorDataTypeFromProto($.dataType)},b=this._allData.push(x)-1,m.set($.name,b)}this._allData[b]._from=-1,this._allData[b].tensor=i.Tensor.fromProto($)}for(let $=0;$<this._allData.length;$++)this._allData[$].tensor||(this._allInputIndices.push($),this._allInputNames.push(y[$]));if(!d.output)throw new Error("missing information in graph: output");for(const $ of d.output){if(m.has($.name))throw new Error(`duplicated output name: ${$.name}`);const b=this._allData.push(new h($))-1;m.set($.name,b),this._allOutputIndices.push(b),this._allOutputNames.push($.name)}if(!d.node)throw new Error("missing information in graph: node");for(const $ of d.node){if(!$.name)for(let x=0;;x++){const w=`unnamed_${$.opType}_${x}`;if(!g.has(w)){$.name=w;break}}if(g.has($.name))throw new Error(`duplicated node name: ${$.name}`);const b=this._nodes.push(new f($))-1;g.set($.name,b)}for(let $=0;$<this._nodes.length;$++){const b=this._nodes[$],x=d.node[$];if(!x.output)throw new Error(`missing output for node: ${x.name}`);for(const w of x.output){let v=m.get(w);if(v===void 0&&(v=this._allData.push(new h)-1,m.set(w,v)),b.outputs.push(v),this._allData[v]._from!==void 0)throw new Error(`multiple nodes output to one data value: ${v}`);if(this._allData[v]._from=$,x.opType==="Constant"){if(!x.attribute||x.attribute.length!==1||!x.attribute[0].t)throw new Error("missing attributes or missing tensor value in attributes for this Constant operator");if(!x.output||x.output.length!==1)throw new Error("missing output or incorrect number of outputs for this Constant operator");b.outputs.pop(),b.executeNode=!1,this._allData[v]._from=-1,this._allData[v].tensor=i.Tensor.fromProto(x.attribute[0].t)}}}for(let $=0;$<this._nodes.length;$++){const b=this._nodes[$],x=d.node[$];if(!x.input)throw new Error(`missing input for node: ${x.name}`);for(const w of x.input){const v=m.get(w);if(v===void 0){if(w===""&&(x.input.length===3||x.input.length===4)&&x.opType==="Resize")continue;throw new Error(`unrecognized input '${w}' for node: ${x.name}`)}b.inputs.push(v),this._allData[v]._to.push($)}}return!0}buildGraphFromOrtFormat(d){var m,g,y;const $=new Map;this._allData=[],this._allInputIndices=[],this._allInputNames=[],this._allOutputIndices=[],this._allOutputNames=[],this._nodes=[];const b=new Map,x=[];for(let w=0;w<d.inputsLength();w++){const v=d.inputs(w);if($.has(v))throw new Error(`duplicated input name: ${v}`);for(let S=0;S<d.nodeArgsLength();S++)if(((m=d.nodeArgs(S))===null||m===void 0?void 0:m.name())===v){const T=new h;if(((y=(g=d.nodeArgs(S))===null||g===void 0?void 0:g.type())===null||y===void 0?void 0:y.valueType())!==u.TypeInfoValue.tensor_type)throw new Error("Unexpected value type for the nodeArg.");const C=d.nodeArgs(S).type().value(new u.TensorTypeAndShape),I=l.ProtoUtil.tensorDataTypeFromProto(C.elemType()),N=C.shape(),P=[];for(let _=0;_<N.dimLength();_++)P.push(l.LongUtil.longToNumber(N.dim(_).value().dimValue()));T.type={shape:{dims:P},tensorType:I};const F=this._allData.push(T)-1;$.set(v,F),x.push(v)}}for(let w=0;w<d.initializersLength();w++){const v=d.initializers(w);let S=$.get(v.name());if(S===void 0){const T=new h,C=l.ProtoUtil.tensorDimsFromORTFormat(v),I=l.ProtoUtil.tensorDataTypeFromProto(v.dataType());T.type={shape:{dims:C},tensorType:I},S=this._allData.push(T)-1,$.set(v.name(),S)}this._allData[S]._from=-1,this._allData[S].tensor=i.Tensor.fromOrtTensor(v)}for(let w=0;w<this._allData.length;w++)this._allData[w].tensor||(this._allInputIndices.push(w),this._allInputNames.push(x[w]));for(let w=0;w<d.outputsLength();w++){const v=d.outputs(w);if($.has(v))throw new Error(`duplicated output name: ${v}`);const S=this._allData.push(new h)-1;$.set(v,S),this._allOutputIndices.push(S),this._allOutputNames.push(v)}if(!d.nodes)throw new Error("missing information in graph: node");for(let w=0;w<d.nodesLength();w++){const v=d.nodes(w);let S=v.name();if(!S)for(let C=0;S=`unnamed_${v.opType()}_${C}`,b.has(S);C++);if(b.has(S))throw new Error(`duplicated node name: ${S}`);const T=this._nodes.push(new f(v,S))-1;b.set(S,T)}for(let w=0;w<this._nodes.length;w++){const v=this._nodes[w],S=d.nodes(w);if(S==null)throw new Error(`No node exists at index ${w}`);if(S?.outputsLength()===0)throw new Error(`missing output for node: ${S.name}`);for(let T=0;T<S?.outputsLength();T++){const C=S?.outputs(T);let I=$.get(C);if(I===void 0&&(I=this._allData.push(new h)-1,$.set(C,I)),v.outputs.push(I),this._allData[I]._from!==void 0)throw new Error(`multiple nodes output to one data value: ${I}`);if(this._allData[I]._from=w,S.opType()==="Constant"){if(S.attributesLength()!==1||!S.attributes(0).t())throw new Error("missing attributes or missing tensor value in attributes for this Constant operator");if(S.outputsLength()!==1)throw new Error("missing output or incorrect number of outputs for this Constant operator");v.outputs.pop(),v.executeNode=!1,this._allData[I]._from=-1,this._allData[I].tensor=i.Tensor.fromOrtTensor(S.attributes(0).t())}}}for(let w=0;w<this._nodes.length;w++){const v=this._nodes[w],S=d.nodes(w);if(S.inputsLength()===0)throw new Error(`missing input for node: ${S.name}`);for(let T=0;T<S.inputsLength();T++){const C=S.inputs(T),I=$.get(C);if(I===void 0)throw new Error(`unrecognized input '${C}' for node: ${S.name()}`);v.inputs.push(I),this._allData[I]._to.push(w)}}}checkIsAcyclic(){const d=new Set;this._allInputIndices.forEach(y=>{this._allData[y]._to.forEach($=>{d.add($)})});const m=Array.from(d),g=new Array(this._nodes.length).fill("white");for(;m.length>0;){const y=m.pop();g[y]==="gray"?g[y]="black":(m.push(y),g[y]="gray",this._nodes[y].outputs.forEach($=>{const b=this._allData[$];if(b.tensor!==void 0)throw new Error("node outputs should not be initialized");if(b._from!==y)throw new Error("from property of the Value object doesn't match index of Node being processed");b._to.forEach(x=>{if(g[x]==="gray")throw new Error("model graph is cyclic");g[x]==="white"&&m.push(x)})}))}}transformGraph(d){this.removeAllIdentityNodes(),this.removeAllDropoutNodes(),this.fuseConvActivationNodes(),d&&d.transformGraph(this),this.finalizeGraph()}finalizeGraph(){let d=0;const m=new Array(this._nodes.length,0);let g=0;for(let y=0;y<this._nodes.length;y++)m[y]=g,this._nodes[y].executeNode?(g!==y&&(this._nodes[g]=this._nodes[y]),g++):this._nodes[y].outputs.forEach($=>{this._allData[$]._from=-2});this._nodes.splice(g,this._nodes.length-g);for(let y=0;y<this._allData.length;y++){const $=this._allData[y];$._from!==void 0&&$._from!==-1&&$._from!==-2&&($._from=m[$._from]);for(let b=0;b<$._to.length;b++){if(!($._to[b]>=0))throw new Error("Trying to update a removed node");$._to[b]=m[$._to[b]]}}d=0;for(let y=0;y<this._allData.length;y++)if(this._allData[y].from!==-2||this._allOutputIndices.indexOf(y+d)!==-1){if(d>0){let $=-1;this._allData[y].from!==void 0&&this._allData[y].from!==-1?($=this._nodes[this._allData[y].from].outputs.indexOf(y+d),$!==-1&&(this._nodes[this._allData[y].from].outputs[$]=y)):($=this._allInputIndices.indexOf(y+d),$!==-1&&(this._allInputIndices[$]=y)),this._allData[y].to.forEach(b=>{$=this._nodes[b].inputs.indexOf(y+d),$!==-1&&(this._nodes[b].inputs[$]=y)}),this._allData[y].to.length===0&&($=this._allOutputIndices.indexOf(y+d),$!==-1&&(this._allOutputIndices[$]=y))}}else d++,this._allData.splice(y,1),y--}deleteNode(d){const m=this._nodes[d];if(m.outputs.length>1){for(let x=1;x<m.outputs.length;x++)if(this._allData[m.outputs[x]].to.length>0)throw new Error("Node deletion with more than one output connected to other nodes is not supported. ")}m.executeNode=!1;const g=m.inputs[0],y=m.outputs[0],$=this._allData[y].to;for(let x=0;x<m.inputs.length;x++){const w=this._allData[m.inputs[x]].to.indexOf(d);if(w===-1)throw new Error("The Value object doesn't have the current Node in it's 'to' property ");this._allData[m.inputs[x]].to.splice(w,1)}this._allData[y]._to=[];const b=this._allOutputIndices.indexOf(y);if(b!==-1&&(this._allOutputIndices[b]=g),$&&$.length>0)for(const x of $){const w=this._nodes[x].inputs.indexOf(y);if(w===-1)throw new Error("The Node object doesn't have the output Value in it's 'inputs' property ");this._nodes[x].inputs[w]=g,this._allData[g].to.push(x)}}removeAllDropoutNodes(){let d=0;for(const m of this._nodes){if(m.opType==="Dropout"){if(m.inputs.length!==1)throw new Error("Dropout nodes should only contain one input. ");if(m.outputs.length!==1&&m.outputs.length!==2)throw new Error("Dropout nodes should contain either 1 or 2 output(s)");if(m.outputs.length===2&&this._allData[m.outputs[1]]._to.length!==0)throw new Error("Dropout nodes's second output should not be referenced by other nodes");this.deleteNode(d)}d++}}removeAllIdentityNodes(){let d=0;for(const m of this._nodes)m.opType==="Identity"&&this.deleteNode(d),d++}isActivation(d){switch(d.opType){case"Relu":case"Sigmoid":case"Clip":return!0;default:return!1}}fuseConvActivationNodes(){for(const d of this._nodes)if(d.opType==="Conv"){const m=this._allData[d.outputs[0]]._to;if(m.length===1&&this.isActivation(this._nodes[m[0]])){const g=this._nodes[m[0]];if(g.opType==="Clip")if(g.inputs.length===1)try{d.attributes.set("activation_params","floats",[g.attributes.getFloat("min"),g.attributes.getFloat("max")])}catch{d.attributes.set("activation_params","floats",[l.MIN_CLIP,l.MAX_CLIP])}else{if(!(g.inputs.length>=3&&this._allData[g.inputs[1]].tensor!==void 0&&this._allData[g.inputs[2]].tensor!==void 0))continue;d.attributes.set("activation_params","floats",[this._allData[g.inputs[1]].tensor.floatData[0],this._allData[g.inputs[2]].tensor.floatData[0]])}d.attributes.set("activation","string",g.opType),this.deleteNode(m[0])}}}}},1315:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.now=e.Profiler=e.Logger=void 0;const t={verbose:1e3,info:2e3,warning:4e3,error:5e3,fatal:6e3},r={none:new class{log(f,c,o){}},console:new class{log(f,c,o){console.log(`${this.color(f)} ${o?"\x1B[35m"+o+"\x1B[0m ":""}${c}`)}color(f){switch(f){case"verbose":return"\x1B[34;40mv\x1B[0m";case"info":return"\x1B[32mi\x1B[0m";case"warning":return"\x1B[30;43mw\x1B[0m";case"error":return"\x1B[31;40me\x1B[0m";case"fatal":return"\x1B[101mf\x1B[0m";default:throw new Error(`unsupported severity: ${f}`)}}}},s={provider:"console",minimalSeverity:"warning",logDateTime:!0,logSourceLocation:!1};let a={"":s};function i(f,c,o,d){if(c===void 0)return m=f,{verbose:i.verbose.bind(null,m),info:i.info.bind(null,m),warning:i.warning.bind(null,m),error:i.error.bind(null,m),fatal:i.fatal.bind(null,m)};if(o===void 0)l(f,c);else if(typeof o=="number"&&d===void 0)l(f,c);else if(typeof o=="string"&&d===void 0)l(f,o,0,c);else{if(typeof o!="string"||typeof d!="number")throw new TypeError("input is valid");l(f,o,0,c)}var m}function l(f,c,o,d){const m=a[d||""]||a[""];t[f]<t[m.minimalSeverity]||(m.logDateTime&&(c=`${new Date().toISOString()}|${c}`),m.logSourceLocation,r[m.provider].log(f,c,d))}(function(f){function c(d){a={},o("",d||{})}function o(d,m){if(d==="*")c(m);else{const g=a[d]||s;a[d]={provider:m.provider||g.provider,minimalSeverity:m.minimalSeverity||g.minimalSeverity,logDateTime:m.logDateTime===void 0?g.logDateTime:m.logDateTime,logSourceLocation:m.logSourceLocation===void 0?g.logSourceLocation:m.logSourceLocation}}}f.verbose=function(d,m){f("verbose",d,m)},f.info=function(d,m){f("info",d,m)},f.warning=function(d,m){f("warning",d,m)},f.error=function(d,m){f("error",d,m)},f.fatal=function(d,m){f("fatal",d,m)},f.reset=c,f.set=o,f.setWithEnv=function(d){const m={};d.logLevel&&(m.minimalSeverity=d.logLevel),o("",m)}})(i||(i={})),e.Logger=i;class u{constructor(c,o,d,m,g,y){this.category=c,this.name=o,this.startTime=d,this.endCallback=m,this.timer=g,this.ctx=y}async end(){return this.endCallback(this)}async checkTimer(){if(this.ctx===void 0||this.timer===void 0)throw new Error("No webgl timer found");return this.ctx.endTimer(),this.ctx.waitForQueryAndGetTime(this.timer)}}class h{constructor(c,o,d,m){this.category=c,this.name=o,this.startTime=d,this.endTime=m}}e.Profiler=class{static create(f){return f===void 0?new this:new this(f.maxNumberEvents,f.flushBatchSize,f.flushIntervalInMilliseconds)}constructor(f,c,o){this._started=!1,this._flushPointer=0,this._started=!1,this._maxNumberEvents=f===void 0?1e4:f,this._flushBatchSize=c===void 0?10:c,this._flushIntervalInMilliseconds=o===void 0?5e3:o}start(){this._started=!0,this._timingEvents=[],this._flushTime=(0,e.now)(),this._flushPointer=0}stop(){for(this._started=!1;this._flushPointer<this._timingEvents.length;this._flushPointer++)this.logOneEvent(this._timingEvents[this._flushPointer])}event(f,c,o,d){const m=this._started?this.begin(f,c,d):void 0;let g=!1;const y=o();if(y&&typeof y.then=="function")return g=!0,new Promise(($,b)=>{y.then(async x=>{m&&await m.end(),$(x)},async x=>{m&&await m.end(),b(x)})});if(!g&&m){const $=m.end();if($&&typeof $.then=="function")return new Promise((b,x)=>{$.then(()=>{b(y)},w=>{x(w)})})}return y}begin(f,c,o){if(!this._started)throw new Error("profiler is not started yet");if(o===void 0){const d=(0,e.now)();return this.flush(d),new u(f,c,d,m=>this.endSync(m))}{const d=o.beginTimer();return new u(f,c,0,async m=>this.end(m),d,o)}}async end(f){const c=await f.checkTimer();this._timingEvents.length<this._maxNumberEvents&&(this._timingEvents.push(new h(f.category,f.name,f.startTime,c)),this.flush(c))}endSync(f){const c=(0,e.now)();this._timingEvents.length<this._maxNumberEvents&&(this._timingEvents.push(new h(f.category,f.name,f.startTime,c)),this.flush(c))}logOneEvent(f){e.Logger.verbose(`Profiler.${f.category}`,`${(f.endTime-f.startTime).toFixed(2)}ms on event '${f.name}' at ${f.endTime.toFixed(2)}`)}flush(f){if(this._timingEvents.length-this._flushPointer>=this._flushBatchSize||f-this._flushTime>=this._flushIntervalInMilliseconds){for(const c=this._flushPointer;this._flushPointer<c+this._flushBatchSize&&this._flushPointer<this._timingEvents.length;this._flushPointer++)this.logOneEvent(this._timingEvents[this._flushPointer]);this._flushTime=(0,e.now)()}}get started(){return this._started}},e.now=typeof performance<"u"&&performance.now?()=>performance.now():Date.now},1745:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Model=void 0;const r=t(5686),s=t(4662),a=t(5127),i=t(2446),l=t(7273);var u=a.onnxruntime.experimental.fbs;e.Model=class{constructor(){}load(h,f,c){if(!c)try{return void this.loadFromOnnxFormat(h,f)}catch(o){if(c!==void 0)throw o}this.loadFromOrtFormat(h,f)}loadFromOnnxFormat(h,f){const c=i.onnx.ModelProto.decode(h);if(l.LongUtil.longToNumber(c.irVersion)<3)throw new Error("only support ONNX model with IR_VERSION>=3");this._opsets=c.opsetImport.map(o=>({domain:o.domain,version:l.LongUtil.longToNumber(o.version)})),this._graph=s.Graph.from(c.graph,f)}loadFromOrtFormat(h,f){const c=new r.flatbuffers.ByteBuffer(h),o=u.InferenceSession.getRootAsInferenceSession(c).model();if(l.LongUtil.longToNumber(o.irVersion())<3)throw new Error("only support ONNX model with IR_VERSION>=3");this._opsets=[];for(let d=0;d<o.opsetImportLength();d++){const m=o.opsetImport(d);this._opsets.push({domain:m?.domain(),version:l.LongUtil.longToNumber(m.version())})}this._graph=s.Graph.from(o.graph(),f)}get graph(){return this._graph}get opsets(){return this._opsets}}},6145:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.FLOAT_TYPES=e.INT_TYPES=e.NUMBER_TYPES=void 0,e.NUMBER_TYPES=["float32","float64","int32","int16","int8","uint16","uint32","uint8"],e.INT_TYPES=["int32","int16","int8","uint16","uint32","uint8"],e.FLOAT_TYPES=["float32","float64"]},5881:(n,e)=>{function t(r,s){if(s.endsWith("+")){const a=Number.parseInt(s.substring(0,s.length-1),10);return!isNaN(a)&&a<=r}if(s.split("-").length===2){const a=s.split("-"),i=Number.parseInt(a[0],10),l=Number.parseInt(a[1],10);return!isNaN(i)&&!isNaN(l)&&i<=r&&r<=l}return Number.parseInt(s,10)===r}Object.defineProperty(e,"__esModule",{value:!0}),e.resolveOperator=void 0,e.resolveOperator=function(r,s,a){for(const i of a){const l=i[0],u=i[1],h=i[2],f=i[3],c=i[4];if(r.opType===l){for(const o of s)if((o.domain===u||o.domain==="ai.onnx"&&u==="")&&t(o.version,h))return{opImpl:f,opInit:c}}}throw new TypeError(`cannot resolve operator '${r.opType}' with opsets: ${s.map(i=>`${i.domain||"ai.onnx"} v${i.version}`).join(", ")}`)}},5127:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.onnxruntime=void 0;const r=t(5686);var s,a;s=e.onnxruntime||(e.onnxruntime={}),function(i){(function(l){l[l.UNDEFINED=0]="UNDEFINED",l[l.FLOAT=1]="FLOAT",l[l.INT=2]="INT",l[l.STRING=3]="STRING",l[l.TENSOR=4]="TENSOR",l[l.GRAPH=5]="GRAPH",l[l.FLOATS=6]="FLOATS",l[l.INTS=7]="INTS",l[l.STRINGS=8]="STRINGS",l[l.TENSORS=9]="TENSORS",l[l.GRAPHS=10]="GRAPHS",l[l.SPARSE_TENSOR=11]="SPARSE_TENSOR",l[l.SPARSE_TENSORS=12]="SPARSE_TENSORS"})(i.AttributeType||(i.AttributeType={}))}((a=s.experimental||(s.experimental={})).fbs||(a.fbs={})),function(i){(function(l){(function(u){(function(h){h[h.UNKNOWN=0]="UNKNOWN",h[h.VALUE=1]="VALUE",h[h.PARAM=2]="PARAM"})(u.DimensionValueType||(u.DimensionValueType={}))})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){(function(h){h[h.UNDEFINED=0]="UNDEFINED",h[h.FLOAT=1]="FLOAT",h[h.UINT8=2]="UINT8",h[h.INT8=3]="INT8",h[h.UINT16=4]="UINT16",h[h.INT16=5]="INT16",h[h.INT32=6]="INT32",h[h.INT64=7]="INT64",h[h.STRING=8]="STRING",h[h.BOOL=9]="BOOL",h[h.FLOAT16=10]="FLOAT16",h[h.DOUBLE=11]="DOUBLE",h[h.UINT32=12]="UINT32",h[h.UINT64=13]="UINT64",h[h.COMPLEX64=14]="COMPLEX64",h[h.COMPLEX128=15]="COMPLEX128",h[h.BFLOAT16=16]="BFLOAT16",h[h.FLOAT8E4M3FN=17]="FLOAT8E4M3FN",h[h.FLOAT8E4M3FNUZ=18]="FLOAT8E4M3FNUZ",h[h.FLOAT8E5M2=19]="FLOAT8E5M2",h[h.FLOAT8E5M2FNUZ=20]="FLOAT8E5M2FNUZ"})(u.TensorDataType||(u.TensorDataType={}))})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){(function(h){h[h.Primitive=0]="Primitive",h[h.Fused=1]="Fused"})(u.NodeType||(u.NodeType={}))})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){(function(h){h[h.NONE=0]="NONE",h[h.tensor_type=1]="tensor_type",h[h.sequence_type=2]="sequence_type",h[h.map_type=3]="map_type"})(u.TypeInfoValue||(u.TypeInfoValue={}))})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsShape(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsShape(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}dim(c,o){let d=this.bb.__offset(this.bb_pos,4);return d?(o||new i.experimental.fbs.Dimension).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+d)+4*c),this.bb):null}dimLength(){let c=this.bb.__offset(this.bb_pos,4);return c?this.bb.__vector_len(this.bb_pos+c):0}static startShape(c){c.startObject(1)}static addDim(c,o){c.addFieldOffset(0,o,0)}static createDimVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startDimVector(c,o){c.startVector(4,o,4)}static endShape(c){return c.endObject()}static createShape(c,o){return h.startShape(c),h.addDim(c,o),h.endShape(c)}}u.Shape=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsDimension(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsDimension(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}value(c){let o=this.bb.__offset(this.bb_pos,4);return o?(c||new i.experimental.fbs.DimensionValue).__init(this.bb.__indirect(this.bb_pos+o),this.bb):null}denotation(c){let o=this.bb.__offset(this.bb_pos,6);return o?this.bb.__string(this.bb_pos+o,c):null}static startDimension(c){c.startObject(2)}static addValue(c,o){c.addFieldOffset(0,o,0)}static addDenotation(c,o){c.addFieldOffset(1,o,0)}static endDimension(c){return c.endObject()}static createDimension(c,o,d){return h.startDimension(c),h.addValue(c,o),h.addDenotation(c,d),h.endDimension(c)}}u.Dimension=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsDimensionValue(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsDimensionValue(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}dimType(){let c=this.bb.__offset(this.bb_pos,4);return c?this.bb.readInt8(this.bb_pos+c):i.experimental.fbs.DimensionValueType.UNKNOWN}dimValue(){let c=this.bb.__offset(this.bb_pos,6);return c?this.bb.readInt64(this.bb_pos+c):this.bb.createLong(0,0)}dimParam(c){let o=this.bb.__offset(this.bb_pos,8);return o?this.bb.__string(this.bb_pos+o,c):null}static startDimensionValue(c){c.startObject(3)}static addDimType(c,o){c.addFieldInt8(0,o,i.experimental.fbs.DimensionValueType.UNKNOWN)}static addDimValue(c,o){c.addFieldInt64(1,o,c.createLong(0,0))}static addDimParam(c,o){c.addFieldOffset(2,o,0)}static endDimensionValue(c){return c.endObject()}static createDimensionValue(c,o,d,m){return h.startDimensionValue(c),h.addDimType(c,o),h.addDimValue(c,d),h.addDimParam(c,m),h.endDimensionValue(c)}}u.DimensionValue=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsTensorTypeAndShape(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsTensorTypeAndShape(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}elemType(){let c=this.bb.__offset(this.bb_pos,4);return c?this.bb.readInt32(this.bb_pos+c):i.experimental.fbs.TensorDataType.UNDEFINED}shape(c){let o=this.bb.__offset(this.bb_pos,6);return o?(c||new i.experimental.fbs.Shape).__init(this.bb.__indirect(this.bb_pos+o),this.bb):null}static startTensorTypeAndShape(c){c.startObject(2)}static addElemType(c,o){c.addFieldInt32(0,o,i.experimental.fbs.TensorDataType.UNDEFINED)}static addShape(c,o){c.addFieldOffset(1,o,0)}static endTensorTypeAndShape(c){return c.endObject()}static createTensorTypeAndShape(c,o,d){return h.startTensorTypeAndShape(c),h.addElemType(c,o),h.addShape(c,d),h.endTensorTypeAndShape(c)}}u.TensorTypeAndShape=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsMapType(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsMapType(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}keyType(){let c=this.bb.__offset(this.bb_pos,4);return c?this.bb.readInt32(this.bb_pos+c):i.experimental.fbs.TensorDataType.UNDEFINED}valueType(c){let o=this.bb.__offset(this.bb_pos,6);return o?(c||new i.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos+o),this.bb):null}static startMapType(c){c.startObject(2)}static addKeyType(c,o){c.addFieldInt32(0,o,i.experimental.fbs.TensorDataType.UNDEFINED)}static addValueType(c,o){c.addFieldOffset(1,o,0)}static endMapType(c){return c.endObject()}static createMapType(c,o,d){return h.startMapType(c),h.addKeyType(c,o),h.addValueType(c,d),h.endMapType(c)}}u.MapType=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsSequenceType(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsSequenceType(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}elemType(c){let o=this.bb.__offset(this.bb_pos,4);return o?(c||new i.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos+o),this.bb):null}static startSequenceType(c){c.startObject(1)}static addElemType(c,o){c.addFieldOffset(0,o,0)}static endSequenceType(c){return c.endObject()}static createSequenceType(c,o){return h.startSequenceType(c),h.addElemType(c,o),h.endSequenceType(c)}}u.SequenceType=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(l.fbs||(l.fbs={})).EdgeEnd=class{constructor(){this.bb=null,this.bb_pos=0}__init(u,h){return this.bb_pos=u,this.bb=h,this}nodeIndex(){return this.bb.readUint32(this.bb_pos)}srcArgIndex(){return this.bb.readInt32(this.bb_pos+4)}dstArgIndex(){return this.bb.readInt32(this.bb_pos+8)}static createEdgeEnd(u,h,f,c){return u.prep(4,12),u.writeInt32(c),u.writeInt32(f),u.writeInt32(h),u.offset()}}})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsNodeEdge(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsNodeEdge(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}nodeIndex(){let c=this.bb.__offset(this.bb_pos,4);return c?this.bb.readUint32(this.bb_pos+c):0}inputEdges(c,o){let d=this.bb.__offset(this.bb_pos,6);return d?(o||new i.experimental.fbs.EdgeEnd).__init(this.bb.__vector(this.bb_pos+d)+12*c,this.bb):null}inputEdgesLength(){let c=this.bb.__offset(this.bb_pos,6);return c?this.bb.__vector_len(this.bb_pos+c):0}outputEdges(c,o){let d=this.bb.__offset(this.bb_pos,8);return d?(o||new i.experimental.fbs.EdgeEnd).__init(this.bb.__vector(this.bb_pos+d)+12*c,this.bb):null}outputEdgesLength(){let c=this.bb.__offset(this.bb_pos,8);return c?this.bb.__vector_len(this.bb_pos+c):0}static startNodeEdge(c){c.startObject(3)}static addNodeIndex(c,o){c.addFieldInt32(0,o,0)}static addInputEdges(c,o){c.addFieldOffset(1,o,0)}static startInputEdgesVector(c,o){c.startVector(12,o,4)}static addOutputEdges(c,o){c.addFieldOffset(2,o,0)}static startOutputEdgesVector(c,o){c.startVector(12,o,4)}static endNodeEdge(c){return c.endObject()}static createNodeEdge(c,o,d,m){return h.startNodeEdge(c),h.addNodeIndex(c,o),h.addInputEdges(c,d),h.addOutputEdges(c,m),h.endNodeEdge(c)}}u.NodeEdge=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsNode(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsNode(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}name(c){let o=this.bb.__offset(this.bb_pos,4);return o?this.bb.__string(this.bb_pos+o,c):null}docString(c){let o=this.bb.__offset(this.bb_pos,6);return o?this.bb.__string(this.bb_pos+o,c):null}domain(c){let o=this.bb.__offset(this.bb_pos,8);return o?this.bb.__string(this.bb_pos+o,c):null}sinceVersion(){let c=this.bb.__offset(this.bb_pos,10);return c?this.bb.readInt32(this.bb_pos+c):0}index(){let c=this.bb.__offset(this.bb_pos,12);return c?this.bb.readUint32(this.bb_pos+c):0}opType(c){let o=this.bb.__offset(this.bb_pos,14);return o?this.bb.__string(this.bb_pos+o,c):null}type(){let c=this.bb.__offset(this.bb_pos,16);return c?this.bb.readInt32(this.bb_pos+c):i.experimental.fbs.NodeType.Primitive}executionProviderType(c){let o=this.bb.__offset(this.bb_pos,18);return o?this.bb.__string(this.bb_pos+o,c):null}inputs(c,o){let d=this.bb.__offset(this.bb_pos,20);return d?this.bb.__string(this.bb.__vector(this.bb_pos+d)+4*c,o):null}inputsLength(){let c=this.bb.__offset(this.bb_pos,20);return c?this.bb.__vector_len(this.bb_pos+c):0}outputs(c,o){let d=this.bb.__offset(this.bb_pos,22);return d?this.bb.__string(this.bb.__vector(this.bb_pos+d)+4*c,o):null}outputsLength(){let c=this.bb.__offset(this.bb_pos,22);return c?this.bb.__vector_len(this.bb_pos+c):0}attributes(c,o){let d=this.bb.__offset(this.bb_pos,24);return d?(o||new i.experimental.fbs.Attribute).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+d)+4*c),this.bb):null}attributesLength(){let c=this.bb.__offset(this.bb_pos,24);return c?this.bb.__vector_len(this.bb_pos+c):0}inputArgCounts(c){let o=this.bb.__offset(this.bb_pos,26);return o?this.bb.readInt32(this.bb.__vector(this.bb_pos+o)+4*c):0}inputArgCountsLength(){let c=this.bb.__offset(this.bb_pos,26);return c?this.bb.__vector_len(this.bb_pos+c):0}inputArgCountsArray(){let c=this.bb.__offset(this.bb_pos,26);return c?new Int32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+c),this.bb.__vector_len(this.bb_pos+c)):null}implicitInputs(c,o){let d=this.bb.__offset(this.bb_pos,28);return d?this.bb.__string(this.bb.__vector(this.bb_pos+d)+4*c,o):null}implicitInputsLength(){let c=this.bb.__offset(this.bb_pos,28);return c?this.bb.__vector_len(this.bb_pos+c):0}static startNode(c){c.startObject(13)}static addName(c,o){c.addFieldOffset(0,o,0)}static addDocString(c,o){c.addFieldOffset(1,o,0)}static addDomain(c,o){c.addFieldOffset(2,o,0)}static addSinceVersion(c,o){c.addFieldInt32(3,o,0)}static addIndex(c,o){c.addFieldInt32(4,o,0)}static addOpType(c,o){c.addFieldOffset(5,o,0)}static addType(c,o){c.addFieldInt32(6,o,i.experimental.fbs.NodeType.Primitive)}static addExecutionProviderType(c,o){c.addFieldOffset(7,o,0)}static addInputs(c,o){c.addFieldOffset(8,o,0)}static createInputsVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startInputsVector(c,o){c.startVector(4,o,4)}static addOutputs(c,o){c.addFieldOffset(9,o,0)}static createOutputsVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startOutputsVector(c,o){c.startVector(4,o,4)}static addAttributes(c,o){c.addFieldOffset(10,o,0)}static createAttributesVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startAttributesVector(c,o){c.startVector(4,o,4)}static addInputArgCounts(c,o){c.addFieldOffset(11,o,0)}static createInputArgCountsVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addInt32(o[d]);return c.endVector()}static startInputArgCountsVector(c,o){c.startVector(4,o,4)}static addImplicitInputs(c,o){c.addFieldOffset(12,o,0)}static createImplicitInputsVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startImplicitInputsVector(c,o){c.startVector(4,o,4)}static endNode(c){return c.endObject()}static createNode(c,o,d,m,g,y,$,b,x,w,v,S,T,C){return h.startNode(c),h.addName(c,o),h.addDocString(c,d),h.addDomain(c,m),h.addSinceVersion(c,g),h.addIndex(c,y),h.addOpType(c,$),h.addType(c,b),h.addExecutionProviderType(c,x),h.addInputs(c,w),h.addOutputs(c,v),h.addAttributes(c,S),h.addInputArgCounts(c,T),h.addImplicitInputs(c,C),h.endNode(c)}}u.Node=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsValueInfo(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsValueInfo(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}name(c){let o=this.bb.__offset(this.bb_pos,4);return o?this.bb.__string(this.bb_pos+o,c):null}docString(c){let o=this.bb.__offset(this.bb_pos,6);return o?this.bb.__string(this.bb_pos+o,c):null}type(c){let o=this.bb.__offset(this.bb_pos,8);return o?(c||new i.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos+o),this.bb):null}static startValueInfo(c){c.startObject(3)}static addName(c,o){c.addFieldOffset(0,o,0)}static addDocString(c,o){c.addFieldOffset(1,o,0)}static addType(c,o){c.addFieldOffset(2,o,0)}static endValueInfo(c){return c.endObject()}static createValueInfo(c,o,d,m){return h.startValueInfo(c),h.addName(c,o),h.addDocString(c,d),h.addType(c,m),h.endValueInfo(c)}}u.ValueInfo=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsTypeInfo(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsTypeInfo(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}denotation(c){let o=this.bb.__offset(this.bb_pos,4);return o?this.bb.__string(this.bb_pos+o,c):null}valueType(){let c=this.bb.__offset(this.bb_pos,6);return c?this.bb.readUint8(this.bb_pos+c):i.experimental.fbs.TypeInfoValue.NONE}value(c){let o=this.bb.__offset(this.bb_pos,8);return o?this.bb.__union(c,this.bb_pos+o):null}static startTypeInfo(c){c.startObject(3)}static addDenotation(c,o){c.addFieldOffset(0,o,0)}static addValueType(c,o){c.addFieldInt8(1,o,i.experimental.fbs.TypeInfoValue.NONE)}static addValue(c,o){c.addFieldOffset(2,o,0)}static endTypeInfo(c){return c.endObject()}static createTypeInfo(c,o,d,m){return h.startTypeInfo(c),h.addDenotation(c,o),h.addValueType(c,d),h.addValue(c,m),h.endTypeInfo(c)}}u.TypeInfo=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsOperatorSetId(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsOperatorSetId(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}domain(c){let o=this.bb.__offset(this.bb_pos,4);return o?this.bb.__string(this.bb_pos+o,c):null}version(){let c=this.bb.__offset(this.bb_pos,6);return c?this.bb.readInt64(this.bb_pos+c):this.bb.createLong(0,0)}static startOperatorSetId(c){c.startObject(2)}static addDomain(c,o){c.addFieldOffset(0,o,0)}static addVersion(c,o){c.addFieldInt64(1,o,c.createLong(0,0))}static endOperatorSetId(c){return c.endObject()}static createOperatorSetId(c,o,d){return h.startOperatorSetId(c),h.addDomain(c,o),h.addVersion(c,d),h.endOperatorSetId(c)}}u.OperatorSetId=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsTensor(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsTensor(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}name(c){let o=this.bb.__offset(this.bb_pos,4);return o?this.bb.__string(this.bb_pos+o,c):null}docString(c){let o=this.bb.__offset(this.bb_pos,6);return o?this.bb.__string(this.bb_pos+o,c):null}dims(c){let o=this.bb.__offset(this.bb_pos,8);return o?this.bb.readInt64(this.bb.__vector(this.bb_pos+o)+8*c):this.bb.createLong(0,0)}dimsLength(){let c=this.bb.__offset(this.bb_pos,8);return c?this.bb.__vector_len(this.bb_pos+c):0}dataType(){let c=this.bb.__offset(this.bb_pos,10);return c?this.bb.readInt32(this.bb_pos+c):i.experimental.fbs.TensorDataType.UNDEFINED}rawData(c){let o=this.bb.__offset(this.bb_pos,12);return o?this.bb.readUint8(this.bb.__vector(this.bb_pos+o)+c):0}rawDataLength(){let c=this.bb.__offset(this.bb_pos,12);return c?this.bb.__vector_len(this.bb_pos+c):0}rawDataArray(){let c=this.bb.__offset(this.bb_pos,12);return c?new Uint8Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+c),this.bb.__vector_len(this.bb_pos+c)):null}stringData(c,o){let d=this.bb.__offset(this.bb_pos,14);return d?this.bb.__string(this.bb.__vector(this.bb_pos+d)+4*c,o):null}stringDataLength(){let c=this.bb.__offset(this.bb_pos,14);return c?this.bb.__vector_len(this.bb_pos+c):0}static startTensor(c){c.startObject(6)}static addName(c,o){c.addFieldOffset(0,o,0)}static addDocString(c,o){c.addFieldOffset(1,o,0)}static addDims(c,o){c.addFieldOffset(2,o,0)}static createDimsVector(c,o){c.startVector(8,o.length,8);for(let d=o.length-1;d>=0;d--)c.addInt64(o[d]);return c.endVector()}static startDimsVector(c,o){c.startVector(8,o,8)}static addDataType(c,o){c.addFieldInt32(3,o,i.experimental.fbs.TensorDataType.UNDEFINED)}static addRawData(c,o){c.addFieldOffset(4,o,0)}static createRawDataVector(c,o){c.startVector(1,o.length,1);for(let d=o.length-1;d>=0;d--)c.addInt8(o[d]);return c.endVector()}static startRawDataVector(c,o){c.startVector(1,o,1)}static addStringData(c,o){c.addFieldOffset(5,o,0)}static createStringDataVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startStringDataVector(c,o){c.startVector(4,o,4)}static endTensor(c){return c.endObject()}static createTensor(c,o,d,m,g,y,$){return h.startTensor(c),h.addName(c,o),h.addDocString(c,d),h.addDims(c,m),h.addDataType(c,g),h.addRawData(c,y),h.addStringData(c,$),h.endTensor(c)}}u.Tensor=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsSparseTensor(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsSparseTensor(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}values(c){let o=this.bb.__offset(this.bb_pos,4);return o?(c||new i.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos+o),this.bb):null}indices(c){let o=this.bb.__offset(this.bb_pos,6);return o?(c||new i.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos+o),this.bb):null}dims(c){let o=this.bb.__offset(this.bb_pos,8);return o?this.bb.readInt64(this.bb.__vector(this.bb_pos+o)+8*c):this.bb.createLong(0,0)}dimsLength(){let c=this.bb.__offset(this.bb_pos,8);return c?this.bb.__vector_len(this.bb_pos+c):0}static startSparseTensor(c){c.startObject(3)}static addValues(c,o){c.addFieldOffset(0,o,0)}static addIndices(c,o){c.addFieldOffset(1,o,0)}static addDims(c,o){c.addFieldOffset(2,o,0)}static createDimsVector(c,o){c.startVector(8,o.length,8);for(let d=o.length-1;d>=0;d--)c.addInt64(o[d]);return c.endVector()}static startDimsVector(c,o){c.startVector(8,o,8)}static endSparseTensor(c){return c.endObject()}static createSparseTensor(c,o,d,m){return h.startSparseTensor(c),h.addValues(c,o),h.addIndices(c,d),h.addDims(c,m),h.endSparseTensor(c)}}u.SparseTensor=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsAttribute(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsAttribute(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}name(c){let o=this.bb.__offset(this.bb_pos,4);return o?this.bb.__string(this.bb_pos+o,c):null}docString(c){let o=this.bb.__offset(this.bb_pos,6);return o?this.bb.__string(this.bb_pos+o,c):null}type(){let c=this.bb.__offset(this.bb_pos,8);return c?this.bb.readInt32(this.bb_pos+c):i.experimental.fbs.AttributeType.UNDEFINED}f(){let c=this.bb.__offset(this.bb_pos,10);return c?this.bb.readFloat32(this.bb_pos+c):0}i(){let c=this.bb.__offset(this.bb_pos,12);return c?this.bb.readInt64(this.bb_pos+c):this.bb.createLong(0,0)}s(c){let o=this.bb.__offset(this.bb_pos,14);return o?this.bb.__string(this.bb_pos+o,c):null}t(c){let o=this.bb.__offset(this.bb_pos,16);return o?(c||new i.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos+o),this.bb):null}g(c){let o=this.bb.__offset(this.bb_pos,18);return o?(c||new i.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb_pos+o),this.bb):null}floats(c){let o=this.bb.__offset(this.bb_pos,20);return o?this.bb.readFloat32(this.bb.__vector(this.bb_pos+o)+4*c):0}floatsLength(){let c=this.bb.__offset(this.bb_pos,20);return c?this.bb.__vector_len(this.bb_pos+c):0}floatsArray(){let c=this.bb.__offset(this.bb_pos,20);return c?new Float32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+c),this.bb.__vector_len(this.bb_pos+c)):null}ints(c){let o=this.bb.__offset(this.bb_pos,22);return o?this.bb.readInt64(this.bb.__vector(this.bb_pos+o)+8*c):this.bb.createLong(0,0)}intsLength(){let c=this.bb.__offset(this.bb_pos,22);return c?this.bb.__vector_len(this.bb_pos+c):0}strings(c,o){let d=this.bb.__offset(this.bb_pos,24);return d?this.bb.__string(this.bb.__vector(this.bb_pos+d)+4*c,o):null}stringsLength(){let c=this.bb.__offset(this.bb_pos,24);return c?this.bb.__vector_len(this.bb_pos+c):0}tensors(c,o){let d=this.bb.__offset(this.bb_pos,26);return d?(o||new i.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+d)+4*c),this.bb):null}tensorsLength(){let c=this.bb.__offset(this.bb_pos,26);return c?this.bb.__vector_len(this.bb_pos+c):0}graphs(c,o){let d=this.bb.__offset(this.bb_pos,28);return d?(o||new i.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+d)+4*c),this.bb):null}graphsLength(){let c=this.bb.__offset(this.bb_pos,28);return c?this.bb.__vector_len(this.bb_pos+c):0}static startAttribute(c){c.startObject(13)}static addName(c,o){c.addFieldOffset(0,o,0)}static addDocString(c,o){c.addFieldOffset(1,o,0)}static addType(c,o){c.addFieldInt32(2,o,i.experimental.fbs.AttributeType.UNDEFINED)}static addF(c,o){c.addFieldFloat32(3,o,0)}static addI(c,o){c.addFieldInt64(4,o,c.createLong(0,0))}static addS(c,o){c.addFieldOffset(5,o,0)}static addT(c,o){c.addFieldOffset(6,o,0)}static addG(c,o){c.addFieldOffset(7,o,0)}static addFloats(c,o){c.addFieldOffset(8,o,0)}static createFloatsVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addFloat32(o[d]);return c.endVector()}static startFloatsVector(c,o){c.startVector(4,o,4)}static addInts(c,o){c.addFieldOffset(9,o,0)}static createIntsVector(c,o){c.startVector(8,o.length,8);for(let d=o.length-1;d>=0;d--)c.addInt64(o[d]);return c.endVector()}static startIntsVector(c,o){c.startVector(8,o,8)}static addStrings(c,o){c.addFieldOffset(10,o,0)}static createStringsVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startStringsVector(c,o){c.startVector(4,o,4)}static addTensors(c,o){c.addFieldOffset(11,o,0)}static createTensorsVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startTensorsVector(c,o){c.startVector(4,o,4)}static addGraphs(c,o){c.addFieldOffset(12,o,0)}static createGraphsVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startGraphsVector(c,o){c.startVector(4,o,4)}static endAttribute(c){return c.endObject()}static createAttribute(c,o,d,m,g,y,$,b,x,w,v,S,T,C){return h.startAttribute(c),h.addName(c,o),h.addDocString(c,d),h.addType(c,m),h.addF(c,g),h.addI(c,y),h.addS(c,$),h.addT(c,b),h.addG(c,x),h.addFloats(c,w),h.addInts(c,v),h.addStrings(c,S),h.addTensors(c,T),h.addGraphs(c,C),h.endAttribute(c)}}u.Attribute=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsGraph(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsGraph(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}initializers(c,o){let d=this.bb.__offset(this.bb_pos,4);return d?(o||new i.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+d)+4*c),this.bb):null}initializersLength(){let c=this.bb.__offset(this.bb_pos,4);return c?this.bb.__vector_len(this.bb_pos+c):0}nodeArgs(c,o){let d=this.bb.__offset(this.bb_pos,6);return d?(o||new i.experimental.fbs.ValueInfo).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+d)+4*c),this.bb):null}nodeArgsLength(){let c=this.bb.__offset(this.bb_pos,6);return c?this.bb.__vector_len(this.bb_pos+c):0}nodes(c,o){let d=this.bb.__offset(this.bb_pos,8);return d?(o||new i.experimental.fbs.Node).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+d)+4*c),this.bb):null}nodesLength(){let c=this.bb.__offset(this.bb_pos,8);return c?this.bb.__vector_len(this.bb_pos+c):0}maxNodeIndex(){let c=this.bb.__offset(this.bb_pos,10);return c?this.bb.readUint32(this.bb_pos+c):0}nodeEdges(c,o){let d=this.bb.__offset(this.bb_pos,12);return d?(o||new i.experimental.fbs.NodeEdge).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+d)+4*c),this.bb):null}nodeEdgesLength(){let c=this.bb.__offset(this.bb_pos,12);return c?this.bb.__vector_len(this.bb_pos+c):0}inputs(c,o){let d=this.bb.__offset(this.bb_pos,14);return d?this.bb.__string(this.bb.__vector(this.bb_pos+d)+4*c,o):null}inputsLength(){let c=this.bb.__offset(this.bb_pos,14);return c?this.bb.__vector_len(this.bb_pos+c):0}outputs(c,o){let d=this.bb.__offset(this.bb_pos,16);return d?this.bb.__string(this.bb.__vector(this.bb_pos+d)+4*c,o):null}outputsLength(){let c=this.bb.__offset(this.bb_pos,16);return c?this.bb.__vector_len(this.bb_pos+c):0}sparseInitializers(c,o){let d=this.bb.__offset(this.bb_pos,18);return d?(o||new i.experimental.fbs.SparseTensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+d)+4*c),this.bb):null}sparseInitializersLength(){let c=this.bb.__offset(this.bb_pos,18);return c?this.bb.__vector_len(this.bb_pos+c):0}static startGraph(c){c.startObject(8)}static addInitializers(c,o){c.addFieldOffset(0,o,0)}static createInitializersVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startInitializersVector(c,o){c.startVector(4,o,4)}static addNodeArgs(c,o){c.addFieldOffset(1,o,0)}static createNodeArgsVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startNodeArgsVector(c,o){c.startVector(4,o,4)}static addNodes(c,o){c.addFieldOffset(2,o,0)}static createNodesVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startNodesVector(c,o){c.startVector(4,o,4)}static addMaxNodeIndex(c,o){c.addFieldInt32(3,o,0)}static addNodeEdges(c,o){c.addFieldOffset(4,o,0)}static createNodeEdgesVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startNodeEdgesVector(c,o){c.startVector(4,o,4)}static addInputs(c,o){c.addFieldOffset(5,o,0)}static createInputsVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startInputsVector(c,o){c.startVector(4,o,4)}static addOutputs(c,o){c.addFieldOffset(6,o,0)}static createOutputsVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startOutputsVector(c,o){c.startVector(4,o,4)}static addSparseInitializers(c,o){c.addFieldOffset(7,o,0)}static createSparseInitializersVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startSparseInitializersVector(c,o){c.startVector(4,o,4)}static endGraph(c){return c.endObject()}static createGraph(c,o,d,m,g,y,$,b,x){return h.startGraph(c),h.addInitializers(c,o),h.addNodeArgs(c,d),h.addNodes(c,m),h.addMaxNodeIndex(c,g),h.addNodeEdges(c,y),h.addInputs(c,$),h.addOutputs(c,b),h.addSparseInitializers(c,x),h.endGraph(c)}}u.Graph=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsModel(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsModel(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}irVersion(){let c=this.bb.__offset(this.bb_pos,4);return c?this.bb.readInt64(this.bb_pos+c):this.bb.createLong(0,0)}opsetImport(c,o){let d=this.bb.__offset(this.bb_pos,6);return d?(o||new i.experimental.fbs.OperatorSetId).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+d)+4*c),this.bb):null}opsetImportLength(){let c=this.bb.__offset(this.bb_pos,6);return c?this.bb.__vector_len(this.bb_pos+c):0}producerName(c){let o=this.bb.__offset(this.bb_pos,8);return o?this.bb.__string(this.bb_pos+o,c):null}producerVersion(c){let o=this.bb.__offset(this.bb_pos,10);return o?this.bb.__string(this.bb_pos+o,c):null}domain(c){let o=this.bb.__offset(this.bb_pos,12);return o?this.bb.__string(this.bb_pos+o,c):null}modelVersion(){let c=this.bb.__offset(this.bb_pos,14);return c?this.bb.readInt64(this.bb_pos+c):this.bb.createLong(0,0)}docString(c){let o=this.bb.__offset(this.bb_pos,16);return o?this.bb.__string(this.bb_pos+o,c):null}graph(c){let o=this.bb.__offset(this.bb_pos,18);return o?(c||new i.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb_pos+o),this.bb):null}graphDocString(c){let o=this.bb.__offset(this.bb_pos,20);return o?this.bb.__string(this.bb_pos+o,c):null}static startModel(c){c.startObject(9)}static addIrVersion(c,o){c.addFieldInt64(0,o,c.createLong(0,0))}static addOpsetImport(c,o){c.addFieldOffset(1,o,0)}static createOpsetImportVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startOpsetImportVector(c,o){c.startVector(4,o,4)}static addProducerName(c,o){c.addFieldOffset(2,o,0)}static addProducerVersion(c,o){c.addFieldOffset(3,o,0)}static addDomain(c,o){c.addFieldOffset(4,o,0)}static addModelVersion(c,o){c.addFieldInt64(5,o,c.createLong(0,0))}static addDocString(c,o){c.addFieldOffset(6,o,0)}static addGraph(c,o){c.addFieldOffset(7,o,0)}static addGraphDocString(c,o){c.addFieldOffset(8,o,0)}static endModel(c){return c.endObject()}static createModel(c,o,d,m,g,y,$,b,x,w){return h.startModel(c),h.addIrVersion(c,o),h.addOpsetImport(c,d),h.addProducerName(c,m),h.addProducerVersion(c,g),h.addDomain(c,y),h.addModelVersion(c,$),h.addDocString(c,b),h.addGraph(c,x),h.addGraphDocString(c,w),h.endModel(c)}}u.Model=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsKernelCreateInfos(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsKernelCreateInfos(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}nodeIndices(c){let o=this.bb.__offset(this.bb_pos,4);return o?this.bb.readUint32(this.bb.__vector(this.bb_pos+o)+4*c):0}nodeIndicesLength(){let c=this.bb.__offset(this.bb_pos,4);return c?this.bb.__vector_len(this.bb_pos+c):0}nodeIndicesArray(){let c=this.bb.__offset(this.bb_pos,4);return c?new Uint32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+c),this.bb.__vector_len(this.bb_pos+c)):null}kernelDefHashes(c){let o=this.bb.__offset(this.bb_pos,6);return o?this.bb.readUint64(this.bb.__vector(this.bb_pos+o)+8*c):this.bb.createLong(0,0)}kernelDefHashesLength(){let c=this.bb.__offset(this.bb_pos,6);return c?this.bb.__vector_len(this.bb_pos+c):0}static startKernelCreateInfos(c){c.startObject(2)}static addNodeIndices(c,o){c.addFieldOffset(0,o,0)}static createNodeIndicesVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addInt32(o[d]);return c.endVector()}static startNodeIndicesVector(c,o){c.startVector(4,o,4)}static addKernelDefHashes(c,o){c.addFieldOffset(1,o,0)}static createKernelDefHashesVector(c,o){c.startVector(8,o.length,8);for(let d=o.length-1;d>=0;d--)c.addInt64(o[d]);return c.endVector()}static startKernelDefHashesVector(c,o){c.startVector(8,o,8)}static endKernelCreateInfos(c){return c.endObject()}static createKernelCreateInfos(c,o,d){return h.startKernelCreateInfos(c),h.addNodeIndices(c,o),h.addKernelDefHashes(c,d),h.endKernelCreateInfos(c)}}u.KernelCreateInfos=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsSubGraphSessionState(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsSubGraphSessionState(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}graphId(c){let o=this.bb.__offset(this.bb_pos,4);return o?this.bb.__string(this.bb_pos+o,c):null}sessionState(c){let o=this.bb.__offset(this.bb_pos,6);return o?(c||new i.experimental.fbs.SessionState).__init(this.bb.__indirect(this.bb_pos+o),this.bb):null}static startSubGraphSessionState(c){c.startObject(2)}static addGraphId(c,o){c.addFieldOffset(0,o,0)}static addSessionState(c,o){c.addFieldOffset(1,o,0)}static endSubGraphSessionState(c){let o=c.endObject();return c.requiredField(o,4),o}static createSubGraphSessionState(c,o,d){return h.startSubGraphSessionState(c),h.addGraphId(c,o),h.addSessionState(c,d),h.endSubGraphSessionState(c)}}u.SubGraphSessionState=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsSessionState(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsSessionState(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}kernels(c){let o=this.bb.__offset(this.bb_pos,4);return o?(c||new i.experimental.fbs.KernelCreateInfos).__init(this.bb.__indirect(this.bb_pos+o),this.bb):null}subGraphSessionStates(c,o){let d=this.bb.__offset(this.bb_pos,6);return d?(o||new i.experimental.fbs.SubGraphSessionState).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+d)+4*c),this.bb):null}subGraphSessionStatesLength(){let c=this.bb.__offset(this.bb_pos,6);return c?this.bb.__vector_len(this.bb_pos+c):0}static startSessionState(c){c.startObject(2)}static addKernels(c,o){c.addFieldOffset(0,o,0)}static addSubGraphSessionStates(c,o){c.addFieldOffset(1,o,0)}static createSubGraphSessionStatesVector(c,o){c.startVector(4,o.length,4);for(let d=o.length-1;d>=0;d--)c.addOffset(o[d]);return c.endVector()}static startSubGraphSessionStatesVector(c,o){c.startVector(4,o,4)}static endSessionState(c){return c.endObject()}static createSessionState(c,o,d){return h.startSessionState(c),h.addKernels(c,o),h.addSubGraphSessionStates(c,d),h.endSessionState(c)}}u.SessionState=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(i){(function(l){(function(u){class h{constructor(){this.bb=null,this.bb_pos=0}__init(c,o){return this.bb_pos=c,this.bb=o,this}static getRootAsInferenceSession(c,o){return(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static getSizePrefixedRootAsInferenceSession(c,o){return c.setPosition(c.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(o||new h).__init(c.readInt32(c.position())+c.position(),c)}static bufferHasIdentifier(c){return c.__has_identifier("ORTM")}ortVersion(c){let o=this.bb.__offset(this.bb_pos,4);return o?this.bb.__string(this.bb_pos+o,c):null}model(c){let o=this.bb.__offset(this.bb_pos,6);return o?(c||new i.experimental.fbs.Model).__init(this.bb.__indirect(this.bb_pos+o),this.bb):null}sessionState(c){let o=this.bb.__offset(this.bb_pos,8);return o?(c||new i.experimental.fbs.SessionState).__init(this.bb.__indirect(this.bb_pos+o),this.bb):null}static startInferenceSession(c){c.startObject(3)}static addOrtVersion(c,o){c.addFieldOffset(0,o,0)}static addModel(c,o){c.addFieldOffset(1,o,0)}static addSessionState(c,o){c.addFieldOffset(2,o,0)}static endInferenceSession(c){return c.endObject()}static finishInferenceSessionBuffer(c,o){c.finish(o,"ORTM")}static finishSizePrefixedInferenceSessionBuffer(c,o){c.finish(o,"ORTM",!0)}static createInferenceSession(c,o,d,m){return h.startInferenceSession(c),h.addOrtVersion(c,o),h.addModel(c,d),h.addSessionState(c,m),h.endInferenceSession(c)}}u.InferenceSession=h})(l.fbs||(l.fbs={}))})(i.experimental||(i.experimental={}))}(e.onnxruntime||(e.onnxruntime={}))},1723:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OnnxjsSessionHandler=void 0;const r=t(2235),s=t(9240);e.OnnxjsSessionHandler=class{constructor(a){this.session=a,this.inputNames=this.session.inputNames,this.outputNames=this.session.outputNames}async dispose(){}async run(a,i,l){const u=new Map;for(const c in a)if(Object.hasOwnProperty.call(a,c)){const o=a[c];u.set(c,new s.Tensor(o.dims,o.type,void 0,void 0,o.data))}const h=await this.session.run(u),f={};return h.forEach((c,o)=>{f[o]=new r.Tensor(c.type,c.data,c.dims)}),f}startProfiling(){this.session.startProfiling()}endProfiling(){this.session.endProfiling()}}},6027:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Session=void 0;const r=t(7067),s=t(1296),a=t(1975),i=t(6496),l=t(1315),u=t(1745);e.Session=class{constructor(h={}){this._initialized=!1,this.backendHint=h.backendHint,this.profiler=l.Profiler.create(h.profiler),this.context={profiler:this.profiler,graphInputTypes:[],graphInputDims:[]}}get inputNames(){return this._model.graph.getInputNames()}get outputNames(){return this._model.graph.getOutputNames()}startProfiling(){this.profiler.start()}endProfiling(){this.profiler.stop()}async loadModel(h,f,c){await this.profiler.event("session","Session.loadModel",async()=>{const o=await(0,a.resolveBackend)(this.backendHint);if(this.sessionHandler=o.createSessionHandler(this.context),this._model=new u.Model,typeof h=="string"){const d=h.endsWith(".ort");if(typeof process<"u"&&process.versions&&process.versions.node){const m=await(0,s.promisify)(r.readFile)(h);this.initialize(m,d)}else{const m=await fetch(h),g=await m.arrayBuffer();this.initialize(new Uint8Array(g),d)}}else if(ArrayBuffer.isView(h))this.initialize(h);else{const d=new Uint8Array(h,f||0,c||h.byteLength);this.initialize(d)}})}initialize(h,f){if(this._initialized)throw new Error("already initialized");this.profiler.event("session","Session.initialize",()=>{const c=this.sessionHandler.transformGraph?this.sessionHandler:void 0;this._model.load(h,c,f),this.sessionHandler.onGraphInitialized&&this.sessionHandler.onGraphInitialized(this._model.graph),this.initializeOps(this._model.graph),this._executionPlan=new i.ExecutionPlan(this._model.graph,this._ops,this.profiler)}),this._initialized=!0}async run(h){if(!this._initialized)throw new Error("session not initialized yet");return this.profiler.event("session","Session.run",async()=>{const f=this.normalizeAndValidateInputs(h),c=await this._executionPlan.execute(this.sessionHandler,f);return this.createOutput(c)})}normalizeAndValidateInputs(h){const f=this._model.graph.getInputNames();if(Array.isArray(h)){if(h.length!==f.length)throw new Error(`incorrect input array length: expected ${f.length} but got ${h.length}`)}else{if(h.size!==f.length)throw new Error(`incorrect input map size: expected ${f.length} but got ${h.size}`);const c=new Array(h.size);let o=0;for(let d=0;d<f.length;++d){const m=h.get(f[d]);if(!m)throw new Error(`missing input tensor for: '${name}'`);c[o++]=m}h=c}if(this.context.graphInputTypes&&this.context.graphInputTypes.length!==0&&this.context.graphInputDims&&this.context.graphInputDims.length!==0)this.validateInputTensorDims(this.context.graphInputDims,h,!1);else{const c=this._model.graph.getInputIndices(),o=this._model.graph.getValues(),d=new Array(c.length);for(let m=0;m<c.length;++m){const g=o[c[m]];d[m]=g.type.shape.dims,this.context.graphInputTypes.push(g.type.tensorType),this.context.graphInputDims.push(h[m].dims)}this.validateInputTensorDims(d,h,!0)}return this.validateInputTensorTypes(this.context.graphInputTypes,h),h}validateInputTensorTypes(h,f){for(let c=0;c<f.length;c++){const o=h[c],d=f[c].type;if(o!==d)throw new Error(`input tensor[${c}] check failed: expected type '${o}' but got ${d}`)}}validateInputTensorDims(h,f,c){for(let o=0;o<f.length;o++){const d=h[o],m=f[o].dims;if(!this.compareTensorDims(d,m,c))throw new Error(`input tensor[${o}] check failed: expected shape '[${d.join(",")}]' but got [${m.join(",")}]`)}}compareTensorDims(h,f,c){if(h.length!==f.length)return!1;for(let o=0;o<h.length;++o)if(h[o]!==f[o]&&(!c||h[o]!==0))return!1;return!0}createOutput(h){const f=this._model.graph.getOutputNames();if(h.length!==f.length)throw new Error("expected number of outputs do not match number of generated outputs");const c=new Map;for(let o=0;o<f.length;++o)c.set(f[o],h[o]);return c}initializeOps(h){const f=h.getNodes();this._ops=new Array(f.length);for(let c=0;c<f.length;c++)this._ops[c]=this.sessionHandler.resolve(f[c],this._model.opsets,h)}}},9240:function(n,e,t){var r=this&&this.__importDefault||function(g){return g&&g.__esModule?g:{default:g}};Object.defineProperty(e,"__esModule",{value:!0}),e.Tensor=void 0;const s=t(3442),a=r(t(1583)),i=t(5127),l=t(2446),u=t(7273);var h=i.onnxruntime.experimental.fbs;class f{get data(){if(this.cache===void 0){const y=this.dataProvider(this.dataId);if(y.length!==this.size)throw new Error("Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.");this.cache=y}return this.cache}get stringData(){if(this.type!=="string")throw new TypeError("data type is not string");return this.data}get integerData(){switch(this.type){case"uint8":case"int8":case"uint16":case"int16":case"int32":case"uint32":case"bool":return this.data;default:throw new TypeError("data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)")}}get floatData(){switch(this.type){case"float32":case"float64":return this.data;default:throw new TypeError("data type is not float (float32, float64)")}}get numberData(){if(this.type!=="string")return this.data;throw new TypeError("type cannot be non-number (string)")}get(y){return this.data[u.ShapeUtil.indicesToOffset(y,this.strides)]}set(y,$){this.data[u.ShapeUtil.indicesToOffset(y,this.strides)]=$}async getData(){return this.cache===void 0&&(this.cache=await this.asyncDataProvider(this.dataId)),this.cache}get strides(){return this._strides||(this._strides=u.ShapeUtil.computeStrides(this.dims)),this._strides}constructor(y,$,b,x,w,v=s.Guid.create()){this.dims=y,this.type=$,this.dataProvider=b,this.asyncDataProvider=x,this.cache=w,this.dataId=v,this.size=u.ShapeUtil.validateDimsAndCalcSize(y);const S=this.size,T=b===void 0&&x===void 0&&w===void 0;if(w!==void 0&&w.length!==S)throw new RangeError("Input dims doesn't match data length.");if($==="string"){if(!(w===void 0||Array.isArray(w)&&w.every(C=>typeof C=="string")))throw new TypeError("cache should be a string array");T&&(this.cache=new Array(S))}else{if(w!==void 0){const C=o($);if(!(w instanceof C))throw new TypeError(`cache should be type ${C.name}`)}if(T){const C=new ArrayBuffer(S*function(I){switch(I){case"bool":case"int8":case"uint8":return 1;case"int16":case"uint16":return 2;case"int32":case"uint32":case"float32":return 4;case"float64":return 8;default:throw new Error(`cannot calculate sizeof() on type ${I}`)}}($));this.cache=function(I,N){return new(o(N))(I)}(C,$)}}}static fromProto(y){if(!y)throw new Error("cannot construct Value from an empty tensor");const $=u.ProtoUtil.tensorDataTypeFromProto(y.dataType),b=u.ProtoUtil.tensorDimsFromProto(y.dims),x=new f(b,$);if($==="string")y.stringData.forEach((w,v)=>{x.data[v]=(0,u.decodeUtf8String)(w)});else if(y.rawData&&typeof y.rawData.byteLength=="number"&&y.rawData.byteLength>0){const w=x.data,v=new DataView(y.rawData.buffer,y.rawData.byteOffset,y.rawData.byteLength),S=c(y.dataType),T=y.rawData.byteLength/S;if(y.rawData.byteLength%S!=0)throw new Error("invalid buffer length");if(w.length!==T)throw new Error("buffer length mismatch");for(let C=0;C<T;C++){const I=m(v,y.dataType,C*S);w[C]=I}}else{let w;switch(y.dataType){case l.onnx.TensorProto.DataType.FLOAT:w=y.floatData;break;case l.onnx.TensorProto.DataType.INT32:case l.onnx.TensorProto.DataType.INT16:case l.onnx.TensorProto.DataType.UINT16:case l.onnx.TensorProto.DataType.INT8:case l.onnx.TensorProto.DataType.UINT8:case l.onnx.TensorProto.DataType.BOOL:w=y.int32Data;break;case l.onnx.TensorProto.DataType.INT64:w=y.int64Data;break;case l.onnx.TensorProto.DataType.DOUBLE:w=y.doubleData;break;case l.onnx.TensorProto.DataType.UINT32:case l.onnx.TensorProto.DataType.UINT64:w=y.uint64Data;break;default:throw new Error("unspecific error")}if(w==null)throw new Error("failed to populate data from a tensorproto value");const v=x.data;if(v.length!==w.length)throw new Error("array length mismatch");for(let S=0;S<w.length;S++){const T=w[S];a.default.isLong(T)?v[S]=d(T,y.dataType):v[S]=T}}return x}static fromData(y,$,b){return new f($,b,void 0,void 0,y)}static fromOrtTensor(y){if(!y)throw new Error("cannot construct Value from an empty tensor");const $=u.ProtoUtil.tensorDimsFromORTFormat(y),b=u.ProtoUtil.tensorDataTypeFromProto(y.dataType()),x=new f($,b);if(b==="string")for(let w=0;w<y.stringDataLength();w++)x.data[w]=y.stringData(w);else if(y.rawDataArray()&&typeof y.rawDataLength()=="number"&&y.rawDataLength()>0){const w=x.data,v=new DataView(y.rawDataArray().buffer,y.rawDataArray().byteOffset,y.rawDataLength()),S=c(y.dataType()),T=y.rawDataLength()/S;if(y.rawDataLength()%S!=0)throw new Error("invalid buffer length");if(w.length!==T)throw new Error("buffer length mismatch");for(let C=0;C<T;C++){const I=m(v,y.dataType(),C*S);w[C]=I}}return x}}function c(g){switch(g){case l.onnx.TensorProto.DataType.UINT8:case l.onnx.TensorProto.DataType.INT8:case l.onnx.TensorProto.DataType.BOOL:return 1;case l.onnx.TensorProto.DataType.UINT16:case l.onnx.TensorProto.DataType.INT16:return 2;case l.onnx.TensorProto.DataType.FLOAT:case l.onnx.TensorProto.DataType.INT32:case l.onnx.TensorProto.DataType.UINT32:return 4;case l.onnx.TensorProto.DataType.INT64:case l.onnx.TensorProto.DataType.DOUBLE:case l.onnx.TensorProto.DataType.UINT64:return 8;default:throw new Error(`cannot calculate sizeof() on type ${l.onnx.TensorProto.DataType[g]}`)}}function o(g){switch(g){case"bool":case"uint8":return Uint8Array;case"int8":return Int8Array;case"int16":return Int16Array;case"uint16":return Uint16Array;case"int32":return Int32Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"float32":return Float32Array;case"float64":return Float64Array;default:throw new Error("unspecified error")}}function d(g,y){if(y===l.onnx.TensorProto.DataType.INT64||y===h.TensorDataType.INT64){if(g.greaterThanOrEqual(2147483648)||g.lessThan(-2147483648))throw new TypeError("int64 is not supported")}else{if(y!==l.onnx.TensorProto.DataType.UINT32&&y!==h.TensorDataType.UINT32&&y!==l.onnx.TensorProto.DataType.UINT64&&y!==h.TensorDataType.UINT64)throw new TypeError(`not a LONG type: ${l.onnx.TensorProto.DataType[y]}`);if(g.greaterThanOrEqual(4294967296)||g.lessThan(0))throw new TypeError("uint64 is not supported")}return g.toNumber()}function m(g,y,$){switch(y){case l.onnx.TensorProto.DataType.BOOL:case l.onnx.TensorProto.DataType.UINT8:return g.getUint8($);case l.onnx.TensorProto.DataType.INT8:return g.getInt8($);case l.onnx.TensorProto.DataType.UINT16:return g.getUint16($,!0);case l.onnx.TensorProto.DataType.INT16:return g.getInt16($,!0);case l.onnx.TensorProto.DataType.FLOAT:return g.getFloat32($,!0);case l.onnx.TensorProto.DataType.INT32:return g.getInt32($,!0);case l.onnx.TensorProto.DataType.UINT32:return g.getUint32($,!0);case l.onnx.TensorProto.DataType.INT64:return d(a.default.fromBits(g.getUint32($,!0),g.getUint32($+4,!0),!1),y);case l.onnx.TensorProto.DataType.DOUBLE:return g.getFloat64($,!0);case l.onnx.TensorProto.DataType.UINT64:return d(a.default.fromBits(g.getUint32($,!0),g.getUint32($+4,!0),!0),y);default:throw new Error(`cannot read from DataView for type ${l.onnx.TensorProto.DataType[y]}`)}}e.Tensor=f},7273:function(n,e,t){var r=this&&this.__importDefault||function(y){return y&&y.__esModule?y:{default:y}};Object.defineProperty(e,"__esModule",{value:!0}),e.decodeUtf8String=e.MAX_CLIP=e.MIN_CLIP=e.PoolConvUtil=e.ReduceUtil=e.SplitUtil=e.MathUtil=e.ShapeUtil=e.LongUtil=e.ProtoUtil=e.GemmUtil=e.arrayCopyHelper=e.BroadcastUtil=e.MatMulUtil=e.ArrayUtil=e.assert=e.checkInputsShape=void 0;const s=t(5686),a=r(t(1583)),i=t(2446),l=t(9240);e.checkInputsShape=function(y,...$){if(!y||y.length!==$.length)return!1;for(let b=0;b<y.length;b++)if(!y[b].dims||y[b].dims.length!==$[b])return!1;return!0},e.assert=function(y,$){if(!y)throw new Error(typeof $=="string"?$:$())},e.ArrayUtil=class{static arraysEqual(y,$){if(y.length!==$.length)return!1;for(let b=0;b<y.length;b++)if(y[b]!==$[b])return!1;return!0}};class u{static preprocessInputShapes($,b){return[$.length===1?[1,$[0]]:$,b.length===1?[b[0],1]:b]}static postprocessOutputShape($,b,x){b===1&&$.splice($.length-2,1),x===1&&$.pop()}static calcMatMulShape($,b){return $[1]!==b[0]?void 0:[$[0],b[1]]}}e.MatMulUtil=u;class h{static calcShape($,b,x=!1){const w=$.length,v=b.length;if(w===0)return b;if(v===0)return $;const S=Math.max($.length,b.length),T=new Array(S);if(x){if(w<2||v<2)return;const C=u.calcMatMulShape([$[w-2],$[w-1]],[b[v-2],b[v-1]]);if(C===void 0)return;[T[S-2],T[S-1]]=C}for(let C=x?3:1;C<=S;C++){const I=w-C<0?1:$[w-C],N=v-C<0?1:b[v-C];if(I!==N&&I>1&&N>1)return;T[S-C]=Math.max(I,N)}return T}static index($,b){const x=new Array(b.length);return h.fillIndex($,b,x),x}static fillIndex($,b,x){const w=$.length-b.length;for(let v=0;v<b.length;v++)x[v]=$[w+v]%b[v]}static calc($,b,x,w,v){const S=h.calcShape($.dims,b.dims);if(S){if(w&&!o.areEqual(S,$.dims))return;const T=o.size(S),C=w?$:new l.Tensor(S,v||$.type);if(S.length===0)C.set([],x($.get([]),b.get([])));else{const I=new Array(S.length),N=new Array($.dims.length),P=new Array(b.dims.length);let F,_=0,D=0,E=!1,k=!1;$.dims.length===0&&(_=$.get([]),E=!0),b.dims.length===0&&(D=b.get([]),k=!0);for(let O=0;O<T;O++){F=O;for(let M=S.length-1;M>=0;M--)I[M]=F%S[M],F=Math.floor(F/S[M]);E||(h.fillIndex(I,$.dims,N),_=$.get(N)),k||(h.fillIndex(I,b.dims,P),D=b.get(P)),C.set(I,x(_,D))}}return C}}static isValidBroadcast($,b){const x=$.length,w=b.length;if(x>w)return!1;for(let v=1;v<=x;v++)if($[x-v]!==1&&$[x-v]!==b[w-v])return!1;return!0}static getBroadcastDims($,b){const x=$.length,w=[];for(let v=0;v<x;v++){const S=x-1-v,T=$[S]||1;(b[b.length-1-v]||1)>1&&T===1&&w.unshift(S)}return w}}e.BroadcastUtil=h,e.arrayCopyHelper=function(y,$,b,x,w){if(x<0||x>=$.length)throw new Error("sourceIndex out of bounds");if(b<0||b>=y.length)throw new Error("targetIndex out of bounds");if(x+w>$.length)throw new Error("source indices to be copied are outside bounds");if(b+w>y.length)throw new Error("target array is too small to hold result");for(let v=0;v<w;v++)y[b+v]=$[x+v]},e.GemmUtil=class{static getShapeOfGemmResult(y,$,b,x,w){if(y.length!==2||b.length!==2)throw new Error("shape need to be of size 2");let v,S,T;$?(v=y[1],S=y[0]):(v=y[0],S=y[1]);let C=-1;if(x?(T=b[0],C=1):(T=b[1],C=0),b[C]!==S)throw new Error("dimension mismatch");if(v<=0||T<=0||S<=0)throw new Error("invalid shape specified");if(w&&!h.isValidBroadcast(w,[v,T]))throw new Error("gemm: invalid bias shape for broadcast");return[v,T,S]}};class f{static tensorDataTypeFromProto($){switch($){case i.onnx.TensorProto.DataType.INT8:return"int8";case i.onnx.TensorProto.DataType.UINT8:return"uint8";case i.onnx.TensorProto.DataType.BOOL:return"bool";case i.onnx.TensorProto.DataType.INT16:return"int16";case i.onnx.TensorProto.DataType.UINT16:return"uint16";case i.onnx.TensorProto.DataType.INT32:return"int32";case i.onnx.TensorProto.DataType.UINT32:return"uint32";case i.onnx.TensorProto.DataType.FLOAT:return"float32";case i.onnx.TensorProto.DataType.DOUBLE:return"float64";case i.onnx.TensorProto.DataType.STRING:return"string";case i.onnx.TensorProto.DataType.INT64:return"int32";case i.onnx.TensorProto.DataType.UINT64:return"uint32";default:throw new Error(`unsupported data type: ${i.onnx.TensorProto.DataType[$]}`)}}static tensorDataTypeStringToEnum($){switch($){case"int8":return i.onnx.TensorProto.DataType.INT8;case"uint8":return i.onnx.TensorProto.DataType.UINT8;case"bool":return i.onnx.TensorProto.DataType.BOOL;case"int16":return i.onnx.TensorProto.DataType.INT16;case"uint16":return i.onnx.TensorProto.DataType.UINT16;case"int32":return i.onnx.TensorProto.DataType.INT32;case"uint32":return i.onnx.TensorProto.DataType.UINT32;case"float32":return i.onnx.TensorProto.DataType.FLOAT;case"float64":return i.onnx.TensorProto.DataType.DOUBLE;case"string":return i.onnx.TensorProto.DataType.STRING;case"int64":return i.onnx.TensorProto.DataType.INT64;case"uint64":return i.onnx.TensorProto.DataType.UINT64;default:throw new Error(`unsupported data type: ${$}`)}}static tensorDimsFromProto($){return $.map(b=>a.default.isLong(b)?b.toNumber():b)}static tensorValueTypeFromProto($){return{tensorType:f.tensorDataTypeFromProto($.elemType),shape:{dims:f.tensorDimsFromProto($.shape.dim.map(b=>b.dimValue))}}}static tensorDimsFromORTFormat($){const b=[];for(let x=0;x<$.dimsLength();x++)b.push(c.longToNumber($.dims(x)));return b}static tensorAttributesFromORTFormat($){const b=[];for(let x=0;x<$.attributesLength();x++)b.push($.attributes(x));return b}}e.ProtoUtil=f;class c{static longToNumber($,b){return a.default.isLong($)?$.toNumber():$ instanceof s.flatbuffers.Long?a.default.fromValue({low:$.low,high:$.high,unsigned:b!=null&&b}).toNumber():$}static isLong($){return a.default.isLong($)||$ instanceof s.flatbuffers.Long}}e.LongUtil=c;class o{static size($){return o.getSizeFromDimensionRange($,0,$.length)}static sizeFromDimension($,b){if(b<0||b>$.length)throw new Error(`invalid dimension of ${b} for sizeFromDimension as Tensor has ${$.length} dimensions.`);return o.getSizeFromDimensionRange($,b,$.length)}static sizeToDimension($,b){if(b<0||b>$.length)throw new Error(`invalid dimension of ${b} for sizeToDimension as Tensor has ${$.length} dimensions.`);return o.getSizeFromDimensionRange($,0,b)}static getSizeFromDimensionRange($,b,x){let w=1;for(let v=b;v<x;v++){if($[v]<=0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.");w*=$[v]}return w}static computeStrides($){const b=$.length;if(b===0)return[];if(b===1)return[1];const x=new Array(b);x[b-1]=1,x[b-2]=$[b-1];for(let w=b-3;w>=0;--w)x[w]=x[w+1]*$[w+1];return x}static transpose($){return $.slice().reverse()}static indicesToOffset($,b,x){x===void 0&&(x=$.length);let w=0;for(let v=0;v<x;++v)w+=b[v]*$[v];return w}static offsetToIndices($,b){const x=b.length;if(x===0)return[];if(x===1)return[$*b[0]];const w=new Array(b.length);for(let v=0;v<w.length-1;++v)w[v]=Math.floor($/b[v]),$-=w[v]*b[v];return w[w.length-1]=$,w}static normalizeAxis($,b){if($<-b&&$>=b)throw new Error("unsupported axis for this operation.");return $<0?$+b:$}static normalizeAxes($,b){return $.map(x=>this.normalizeAxis(x,b))}static incrementIndex($,b,x){if(b.length===0||$.length===0)throw new Error("Index incrementing unsupported for scalar Tensor");if(x===void 0)x=b.length;else if(x<=0||x>b.length)throw new Error("Incorrect axis to increment on");for(let w=x-1;w>=0&&($[w]++,!($[w]<b[w]));--w)$[w]=0}static calculateReshapedDims($,b){if(b.length===0){if($.length===0||o.size($)===1)return[];throw new Error("cannot reshape to a scalar Tensor")}const x=b.length,w=new Array(x);let v=-1,S=1;for(let C=0;C<x;C++){if(b[C]<-1)throw new Error("a dimension in shape hints cannot be less than -1");if(b[C]===-1){if(v!==-1)throw new Error("at most one dimension in shape hints can be -1");v=C}else{if(b[C]===0){if(C>=$.length)throw new Error("the dimension with value zero exceeds the dimension size of the input tensor");w[C]=$[C]}else w[C]=b[C];S*=w[C]}}const T=o.size($);if(v!==-1){if(T%S!=0)throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${$}] Output shape: [${b}]`);w[v]=T/S}else if(S!==T)throw new Error("reshapedDims and originalDims don't have matching sizes");return w}static sortBasedOnPerm($,b){return b?b.map(x=>$[x]):$.slice().reverse()}static padShape($,b){const x=$.length;return $.map((w,v)=>w+b[v]+b[v+x])}static areEqual($,b){return $.length===b.length&&$.every((x,w)=>x===b[w])}static validateDimsAndCalcSize($){if($.length>6)throw new TypeError("Only rank 0 to 6 is supported for tensor shape.");let b=1;for(const x of $){if(!Number.isInteger(x))throw new TypeError(`Invalid shape: ${x} is not an integer`);if(x<0||x>2147483647)throw new TypeError(`Invalid shape: length ${x} is not allowed`);b*=x}return b}static flattenShape($,b){b<0&&(b+=$.length);const x=$.reduce((v,S)=>v*S,1),w=$.slice(b).reduce((v,S)=>v*S,1);return[x/w,w]}static squeezeShape($,b){const x=new Array;b=o.normalizeAxes(b,$.length);for(let w=0;w<$.length;w++){const v=b.indexOf(w)>=0;if(v&&$[w]!==1)throw new Error("squeeze an axis of size different than 1");(b.length===0&&$[w]>1||b.length>0&&!v)&&x.push($[w])}return x}static unsqueezeShape($,b){const x=new Array($.length+b.length);x.fill(0);for(let v=0;v<b.length;v++){const S=o.normalizeAxis(b[v],x.length);if(S>=x.length)throw new Error("'axes' has an out of range axis");if(x[S]!==0)throw new Error("'axes' has a duplicate axis");x[S]=1}let w=0;for(let v=0;v<x.length;v++)x[v]===0&&(x[v]=$[w++]);if(w!==$.length)throw new Error("the unsqueezed dimension could not be established");return x}}e.ShapeUtil=o,e.MathUtil=class{static sqr(y,$,b,x,w){if(x<0||x>=$.length)throw new Error("sourceIndex out of bounds");if(b<0||b>=y.length)throw new Error("targetIndex out of bounds");if(x+w>$.length)throw new Error("source indices to be copied are outside bounds");if(b+w>y.length)throw new Error("target array is too small to hold result");for(let v=0;v<w;v++)y[b+v]+=Math.pow($[x+v],2)}static axpy(y,$,b,x,w,v){if(x<0||x>=$.length)throw new Error("sourceIndex out of bounds");if(b<0||b>=y.length)throw new Error("targetIndex out of bounds");if(x+w>$.length)throw new Error("source indices to be copied are outside bounds");if(b+w>y.length)throw new Error("target array is too small to hold result");for(let S=0;S<w;S++)y[b+S]+=v*$[x+S]}static powx(y,$,b,x,w,v){if(x<0||x>=$.length)throw new Error("sourceIndex out of bounds");if(b<0||b>=y.length)throw new Error("targetIndex out of bounds");if(x+w>$.length)throw new Error("source indices to be copied are outside bounds");if(b+w>y.length)throw new Error("target array is too small to hold result");for(let S=0;S<w;S++)y[b+S]=Math.pow($[x+S],v)}static mul(y,$,b,x,w){if(x<0||x>=$.length)throw new Error("sourceIndex out of bounds");if(b<0||b>=y.length)throw new Error("targetIndex out of bounds");if(x+w>$.length)throw new Error("source indices to be copied are outside bounds");if(b+w>y.length)throw new Error("target array is too small to hold result");for(let v=0;v<w;v++)y[b+v]=$[x+v]*y[b+v]}};class d{static splitShape($,b,x,w){if(x.length===0){if(!w)throw new Error("need to know number of outputs when the 'split' attribute is not specified");d.determineSplit($[b],w,x)}const v=[],S=[0];for(let T=0;T<x.length;++T){T!==0&&S.push(S[T-1]+x[T-1]);const C=$.slice();C[b]=x[T],v.push(C)}return[v,S]}static determineSplit($,b,x){if($%b!=0)throw new Error("cannot split tensor to equal sized parts");for(let w=0;w<b;++w)x.push($/b)}}e.SplitUtil=d;class m{static calcReduce($,b,x,w,v){const S=$.dims.slice(0);b.length===0&&S.forEach((_,D)=>b.push(D));const T=m.calcReduceShape(S,b,!0),C=o.size(T),I=new l.Tensor(T,$.type),N=o.computeStrides(T),P=o.computeStrides(S),F=new Array(S.length);for(let _=0;_<C;_++){const D=o.offsetToIndices(_,N);h.fillIndex(D,S,F),I.set(D,m.calcReduceByAxis($.numberData,b,S,0,o.indicesToOffset(F,P),w,v))}return x?I:new l.Tensor(m.calcReduceShape(S,b,x),I.type,void 0,void 0,I.data,I.dataId)}static calcReduceByAxis($,b,x,w,v,S,T){let C=0;if(w>=b.length)return S($[v]);const I=b[w],N=I>=x.length?1:o.size(x.slice(I+1));for(let P=0;P<x[I];P++)C=P===0?m.calcReduceByAxis($,b,x,w+1,v,S,T):T(C,m.calcReduceByAxis($,b,x,w+1,v,S,T)),v+=N;return C}static calcReduceShape($,b,x){const w=$.slice();for(let v=0;v<b.length;v++)w[b[v]]=x?1:0;return w.filter(v=>v!==0)}}e.ReduceUtil=m;class g{static adjustPoolAttributes($,b,x,w,v,S){if(!$&&x.length!==b.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if($)for(let T=0;T<b.length-2;T++)T>=x.length?x.push(b[T+2]):x[T]=b[T+2];for(let T=0;T<x.length;T++)if(T<w.length){if(w[T]<0)throw new Error("strides should be greater than or equal to 1")}else w.push(1);for(let T=0;T<x.length;T++)if(T<v.length){if(v[T]<0)throw new Error("dilations should be greater than or equal to 1")}else v.push(1);for(let T=0;T<2*x.length;T++)if(T<S.length){if(S[T]<0)throw new Error("pad should be greater than or equal to 1")}else S.push(0);for(let T=0;T<x.length;T++){if(x[T]<=0)throw new Error("kernel shapes need to be greater than 0");if(S[T]>=x[T]||S[T+x.length]>=x[T])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad($,b,x,w,v,S){if(S){if(v.length!==2*($.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(b.length!==$.length-2)throw new Error("length of strides should be the length of data dimensions");if(w.length!==$.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let T=0;T<$.length-2;T++)g.adjustPadAndReturnShape($[T+2],b[T],x[T],w[T],v,T,T+$.length-2,S)}}static computePoolOutputShape($,b,x,w,v,S,T){if(b.length<=0)throw new Error("input shape must be of size greater than 0");const C=[b[0],b[1]];return g.computeShapeHelper($,b,C,x,w,v,S,T),C}static computeConvOutputShape($,b,x,w,v,S,T){if($.length<=0||b.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");const C=[$[0],b[0]];return g.computeShapeHelper(!1,$,C,x,w,v,S,T),C}static computeShapeHelper($,b,x,w,v,S,T,C){if($)for(let I=0;I<b.length-2;I++)x.push(1);else for(let I=0;I<b.length-2;I++)x.push(g.adjustPadAndReturnShape(b[I+2],w[I],v[I],S[I],T,I,I+b.length-2,C))}static adjustPadAndReturnShape($,b,x,w,v,S,T,C){const I=x*(w-1)+1;if(!C||C==="NOTSET")return Math.floor(($+v[S]+v[T]-I)/b+1);switch(C){case"VALID":return v[S]=0,v[T]=0,Math.floor(($-I)/b+1);case"SAME_LOWER":case"SAME_UPPER":if(x!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{const N=(($+b-1)/b-1)*b+w-$;return v[S]=Math.floor(C==="SAME_LOWER"?(N+1)/2:N/2),v[T]=N-v[S],Math.floor(($+N-w)/b+1)}default:throw new Error("Unsupported AutoPad type")}}}e.PoolConvUtil=g,e.MIN_CLIP=-34028234663852886e22,e.MAX_CLIP=34028234663852886e22,e.decodeUtf8String=function(y){return new TextDecoder().decode(y)}},8408:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.version=void 0,e.version="1.16.0"},3838:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.WebGpuBackend=void 0;const r=t(4955),s=t(7771),a=t(8510),i=t(8305);e.WebGpuBackend=class{constructor(){this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.pendingDispatchNumber=0,this.supportTimestampQuery=!1}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let l=this.kernelCustomData.get(this.currentKernelId);return l||(l={},this.kernelCustomData.set(this.currentKernelId,l)),l}async initialize(l){if(!navigator.gpu)throw new Error("WebGpuBackend: WebGPU is not available.");const u=await navigator.gpu.requestAdapter();if(!u)throw new Error("WebGpuBackend: Failed to get GPU adapter.");this.env=l;const h={requiredLimits:{maxComputeWorkgroupStorageSize:u.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:u.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:u.limits.maxStorageBufferBindingSize,maxBufferSize:u.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:u.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:u.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:u.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:u.limits.maxComputeWorkgroupSizeZ}};u.features.has("timestamp-query-inside-passes")&&(this.supportTimestampQuery=!0,h.requiredFeatures=["timestamp-query-inside-passes"]),this.device=await u.requestDevice(h),this.gpuDataManager=(0,s.createGpuDataManager)(this),this.programManager=new i.ProgramManager(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,(0,r.configureLogger)(l.logLevel,!!l.debug),this.device.onuncapturederror=f=>{f.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${f.error.message}`)},this.supportTimestampQuery&&(this.profilingQuerySet=this.device.createQuerySet({type:"timestamp",count:2}))}dispose(){}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){return this.computePassEncoder||(this.computePassEncoder=this.getCommandEncoder().beginComputePass()),this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0}run(l,u,h,f,c){if(u.length!==l.inputTypes.length)throw new Error(`Input size must be equal to ${l.inputTypes.length}.`);const o=[];for(let w=0;w<u.length;++w){const v=this.gpuDataManager.get(u[w].data);if(!v)throw new Error(`no GPU data for input: ${u[w].data}`);o[w]=v}const d=((w,v)=>{const S=v.map(C=>`${C.dataType};${C.dims.join(",")}`).join("|");let T=w.name;return w.cacheHint&&(T+="["+w.cacheHint+"]"),T+=":"+S,T})(l,u);let m=this.programManager.getArtifact(d);const g=m?m.programInfo:typeof l.get=="function"?l.get():l,y=h.length===0?g.outputs.map((w,v)=>v):h;if(y.length!==g.outputs.length)throw new Error(`Output size ${y.length} must be equal to ${g.outputs.length}.`);const $=[],b=[];for(let w=0;w<g.outputs.length;++w){if(!Number.isInteger(y[w])||y[w]<-3||y[w]>=g.outputs.length)throw new Error(`Invalid output index: ${y[w]}`);if(y[w]===-3)continue;const v=y[w]===-1,S=y[w]===-2,T=v||S?c(g.outputs[w].dataType,g.outputs[w].dims):f(y[w],g.outputs[w].dataType,g.outputs[w].dims),C=this.gpuDataManager.get(T.data);if(!C)throw new Error(`no GPU data for output: ${T.data}`);if(v&&this.temporaryData.push(C),S){let I=this.kernelPersistentData.get(this.currentKernelId);I||(I=[],this.kernelPersistentData.set(this.currentKernelId,I)),I.push(C)}$.push(T),b.push(C)}const x=this.programManager.normalizeDispatchGroupSize(g.dispatchGroup(u));return m||(m=this.programManager.build(g,x),this.programManager.setArtifact(d,m)),(0,r.LOG_DEBUG)("info",()=>`[ProgramManager] run "${g.name}" (key=${d}) with ${x[0]}x${x[1]}x${x[2]}`),this.programManager.run(m,o,b,x),$}upload(l,u){this.gpuDataManager.upload(l,u)}memcpy(l,u){this.gpuDataManager.memcpy(l,u)}async download(l,u){const h=await this.gpuDataManager.download(l),f=u();f.set(new Uint8Array(h,0,f.byteLength))}alloc(l){return this.gpuDataManager.create(l).id}free(l){return this.gpuDataManager.release(l)}createKernel(l,u,h){const f=a.WEBGPU_OP_RESOLVE_RULES.get(l);if(!f)throw new Error(`kernel not implemented: ${l}`);this.kernels.set(u,[l,f[0],[f[1],h]])}releaseKernel(l){const u=this.kernelPersistentData.get(l);if(u){for(const h of u)this.gpuDataManager.release(h.id);this.kernelPersistentData.delete(l)}this.kernelCustomData.delete(l),this.kernels.delete(l)}computeKernel(l,u){const h=this.kernels.get(l);if(!h)throw new Error(`kernel not created: ${l}`);const[f,c,o]=h;if(this.currentKernelId!==null)throw new Error(`kernel "${f}" is not allowed to be called recursively`);this.currentKernelId=l,o[0]&&(o[1]=o[0](o[1]),o[0]=void 0),(0,r.LOG_DEBUG)("info",()=>`[WebGPU] Start to run kernel "${f}"...`),this.temporaryData=[];try{return c(u,o[1]),0}catch(d){return(0,r.LOG_DEBUG)("warning",`[WebGPU] Kernel "${f}" failed. Error: ${d}`),1}finally{for(const d of this.temporaryData)this.gpuDataManager.release(d.id);this.temporaryData=[],this.currentKernelId=null}}}},7675:(n,e,t)=>{e.S=void 0;const r=t(7917),s=t(3838),a=t(4955),i=t(6952);class l{constructor(f,c,o,d){this.module=f,this.dataType=c,this.data=o,this.dims=d}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");const f=i.ShapeUtil.size(this.dims);return f===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,f)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");const f=i.ShapeUtil.size(this.dims);return f===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,f)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");const f=i.ShapeUtil.size(this.dims);return f===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,f)}reshape(f){if(i.ShapeUtil.size(f)!==i.ShapeUtil.size(this.dims))throw new Error("Invalid new shape");return new l(this.module,this.dataType,this.data,f)}}class u{get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}constructor(f,c,o){this.module=f,this.backend=c,this.customDataOffset=0,this.customDataSize=0;const d=f.HEAPU32;let m=o>>2;this.opKernelContext=d[m++];const g=d[m++];this.outputCount=d[m++],this.customDataOffset=d[m++],this.customDataSize=d[m++];const y=[];for(let $=0;$<g;$++){const b=d[m++],x=d[m++],w=d[m++],v=[];for(let S=0;S<w;S++)v.push(d[m++]);y.push(new l(f,b,x,v))}this.inputs=y}compute(f,c){var o,d,m;const g=(d=(o=c?.inputs)===null||o===void 0?void 0:o.map($=>typeof $=="number"?this.inputs[$]:$))!==null&&d!==void 0?d:this.inputs,y=(m=c?.outputs)!==null&&m!==void 0?m:[];return this.backend.run(f,g,y,($,b,x)=>new l(this.module,b,this.output($,x),x),($,b)=>{const x=(0,r.getTensorElementSize)($);if(!x)throw new Error(`Unsupported data type: ${$}`);const w=x*i.ShapeUtil.size(b);return new l(this.module,$,this.backend.gpuDataManager.create(w).id,b)})}output(f,c){const o=this.module.stackSave();try{const d=this.module.stackAlloc(4*(1+c.length));let m=d>>2;this.module.HEAPU32[m++]=c.length;for(let g=0;g<c.length;g++)this.module.HEAPU32[m++]=c[g];return this.module._JsepOutput(this.opKernelContext,f,d)}finally{this.module.stackRestore(o)}}}e.S=async(h,f)=>{const c=h.jsepInit;if(c&&navigator.gpu){if(!f.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP");const o=new s.WebGpuBackend;await o.initialize(f),c({backend:o},d=>o.alloc(d),d=>o.free(d),(d,m,g,y=!1)=>{if(y)(0,a.LOG_DEBUG)("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${d}, dst=${m}, size=${g}`),o.memcpy(d,m);else{(0,a.LOG_DEBUG)("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${d}, gpuDataId=${m}, size=${g}`);const $=h.HEAPU8.subarray(d,d+g);o.upload(m,$)}},async(d,m,g)=>{(0,a.LOG_DEBUG)("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${d}, dataOffset=${m}, size=${g}`),await o.download(d,()=>h.HEAPU8.subarray(m,m+g))},(d,m,g)=>o.createKernel(d,m,g),d=>o.releaseKernel(d),(d,m)=>{(0,a.LOG_DEBUG)("verbose",()=>`[WebGPU] jsepRun: kernel=${d}, contextDataOffset=${m}`);const g=new u(h,o,m);return o.computeKernel(d,g)})}}},4955:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LOG_DEBUG=e.LOG=e.configureLogger=void 0;const r=t(7917),s=["V","I","W","E","F"];let a,i;e.configureLogger=(l,u)=>{a=l,i=u},e.LOG=(l,u)=>{const h=(0,r.logLevelStringToEnum)(l);var f,c;h>=(0,r.logLevelStringToEnum)(a)&&(f=h,c=typeof u=="function"?u():u,console.log(`[${s[f]},${new Date().toISOString()}]${c}`))},e.LOG_DEBUG=(...l)=>{i&&(0,e.LOG)(...l)}},6952:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MAX_CLIP=e.MIN_CLIP=e.GemmUtil=e.PoolConvUtil=e.ShapeUtil=e.BroadcastUtil=e.MatMulUtil=void 0;class t{static calcMatMulShape(l,u){return l[1]!==u[0]?void 0:[l[0],u[1]]}}e.MatMulUtil=t;class r{static calcShape(l,u,h=!1){const f=l.length,c=u.length;if(f===0)return u;if(c===0)return l;const o=Math.max(l.length,u.length),d=new Array(o);if(h){if(f<2||c<2)return;const m=t.calcMatMulShape([l[f-2],l[f-1]],[u[c-2],u[c-1]]);if(m===void 0)return;[d[o-2],d[o-1]]=m}for(let m=h?3:1;m<=o;m++){const g=f-m<0?1:l[f-m],y=c-m<0?1:u[c-m];if(g!==y&&g>1&&y>1)return;d[o-m]=Math.max(g,y)}return d}static isValidBroadcast(l,u){const h=l.length,f=u.length;if(h>f)return!1;for(let c=1;c<=h;c++)if(l[h-c]!==1&&l[h-c]!==u[f-c])return!1;return!0}}e.BroadcastUtil=r;class s{static size(l){return s.getSizeFromDimensionRange(l,0,l.length)}static sizeFromDimension(l,u){if(u<0||u>l.length)throw new Error(`invalid dimension of ${u} for sizeFromDimension as Tensor has ${l.length} dimensions.`);return s.getSizeFromDimensionRange(l,u,l.length)}static sizeToDimension(l,u){if(u<0||u>l.length)throw new Error(`invalid dimension of ${u} for sizeToDimension as Tensor has ${l.length} dimensions.`);return s.getSizeFromDimensionRange(l,0,u)}static getSizeFromDimensionRange(l,u,h){let f=1;for(let c=u;c<h;c++){if(l[c]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");f*=l[c]}return f}static computeStrides(l){const u=l.length;if(u===0)return[];if(u===1)return[1];const h=new Array(u);h[u-1]=1,h[u-2]=l[u-1];for(let f=u-3;f>=0;--f)h[f]=h[f+1]*l[f+1];return h}static normalizeAxis(l,u){if(l<-u&&l>=u)throw new Error("unsupported axis for this operation.");return l<0?l+u:l}static normalizeAxes(l,u){return l.map(h=>this.normalizeAxis(h,u??l.length))}static sortBasedOnPerm(l,u){return u?u.map(h=>l[h]):l.slice().reverse()}static padShape(l,u){const h=l.length;return l.map((f,c)=>f+u[c]+u[c+h])}static areEqual(l,u){return l.length===u.length&&l.every((h,f)=>h===u[f])}}e.ShapeUtil=s;class a{static adjustPoolAttributes(l,u,h,f,c,o){if(!l&&h.length!==u.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(l)for(let d=0;d<u.length-2;d++)d>=h.length?h.push(u[d+2]):h[d]=u[d+2];for(let d=0;d<h.length;d++)if(d<f.length){if(f[d]<0)throw new Error("strides should be greater than or equal to 1")}else f.push(1);for(let d=0;d<h.length;d++)if(d<c.length){if(c[d]<0)throw new Error("dilations should be greater than or equal to 1")}else c.push(1);for(let d=0;d<2*h.length;d++)if(d<o.length){if(o[d]<0)throw new Error("pad should be greater than or equal to 1")}else o.push(0);for(let d=0;d<h.length;d++){if(h[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(o[d]>=h[d]||o[d+h.length]>=h[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(l,u,h,f,c,o,d){if(d){if(c.length!==2*(l.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(u.length!==l.length-2)throw new Error("length of strides should be the length of data dimensions");if(f.length!==l.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let m=0;m<l.length-2;m++)a.adjustPadAndReturnShape(l[m+(o?1:2)],u[m],h[m],f[m],c,m,m+l.length-2,d)}}static computePoolOutputShape(l,u,h,f,c,o,d){if(u.length<=0)throw new Error("input shape must be of size greater than 0");const m=[u[0],u[1]];return a.computeShapeHelper(l,u,m,h,f,c,o,d),m}static computeConvOutputShape(l,u,h,f,c,o,d){if(l.length<=0||u.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");const m=[l[0],u[0]];return a.computeShapeHelper(!1,l,m,h,f,c,o,d),m}static computeShapeHelper(l,u,h,f,c,o,d,m){if(l)for(let g=0;g<u.length-2;g++)h.push(1);else for(let g=0;g<u.length-2;g++)h.push(a.adjustPadAndReturnShape(u[g+2],f[g],c[g],o[g],d,g,g+u.length-2,m))}static adjustPadAndReturnShape(l,u,h,f,c,o,d,m){const g=h*(f-1)+1;if(!m||m==="NOTSET")return Math.floor((l+c[o]+c[d]-g)/u+1);switch(m){case"VALID":return c[o]=0,c[d]=0,Math.floor((l-g)/u+1);case"SAME_LOWER":case"SAME_UPPER":if(h!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{const y=((l+u-1)/u-1)*u+f-l;return c[o]=Math.floor(m==="SAME_LOWER"?(y+1)/2:y/2),c[d]=y-c[o],Math.floor((l+y-f)/u+1)}default:throw new Error("Unsupported AutoPad type")}}}e.PoolConvUtil=a,e.GemmUtil=class{static getShapeOfGemmResult(i,l,u,h,f){if(i.length!==2||u.length!==2)throw new Error("shape need to be of size 2");let c,o,d;l?(c=i[1],o=i[0]):(c=i[0],o=i[1]);let m=-1;if(h?(d=u[0],m=1):(d=u[1],m=0),u[m]!==o)throw new Error("dimension mismatch");if(c<=0||d<=0||o<=0)throw new Error("invalid shape specified");if(f&&!r.isValidBroadcast(f,[c,d]))throw new Error("gemm: invalid bias shape for broadcast");return[c,d,o]}},e.MIN_CLIP=-34028234663852886e22,e.MAX_CLIP=34028234663852886e22},387:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createAttributeWithCacheKey=void 0;class t{constructor(s){Object.assign(this,s)}get cacheKey(){return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map(s=>`${this[s]}`).join(";")),this._cacheKey}}e.createAttributeWithCacheKey=r=>new t(r)},7771:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createGpuDataManager=void 0;const r=t(4955),s=t(1163),a=u=>16*Math.ceil(u/16);let i=0;class l{constructor(h){this.backend=h,this.storageCache=new Map,this.downloadCache=new Map,this.freeBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[]}upload(h,f){const c=f.buffer,o=f.byteOffset,d=f.byteLength,m=a(d),g=this.storageCache.get(h);if(!g)throw new Error("gpu data for uploading does not exist");if(g.originalSize!==d)throw new Error(`inconsistent data size. gpu data size=${g.originalSize}, data size=${d}`);const y=this.backend.device.createBuffer({mappedAtCreation:!0,size:m,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),$=y.getMappedRange();new Uint8Array($).set(new Uint8Array(c,o,d)),y.unmap();const b=this.backend.getCommandEncoder();this.backend.endComputePass(),b.copyBufferToBuffer(y,0,g.gpuData.buffer,0,m),(0,r.LOG_DEBUG)("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${h})`),this.buffersForUploadingPending.push(y)}memcpy(h,f){const c=this.storageCache.get(h);if(!c)throw new Error("source gpu data for memcpy does not exist");const o=this.storageCache.get(f);if(!o)throw new Error("destination gpu data for memcpy does not exist");if(c.originalSize!==o.originalSize)throw new Error("inconsistent source and destination gpu data size");const d=a(c.originalSize),m=this.backend.getCommandEncoder();this.backend.endComputePass(),m.copyBufferToBuffer(c.gpuData.buffer,0,o.gpuData.buffer,0,d)}create(h,f=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){const c=a(h);let o;if((f&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let m=this.freeBuffers.get(c);m||(m=[],this.freeBuffers.set(c,m)),o=m.length>0?m.pop():this.backend.device.createBuffer({size:c,usage:f})}else o=this.backend.device.createBuffer({size:c,usage:f});const d={id:i++,type:s.GpuDataType.default,buffer:o};return this.storageCache.set(d.id,{gpuData:d,originalSize:h}),(0,r.LOG_DEBUG)("verbose",()=>`[WebGPU] GpuDataManager.create(size=${h}) => id=${d.id}`),d}get(h){var f;return(f=this.storageCache.get(h))===null||f===void 0?void 0:f.gpuData}release(h){const f=this.storageCache.get(h);if(!f)throw new Error("releasing data does not exist");return(0,r.LOG_DEBUG)("verbose",()=>`[WebGPU] GpuDataManager.release(id=${h}), gpuDataId=${f.gpuData.id}`),this.storageCache.delete(h),this.buffersPending.push(f.gpuData.buffer),this.downloadCache.get(h)&&this.downloadCache.delete(h),f.originalSize}async download(h){const f=this.downloadCache.get(h);if(f)return f.data;const c=this.storageCache.get(h);if(!c)throw new Error("data does not exist");const o=this.backend.getCommandEncoder();this.backend.endComputePass();const d=a(c.originalSize),m=this.backend.device.createBuffer({size:d,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});o.copyBufferToBuffer(c.gpuData.buffer,0,m,0,d),this.backend.flush();const g=new Promise(y=>{m.mapAsync(GPUMapMode.READ).then(()=>{const $=m.getMappedRange().slice(0);m.destroy(),y($)})});return this.downloadCache.set(h,{data:g}),g}refreshPendingBuffers(){for(const h of this.buffersForUploadingPending)h.destroy();this.buffersForUploadingPending=[];for(const h of this.buffersPending)(h.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(h.size).push(h):h.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(h=>{h.forEach(f=>{f.destroy()})}),this.storageCache.forEach(h=>{h.gpuData.buffer.destroy()}),this.storageCache=new Map,this.downloadCache=new Map,this.freeBuffers=new Map}}e.createGpuDataManager=(...u)=>new l(...u)},8510:function(n,e,t){var r=this&&this.__createBinding||(Object.create?function(P,F,_,D){D===void 0&&(D=_);var E=Object.getOwnPropertyDescriptor(F,_);E&&!("get"in E?!F.__esModule:E.writable||E.configurable)||(E={enumerable:!0,get:function(){return F[_]}}),Object.defineProperty(P,D,E)}:function(P,F,_,D){D===void 0&&(D=_),P[D]=F[_]}),s=this&&this.__setModuleDefault||(Object.create?function(P,F){Object.defineProperty(P,"default",{enumerable:!0,value:F})}:function(P,F){P.default=F}),a=this&&this.__importStar||function(P){if(P&&P.__esModule)return P;var F={};if(P!=null)for(var _ in P)_!=="default"&&Object.prototype.hasOwnProperty.call(P,_)&&r(F,P,_);return s(F,P),F};Object.defineProperty(e,"__esModule",{value:!0}),e.WEBGPU_OP_RESOLVE_RULES=void 0;const i=t(1868),l=a(t(504)),u=t(513),h=t(9770),f=t(7640),c=t(8856),o=t(8405),d=t(4271),m=t(1798),g=t(2915),y=t(1522),$=a(t(5262)),b=t(6031),x=t(4566),w=t(8906),v=t(5101),S=t(6198),T=t(2067),C=t(8699),I=t(2625),N=a(t(9302));e.WEBGPU_OP_RESOLVE_RULES=new Map([["Abs",[N.abs]],["Acos",[N.acos]],["Acosh",[N.acosh]],["Add",[l.add]],["ArgMax",[i.argMax,i.parseArgMinMaxAttributes]],["ArgMin",[i.argMin,i.parseArgMinMaxAttributes]],["Asin",[N.asin]],["Asinh",[N.asinh]],["Atan",[N.atan]],["Atanh",[N.atanh]],["AveragePool",[$.averagePool,$.parseAveragePoolAttributes]],["Cast",[N.cast,N.parseCastAttributes]],["Ceil",[N.ceil]],["ClipV10",[N.clipV10]],["Clip",[N.clip]],["Concat",[u.concat,u.parseConcatAttributes]],["Conv",[h.conv,h.parseConvAttributes]],["ConvTranspose",[f.convTranspose,f.parseConvTransposeAttributes]],["Cos",[N.cos]],["Cosh",[N.cosh]],["Div",[l.div]],["Elu",[N.elu,N.parseAlphaAttributes]],["Erf",[N.erf]],["Exp",[N.exp]],["Expand",[c.expand]],["Floor",[N.floor]],["Gather",[o.gather,o.parseGatherAttributes]],["Gelu",[N.gelu]],["Gemm",[d.gemm,d.parseGemmAttributes]],["GlobalAveragePool",[$.globalAveragePool,$.parseGlobalAveragePoolAttributes]],["GlobalMaxPool",[$.globalMaxPool,$.parseGlobalMaxPoolAttributes]],["InstanceNormalization",[m.instanceNorm,m.parseInstanceNormAttributes]],["LayerNormalization",[g.layerNorm,g.parseLayerNormAttributes]],["LeakyRelu",[N.leakyRelu,N.parseAlphaAttributes]],["Log",[N.log]],["MatMul",[y.matMul]],["MaxPool",[$.maxPool,$.parseMaxPoolAttributes]],["Mul",[l.mul]],["Neg",[N.neg]],["Pow",[l.pow]],["Reciprocal",[N.reciprocal]],["ReduceMin",[b.reduceMin,b.parseReduceAttributes]],["ReduceMean",[b.reduceMean,b.parseReduceAttributes]],["ReduceMax",[b.reduceMax,b.parseReduceAttributes]],["ReduceSum",[b.reduceSum,b.parseReduceAttributes]],["ReduceProd",[b.reduceProd,b.parseReduceAttributes]],["ReduceL1",[b.reduceL1,b.parseReduceAttributes]],["ReduceL2",[b.reduceL2,b.parseReduceAttributes]],["ReduceLogSum",[b.reduceLogSum,b.parseReduceAttributes]],["ReduceLogSumExp",[b.reduceLogSumExp,b.parseReduceAttributes]],["ReduceSumSquare",[b.reduceSumSquare,b.parseReduceAttributes]],["Relu",[N.relu]],["Resize",[x.resize,x.parseResizeAttributes]],["Sigmoid",[N.sigmoid]],["Sin",[N.sin]],["Sinh",[N.sinh]],["Slice",[v.slice,v.parseSliceAttributes]],["SkipLayerNormalization",[w.skipLayerNorm,w.parseSkipLayerNormAttributes]],["Split",[T.split,T.parseSplitAttributes]],["Sqrt",[N.sqrt]],["Softmax",[S.softmax,S.parseSoftmaxAttributes]],["Sub",[l.sub]],["Tan",[N.tan]],["Tanh",[N.tanh]],["ThresholdedRelu",[N.thresholdedRelu,N.parseAlphaAttributes]],["Tile",[C.tile]],["Transpose",[I.transpose,I.parseTransposeAttributes]]])},1427:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.biasActivationSnippet=e.activationFnSnippet=e.typeSnippet=void 0,e.typeSnippet=t=>{switch(t){case 1:return"f32";case 2:return"vec2<f32>";case 3:return"vec3<f32>";case 4:return"vec4<f32>";default:throw new Error(`${t}-component is not supported.`)}},e.activationFnSnippet=(t,r=!1,s=!1,a=3)=>"",e.biasActivationSnippet=(t,r)=>`
      ${t?"value = value + getBiasByOutputCoords(coords);":""}
      ${r?"value = activation(value, coords);":""}
      `},9456:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createConv2DMatMulProgramInfo=void 0;const r=t(4955),s=t(6952),a=t(1163),i=t(1427),l=t(4085),u=t(158);e.createConv2DMatMulProgramInfo=(h,f,c,o,d,m,g,y,$)=>{const b=c.format==="NHWC",x=b?h[0].dims[3]:h[0].dims[1],w=o[0],v=b?o[2]:o[3],S=b?o[1]:o[2],T=b?o[3]:o[1],C=((x%4==0||x%3==0)&&b||v%4==0&&!b)&&T%4==0,I=b?T:v*S,N=b?v*S:T,P=C?[8,8,1]:[I<=4?4:16,I>4&&N<=4?4:16,1],F=C?[4,4,1]:[I<=4?1:2,I>4&&N<=4?1:2,1],_=[Math.ceil(I/P[0]/F[0]),Math.ceil(N/P[1]/F[1]),Math.ceil(w/P[2]/F[1])];(0,r.LOG_DEBUG)("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${_}`);const D=C?b&&x%4!=0?3:4:F[0],E=P[1]*F[1],k=P[0]*F[0],O=Math.max(P[0]*D,P[1]),M=d%E==0,z=m%k==0,G=g%O==0,j=C?[D,4,4]:[1,1,1],K=[`@group(0) @binding(0) var<storage, read> x: array<${C&&D===4?"vec4<f32>":"f32"}>;`,`@group(0) @binding(1) var<storage, read> w: array<${C?"vec4<f32>":"f32"}>;`];let X=`
      fn setOutputAtIndex(flatIndex : i32, value : ${C?"vec4<f32>":"f32"}) {
        result[flatIndex] = ${C?"vec4<f32>":"f32"}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${C?"vec4<f32>":"f32"}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${C?"/ 4":""}, value);
      }`;return y&&(K.push(`@group(0) @binding(2) var<storage, read> bias: array<${C?"vec4<f32>":"f32"}>;`),X+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${C?"vec4<f32>":"f32"} {
          return bias[coords.${b?"w":"y"}${C?"/ 4":""}];
        }`),Object.assign(Object.assign({},f),{outputs:[{dims:o,dataType:h[0].dataType,gpuDataType:a.GpuDataType.default}],dispatchGroup:()=>({x:_[0],y:_[1],z:_[2]}),getShaderSource:()=>`
        ${l.utilFunctions}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${K.join("")}
        @group(0) @binding(${K.length}) var<storage, read_write> result: array<${C?"vec4<f32>":"f32"}>;
        //@group(0) @binding(${K.length+1}) var<uniform> uniforms: Uniforms;

        const xShape : vec4<i32> = vec4<i32>(${h[0].dims.join(",")});
        const wShape : vec4<i32> = vec4<i32>(${h[1].dims.join(",")});
        const outShape : vec4<i32> = vec4<i32>(${o.join(",")});
        const outShapeStrides : vec3<i32> = vec3<i32>(${s.ShapeUtil.computeStrides(o).slice(0,3).join(",")});
        const filterDims : vec2<i32> = vec2<i32>(${c.kernelShape[0]}, ${c.kernelShape[1]});
        const pad : vec2<i32> = vec2<i32>(${c.pads[0]}, ${c.pads[1]});
        const stride : vec2<i32> = vec2<i32>(${c.strides[0]}, ${c.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${c.dilations[0]}, ${c.dilations[1]});
        const dimAOuter : i32 = ${d};
        const dimBOuter : i32 = ${m};
        const dimInner : i32 = ${g};
        ${X}
        ${((Y,J,te,re,ue=!1,ie,ce=!1,se=4,xe=4,me=4)=>{const $e=Y?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,Se=Y?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,ve=Y?"xShape[1]":"xShape[2]",Ee=Y?"xShape[2]":"xShape[3]",Ae=Y?"row":"col",Fe=Y?"col":"row",ke=`
    let inChannels = wShape[2];
    let outWidth = ${Y?"outShape[2]":"outShape[3]"};
    let outRow = ${Ae} / outWidth;
    let outCol = ${Ae} % outWidth;

    let WRow = ${Fe} / (filterDims[1] * inChannels);
    let WCol = ${Fe} / inChannels % filterDims[1];
    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];
    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];
    let xCh = ${Fe} % inChannels;
    var resData = ${(0,i.typeSnippet)(se)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${ve} && xCol >= 0 && xCol < ${Ee}) {
      ${$e}
      let xIndex = getIndexFromCoords4D(coord, xShape);
      ${(ze=>{switch(ze){case 1:return"resData = x[xIndex];";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${ze} is not supported.`)}})(se)}
    }
    return resData;`,Be=Y?J&&re?`
    let col = colIn * ${se};
    ${ke}`:`
    let col = colIn * ${se};
    if (row < dimAOuter && col < dimInner) {
      ${ke}
    }
    return ${(0,i.typeSnippet)(se)}(0.0);`:re&&te?`
    let col = colIn * ${se};
    ${ke}`:`
    let col = colIn * ${se};
    if (row < dimInner && col < dimBOuter) {
      ${ke}
    }
    return ${(0,i.typeSnippet)(se)}(0.0);`,Ne=`${(ze=>{switch(ze){case 1:return"return w[row * wShape[3] + colIn];";case 4:return"return w[row * wShape[3] / 4 + colIn];";default:throw new Error(`innerElementSize ${ze} is not supported.`)}})(xe)}`,Ve=(0,i.typeSnippet)(me),Me=Y?(0,i.typeSnippet)(se):(0,i.typeSnippet)(xe),Ue=Y?(0,i.typeSnippet)(xe):(0,i.typeSnippet)(se);return`
    ${(0,i.activationFnSnippet)(ie,ce,me===4,4)}
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${Me} {
      ${Y?Be:Ne}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${Ue} {
      ${Y?Ne:Be}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${Ve}) {
      let col = colIn * ${me};
      if (row < dimAOuter && col < dimBOuter)
      {
      var value = valueIn;
      let outWidth = ${Y?"outShape[2]":"outShape[3]"};
      ${Se}
      ${(0,i.biasActivationSnippet)(ue,ie)}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`})(b,M,z,G,y,void 0,!1,j[0],j[1],j[2])}
            ${C?(0,u.makeMatMulPackedVec4Source)(F,P,!b,O):(0,u.makeMatMulPackedSource)(F,P,!b,O,!1,void 0,$)}`})}},6514:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createConvTranspose2DProgramInfo=void 0;const r=t(4955),s=t(6952),a=t(1163),i=t(2075);e.createConvTranspose2DProgramInfo=(l,u,h,f)=>{const c=l.length>2,o=h.outputShape,d=s.ShapeUtil.size(o),m=[Math.ceil(d/64),1,1];return(0,r.LOG_DEBUG)("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${m}`),Object.assign(Object.assign({},u),{outputs:[{dims:f?f(o):o,dataType:l[0].dataType,gpuDataType:a.GpuDataType.default}],dispatchGroup:()=>({x:m[0],y:m[1],z:m[2]}),getShaderSource:g=>((y,$,b,x,w,v,S=!1)=>{const T=b.format==="NHWC",C=T?1:2,I=T?2:3,N=T?3:1,P=s.ShapeUtil.size(x),F=S?2:1,_=b.group,D=$[1].dims,E=D[0]/_,k=D[1];let O=`
  fn setOutputAtIndex(flatIndex : u32, value : ${S?"vec4<f32>":"f32"}) {
    result[flatIndex] = ${S?"vec4<f32>":"f32"}(value);
  }`;w&&(O+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${S?"vec4<f32>":"f32"} {
      return bias[coords.${T?"w":"y"}${S?"/ 4":""}];
    }`);const M=S?4:1,z=(0,i.inputVariable)("W",$[1].dataType,$[1].dims,M),G=(0,i.inputVariable)("Dy",$[0].dataType,$[0].dims,M),j=[G,z];w&&j.push((0,i.inputVariable)("bias",$[2].dataType,[x[N]],M));const K=(0,i.outputVariable)("result",$[0].dataType,x,M),X=`{
        let batch: u32 = ${v?"global_id.z":"workgroup_id.z"} / outShape[1];
        let r = ${v?"global_id.z":"workgroup_id.z"} % outShape[1];
        let c = ${v?"global_id.y":"workgroup_id.y"} * ${F};
        let d1: u32 = ${v?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<f32>, ${F}>;
        for (var i = 0; i < ${F}; i++) {
          dotProd[i] = vec4<f32>(0.0);
        }
        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {
          var dyR = (f32(dyCorner.x) + f32(wR)) / f32(strides.x);
          let wRPerm = filterDims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= f32(outBackprop[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {
            let dyC = (f32(dyCorner.y) + f32(wC)) / f32(strides.y);
            let dyC2 = (f32(dyCorner.y) + 1.0 + f32(wC)) / f32(strides.y);
            let wCPerm = filterDims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= f32(outBackprop[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${z.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${z.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${z.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${z.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${G.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<f32>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${G.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = outBackprop[${N}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${z.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${z.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${z.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${z.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${G.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<f32>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${z.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${z.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${z.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${z.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${G.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<f32>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${F}; i = i + 1) {
          let value = dotProd[i] + ${w?"bias[c+i]":"0.0"};
          ${K.set("batch","r","c + i","d1","value")};
        }
      }`,Y=`
          let outputIndices = ${K.offsetToIndices("global_idx")};
          let batch = ${K.indicesGet("outputIndices",0)};
          let d1 = ${K.indicesGet("outputIndices",N)};
          let r = ${K.indicesGet("outputIndices",C)};
          let c = ${K.indicesGet("outputIndices",I)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / ${k};
          let wOutChannel = d1 - groupId * ${k};
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = 0.0;
          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {
            if (wR % dilations.x != 0) {
              continue;
            }
            let dyR = (f32(dyRCorner) + f32(wR)) / f32(strides[0]);
            let wRPerm = filterDims.x - 1 - wR / dilations.x;
            if (dyR < 0.0 || dyR >= f32(outBackprop[${C}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {
              if (wC % dilations.y != 0) {
                continue;
              }
              let dyC = (f32(dyCCorner) + f32(wC)) / f32(strides.y);
              let wCPerm = filterDims.y - 1 - wC / dilations.y;
              if (dyC < 0.0 || dyC >= f32(outBackprop[${I}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);

              for (var d2: u32 = 0; d2 < ${E}; d2 = d2 + 1) {
                let inputChannel = groupId * ${E} + d2;
                let xValue = ${T?G.get("batch","idyR","idyC","inputChannel"):G.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${z.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
              }
            }
          }
          let value = dotProd + ${w?"bias[d1]":"0.0"};
          ${K.setByOffset("global_idx","value")};
        `;return`
  ${y.declareVariables(...j,K)}
  ${O}
  const outShape : vec4<u32> = vec4<u32>(${x.join(",")});
  const outBackprop : vec4<u32> = vec4<u32>(${$[0].dims.join(",")});
  const strides : vec2<u32> = vec2<u32>(${b.strides[0]}, ${b.strides[1]});
  const filterDims : vec2<u32> = vec2<u32>(${b.kernelShape[T?1:2]}, ${b.kernelShape[T?2:3]});
  const dilations : vec2<u32> = vec2<u32>(${b.dilations[0]}, ${b.dilations[1]});
  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(
          ${b.dilations[0]<=1?0:(b.kernelShape[T?1:2]-1)*(b.dilations[0]-1)},
          ${b.dilations[1]<=1?0:(b.kernelShape[T?2:3]-1)*(b.dilations[1]-1)});
  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${b.pads[0]+b.pads[2]})/2,
                                     i32(effectiveFilterDims[1]) - 1 - (${b.pads[1]+b.pads[3]})/2);
    ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes(P)};
  ${S?X:Y}}`})(g,l,h,o,c,m[1]===1&&m[2]===1)})}},4085:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.utilFunctions=void 0,e.utilFunctions=`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));
}
`},158:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.makeMatMulPackedSource=e.makeMatMulPackedVec4Source=void 0,e.makeMatMulPackedVec4Source=(r,s,a=!1,i=32,l=!1,u=32,h=!1)=>{const f=s[1]*r[1],c=s[0]*r[0],o=a?f:i,d=a?i:f,m=o/s[0],g=i/s[1];if((!a||m!==4||r[1]!==4)&&(a||m!==3&&m!==4)||o%s[0]!=0||i%s[1]!=0||r[0]!==4)throw new Error(`If transposeA ${a} is true, innerElementSize ${m} and workPerThread[1] ${r[1]} must be 4.
      Otherwise, innerElementSize ${m} must be 3 or 4.
  tileAWidth ${o} must be divisible by workgroupSize[0]${s[0]}. tileInner ${i} must be divisible by workgroupSize[1] ${s[1]}. colPerThread ${r[0]} must be 4.`);return`
var<workgroup> mm_Asub : array<array<vec${m}<f32>, ${o/m}>, ${d}>;
var<workgroup> mm_Bsub : array<array<vec4<f32>, ${c/r[0]}>, ${i}>;

const rowPerThread = ${r[1]};
const colPerThread = ${r[0]};
const innerElementSize = ${m};
const tileInner = ${i};

@compute @workgroup_size(${s[0]}, ${s[1]}, ${s[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = ${h?"0":"localRow * rowPerThread"};
  let tileCol = i32(localId.x);

  let globalRow = ${h?"0":"i32(globalId.y) * rowPerThread"};
  let globalCol = i32(globalId.x);
  let batch = ${l?"0":"i32(globalId.z)"};
  let globalRowStart = i32(workgroupId.y) * ${f};

  let numTiles = ${l?`${Math.ceil(u/i)}`:"(dimInner - 1) / tileInner + 1"};
  var kStart = ${l?`i32(globalId.z) * ${u}`:"0"};

  var acc: array<vec4<f32>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${g};
  for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${y=a,y?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol);
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol);
        `}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${g}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${m===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${(($,b)=>$?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${b===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${b===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${b===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`)(a,m)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`;var y};const t=r=>r?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol);
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol);
            `;e.makeMatMulPackedSource=(r,s,a=!1,i=32,l=!1,u=32,h=!1)=>{const f=r[1]*s[1],c=r[0]*s[0],o=a?f:i,d=a?i:f;if(d%s[1]!=0||o%s[0]!=0||i%s[1]!=0)throw new Error(`tileAHight ${d} must be divisible by workgroupSize[1]${s[1]}, tileAWidth ${o} must be divisible by workgroupSize[0]${s[0]}, tileInner ${i} must be divisible by workgroupSize[1]${s[1]}`);const m=d/s[1],g=o/s[0],y=i/s[1],$=h?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${f};
    let globalColStart = i32(workgroupId.x) * ${c};

    // Loop over shared dimension.
    for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${d}; inputRow = inputRow + ${s[1]}) {
        for (var inputCol = localCol; inputCol < ${o}; inputCol = inputCol + ${s[0]}) {
          ${t(a)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${i}; inputRow = inputRow + ${s[1]}) {
            for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${s[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol);
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<f32, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${s[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${a?`mm_Asub[k][localRow + innerRow * ${s[1]}];`:`mm_Asub[localRow + innerRow * ${s[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${s[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${s[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${f};

let tileRowA = i32(localId.y) * ${m};
let tileColA = i32(localId.x) * ${g};
let tileRowB = i32(localId.y) * ${y};
// Loop over shared dimension.
for (var t = 0; t < numTiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${m}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${g}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${t(a)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${y}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol);
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<f32, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${(b=>b?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];")(a)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<f32, ${o}>, ${d}>;
  var<workgroup> mm_Bsub : array<array<f32, ${c}>, ${i}>;
  const rowPerThread = ${r[1]};
  const colPerThread = ${r[0]};
  const tileInner = ${i};

@compute @workgroup_size(${s[0]}, ${s[1]}, ${s[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${l?"0":"i32(globalId.z)"};
    let numTiles = ${l?`${Math.ceil(u/i)}`:"(dimInner - 1) / tileInner + 1"};
    var kStart = ${l?`i32(globalId.z) * ${u}`:"0"};

    var acc : array<array<f32, colPerThread>, rowPerThread>;

    // Without this initialization strange values show up in acc.
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = 0.0;
      }
    }
    ${$}
  }
`}},1868:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseArgMinMaxAttributes=e.argMax=e.argMin=void 0;const r=t(387),s=t(1163),a=t(6031),i=u=>{if(!u||u.length===0||u.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(u[0].dataType!==1)throw new Error("Invalid input type.")},l=(u,h,f,c)=>{const o=u.length===1?f:((g,y)=>(0,r.createAttributeWithCacheKey)({axis:y.axis,keepDims:y.keepDims,selectLastIndex:y.selectLastIndex}))(0,f),d=o.cacheKey+u.map(g=>g.dims.toString()).join("_"),m={name:h,inputTypes:[s.GpuDataType.default],cacheHint:d};return Object.assign(Object.assign({},m),{get:()=>(0,a.createReduceProgramInfo)(m,[u[0]],c,[o.axis],7,o.keepDims)})};e.argMin=(u,h)=>{i(u.inputs),u.compute(l(u.inputs,"ArgMin",h,(f,c,o)=>{const d=[];for(let m=0;m<f.shape.length;m++)(o.indexOf(m)>=0||o.length===0)&&d.push(`inputIndices[${m}] = 0;`);return[`${d.join(`
`)}`,`var value = ${f.getByOffset("inputOffset")};
var bestIndex : i32 = 0;`,`if (${f.getByOffset("inputOffset")} ${h.selectLastIndex>0?"<=":"<"} value) {
         value = ${f.getByOffset("inputOffset")};
         bestIndex = i32(lastIndex);
       }`,"",c.setByOffset("global_idx","bestIndex")]}),{inputs:[0]})},e.argMax=(u,h)=>{i(u.inputs),u.compute(l(u.inputs,"argMax",h,(f,c,o)=>{const d=[];for(let m=0;m<f.shape.length;m++)(o.indexOf(m)>=0||o.length===0)&&d.push(`inputIndices[${m}] = 0;`);return[`${d.join(`
`)}`,`var value = ${f.getByOffset("inputOffset")};
var bestIndex : i32 = 0;`,`if (${f.getByOffset("inputOffset")} ${h.selectLastIndex>0?">=":">"} value) {
         value = ${f.getByOffset("inputOffset")};
         bestIndex = i32(lastIndex);
       }`,"",c.setByOffset("global_idx","bestIndex")]}),{inputs:[0]})},e.parseArgMinMaxAttributes=u=>(0,r.createAttributeWithCacheKey)(u)},504:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.sub=e.pow=e.mul=e.div=e.add=void 0;const r=t(6952),s=t(1163),a=t(2075),i=(l,u,h,f,c)=>{const o={name:u,inputTypes:[s.GpuDataType.default,s.GpuDataType.default],cacheHint:c};return Object.assign(Object.assign({},o),{get:()=>((d,m,g,y,$,b=m.dataType)=>{var x,w;const v=!r.ShapeUtil.areEqual(m.dims,g.dims);let S=m.dims,T=r.ShapeUtil.size(m.dims),C=!1;if(v){const I=r.BroadcastUtil.calcShape(m.dims,g.dims,!1);if(!I)throw new Error("Can't perform binary op on the given tensors");S=I,T=r.ShapeUtil.size(S);let N=1;for(let P=0;P<S.length;P++){const F=(x=m.dims[m.dims.length-P])!==null&&x!==void 0?x:1;if(F!==((w=g.dims[g.dims.length-P])!==null&&w!==void 0?w:1))break;N*=F}N%4==0&&(C=!0)}else C=!0;return Object.assign(Object.assign({},d),{getShaderSource:I=>((N,P,F,_,D,E,k,O,M,z,G)=>{const j=r.ShapeUtil.size(_),K=Math.ceil(j/4);let X,Y;typeof k=="string"?X=Y=(ce,se)=>`${k}((${ce}),(${se}))`:typeof k=="function"?X=Y=k:(X=k.scalar,Y=k.vector);let J="";const te=(0,a.outputVariable)("outputData",z,_,4),re=(0,a.inputVariable)("aData",O,P,4),ue=(0,a.inputVariable)("bData",M,F,4);if(E){const ce=se=>{const xe=r.ShapeUtil.computeStrides(se),me=[];for(let $e=se.length-1;$e>=0;$e--){const Se=_.length===0?"0u":_.length===1?"outputIndices":`outputIndices[${$e+_.length-se.length}]`;me.push(`${xe[$e]}u * (${Se} % ${se[$e]}u)`)}return me.length>0?me.join("+"):"0u"};J=`
  fn calcOffsetA(outputIndices: ${te.type.indices}) -> u32 {
    return ${ce(P)};
  }

  fn calcOffsetB(outputIndices: ${te.type.indices}) -> u32 {
    return ${ce(F)};
  }
  `}let ie;if(D)ie=E?`
      let outputIndices = ${te.offsetToIndices("global_idx * 4u")};
      let offsetA = calcOffsetA(outputIndices);
      let offsetB = calcOffsetB(outputIndices);
      ${te.setByOffset("global_idx",Y(re.getByOffset("offsetA / 4u"),ue.getByOffset("offsetB / 4u")))}`:te.setByOffset("global_idx",Y(re.getByOffset("global_idx"),ue.getByOffset("global_idx")));else{if(!E)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");const ce=se=>{const xe=`aData[indexA${se}][componentA${se}]`,me=`bData[indexB${se}][componentB${se}]`;return`
      let outputIndices${se} = ${te.offsetToIndices(`global_idx * 4u + ${se}u`)};
      let offsetA${se} = calcOffsetA(outputIndices${se});
      let offsetB${se} = calcOffsetB(outputIndices${se});
      let indexA${se} = offsetA${se} / 4u;
      let indexB${se} = offsetB${se} / 4u;
      let componentA${se} = offsetA${se} % 4u;
      let componentB${se} = offsetB${se} % 4u;
      outputData[global_idx][${se}] = ${X(xe,me)};`};ie=`
      ${ce(0)}
      ${ce(1)}
      ${ce(2)}
      ${ce(3)}`}return`
  ${N.declareVariables(re,ue,te)}

  ${G??""}
  ${J}

  ${N.mainStart()}
    ${N.guardAgainstOutOfBoundsWorkgroupSizes(K)}
    ${ie}
  }`})(I,m.dims,g.dims,S,C,v,y,m.dataType,g.dataType,b,$),outputs:[{dims:S,dataType:b,gpuDataType:s.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(T/64/(C?4:1))})})})(o,l[0],l[1],h,f)})};e.add=l=>{l.compute(i(l.inputs,"Add",(u,h)=>`${u}+${h}`))},e.div=l=>{l.compute(i(l.inputs,"Div",(u,h)=>`${u}/${h}`))},e.mul=l=>{l.compute(i(l.inputs,"Mul",(u,h)=>`${u}*${h}`))},e.pow=l=>{const u=(0,a.inputVariable)("input",l.inputs[0].dataType,l.inputs[0].dims).type.value,h=u==="i32"?"round":"";l.compute(i(l.inputs,"Pow",{scalar:(f,c)=>`pow_custom(${f},${c})`,vector:(f,c)=>`pow_vector_custom(${f},${c})`},`
    fn pow_custom(a : ${u}, b : ${u}) -> ${u} {
      if (b == ${u}(0.0)) {
        return ${u}(1.0);
      } else if (a < ${u}(0.0) && f32(b) != floor(f32(b))) {
        return ${u}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${u}(1.0), round(f32(abs(b) % ${u}(2.0))) != 1.0) * ${u}(${h}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${u}>, b : vec4<${u}>) -> vec4<${u}> {
      // TODO: implement vectorized pow
      return vec4<${u}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `))},e.sub=l=>{l.compute(i(l.inputs,"Sub",(u,h)=>`${u}-${h}`))}},2075:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createShaderHelper=e.outputVariable=e.inputVariable=e.tensorTypeToWsglStorageType=e.WORKGROUP_SIZE=void 0;const r=t(6952);e.WORKGROUP_SIZE=64;const s=(l,u)=>{switch(l){case 1:return u>1?`vec${u}<f32>`:"f32";case 6:return u>1?`vec${u}<i32>`:"i32";case 12:return u>1?`vec${u}<u32>`:"u32";case 7:if(u>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(u>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(u!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${l}`)}};e.tensorTypeToWsglStorageType=(l,u=1)=>{const h=s(l,u);return typeof h=="string"?h:h[0]};const a=(l,u,h,f,c)=>{const o=h.length,d=o<2?"u32":o<=4?`vec${o}<u32>`:`array<u32, ${o}>`,m=s(u,c),g=typeof m=="string"?m:m[1],y=typeof m=="string"?m:m[0],$={indices:d,value:g,storage:y,tensor:u},b=k=>typeof k=="string"?k:`${k}u`,x={offsetToIndices:!1,indicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},w=r.ShapeUtil.computeStrides(h);let v="";for(let k=0;k<o-1;k++)v+=`
    let dim${k} = current / ${w[k]}u;
    let rest${k} = current % ${w[k]}u;
    indices[${k}] = dim${k};
    current = rest${k};
    `;v+=`indices[${o-1}] = current;`;const S=o<2?"":`
  fn o2i_${l}(offset: u32) -> ${$.indices} {
    var indices: ${$.indices};
    var current = offset;
    ${v}
    return indices;
  }`,T=[];if(o>=2)for(let k=o-1;k>=0;k--)T.push(`${w[k]}u * (indices[${k}])`);const C=o<2?"":`
  fn i2o_${l}(indices: ${$.indices}) -> u32 {
    return ${T.join("+")};
  }`,I=(...k)=>o===0?"0u":`${$.indices}(${k.map(b).join(",")})`,N=(k,O)=>(()=>{if($.storage===$.value)return`${l}[${k}]=${O};`;if($.storage==="vec2<u32>"&&$.value==="i32")return`${l}[${k}]=vec2<u32>(u32(${O}), select(0u, 0xFFFFFFFFu, ${O} < 0));`;if($.storage==="vec2<u32>"&&$.value==="u32")return`${l}[${k}]=vec2<u32>(u32(${O}), 0u);`;if($.storage==="u32"&&$.value==="vec4<bool>")return`${l}[${k}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${O}));`;throw new Error(`not supported combination of storage type ${$.storage} and value type ${$.value} yet`)})(),P=k=>(()=>{if($.storage===$.value)return`${l}[${k}]`;if($.storage==="vec2<u32>"&&$.value==="i32")return`i32(${l}[${k}].x)`;if($.storage==="vec2<u32>"&&$.value==="u32")return`u32(${l}[${k}].x)`;if($.storage==="u32"&&$.value==="vec4<bool>")return`vec4<bool>(bool(${l}[${k}] & 0xFFu), bool(${l}[${k}] & 0xFF00u), bool(${l}[${k}] & 0xFF0000u), bool(${l}[${k}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${$.storage} and value type ${$.value} yet`)})(),F=o<2?"":`
  fn get_${l}ByIndices(indices: ${$.indices}) -> ${g} {
    return ${l}[i2o_${l}(indices)];
  }`,_=o<2?"":(()=>{const k=h.map((M,z)=>`d${z}: u32`).join(", "),O=h.map((M,z)=>`d${z}`).join(", ");return`
  fn get_${l}(${k}) -> ${g} {
    return get_${l}ByIndices(${I(O)});
  }`})(),D=o<2?"":`
  fn set_${l}ByIndices(indices: ${$.indices}, value: ${g}) {
    ${N(`i2o_${l}(indices)`,"value")}
  }`,E=o<2?"":(()=>{const k=h.map((M,z)=>`d${z}: u32`).join(", "),O=h.map((M,z)=>`d${z}`).join(", ");return`
  fn set_${l}(${k}, value: ${g}) {
    set_${l}ByIndices(${I(O)}, value);
  }`})();return{impl:()=>{const k=[];return x.offsetToIndices&&k.push(S),x.indicesToOffset&&k.push(C),x.set&&k.push(E),x.setByIndices&&k.push(D),x.get&&k.push(_),x.getByIndices&&k.push(F),k.join(`
`)},type:$,offsetToIndices:k=>(x.offsetToIndices=!0,o<2?k:`o2i_${l}(${k})`),indicesToOffset:k=>(x.indicesToOffset=!0,o<2?k:`i2o_${l}(${k})`),indices:I,indicesGet:(k,O)=>o<2?`${k}`:`${k}[${O}]`,indicesSet:(k,O,M)=>o<2?`${k}=${M};`:`${k}[${O}]=${M};`,set:(...k)=>{if(k.length!==o+1)throw new Error(`indices length must be ${o}`);const O=k[o];if(typeof O!="string")throw new Error("value must be string");const M=k.slice(0,o).map(b).join(",");return o===0?N("0u",O):o===1?N(M[0],O):(x.set=!0,x.setByIndices=!0,x.indicesToOffset=!0,`set_${l}(${M}, ${O})`)},setByOffset:N,setByIndices:(k,O)=>o<2?N(k,O):(x.setByIndices=!0,x.indicesToOffset=!0,`set_${l}ByIndices(${k}, ${O});`),get:(...k)=>{if(k.length!==o)throw new Error(`indices length must be ${o}`);const O=k.map(b).join(",");return o===0?P("0u"):o===1?P(O[0]):(x.get=!0,x.getByIndices=!0,x.indicesToOffset=!0,`get_${l}(${O})`)},getByOffset:P,getByIndices:k=>o<2?P(k):(x.getByIndices=!0,x.indicesToOffset=!0,`get_${l}ByIndices(${k})`),usage:f?"input":"output",name:l,shape:h}};e.inputVariable=(l,u,h,f=1)=>a(l,u,h,!0,f),e.outputVariable=(l,u,h,f=1)=>a(l,u,h,!1,f);class i{constructor(u){this.normalizedDispatchGroup=u,this.indicesHelpers=[]}guardAgainstOutOfBoundsWorkgroupSizes(u){return`if (global_idx >= ${typeof u=="number"?`${u}u`:u}) { return; }`}mainStart(u=e.WORKGROUP_SIZE){const h=typeof u=="number"?u:u[0],f=typeof u=="number"?1:u[1],c=typeof u=="number"?1:u[2],o=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1;return`@compute @workgroup_size(${h}, ${f}, ${c})
  fn main(${o?"@builtin(global_invocation_id) global_id : vec3<u32>":`@builtin(local_invocation_index) local_index : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>`}) {
    ${o?"let global_idx = global_id.x;":`let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0]*this.normalizedDispatchGroup[1]}u +
          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${h*f*c}u + local_index;`}
  `}declareVariable(u,h){this.indicesHelpers.push(u);const f=u.usage==="input"?"read":"read_write",c=u.type.storage;return`@group(0) @binding(${h}) var<storage, ${f}> ${u.name}: array<${c}>;`}declareVariables(...u){let h=0;return u.filter(f=>r.ShapeUtil.size(f.shape)>0).map(f=>this.declareVariable(f,h++)).join(`
`)}get additionalImplementations(){return this.indicesHelpers.map(u=>u.impl()).join(`
`)}}e.createShaderHelper=l=>new i(l)},513:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseConcatAttributes=e.concat=void 0;const r=t(6952),s=t(387),a=t(1163),i=t(2075);e.concat=(l,u)=>{(h=>{if(!h||h.length<1)throw new Error("too few inputs");const f=h[0].dataType,c=h[0].dims.length;for(const o of h){if(o.dataType!==f)throw new Error("input tensors should be one type");if(o.dims.length!==c)throw new Error("input tensors should have the same shape")}})(l.inputs),l.compute(((h,f)=>{const c=(o=h.length,d=f.cacheKey,{name:"Concat",inputTypes:Array(o).fill(a.GpuDataType.default),cacheHint:d});var o,d;return Object.assign(Object.assign({},c),{get:()=>((m,g,y)=>{const $=g[0].dims.slice();if(y>=$.length||y<-1*$.length)throw new Error("axis specified for concat doesn't match input dimensionality");const b=y<0?$.length+y:y,x=$.slice(0);for(let P=1;P<g.length;P++){const F=g[P].dims.slice();for(let _=0;_<$.length;_++)if(_===b)x[b]+=F[_];else if($[_]!==F[_])throw new Error("non concat dimensions must match")}const w=r.ShapeUtil.size(x),v=new Array(g.length),S=new Array(g.length),T=g[0].dataType;let C=0;for(let P=0;P<g.length;++P)C+=g[P].dims[b],v[P]=C,S[P]=(0,i.inputVariable)(`input${P}`,T,g[P].dims);const I=(0,i.outputVariable)("output",T,x),N=I.indicesGet("indices",b);return Object.assign(Object.assign({},m),{outputs:[{dims:x,dataType:g[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:P=>{return`
  ${P.declareVariables(...S,I)}

  const sizeInConcatAxis = array<u32, ${v.length}>(${v.map(_=>`${_}u`).join(",")});
  ${F=v.length,`
  fn calculateInputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${F}u; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${F}u;
  }`}

  ${P.mainStart()}
    ${P.guardAgainstOutOfBoundsWorkgroupSizes(w)}

    var indices = ${I.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${N});
    if (inputIndex != 0u) {
      ${N} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${((_,D)=>{const E=_.length,k=[];for(let O=0;O<E;++O){const M=D.setByOffset("global_idx",_[O].getByIndices("indices"));E===1?k.push(M):O===0?k.push(`if (inputIndex == ${O}u) { ${M} }`):O===E-1?k.push(`else { ${M} }`):k.push(`else if (inputIndex == ${O}) { ${M} }`)}return k.join(`
`)})(S,I)}
  }`;var F},dispatchGroup:()=>({x:Math.ceil(w/64)})})})(c,h,f.axis)})})(l.inputs,u))},e.parseConcatAttributes=l=>(0,s.createAttributeWithCacheKey)({axis:l.axis})},9192:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createGroupedConvProgramInfoLoader=void 0;const r=t(6952),s=t(1163),a=t(2075),i=t(9770),l=t(3997);e.createGroupedConvProgramInfoLoader=(u,h,f)=>{const c=(o=u.length>2,d=h.cacheKey,{name:"GroupedConv",inputTypes:o?[s.GpuDataType.default,s.GpuDataType.default,s.GpuDataType.default]:[s.GpuDataType.default,s.GpuDataType.default],cacheHint:d});var o,d;return Object.assign(Object.assign({},c),{get:()=>((m,g,y,$)=>{const b=m.length>2,x=b?"value += b[output_channel];":"",w=m[0].dims,v=m[1].dims,S=v[0]/y.group,{activationFunction:T,applyActivation:C}=(0,l.getActicationSnippet)(y),I=y.format==="NHWC",N=(0,i.calculateOutputShape)(w,v,y.dilations,y.pads,y.strides,I),P=r.ShapeUtil.size(N),F=(0,a.outputVariable)("output",m[0].dataType,N),_=(0,a.inputVariable)("x",m[0].dataType,w),D=(0,a.inputVariable)("w",m[1].dataType,v),E=[_,D];return b&&E.push((0,a.inputVariable)("b",m[2].dataType,m[2].dims)),Object.assign(Object.assign({},g),{outputs:[{dims:$?$(N):N,dataType:m[0].dataType,gpuDataType:s.GpuDataType.default}],getShaderSource:k=>`
  const strides: vec2<u32> = vec2(${y.strides[0]}u, ${y.strides[1]}u);
  const pads: vec2<u32> = vec2(${y.pads[0]}u, ${y.pads[1]}u);

  ${k.declareVariables(...E,F)}

  ${T}

  ${k.mainStart()}
    ${k.guardAgainstOutOfBoundsWorkgroupSizes(P)}

    let outputIndices = ${F.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${I?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${I?1:2}], outputIndices[${I?2:3}]) * strides - pads;
    let group_id: u32 = output_channel / ${S}u;

    var value: ${F.type.value} = ${F.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < ${v[1]}u; wInChannel++) {
      let input_channel = group_id * ${v[1]}u + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < ${v[2]}u; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * ${y.dilations[0]}u;

        if (xHeight < 0u || xHeight >= ${w[I?1:2]}u) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < ${v[3]}u; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * ${y.dilations[1]}u;
          if (xWidth < 0u || xWidth >= ${w[I?2:3]}u) {
            continue;
          }

          let xVal = ${I?_.get("batch","xHeight","xWidth","input_channel"):_.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${D.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${x}
    ${C}
    ${F.setByOffset("global_idx","value")}
  }`,dispatchGroup:()=>({x:Math.ceil(P/64)})})})(u,c,h,f)})}},7640:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.convTranspose=e.parseConvTransposeAttributes=void 0;const r=t(387),s=t(1163),a=t(6514),i=t(3997),l=(c,o,d,m,g,y)=>(c-1)*o+d+(m-1)*g+1-y,u=(c,o,d,m,g)=>{const y=Math.floor(c/2);o==="SAME_UPPER"?(d[m]=y,d[g]=c-y):o==="SAME_LOWER"&&(d[m]=c-y,d[g]=y)},h=(c,o)=>{const d=c.kernelShape.slice();if(c.kernelShape.length===0||c.kernelShape.reduce((S,T)=>S*T,0)===0){d.length=0;for(let S=2;S<o[1].dims.length;++S)d.push(o[1].dims[S])}const m=c.format==="NHWC";d.splice(0,0,o[1].dims[0]),d.splice(m?3:1,0,o[1].dims[1]);const g=c.pads.slice(),y=c.outputShape.slice(),$=c.outputPadding.slice(),b=o[0].dims;let x=c.dilations.slice();if(x.reduce((S,T)=>S+T,0)===0){const S=o[0].dims.length-2;x=new Array(S).fill(1)}let w=c.strides.slice();if(w.reduce((S,T)=>S+T,0)===0){const S=o[0].dims.length-2;w=new Array(S).fill(1)}((S,T,C,I,N,P,F,_,D,E)=>{const k=S.length-2,O=E.length===0;if(D.length===0)for(let G=0;G<k;++G)D.push(0);const M=S[0],z=T[_?3:1]*N;for(let G=0,j=S.length-k-(_?1:0);G<k;++G,++j){const K=S[j],X=O?K*F[G]:E[G],Y=l(K,F[G],P[G],T[j],C[G],X);u(Y,I,P,G,G+k),O&&E.push(F[G]*(K-1)+D[G]+(T[j]-1)*C[G]+1-P[G]-P[G+k])}E.splice(0,0,M),E.splice(_?3:1,0,z)})(b,d,x,c.autoPad,c.group,g,w,m,$,y);const v=Object.assign({},c);return Object.assign(v,{kernelShape:d,pads:g,outputPadding:$,outputShape:y,dilations:x,strides:w,cacheKey:c.cacheKey}),v};e.parseConvTransposeAttributes=c=>{const o=(0,i.parseInternalActivationAttributes)(c),d=c.format,m=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][c.autoPad===void 0?0:c.autoPad],g=c.dilations,y=c.group,$=c.kernelShape,b=c.pads,x=c.strides,w=c.wIsConst(),v=c.outputPadding,S=c.outputShape;return(0,r.createAttributeWithCacheKey)(Object.assign({autoPad:m,format:d,dilations:g,group:y,kernelShape:$,outputPadding:v,outputShape:S,pads:b,strides:x,wIsConst:w},o))};const f=(c,o,d)=>{const m=(g=c.length===3,y=o.cacheKey,{name:"ConvTranspose2D",inputTypes:g?[s.GpuDataType.default,s.GpuDataType.default,s.GpuDataType.default]:[s.GpuDataType.default,s.GpuDataType.default],cacheHint:y});var g,y;return Object.assign(Object.assign({},m),{get:()=>(0,a.createConvTranspose2DProgramInfo)(c,m,o,d)})};e.convTranspose=(c,o)=>{((d,m)=>{if(!d||d.length!==2&&d.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(d[0].dims.length!==4&&d[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(d[0].dims.length!==d[1].dims.length)throw new Error("filter does not have same dimension as input");if(d[0].dims[m.format==="NHWC"?d[0].dims.length-1:1]!==d[1].dims[0])throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");const g=d[1].dims[1]*m.group;if(d.length===3&&(d[2].dims.length!==1||d[2].dims[0]!==g))throw new Error("invalid bias");const y=d[0].dims.length-2;if(m.dilations.reduce(($,b)=>$+b,0)>0&&m.dilations.length!==y)throw new Error(`dilations should be ${y}D`);if(m.strides.reduce(($,b)=>$+b,0)>0&&m.strides.length!==y)throw new Error(`strides should be ${y}D`);if(m.pads.reduce(($,b)=>$+b,0)>0&&m.pads.length!==2*y)throw new Error(`pads should be ${2*y}D`);if(m.outputPadding.length!==y&&m.outputPadding.length!==0)throw new Error(`output_padding should be ${y}D`);if(m.kernelShape.reduce(($,b)=>$+b,0)>0&&m.kernelShape.length!==0&&m.kernelShape.length!==d[1].dims.length-2)throw new Error("invalid kernel shape");if(m.outputShape.length!==0&&m.outputShape.length!==d[0].dims.length-2)throw new Error("invalid output shape");if(d[0].dataType!==1||d[1].dataType!==1)throw new Error("ConvTranspose input(X,W) should be float tensor");if(d.length===3&&d[2].dataType!==1)throw new Error("ConvTranspose input(bias) should be float tensor")})(c.inputs,o),c.inputs[0].dims.length===3?((d,m)=>{const g=m.format==="NHWC",y=[d.inputs[0].reshape(g?[d.inputs[0].dims[0],1,d.inputs[0].dims[1],d.inputs[0].dims[2]]:[d.inputs[0].dims[0],d.inputs[0].dims[1],1,d.inputs[0].dims[2]]),d.inputs[1].reshape([d.inputs[1].dims[0],d.inputs[1].dims[1],1,d.inputs[1].dims[2]])];y.length===3&&y.push(d.inputs[2]);let $=m.kernelShape;$.length!==0&&$[0]!==0||($=[d.inputs[1].dims[2]]);let b=m.dilations;b.length!==0&&b[0]!==0||(b=[1]);let x=m.strides;x.length!==0&&x[0]!==0||(x=[1]);let w=m.pads;w.length===0&&(w=[0,0]),w=[0,w[0],0,w[1]],x=[1].concat(x),b=[1].concat(b),$=[1].concat($);const v=h(Object.assign(Object.assign({},m),{pads:w,strides:x,dilations:b,kernelShape:$}),y);d.compute(f(y,v,S=>g?[S[0],S[2],S[3]]:[S[0],S[1],S[3]]))})(c,o):((d,m,g)=>{const y=h(g,m);d.compute(f(m,y))})(c,c.inputs,o)}},9770:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.conv=e.parseConvAttributes=e.calculateOutputShape=void 0;const r=t(6952),s=t(387),a=t(9192),i=t(3822),l=t(3997),u=t(2625);e.calculateOutputShape=(c,o,d,m,g,y)=>{const $=c[0],b=c.slice(y?1:2,y?3:4),x=b.length,w=o[0],v=o.slice(2).map((T,C)=>T+(T-1)*(d[C]-1)),S=b.map((T,C)=>T+m[C]+m[C+x]).map((T,C)=>Math.floor((T-v[C]+g[C])/g[C]));return S.splice(0,0,$),S.splice(y?3:1,0,w),S};const h=(0,s.createAttributeWithCacheKey)({perm:[2,3,1,0]}),f=(c,o)=>{const d=c.kernelShape.slice();for(let y=2;y<o[1].dims.length;++y)d[y-2]===0&&(d[y-2]=o[1].dims[y]);const m=c.pads.slice();r.PoolConvUtil.adjustPadsBasedOnAutoPad(o[0].dims,c.strides,c.dilations,d,m,c.format==="NHWC",c.autoPad);const g=Object.assign({},c);return Object.assign(g,{kernelShape:d,pads:m,cacheKey:c.cacheKey}),g};e.parseConvAttributes=c=>{const o=(0,l.parseInternalActivationAttributes)(c),d=c.format,m=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][c.auto_pad],g=c.dilations,y=c.group,$=c.kernel_shape,b=c.pads,x=c.strides,w=c.w_is_const();return(0,s.createAttributeWithCacheKey)(Object.assign({autoPad:m,format:d,dilations:g,group:y,kernelShape:$,pads:b,strides:x,wIsConst:w},o))},e.conv=(c,o)=>{((d,m)=>{if(!d||d.length!==2&&d.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(d[0].dims.length!==4&&d[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(d[0].dims.length!==d[1].dims.length)throw new Error("filter does not have same dimension as input");if(d[0].dims[m.format==="NHWC"?d[0].dims.length-1:1]!==d[1].dims[1]*m.group)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(d.length===3&&(d[2].dims.length!==1||d[1].dims[0]!==d[2].dims[0]))throw new Error("invalid bias");const g=d[0].dims.length-2;if(m.dilations.length!==g)throw new Error(`dilations should be ${g}D`);if(m.strides.length!==g)throw new Error(`strides should be ${g}D`);if(m.pads.length!==2*g)throw new Error(`pads should be ${2*g}D`);if(m.kernelShape.length!==0&&m.kernelShape.length!==d[1].dims.length-2)throw new Error("invalid kernel shape");if(d[0].dataType!==1||d[1].dataType!==1)throw new Error("Conv input(X,W) should be float tensor");if(d.length===3&&d[2].dataType!==1)throw new Error("Conv input(bias) should be float tensor")})(c.inputs,o),c.inputs[0].dims.length===3?((d,m)=>{const g=m.format==="NHWC",y=[d.inputs[0].reshape(g?[d.inputs[0].dims[0],1,d.inputs[0].dims[1],d.inputs[0].dims[2]]:[d.inputs[0].dims[0],d.inputs[0].dims[1],1,d.inputs[0].dims[2]]),d.inputs[1].reshape([d.inputs[1].dims[0],d.inputs[1].dims[1],1,d.inputs[1].dims[2]])];d.inputs.length===3&&y.push(d.inputs[2]);const $=[0,m.pads[0],0,m.pads[1]],b=[1].concat(m.strides),x=[1].concat(m.dilations),w=[1].concat(m.kernelShape),v=f(Object.assign(Object.assign({},m),{pads:$,strides:b,dilations:x,kernelShape:w}),y);d.compute((0,a.createGroupedConvProgramInfoLoader)(y,v,S=>g?[S[0],S[2],S[3]]:[]))})(c,o):((d,m,g)=>{var y;const $=f(g,m),b=m.length===3,x=g.format==="NHWC",w=m[0].dims[x?1:2],v=m[0].dims[x?2:3],S=m[0].dims[x?3:1],T=m[1].dims[2],C=m[1].dims[3],I=(0,e.calculateOutputShape)(m[0].dims,m[1].dims,g.dilations,$.pads,g.strides,x),N=I[x?1:2],P=I[x?2:3],F=I[x?3:1];if(x&&T===w&&C===v&&g.autoPad==="VALID"||T===1&&C===1&&g.dilations[0]===1&&g.dilations[1]===1&&g.strides[0]===1&&g.strides[1]===1&&(g.autoPad==="SAME_UPPER"||g.autoPad==="SAME_LOWER"||g.autoPad==="VALID")||!x||g.group!==1)return void d.compute((0,a.createGroupedConvProgramInfoLoader)(m,$));const _=x?N*P:F,D=x?F:N*P,E=T*C*S,k=(y=d.kernelCustomData.wT)!==null&&y!==void 0?y:d.compute(Object.assign(Object.assign({},u.transposeProgramMetadata),{cacheHint:h.cacheKey,get:()=>(0,u.createTransposeProgramInfo)(m[1],h.perm)}),{inputs:[1],outputs:[g.wIsConst?-2:-1]})[0];g.wIsConst&&!d.kernelCustomData.wT&&(d.kernelCustomData.wT=k);const O=[m[0],k];b&&(x||m[2].dims.length!==1?O.push(m[2]):O.push(m[2].reshape([m[2].dims[0],1,1]))),d.compute((0,i.createConv2DMatMulProgramInfoLoader)(O,$,I,_,D,E,b,!0),{inputs:O})})(c,c.inputs,o)}},3822:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createConv2DMatMulProgramInfoLoader=void 0;const r=t(1163),s=t(9456);e.createConv2DMatMulProgramInfoLoader=(a,i,l,u,h,f,c,o)=>{const d=((m,g)=>({name:"Conv2DMatMul",inputTypes:m?[r.GpuDataType.default,r.GpuDataType.default,r.GpuDataType.default]:[r.GpuDataType.default,r.GpuDataType.default],cacheHint:g}))(c,i.cacheKey);return Object.assign(Object.assign({},d),{get:()=>(0,s.createConv2DMatMulProgramInfo)(a,d,i,l,u,h,f,c,o)})}},8856:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.expand=e.expandProgramMetadata=void 0;const r=t(6952),s=t(1163),a=t(2075);e.expandProgramMetadata={name:"Expand",inputTypes:[s.GpuDataType.default]};const i=(l,u)=>{const h=l.length-u.length,f=[];for(let c=0;c<h;++c)f.push(l[c]);for(let c=0;c<u.length;++c)f.push(u[c]===1?l[c+h]:u[c]);return f};e.expand=l=>{(h=>{if(!h||h.length!==2)throw new Error("Expand requires 2 input.");const f=h[0].dims,c=Array.from(h[1].getBigInt64Array(),Number);let o=c.length<f.length?0:c.length-f.length,d=f.length<c.length?0:f.length-c.length;for(;o<c.length&&d<f.length;++o,++d)if(c[o]!==f[d]&&c[o]!==1&&f[d]!==1)throw new Error("Expand requires shape to be broadcastable to input")})(l.inputs);const u=Array.from(l.inputs[1].getBigInt64Array(),Number).toString();l.compute(Object.assign(Object.assign({},e.expandProgramMetadata),{cacheHint:u,get:()=>((h,f)=>{const c=f[0].dims,o=Array.from(f[1].getBigInt64Array(),Number),d=((b,x)=>b.length>x.length?i(b,x):i(x,b))(c,o),m=r.ShapeUtil.size(d),g=f[0].dataType,y=(0,a.inputVariable)("input",g,c),$=(0,a.outputVariable)("output",g,d);return Object.assign(Object.assign({},h),{getShaderSource:b=>`
  const inputShape = ${y.indices(...c)};
  ${b.declareVariables(y,$)}
  ${b.mainStart()}
  ${b.guardAgainstOutOfBoundsWorkgroupSizes(m)}
    let outputIndices = ${$.offsetToIndices("global_idx")};
    var inputIndices: ${y.type.indices};
    for (var i = 0; i < ${c.length}; i++) {
      if (${y.indicesGet("inputShape","i")} == 1) {
        ${y.indicesSet("inputIndices","i",0)}
      } else {
        ${y.indicesSet("inputIndices","i",$.indicesGet("outputIndices","i + "+(d.length-c.length)))}
      }
    }
    ${$.setByOffset("global_idx",y.getByIndices("inputIndices"))}
  }`,outputs:[{dims:d,dataType:f[0].dataType,gpuDataType:s.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(m/64)})})})(e.expandProgramMetadata,l.inputs)}),{inputs:[0]})}},3997:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseInternalActivationAttributes=e.getActicationSnippet=void 0;const r=t(6952);e.getActicationSnippet=s=>{switch(s.activation){case"Relu":return{activationFunction:"",applyActivation:"value = max(value, 0.0);"};case"Sigmoid":return{activationFunction:"",applyActivation:"value = (1.0 / (1.0 + exp(-value)));"};case"Clip":return{activationFunction:`const clip_min_=f32(${s.clipMin});const clip_max_=f32(${s.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},e.parseInternalActivationAttributes=s=>{const a=s?.activation||"";if(a==="Clip"){const[i,l]=s?.activation_params||[r.MIN_CLIP,r.MAX_CLIP];return{activation:a,clipMax:l,clipMin:i,activationCacheKey:`${a}:${i},${l}`}}return{activation:a,activationCacheKey:a}}},8405:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.gather=e.parseGatherAttributes=void 0;const r=t(6952),s=t(387),a=t(1163);e.parseGatherAttributes=i=>(0,s.createAttributeWithCacheKey)({axis:i.axis}),e.gather=(i,l)=>{(h=>{if(!h||h.length!==2)throw new Error("Gather requires 2 inputs.")})(i.inputs);const u={name:"Gather",inputTypes:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:l.cacheKey};i.compute(((h,f,c)=>{const o=f[0].dims,d=f[1].dims,m=o.length,g=r.ShapeUtil.normalizeAxis(c.axis,m),y=o.slice(0);y.splice(g,1,...d);const $=f[0].dataType,b=r.ShapeUtil.sizeFromDimension(o,g+1),x=[7,13,11].includes($)?2:1,w=f[1].dataType===7?2:1,v=x*b,S=r.ShapeUtil.sizeToDimension(o,g),T=r.ShapeUtil.size(d),C=r.ShapeUtil.sizeFromDimension(o,g)*x,I=T*b*x,N=o[g],P=r.ShapeUtil.size(o)*x,F=r.ShapeUtil.size(y)*x,_=S*T;return Object.assign(Object.assign({},h),{outputs:[{dims:y,dataType:f[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:D=>`
  const N: u32 = ${T};
  const elementSize: u32 = ${x};
  const indicesElementSize: u32 = ${w};

  @group(0) @binding(0) var<storage, read> input : array<u32>;
  @group(0) @binding(1) var<storage, read> inputIndices : array<i32>;
  @group(0) @binding(2) var<storage, read_write> output: array<u32>;

  ${D.mainStart()}
    let batch: u32 = global_idx / N;
    let i: u32 = global_idx % N;

    let srcOffsetBatch: u32 = batch * ${C};
    let dstOffsetBatch: u32 = batch * ${I};
    var idx = inputIndices[i * indicesElementSize];
    if (idx < 0) {
        idx = idx + ${N};
    }

    let srcOffset = srcOffsetBatch + u32(idx) * ${v};
    let dstOffset = dstOffsetBatch + i * ${v};
    if (srcOffset >= ${P}) {
        return;
    }
    if (dstOffset >= ${F}) {
        return;
    }
    for (var j: u32 = 0; j < ${v}; j++) {
        output[dstOffset + j] = input[srcOffset + j];
    }
  }`,dispatchGroup:()=>({x:Math.ceil(_/64)})})})(u,i.inputs,l))}},4271:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseGemmAttributes=e.gemm=void 0;const r=t(6952),s=t(387),a=t(1163);e.gemm=(i,l)=>{(u=>{if(!u)throw new Error("Input is missing");if(u.length<2||u.length>3)throw new Error("Invaid input number.");if(u.length===3&&u[2].dims.length>2)throw new Error("Invalid input shape of C");if(u[0].dataType!==1||u[1].dataType!==1||u.length===3&&u[2].dataType!==1)throw new Error("Invalid input type.");if(u[0].dataType!==u[1].dataType||u.length===3&&u[0].dataType!==u[2].dataType)throw new Error("Input types are mismatched")})(i.inputs),i.compute(((u,h)=>{const f={name:"Gemm",inputTypes:u.length===3?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:h.cacheKey};return Object.assign(Object.assign({},f),{get:()=>((c,o,d)=>{const m=o[0].dims.slice(),g=o[1].dims.slice(),[y,$,b]=r.GemmUtil.getShapeOfGemmResult(m,d.transA,g,d.transB,o.length===3?o[2].dims:void 0),x=[y,$];if(!x)throw new Error("Can't use gemm on the given tensors");const w=r.ShapeUtil.size(x);let v="";d.transA&&d.transB?v="value += a[k * M + m] * b[n * K + k];":d.transA&&!d.transB?v="value += a[k * M + m] * b[k * N + n];":!d.transA&&d.transB?v="value += a[m * K + k] * b[n * K + k];":d.transA||d.transB||(v="value += a[m * K + k] * b[k * N + n];");const S="f32",T=d.alpha===1?"":"value *= alpha;",C=o.length===3?`value += beta * c[${((N,P,F)=>{if(F.length===0)return"0u";const _=F.length===1&&N!==1||F.length===2&&F[0]!==N,D=F[F.length-1]!==P;let E="0u";return _||(E+=`+ m * ${F[F.length-1]}u`),D||(E+="+n"),E})(y,$,o[2].dims)}];`:"",I=[`@group(0) @binding(0) var<storage, read> a : array<${S}>;`,`@group(0) @binding(1) var<storage, read> b : array<${S}>;`];return o.length===3&&I.push(`@group(0) @binding(2) var<storage, read> c : array<${S}>;`),Object.assign(Object.assign({},c),{outputs:[{dims:x,dataType:o[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:N=>`
  const M: u32 = ${y}u;
  const N: u32 = ${$}u;
  const K: u32 = ${b}u;
  const alpha = ${S}(${d.alpha});
  const beta = ${S}(${d.beta});

  ${I.join(`
`)}
  @group(0) @binding(${o.length}) var<storage, read_write> output : array<${S}>;

  ${N.mainStart()}
    ${N.guardAgainstOutOfBoundsWorkgroupSizes(w)}

    let m = global_id.x / N;
    let n = global_id.x % N;

    var value = ${S}(0);
    for (var k: u32 = 0u; k<${b}u; k++) {
      ${v}
    }

    ${T}
    ${C}
    output[global_id.x] = value;

  }`,dispatchGroup:()=>({x:Math.ceil(w/64)})})})(f,u,h)})})(i.inputs,l))},e.parseGemmAttributes=i=>(0,s.createAttributeWithCacheKey)(i)},1798:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.instanceNorm=e.parseInstanceNormAttributes=void 0;const r=t(6952),s=t(387),a=t(1163),i=t(2075);e.parseInstanceNormAttributes=l=>(0,s.createAttributeWithCacheKey)({epsilon:l.epsilon,format:l.format}),e.instanceNorm=(l,u)=>{(f=>{if(!f||f.length!==3)throw new Error("instanceNorm requires 3 inputs.");if(f[0].dataType!==1||f[1].dataType!==1)throw new Error("inputs should be float type")})(l.inputs);const h={name:"InstanceNormalization",inputTypes:[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default],cacheHint:u.cacheKey};u.format==="NHWC"?l.compute(((f,c,o)=>{const d=c[0].dims,m=d,g=r.ShapeUtil.size(m),y=d[0],$=d[d.length-1],b=r.ShapeUtil.sizeFromDimension(d,1)/$,x=(0,i.tensorTypeToWsglStorageType)(c[0].dataType),w=$*y;return Object.assign(Object.assign({},f),{outputs:[{dims:m,dataType:c[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:v=>`
  const N: u32 = ${y};
  const H: u32 = ${b};
  const C: u32 = ${$};
  const normSizeTyped: ${x} = ${b};
  const imageSize: u32 = ${b*$};
  const epsilon: f32 = ${o.epsilon};

  @group(0) @binding(0) var<storage, read> x : array<${x}>;
  @group(0) @binding(1) var<storage, read> scale : array<${x}>;
  @group(0) @binding(2) var<storage, read> bias : array<${x}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${x}>;

  ${v.mainStart()}
    let currentImageNumber = global_idx / C;
    let currentChannelNumber = global_idx % C;
    
    // offset is channel num * N
    let offset = currentImageNumber * imageSize;
    if (offset >= ${g}) { return; }
    var mean: ${x} = 0;

    for (var i: u32 = 0u; i < H; i++) {
        mean = mean + x[offset + i * C + currentChannelNumber];
    }
    mean = mean / normSizeTyped;

    var squaredNorm: ${x} = 0;
    for (var i: u32 = 0u; i < H; i++) {
        let deviation: f32 = x[offset + i * C + currentChannelNumber] - mean;
        squaredNorm = squaredNorm + deviation * deviation;
    }
    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);
    let channelScale = invStdDev * scale[currentChannelNumber];
    let channelShift = bias[currentChannelNumber] - mean * channelScale;
    for (var i: u32 = 0u; i < H; i++) {
        let currentOffset = offset + i * C + currentChannelNumber;
        output[currentOffset] = x[currentOffset] * channelScale + channelShift;
    }
  }`,dispatchGroup:()=>({x:Math.ceil(w/64)})})})(h,l.inputs,u)):l.compute(((f,c,o)=>{const d=c[0].dims,m=c[1],g=c[2],y=d,$=r.ShapeUtil.size(y),b=r.ShapeUtil.sizeToDimension(d,2),x=r.ShapeUtil.sizeFromDimension(d,2),w=d[1],v=r.ShapeUtil.size(m.dims),S=g?r.ShapeUtil.size(g.dims):0;if(v!==x||g&&S!==x)throw new Error(`Size of X.shape()[axis:] == ${x}.
             Size of scale and bias (if provided) must match this. 
             Got scale size of ${v} and bias size of ${S}`);const T=(0,i.tensorTypeToWsglStorageType)(c[0].dataType);return Object.assign(Object.assign({},f),{outputs:[{dims:y,dataType:c[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:C=>`
  const C: u32 = ${w};
  const normSize: u32 = ${x};
  const normSizeTyped: ${T} = ${x};
  const epsilon: f32 = ${o.epsilon};

  @group(0) @binding(0) var<storage, read> x : array<${T}>;
  @group(0) @binding(1) var<storage, read> scale : array<${T}>;
  @group(0) @binding(2) var<storage, read> bias : array<${T}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${T}>;

  ${C.mainStart()}
    let offset = global_idx * normSize;
    if (offset + normSize >= ${$}) { return; }
    var mean: ${T} = 0;

    for (var h: u32 = 0u; h < normSize; h++) {
        mean = mean + x[h + offset];
    }
    mean = mean / normSizeTyped;

    var squaredNorm: ${T} = 0;
    for (var h: u32 = 0u; h < normSize; h++) {
        let deviation: f32 = x[h + offset] - mean;
        squaredNorm = squaredNorm + deviation * deviation;
    }
    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);
    let channelScale = invStdDev * scale[global_idx % C];
    let channelShift = bias[global_idx % C] - mean * channelScale;
    for (var j: u32 = 0; j < normSize; j++) {
        output[j + offset] = x[j + offset] * channelScale + channelShift;
    }
  }`,dispatchGroup:()=>({x:Math.ceil(b/64)})})})(h,l.inputs,u))}},2915:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.layerNorm=e.parseLayerNormAttributes=void 0;const r=t(6952),s=t(387),a=t(1163),i=t(2075);e.parseLayerNormAttributes=l=>(0,s.createAttributeWithCacheKey)({axis:l.axis,epsilon:l.epsilon}),e.layerNorm=(l,u)=>{(f=>{if(!f||f.length<2)throw new Error("layerNorm requires at least 2 inputs.");if(f[0].dataType!==1||f[1].dataType!==1)throw new Error("inputs should be float type")})(l.inputs);const h={name:"LayerNormalization",inputTypes:l.inputs.length===2?[a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default],cacheHint:u.cacheKey+l.outputCount.toString(10)+l.inputs.length.toString(10)};l.compute(((f,c,o,d)=>{const m=c[0].dims,g=c[1],y=c[2],$=m,b=r.ShapeUtil.size($),x=r.ShapeUtil.normalizeAxis(o.axis,m.length),w=r.ShapeUtil.sizeToDimension(m,x),v=r.ShapeUtil.sizeFromDimension(m,x),S=r.ShapeUtil.size(g.dims),T=y?r.ShapeUtil.size(y.dims):0;if(S!==v||y&&T!==v)throw new Error(`Size of X.shape()[axis:] == ${v}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${S} and bias size of ${T}`);const C=[];for(let D=0;D<m.length;++D)D<x?C.push(m[D]):C.push(1);const I=(0,i.tensorTypeToWsglStorageType)(c[0].dataType),N=d>1,P=d>2;let F=0;const _=[{dims:$,dataType:c[0].dataType,gpuDataType:a.GpuDataType.default}];return N&&_.push({dims:C,dataType:c[0].dataType,gpuDataType:a.GpuDataType.default}),P&&_.push({dims:C,dataType:c[0].dataType,gpuDataType:a.GpuDataType.default}),Object.assign(Object.assign({},f),{outputs:_,getShaderSource:D=>`
  const normSize: u32 = ${v};
  const normSizeTyped: ${I} = ${v};
  const epsilon: f32 = ${o.epsilon};

  @group(0) @binding(${F++}) var<storage, read> x : array<${I}>;
  @group(0) @binding(${F++}) var<storage, read> scale : array<${I}>;
  ${y?`@group(0) @binding(${F++}) var<storage, read> bias : array<${I}>;`:""}
  @group(0) @binding(${F++}) var<storage, read_write> output : array<${I}>;
  ${N?`@group(0) @binding(${F++}) var<storage, read_write> meanDataOutput : array<${I}>`:""};
  ${P?`@group(0) @binding(${F++}) var<storage, read_write> invStdOutput : array<${I}>`:""};

  ${D.mainStart()}
    let offset = global_idx * normSize;
    if (offset >= ${b}) { return; }
    var mean: ${I} = 0;
    var meanSquare: ${I} = 0;

    for (var h: u32 = 0u; h < normSize; h++) {
      mean = mean + x[h + offset];
      meanSquare = meanSquare + x[h + offset] * x[h + offset];
    }
    mean = mean / normSizeTyped;
    meanSquare = sqrt(meanSquare / normSizeTyped - mean * mean + epsilon);

    for (var j: u32 = 0; j < normSize; j++) {
      output[j + offset] = (x[j + offset] - mean) / meanSquare * scale[j] ${y?"+ bias[j]":""};
    }

    ${N?"meanDataOutput[global_idx] = mean":""};
    ${P?"invStdOutput[global_idx] = 1 / meanSquare":""};
  }`,dispatchGroup:()=>({x:Math.ceil(w/64)})})})(h,l.inputs,u,l.outputCount))}},1522:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.matMul=e.createMatmulProgramInfoLoader=void 0;const r=t(6952),s=t(1163),a=t(3997);e.createMatmulProgramInfoLoader=(i,l)=>{const u=(h=i.length>2,f=l.activationCacheKey,{name:"MatMul",inputTypes:h?[s.GpuDataType.default,s.GpuDataType.default,s.GpuDataType.default]:[s.GpuDataType.default,s.GpuDataType.default],cacheHint:f});var h,f;return Object.assign(Object.assign({},u),{get:()=>((c,o,d)=>{const m=o[0].dims,g=o[1].dims,y=r.BroadcastUtil.calcShape(m,g,!0);if(!y)throw new Error("Can't use matmul on the given tensors");const $=r.ShapeUtil.size(y),b="f32",{activationFunction:x,applyActivation:w}=(0,a.getActicationSnippet)(d),v=y[y.length-2],S=m[m.length-1],T=y[y.length-1];return Object.assign(Object.assign({},c),{outputs:[{dims:y,dataType:o[0].dataType,gpuDataType:s.GpuDataType.default}],getShaderSource:C=>`
  const M: u32 = ${v}u;
  const N: u32 = ${T}u;
  const K: u32 = ${S}u;

  @group(0) @binding(0) var<storage, read> a : array<${b}>;
  @group(0) @binding(1) var<storage, read> b : array<${b}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${b}>;

  ${x}

  ${C.mainStart()}
    ${C.guardAgainstOutOfBoundsWorkgroupSizes($)}

    let stack = global_idx / (M * N);
    let mn = global_idx % (M * N);
    let n = global_idx % N;
    let m = mn / N;

    let offsetA = stack * (M * K);
    let offsetB = stack * (K * N);

    var value = ${b}(0);
    for (var k: u32 = 0u; k<${S}u; k++) {
      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];
    }
    ${w}
    output[global_idx] = value;
  }`,dispatchGroup:()=>({x:Math.ceil($/64)})})})(u,i,l)})},e.matMul=i=>{(l=>{if(!l||l.length!==2)throw new Error("MatMul requires 2 inputs.");if(l[0].dims[l[0].dims.length-1]!==l[1].dims[l[1].dims.length-2])throw new Error("shared dimension does not match.");if(l[0].dataType!==1||l[1].dataType!==1)throw new Error("inputs should be float type")})(i.inputs),i.compute((0,e.createMatmulProgramInfoLoader)(i.inputs,{activation:"",activationCacheKey:""}))}},5262:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.globalMaxPool=e.parseGlobalMaxPoolAttributes=e.parseMaxPoolAttributes=e.maxPool=e.globalAveragePool=e.parseGlobalAveragePoolAttributes=e.averagePool=e.parseAveragePoolAttributes=void 0;const r=t(6952),s=t(387),a=t(1163),i=t(2075),l=m=>{if(!m||m.length!==1)throw new Error("Pool ops requires 1 input.");if(m[0].dims.length!==4)throw new Error("Pool ops supports 2-D inputs only for now.");if(m[0].dataType!==1)throw new Error("Invalid input type.")},u=(m,g,y)=>{const $=g.format==="NHWC",b=$?[m.dims[0],m.dims[3],m.dims[1],m.dims[2]]:m.dims.slice(),x=Object.hasOwnProperty.call(g,"dilations"),w=g.kernelShape.slice(),v=g.strides.slice(),S=x?g.dilations.slice():[],T=g.pads.slice();r.PoolConvUtil.adjustPoolAttributes(y,b,w,v,S,T);const C=r.PoolConvUtil.computePoolOutputShape(y,b,v,S,w,T,g.autoPad),I=Object.assign({},g);return x?Object.assign(I,{kernelShape:w,strides:v,pads:T,dilations:S,cacheKey:g.cacheKey}):Object.assign(I,{kernelShape:w,strides:v,pads:T,cacheKey:g.cacheKey}),[I,$?[C[0],C[2],C[3],C[1]]:C]},h=(m,g,y,$,b,x,w)=>{const v=$.format==="NHWC",S=g.shape,T=g.type.value,C=S.length,I=r.ShapeUtil.size(y),N=(0,i.outputVariable)("output",g.type.tensor,y);if($.kernelShape.length<=2){const P=$.kernelShape[$.kernelShape.length-1],F=$.strides[$.strides.length-1],_=$.pads[$.pads.length/2-1],D=C-(v?2:1);let E="",k="",O="";if(E=_+$.pads[$.pads.length-1]!==0?`
              for (var i: u32 = 0u; i < ${P}u; i++) {
                xIndices[${D}] = indices[${D}] * ${F} - ${_} + i;
                if (xIndices[${D}] < 0 || xIndices[${D}] >= ${S[D]}) {
                  pad++;
                  continue;
                }
                let x_val = x[${g.indicesToOffset("xIndices")}];
                ${b}
              }`:`
              for (var i: u32 = 0u; i < ${P}u; i++) {
                xIndices[${D}] = indices[${D}] * ${F} - ${_} + i;
                let x_val = x[${g.indicesToOffset("xIndices")}];
                ${b}
              }`,$.kernelShape.length===2){const M=$.kernelShape[$.kernelShape.length-2],z=$.strides[$.strides.length-2],G=$.pads[$.pads.length/2-2],j=$.pads[$.pads.length-2],K=C-(v?3:2),X=S[K];k=G+j!==0?`
                for (var j: u32 = 0u; j < ${M}u; j++) {
                  xIndices[${K}] = indices[${K}] * ${z} - ${G} + j;
                  if (xIndices[${K}] < 0 || xIndices[${K}] >= ${X}) {
                    pad+= ${P};
                    continue;
                  }
              `:`
                for (var j: u32 = 0u; j < ${M}u; j++) {
                  xIndices[${K}] = indices[${K}] * ${z} - ${G} + j;
                `,O=`
              }
            `}return`
            ${m.declareVariables(g,N)}

            ${m.mainStart()}
              ${m.guardAgainstOutOfBoundsWorkgroupSizes(I)}

              let indices = ${N.offsetToIndices("global_idx")};
              var xIndices = ${N.offsetToIndices("global_idx")};

              var value: ${T} = ${T}(${w});
              var pad = 0;
              ${k}
              ${E}
              ${O}
              ${x}

              output[global_idx] = value;
            }`}{if(v)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");const P=r.ShapeUtil.size($.kernelShape),F=r.ShapeUtil.computeStrides($.kernelShape),_=F.length,D=$.pads.length;let E="";return E=$.pads.reduce((k,O)=>k+O)?`
                if (xIndices[j] >= inputDims[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${g.indicesToOffset("xIndices")}];
                ${b}
              }`:`
              }
              let x_val = x[${g.indicesToOffset("xIndices")}];
              ${b}
            `,`
            ${m.declareVariables(g,N)}

            const pads = array<u32, ${D}>(${$.pads.map(k=>`${k}u`).join(",")});
            const inputDims = array<u32, ${C}>(${S.map(k=>`${k}u`).join(",")});
            const kernelStrides = array<u32, ${_}>(${F.map(k=>`${k}u`).join(",")});
            const strides = array<u32, ${_}>(${$.strides.map(k=>`${k}u`).join(",")});

            ${m.mainStart()}
              ${m.guardAgainstOutOfBoundsWorkgroupSizes(I)}

              let indices = ${N.offsetToIndices("global_idx")};
              let xIndices = ${N.offsetToIndices("global_idx")};

              var offsets: array<u32, ${_}>;

              var value = ${N.type.value}(${w});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < ${P}u; i++) {
                var offset = i;
                for (var j = 0u; j < ${_-1}u; j++) {
                  offsets[j] = offset / kernelStrides[j];
                  offset -= offsets[j] * kernelStrides[j];
                }
                offsets[${_-1}] = offset;

                isPad = false;
                for (var j = ${C-_}u; j < ${C}u; j++) {
                  xIndices[j] = indices[j] * strides[j - ${C-_}u]
                    + offsets[j - ${C-_}u] - pads[j - 2u];
                  ${E}
              }
              ${x}

              output[global_idx] = value;
            }`}},f=m=>({format:m.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][m.auto_pad],ceilMode:m.ceil_mode,kernelShape:m.kernel_shape,strides:m.strides,pads:m.pads}),c=(m,g,y,$)=>{const[b,x]=u(m,$,y),w=r.ShapeUtil.size(b.kernelShape),v=(0,i.inputVariable)("x",m.dataType,m.dims);let S="";return b.countIncludePad?S+=`value /= f32(${w});`:S+=`value /= f32(${w} - pad);`,Object.assign(Object.assign({},g),{outputs:[{dims:x,dataType:m.dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:T=>h(T,v,x,b,"value += x_val;",S,"0.0"),dispatchGroup:()=>({x:Math.ceil(r.ShapeUtil.size(x)/64)})})};e.parseAveragePoolAttributes=m=>{const g=m.count_include_pad!==0,y=f(m);if(y.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return(0,s.createAttributeWithCacheKey)(Object.assign({countIncludePad:g},y))},e.averagePool=(m,g)=>{l(m.inputs);const y={name:"AveragePool",inputTypes:[a.GpuDataType.default],cacheHint:g.cacheKey};m.compute(Object.assign(Object.assign({},y),{get:()=>c(m.inputs[0],y,!1,g)}))};const o={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""};e.parseGlobalAveragePoolAttributes=m=>{const g=m.format;return Object.assign(Object.assign({format:g},o),{cacheKey:g})},e.globalAveragePool=(m,g)=>{l(m.inputs);const y={name:"GlobalAveragePool",inputTypes:[a.GpuDataType.default],cacheHint:g.cacheKey};m.compute(Object.assign(Object.assign({},y),{get:()=>c(m.inputs[0],y,!0,g)}))};const d=(m,g,y,$)=>{const[b,x]=u(m,$,y),w=(0,i.inputVariable)("x",m.dataType,m.dims);return Object.assign(Object.assign({},g),{outputs:[{dims:x,dataType:m.dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:v=>h(v,w,x,b,`
      value = max(x_val, value);
    `,"","-1e5"),dispatchGroup:()=>({x:Math.ceil(r.ShapeUtil.size(x)/64)})})};e.maxPool=(m,g)=>{l(m.inputs);const y={name:"MaxPool",inputTypes:[a.GpuDataType.default],cacheHint:g.cacheKey};m.compute(Object.assign(Object.assign({},y),{get:()=>d(m.inputs[0],y,!1,g)}))},e.parseMaxPoolAttributes=m=>{const g=m.storage_order,y=m.dilations,$=f(m);if(g!==0)throw new Error("column major storage order is not yet supported for MaxPool");if($.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return(0,s.createAttributeWithCacheKey)(Object.assign({storageOrder:g,dilations:y},$))},e.parseGlobalMaxPoolAttributes=m=>{const g=m.format;return Object.assign(Object.assign({format:g},o),{cacheKey:g})},e.globalMaxPool=(m,g)=>{l(m.inputs);const y={name:"GlobalMaxPool",inputTypes:[a.GpuDataType.default],cacheHint:g.cacheKey};m.compute(Object.assign(Object.assign({},y),{get:()=>d(m.inputs[0],y,!0,g)}))}},6031:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseReduceAttributes=e.reduceSumSquare=e.reduceSum=e.reduceProd=e.reduceMin=e.reduceMean=e.reduceMax=e.reduceLogSumExp=e.reduceL2=e.reduceL1=e.reduceLogSum=e.createReduceProgramInfo=void 0;const r=t(6952),s=t(387),a=t(1163),i=t(2075),l=f=>{if(!f||f.length===0||f.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(f.length===2&&f[1].dims.length!==1)throw new Error("Invalid axes input dims.");if(f[0].dataType!==1)throw new Error("Invalid input type.")},u=f=>["","",`var value = ${f.getByOffset("inputOffset")};`,""];e.createReduceProgramInfo=(f,c,o,d,m,g=!1,y=!1)=>{const $=[],b=c[0].dims,x=r.ShapeUtil.normalizeAxes(d,c[0].dims.length),w=!y&&x.length===0;b.forEach((E,k)=>{w||x.indexOf(k)>=0?g&&$.push(1):$.push(E)});const v=[],S=(0,i.inputVariable)("_A",c[0].dataType,b),T=(0,i.outputVariable)("output",m,$),C=o(S,T,x),I=`inputOffset = ${S.indicesToOffset("inputIndices")};`,N=`let ${I};`,P=`var ${I};`,F=C[1]===""?"":P;let _=(C[1]===""?N:I)+`
`+C[2];for(let E=0,k=0;E<c[0].dims.length;E++)w||x.indexOf(E)>=0?(g&&k++,_=`for(var j${E}: u32 = 0; j${E} < ${c[0].dims[E]}; j${E}++) {
                ${C[2].includes("lastIndex")?`let lastIndex = j${E};`:""}
                ${S.indicesSet("inputIndices",E,`j${E}`)}
                ${_}
              }`):(v.push(`${S.indicesSet("inputIndices",E,T.indicesGet("outputIndices",k))};`),k++);const D=r.ShapeUtil.size($);return Object.assign(Object.assign({},f),{getShaderSource:E=>`
        ${E.declareVariables(S,T)}

        ${E.mainStart()}
          ${E.guardAgainstOutOfBoundsWorkgroupSizes(D)}
          var inputIndices: ${S.type.indices};
          let outputIndices = ${T.offsetToIndices("global_idx")};

          ${v.join(`
`)}
          ${C[0]}       // init ops for reduce max/min
          ${F}
          ${C[1]}
          ${_}
          ${C[3]}
          ${C.length===4?T.setByOffset("global_idx","value"):C.slice(4).join(`
`)}
        }`,outputs:[{dims:$,dataType:m,gpuDataType:a.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(D/64)})})};const h=(f,c,o,d)=>{const m=f.length===1?o:((y,$)=>{const b=[];return y[1].dims[0]>0&&y[1].getBigInt64Array().forEach(x=>b.push(Number(x))),(0,s.createAttributeWithCacheKey)({axes:b,keepDims:$.keepDims,noopWithEmptyAxes:$.noopWithEmptyAxes})})(f,o),g={name:c,inputTypes:[a.GpuDataType.default],cacheHint:m.cacheKey+"_"+f[0].dims.map(y=>y.toString()).join(",")};return Object.assign(Object.assign({},g),{get:()=>(0,e.createReduceProgramInfo)(g,[f[0]],m.noopWithEmptyAxes&&m.axes.length===0?u:d,m.axes,f[0].dataType,m.keepDims,m.noopWithEmptyAxes)})};e.reduceLogSum=(f,c)=>{l(f.inputs),f.compute(h(f.inputs,"ReduceLogSum",c,(o,d)=>[`var value = ${d.type.storage}(0);`,"",`value += ${o.getByOffset("inputOffset")};`,"value = log(value);"]),{inputs:[0]})},e.reduceL1=(f,c)=>{l(f.inputs),f.compute(h(f.inputs,"ReduceL1",c,(o,d)=>[`var value = ${d.type.storage}(0);`,"",`value += abs(${o.getByOffset("inputOffset")});`,""]),{inputs:[0]})},e.reduceL2=(f,c)=>{l(f.inputs),f.compute(h(f.inputs,"ReduceL2",c,(o,d)=>[`var t = f32(0); var value = ${d.type.storage}(0);`,"",`t = ${o.getByOffset("inputOffset")}; value += (t * t);`,"value = sqrt(value);"]),{inputs:[0]})},e.reduceLogSumExp=(f,c)=>{l(f.inputs),f.compute(h(f.inputs,"ReduceLogSumExp",c,(o,d)=>[`var value = ${d.type.storage}(0);`,"",`value += exp(${o.getByOffset("inputOffset")});`,"value = log(value);"]),{inputs:[0]})},e.reduceMax=(f,c)=>{l(f.inputs),f.compute(h(f.inputs,"ReduceMax",c,(o,d,m)=>{const g=[];for(let y=0;y<o.shape.length;y++)(m.indexOf(y)>=0||m.length===0)&&g.push(o.indicesSet("inputIndices",y,0));return[`${g.join(`
`)}`,`var value = ${o.getByOffset("inputOffset")};`,`value = max(value, ${o.getByOffset("inputOffset")});`,""]}),{inputs:[0]})},e.reduceMean=(f,c)=>{l(f.inputs),f.compute(h(f.inputs,"ReduceMean",c,(o,d,m)=>{let g=1;for(let y=0;y<o.shape.length;y++)(m.indexOf(y)>=0||m.length===0)&&(g*=o.shape[y]);return[`var value = ${d.type.storage}(0);`,"",`value += ${o.getByOffset("inputOffset")};`,`value = value / ${g}.;`]}),{inputs:[0]})},e.reduceMin=(f,c)=>{l(f.inputs),f.compute(h(f.inputs,"ReduceMin",c,(o,d,m)=>{const g=[];for(let y=0;y<o.shape.length;y++)(m.indexOf(y)>=0||m.length===0)&&g.push(`inputIndices[${y}] = 0;`);return[`${g.join(`
`)}`,`var value = ${o.getByOffset("inputOffset")};`,`value = min(value, ${o.getByOffset("inputOffset")});`,""]}),{inputs:[0]})},e.reduceProd=(f,c)=>{l(f.inputs),f.compute(h(f.inputs,"ReduceProd",c,(o,d)=>[`var value = ${d.type.storage}(1);`,"",`value *= ${o.getByOffset("inputOffset")};`,""]),{inputs:[0]})},e.reduceSum=(f,c)=>{l(f.inputs),f.compute(h(f.inputs,"ReduceSum",c,(o,d)=>[`var value = ${d.type.storage}(0);`,"",`value += ${o.getByOffset("inputOffset")};`,""]),{inputs:[0]})},e.reduceSumSquare=(f,c)=>{l(f.inputs),f.compute(h(f.inputs,"ReduceSumSquare",c,(o,d)=>[`var t = f32(0); var value = ${d.type.storage}(0);`,"",`t = ${o.getByOffset("inputOffset")}; value += t * t;`,""]),{inputs:[0]})},e.parseReduceAttributes=f=>(0,s.createAttributeWithCacheKey)(f)},4566:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseResizeAttributes=e.resize=e.createResizeProgramInfoLoader=void 0;const r=t(6952),s=t(387),a=t(1163),i=t(2075);e.createResizeProgramInfoLoader=(l,u,h,f,c,o)=>{const d={name:"Resize",inputTypes:[a.GpuDataType.default],cacheHint:u.cacheKey+h.toString()+(f.length>0?"_scales_"+f.toString():"")+(c.length>0?"_sizes_"+c.toString():"")};return Object.assign(Object.assign({},d),{get:()=>((m,g,y,$,b,x,w)=>{const v=g.dims,S=((D,E,k)=>{const O=new Array(k).fill(0).concat(new Array(k).fill(1)),M=D.length===0?O:D.slice();return E.length>0?(E.forEach((z,G)=>{O[z]=M[G],O[G+k]=M[E.length+G]}),O):M})(w,y.axes,v.length);let T=((D,E,k,O)=>{let M=[];if(k.length>0)if(O.length>0){if(D.forEach(z=>M.push(z)),Math.max(...O)>D.length)throw new Error("axes is out of bound");O.forEach((z,G)=>M[z]=k[G])}else k.forEach(z=>M.push(z));else{if(E.length===0)throw new Error("Resize requires either scales or sizes.");M=D.map((z,G)=>Math.round(z*E[G]))}return M})(v,b,x,y.axes),C=b.slice();b.length===0&&(C=v.map((D,E)=>D===0?1:T[E]/D),y.keepAspectRatioPolicy!=="stretch"&&(T=((D,E,k,O)=>{const M=(()=>{switch(O.keepAspectRatioPolicy){case"not_larger":return O.axes.length>0?Math.min(...O.axes.map(G=>k[G]),Number.MAX_VALUE):Math.min(...k,Number.MAX_VALUE);case"not_smaller":return O.axes.length>0?Math.max(...O.axes.map(G=>k[G]),Number.MIN_VALUE):Math.max(...k,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${O.keepAspectRatioPolicy} is not supported`)}})();k.fill(1,0,k.length);const z=D.slice();return O.axes.length>0?(O.axes.forEach(G=>k[G]=M),O.axes.forEach(G=>z[G]=Math.round(D[G]*k[G]))):(k.fill(M,0,k.length),z.forEach((G,j)=>z[j]=Math.round(G*k[j]))),z})(v,0,C,y)));const I=(0,i.outputVariable)("output",g.dataType,T),N=(0,i.inputVariable)("input",g.dataType,v),P=r.ShapeUtil.size(T),F=v.length===T.length&&v.every((D,E)=>D===T[E]),_=y.coordinateTransformMode==="tf_crop_and_resize";return Object.assign(Object.assign({},m),{getShaderSource:D=>{return`
      ${E=y.coordinateTransformMode,"fn getOriginalCoordinateFromResizedCoordinate(xResized: f32, xScale: f32, lengthResized: f32,    lengthOriginal: f32, roiStart: f32, roiEnd: f32) -> f32 { "+(()=>{switch(E){case"asymmetric":return"return xResized / xScale;";case"pytorch_half_pixel":return"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }";case"tf_half_pixel_for_nn":return"return (xResized + 0.5) / xScale;";case"align_corners":return"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }";case"tf_crop_and_resize":return"if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * f32(lengthOriginal - 1);                   }";case"half_pixel_symmetric":return["const outputWidth = xScale * lengthResized;","const adjustment = lengthResized / outputWidth;","const center = lengthOriginal / 2;","const offset = center * (1 - adjustment);","return offset + ((xResized + 0.5) / xScale) - 0.5;"].join(`
`);case"half_pixel":return"return ((xResized + 0.5) / xScale) - 0.5;";default:throw new Error(`Coordinate transform mode ${E} is not supported`)}})()+"}"};
      ${(()=>{switch(y.mode){case"nearest":return`
              ${((k,O)=>`
    fn checkInputIndices(inputIndices: ${k.type.indices}) -> bool {
      const inputShape = array<u32, ${O.length}>(${O.map(M=>`${M}u`).join(",")});
      for (var i:u32 = 0; i < ${O.length}; i++) {
        var inputIndex = ${O.length===1?"inputIndices":"inputIndices[i]"};
        if (inputIndex < 0 || inputIndex >= inputShape[i]) {
          return false;
        }
      }
      return true;
    }`)(N,v)};
              ${((k,O)=>"fn getNearestPixelFromOriginal(xOriginal: f32, isDownSample: bool) -> f32 {"+(()=>{switch(k){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";default:if(O<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${k} is not supported`)}})()+"}")(y.nearestMode,$)};
              ${((k,O,M,z,G,j,K)=>`
    fn calculateInputIndicesFromOutputIndices(outputIndices: ${O.type.indices}) -> ${k.type.indices} {
        const inputShape = array<u32, ${M.length}>(${M.map(X=>`${X}u`).join(",")});
        const outputShape = array<u32, ${z.length}>(${z.map(X=>`${X}u`).join(",")});
        const scales = array<f32, ${G.length}>(${G.map(X=>`${X}f`).join(",")});
        const roi = array<f32, ${j.length}>(${j.map(X=>`${X}f`).join(",")});
        var inputIndices: ${k.type.indices};
        for (var i:u32 = 0; i < ${z.length}; i++) {
          var outputIndex = ${z.length===1?"outputIndices":"outputIndices[i]"};
          var inputIndex: u32;
          if (scales[i] == 1.0) {
            inputIndex = outputIndex;
          } else {
            var original_idx = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],
                    f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${M.length}]);
            if (!${K} || (original_idx >= 0 && original_idx < f32(inputShape[i]))) {
              if (original_idx < 0) {
                inputIndex = 0;
              } else if (original_idx > (f32(inputShape[i]) - 1)) {
                inputIndex = inputShape[i] - 1;
              } else {
                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));
              }
            } else {
              inputIndex = u32(original_idx);
            }
          }
          ${k.indicesSet("inputIndices","i","inputIndex")}
        }
        return inputIndices;
    }`)(N,I,v,T,C,S,_)};
              `;case"linear":return`
              ${((k,O,M,z,G)=>`
    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${k.type.indices}) -> array<f32, ${M.length}> {
      const inputShape = array<u32, ${O.length}>(${O.map(j=>`${j}u`).join(",")});
      const outputShape = array<u32, ${M.length}>(${M.map(j=>`${j}u`).join(",")});
      const scales = array<f32, ${z.length}>(${z.map(j=>`${j}f`).join(",")});
      const roi = array<f32, ${G.length}>(${G.map(j=>`${j}f`).join(",")});
      var originalIndices: array<f32, ${M.length}>;
      for (var i:u32 = 0; i < ${M.length}; i++) {
        var outputIndex = ${M.length===1?"outputIndices":"outputIndices[i]"};
        if (scales[i] == 1.0) {
          originalIndices[i] = f32(outputIndex);
        } else {
          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],
                f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${O.length}]);
        }
      }
      return originalIndices;
    }`)(I,v,T,C,S)};
              ${((k,O,M,z,G,j,K)=>{const[X,Y,J,te]=M.length===2?[-1,0,1,-1]:G[1]===1?[0,2,3,1]:[0,1,2,3];return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> f32 {
      var inputIndices: ${k.type.indices};
      inputIndices[${Y}] = max(0, min(row, ${M[Y]} - 1));
      inputIndices[${J}] = max(0, min(col, ${M[J]} - 1));
      if (${M.length} > 2) {
        inputIndices[${te}] = channel;
        inputIndices[${X}] = batch;
      };
      return input[${k.indicesToOffset("inputIndices")}];
    }

    fn bilinearInterpolation(outputIndices: ${O.type.indices}) -> f32 {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);
      var row:f32 = originalIndices[${Y}];
      var col:f32 = originalIndices[${J}];
      if (${j} && (row < 0 || row > (${M[Y]} - 1) || col < 0 || col > ${M[J]} - 1)) {
        return ${K};
      }
      row = max(0, min(row, ${M[Y]} - 1));
      col = max(0, min(col, ${M[J]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = 0;
      var batch: u32 = 0;
      if (${M.length>2}) {
        channel = u32(originalIndices[${te}]);
        batch = u32(originalIndices[${X}]);
      }
      var x11: f32 = getInputValue(batch, channel, row1, col1);
      var x12: f32 = getInputValue(batch, channel, row1, col2);
      var x21: f32 = getInputValue(batch, channel, row2, col1);
      var x22: f32 = getInputValue(batch, channel, row2, col2);
      var dx1: f32 = row - f32(row1);
      var dx2: f32 = f32(row2 ) - row;
      var dy1 = col - f32(col1);
      var dy2 = f32(col2) - col;
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`})(N,I,v,0,C,_,y.extrapolationValue)};
              `;case"cubic":return`
            ${((k,O,M,z,G,j,K,X,Y,J)=>{const[te,re]=M.length===2?[0,1]:G[1]===1?[2,3]:[1,2],ue=ie=>{const ce=ie===te?"row":"col";return`
      fn ${ce}CubicInterpolation(inputIndices: ${k.type.indices}, outputIndices: ${O.type.indices}) -> f32 {
        var outputIndex = ${z.length===1?"outputIndices":`outputIndices[${ie}]`};
        var originalIdx: f32 = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), ${G[ie]},
        f32(${z[ie]}), f32(${M[ie]}), ${j[ie]}, ${j[ie]} + ${M.length});
        var fractOriginalIdx: f32 = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${X} && (originalIdx < 0 || originalIdx > (${M[ie]} - 1))) {
          return ${Y};
        }
        var data: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${ce}: f32 = originalIdx + f32(i);
          if (${ce} < 0 || ${ce} >= ${M[ie]}) {
            if (${J}) {
              coefs[i + 1] = 0.0;
              continue;
            } else if (${X}) {
              return ${Y};
            } else {
              ${ce} = max(0, min(${ce}, ${M[ie]} - 1));
            }
          }
          var inputIndicesCopy: ${k.type.indices} = inputIndices;
          inputIndicesCopy[${ie}] = u32(${ce});
          data[i + 1] = ${ie===te?`input[${k.indicesToOffset("inputIndicesCopy")}];`:`
                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${ue(te)};
    ${ue(re)};
  fn getCubicInterpolationCoefs(s: f32) -> array<f32, 4> {
    var absS = abs(s);
    var coeffs: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: f32 = 1.0 - absS;
    var twoMinusAbsS: f32 = 2.0 - absS;
    var onePlusAbsS: f32 = 1.0 + absS;
    coeffs[0] = ((${K} * onePlusAbsS - 5 * ${K}) * onePlusAbsS + 8 * ${K}) * onePlusAbsS - 4 * ${K};
    coeffs[1] = ((${K} + 2) * absS - (${K} + 3)) * absS * absS + 1;
    coeffs[2] = ((${K} + 2) * oneMinusAbsS - (${K} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${K} * twoMinusAbsS - 5 * ${K}) * twoMinusAbsS + 8 * ${K}) * twoMinusAbsS - 4 * ${K};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<f32, 4>, coefs: array<f32, 4>) -> f32 {
    var coefsSum: f32 = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(outputIndices: ${O.type.indices}) -> f32 {
    var inputIndices: ${k.type.indices} = outputIndices;
    return colCubicInterpolation(inputIndices, outputIndices);
  }
    `})(N,I,v,T,C,S,y.cubicCoeffA,_,y.extrapolationValue,y.excludeOutside)};
            `;default:throw Error("Invalid resize mode")}})()};
      ${D.declareVariables(N,I)}
      ${D.mainStart()}
        ${D.guardAgainstOutOfBoundsWorkgroupSizes(P)}
        if (${F}) {
          output[global_idx] = input[global_idx];
        } else {
          let outputIndices = ${I.offsetToIndices("global_idx")};
          var inputIndices: ${N.type.indices};
          ${(()=>{switch(y.mode){case"nearest":return`inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);
                  if (checkInputIndices(inputIndices)) {
                    output[global_idx] = input[${N.indicesToOffset("inputIndices")}];
                  } else {
                    output[global_idx] = ${y.extrapolationValue};
                  }`;case"linear":return"output[global_idx] = bilinearInterpolation(outputIndices);";case"cubic":return"output[global_idx] = bicubicInterpolation(outputIndices);";default:throw Error(`Unsupported resize mode: ${y.mode}`)}})()};
        }
      }`;var E},outputs:[{dims:T,dataType:g.dataType,gpuDataType:a.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(P/64)})})})(d,l,u,h,f,c,o)})},e.resize=(l,u)=>{const h=[],f=[],c=[],o=(d=>{const m=d.customDataBuffer;return new Uint32Array(m,m.byteOffset,1)[0]})(l);((d,m,g,y,$,b)=>{const[x,w,v]=g>10?[1,2,3]:[-1,d.length>1?1:-1,-1],S=d[0].dims.length;if(x>0&&d.length>x&&d[x].dims.length>0)d[x].getFloat32Array().forEach(T=>b.push(T));else if(m.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(w>0&&d.length>w&&d[w].dims.length>0){if(d[w].getFloat32Array().forEach(T=>y.push(T)),y.length!==0&&y.length!==S&&g>=18&&y.length!==m.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");((T,C)=>{if(T.every(I=>I>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),T.length>0){if(C.mode==="linear"){if(!(T.length===2||T.length===4&&T[0]===1&&T[1]===1||T.length===4&&T[0]===1&&T[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for linear mode")}else if(C.mode==="cubic"&&!(T.length===2||T.length===4&&T[0]===1&&T[1]===1||T.length===4&&T[0]===1&&T[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}})(y,m),m.axes.length>0&&((T,C,I)=>{C.every(P=>P>=0&&P<I||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));const N=new Array(I).fill(1);return C.forEach((P,F)=>N[P]=T[F]),N})(y,m.axes,S).forEach((T,C)=>y[C]=T)}if(v>0&&d.length>v&&(d[v].getBigInt64Array().forEach(T=>$.push(Number(T))),$.length!==S||g>=18&&$.length===m.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(m.axes.length>0){if(y.length!==m.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if($.length!==m.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(y!==void 0&&$!==void 0&&y.length>0&&$.length>S)throw new Error("Resize requires only of scales or sizes to be specified")})(l.inputs,u,o,h,f,c),l.compute((0,e.createResizeProgramInfoLoader)(l.inputs[0],u,o,h,f,c),{inputs:[0]})},e.parseResizeAttributes=l=>{const u=l.antialias,h=l.axes,f=l.coordinateTransformMode,c=l.cubicCoeffA,o=l.excludeOutside!==0,d=l.extrapolationValue,m=l.keepAspectRatioPolicy,g=l.mode,y=l.nearestMode===""?"simple":l.nearestMode;return(0,s.createAttributeWithCacheKey)({antialias:u,axes:h,coordinateTransformMode:f,cubicCoeffA:c,excludeOutside:o,extrapolationValue:d,keepAspectRatioPolicy:m,mode:g,nearestMode:y})}},8906:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseSkipLayerNormAttributes=e.skipLayerNorm=void 0;const r=t(6952),s=t(387),a=t(1163),i=t(2075);e.skipLayerNorm=(l,u)=>{(f=>{if(!f||f.length<3)throw new Error("layerNorm requires at least 3 inputs.");if(f[0].dataType!==1||f[1].dataType!==1)throw new Error("inputs should be float type");const c=f[0],o=f[1],d=f[2];if(c.dataType!==o.dataType||c.dataType!==d.dataType)throw new Error("All inputs must have the same data type");if(c.dims.length!==3&&c.dims.length!==2)throw new Error("Input must be 2D or 3D");if(o.dims.length!==3&&o.dims.length!==2)throw new Error("Skip must be 2D or 3D");const m=c.dims[c.dims.length-1],g=c.dims[c.dims.length-2];if(o.dims[o.dims.length-1]!==m)throw new Error("Skip must have the same hidden size as input");if(o.dims[o.dims.length-2]!==g)throw new Error("Skip must have the same sequence length as input");if(d.dims.length!==1)throw new Error("Gamma must be 1D");if(d.dims[d.dims.length-1]!==m)throw new Error("Gamma must have the same hidden size as input");if(f.length>3){const y=f[3];if(y.dims.length!==1)throw new Error("Beta must be 1D");if(y.dims[y.dims.length-1]!==m)throw new Error("Beta must have the same hidden size as input")}if(f.length>4){const y=f[4];if(y.dims.length!==1)throw new Error("Bias must be 1D");if(y.dims[y.dims.length-1]!==m)throw new Error("Bias must have the same hidden size as input")}})(l.inputs);const h=[0];l.outputCount>1&&h.push(-3),l.outputCount>2&&h.push(-3),l.outputCount>3&&h.push(3),l.compute(((f,c,o,d)=>{const m={name:"SkipLayerNormalization",inputTypes:new Array(f.length).fill(a.GpuDataType.default),cacheHint:c.cacheKey};return Object.assign(Object.assign({},m),{get:()=>((g,y,$,b,x)=>{const w=y[0].dims,v=w,S=r.ShapeUtil.size(w),T=w.slice(-1)[0],C=x?w.slice(0,-1).concat(1):[],I=y.length>3,N=y.length>4,P=(0,i.tensorTypeToWsglStorageType)(y[0].dataType),F=x&&b>1,_=x&&b>2,D=b>3;let E=0;const k=[{dims:v,dataType:y[0].dataType,gpuDataType:a.GpuDataType.default}];return b>1&&k.push({dims:C,dataType:y[0].dataType,gpuDataType:a.GpuDataType.default}),b>2&&k.push({dims:C,dataType:y[0].dataType,gpuDataType:a.GpuDataType.default}),b>3&&k.push({dims:w,dataType:y[0].dataType,gpuDataType:a.GpuDataType.default}),Object.assign(Object.assign({},g),{getShaderSource:O=>`
      const hiddenSize: u32 = ${T};
      const epsilon: f32 = ${$.epsilon};

      @group(0) @binding(${E++}) var<storage, read> x : array<${P}>;
      @group(0) @binding(${E++}) var<storage, read> skip : array<${P}>;
      @group(0) @binding(${E++}) var<storage, read> gamma : array<${P}>;
      ${I?`@group(0) @binding(${E++}) var<storage, read> beta : array<${P}>;`:""}
      ${N?`@group(0) @binding(${E++}) var<storage, read> bias : array<${P}>;`:""}
      @group(0) @binding(${E++}) var<storage, read_write> output : array<${P}>;
      ${F?`@group(0) @binding(${E++}) var<storage, read_write> meanOutput : array<${P}>;`:""}
      ${_?`@group(0) @binding(${E++}) var<storage, read_write> invStdOutput : array<${P}>;`:""}
      ${D?`@group(0) @binding(${E++}) var<storage, read_write> inputSkipBiasSum : array<${P}>;`:""}

      ${O.mainStart()}
        ${O.guardAgainstOutOfBoundsWorkgroupSizes(S/T)}
        let offset = global_idx * hiddenSize;
        var sum: f32 = 0.0;
        var squareSum: f32 = 0.0;
        for (var i: u32 = 0; i < hiddenSize; i++) {
          let skipValue = skip[offset + i];
          let biasValue = ${N?"bias[i]":"0.0"};
          let inputValue = x[offset + i];
          let value = inputValue + skipValue + biasValue;
          ${D?"inputSkipBiasSum[offset + i] = value;":""}
          output[offset + i] = value;
          sum += value;
          squareSum += value * value;
        }
        let mean: f32 = sum / f32(hiddenSize);
        let variance: f32 = sqrt(squareSum / f32(hiddenSize) - mean * mean + epsilon);
        ${F?"meanOutput[global_idx] = mean;":""}
        ${_?"invStdOutput[global_idx] = 1.0 / variance;":""}
        for (var i: u32 = 0; i < hiddenSize; i++) {
          output[offset + i] = (output[offset + i] - mean) / variance * gamma[i] + ${I?"beta[i]":"0.0"};
        }
      }`,outputs:k,dispatchGroup:()=>({x:Math.ceil(S/T/64)})})})(m,f,c,o,d)})})(l.inputs,u,l.outputCount,!1),{outputs:h})},e.parseSkipLayerNormAttributes=l=>{const u=l.epsilon;return(0,s.createAttributeWithCacheKey)({epsilon:u})}},5101:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseSliceAttributes=e.slice=void 0;const r=t(6952),s=t(387),a=t(1163),i=t(2075),l=(h,f)=>{const c=[];if(h.length>f)if(h[f].dataType===7)h[f].getBigInt64Array().forEach(o=>c.push(Number(o)));else{if(h[f].dataType!==6)throw new Error(`Input ${f} must be an array of int32 or int64`);h[f].getInt32Array().forEach(o=>c.push(Number(o)))}return c},u=(h,f,c,o,d)=>{let m=h;return h<0&&(m+=c[o[f]]),d[f]<0?Math.max(0,Math.min(m,c[o[f]]-1)):Math.max(0,Math.min(m,c[o[f]]))};e.slice=(h,f)=>{((d,m)=>{if(!d||d.length<1)throw new Error("too few inputs");if(m.axes.length!==0){if(m.axes.length!==m.starts.length||m.axes.length!==m.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(m.starts.length!==m.ends.length)throw new Error("starts and ends must have the same length");d.slice(1).forEach((g,y)=>{if(d[y+1].dataType!==6&&d[y+1].dataType!==7)throw new Error(`Input ${y} must be an array of int32 or int64`)})})(h.inputs,f);const c=((d,m)=>{const g=(($,b)=>{if($.length>1){const x=l($,1),w=l($,2);let v=l($,3);return v.length===0&&(v=[...Array($[0].dims.length).keys()]),(0,s.createAttributeWithCacheKey)({starts:x,ends:w,axes:v})}return b})(d,m),y={name:"Slice",inputTypes:[a.GpuDataType.default],cacheHint:g.cacheKey+(d.length>4?"steps_"+d[4].dims.toString():"")};return Object.assign(Object.assign({},y),{get:()=>(($,b,x)=>{const w=b[0].dims,v=r.ShapeUtil.size(w),S=x.axes.length>0?r.ShapeUtil.normalizeAxes(x.axes,w.length):[...Array(w.length).keys()];let T=l(b,4);T.forEach(k=>k!==0||(()=>{throw new Error("step cannot be 0")})),T.length===0&&(T=Array(S.length).fill(1));const C=x.starts.map((k,O)=>u(k,O,w,S,T)),I=x.ends.map((k,O)=>u(k,O,w,S,T));if(S.length!==w.length)for(let k=0;k<w.length;++k)S.includes(k)||(C.splice(k,0,0),I.splice(k,0,w[k]),T.splice(k,0,1));const N=T.map(k=>Math.sign(k));T.forEach((k,O,M)=>{if(k<0){const z=(I[O]-C[O])/k,G=C[O],j=G+z*T[O];C[O]=j,I[O]=G,M[O]=-k}});const P=w.slice(0);S.forEach((k,O)=>{P[k]=Math.ceil((I[k]-C[k])/T[k])});const F={dims:P,dataType:b[0].dataType,gpuDataType:a.GpuDataType.default},_=(0,i.outputVariable)("output",b[0].dataType,P),D=(0,i.inputVariable)("input",b[0].dataType,w),E=r.ShapeUtil.size(P);return Object.assign(Object.assign({},$),{getShaderSource:k=>`
      ${k.declareVariables(D,_)}
        const signs = array<i32, ${N.length}>(${N.map(O=>`${O}i`).join(",")});
        const starts = array<u32, ${C.length}>(${C.map(O=>`${O}u`).join(",")});
        const ends = array<u32, ${I.length}>(${I.map(O=>`${O}u`).join(",")});
        const steps = array<u32, ${T.length}>(${T.map(O=>`${O}u`).join(",")});
        const inputShape = array<u32, ${w.length}>(${w.map(O=>`${O}u`).join(",")});

        ${((O,M,z,G)=>`fn calculateInputIndices(outputIndices: ${M.type.indices}) -> ${O.type.indices} {
          var inputIndices: ${O.type.indices};
          var carry = 0u;
          for (var i = ${z.length}; i >= 0; i--) {
            var outputIndex = ${G.length===1?"outputIndices":"outputIndices[i]"};
            var inputIndex = outputIndex * steps[i] + starts[i] + carry;
            carry = inputIndex / inputShape[i];
            inputIndex = inputIndex % inputShape[i];
            if (signs[i] < 0) {
              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];
            }
            ${z.length===1?"inputIndices":"inputIndices[i]"} = inputIndex;
          }
          return inputIndices;
      }`)(D,_,w,P)}
        ${k.mainStart()}
          ${k.guardAgainstOutOfBoundsWorkgroupSizes(E)}
          let outputIndices = ${_.offsetToIndices("global_idx")};
          let inputIndices = calculateInputIndices(outputIndices);
          ${_.setByOffset("global_idx",D.getByIndices("inputIndices"))}
      }`,outputs:[F],dispatchGroup:()=>({x:Math.ceil(v/64)})})})(y,d,g)})})(h.inputs,f),o=c.get();if(!(r.ShapeUtil.size(o.outputs[0].dims)>0))throw new Error("slice: output size is 0");h.compute(c,{inputs:[0]})},e.parseSliceAttributes=h=>{const f=h.starts,c=h.ends,o=h.axes;return(0,s.createAttributeWithCacheKey)({starts:f,ends:c,axes:o})}},6198:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseSoftmaxAttributes=e.softmax=e.softmaxProgramMetadata=void 0;const r=t(6952),s=t(387),a=t(1163);e.softmaxProgramMetadata={name:"Softmax",inputTypes:[a.GpuDataType.default]},e.softmax=(i,l)=>{(u=>{if(!u||u.length!==1)throw new Error("Softmax op requires 1 input.");if(u[0].dataType!==1)throw new Error("Softmax input needs to be float.")})(i.inputs),i.compute(Object.assign(Object.assign({},e.softmaxProgramMetadata),{cacheHint:l.cacheKey,get:()=>((u,h)=>{const f="f32",c=u.dims,o=r.ShapeUtil.size(c);let d=h.axis;if(d<0&&(d=c.length+d),d<c.length-1)throw new Error("softmax only supports last axis for now.");const m=c[d],g=o/m;return Object.assign(Object.assign({},e.softmaxProgramMetadata),{outputs:[{dims:c,dataType:u.dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:y=>`
      var<workgroup> rowMaxShared : ${f};
      var<workgroup> rowSumShared : ${f};
      var<workgroup> threadShared : array<${f}, 64>;

      @group(0) @binding(0) var<storage, read> x : array<${f}>;
      @group(0) @binding(1) var<storage, read_write> result : array<${f}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${f} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${f}) {
        let index = row * row_stride + col;
        result[index] = value;
      }

      @compute @workgroup_size(64, 1, 1)
      fn main(@builtin(local_invocation_id) local_id : vec3<u32>, @builtin(global_invocation_id) global_id : vec3u) {
        let gindex = i32(global_id.x);
        let lindex = i32(local_id.x);
        const wg = 64;
        let row = gindex / wg;
        let cols = ${m};
        let row_stride : i32 = ${m};

        // find the rows max
        var threadMax = -3.402823e+38f; // 6.2.4 in wgsl spec
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = threadShared[0];
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = 0.0;
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = threadShared[0];
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`,dispatchGroup:()=>({x:g})})})(i.inputs[0],l)}))},e.parseSoftmaxAttributes=i=>(0,s.createAttributeWithCacheKey)({axis:i.axis})},2067:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseSplitAttributes=e.split=void 0;const r=t(6952),s=t(387),a=t(1163),i=t(2075);e.split=(l,u)=>{(h=>{if(!h||h.length<1)throw new Error("too few inputs")})(l.inputs),l.compute(((h,f)=>{const c=h.length===1?f:((d,m)=>{const g=[];let y=m.numOutputs;return d[1].dims[0]>0&&(d[1].getBigInt64Array().forEach($=>g.push(Number($))),y=g.length),(0,s.createAttributeWithCacheKey)({numOutputs:y,axis:m.axis,splitSizes:g})})(h,f),o={name:"Split",inputTypes:[a.GpuDataType.default],cacheHint:c.cacheKey};return Object.assign(Object.assign({},o),{get:()=>((d,m,g)=>{const y=m[0].dims,$=r.ShapeUtil.size(y),b=m[0].dataType,x=y.length,w=g.axis,v=w<0?y.length+w:w,S=new Array(g.numOutputs),T=(0,i.inputVariable)("input",b,y),C=new Array(g.numOutputs),I=[],N=[];let P=0;for(let _=0;_<g.numOutputs;_++){P+=g.splitSizes[_],C[_]=P;const D=y.slice();D[g.axis]=g.splitSizes[_],N.push(D),S[_]=(0,i.outputVariable)(`output${_}`,b,N[_]),I.push({dims:N[_],dataType:m[0].dataType,gpuDataType:a.GpuDataType.default})}const F=x<2?"indices":`indices[${v}]`;return Object.assign(Object.assign({},d),{getShaderSource:_=>{return`
  ${_.declareVariables(T,...S)}
  const sizeInConcatAxis = array<u32, ${C.length}>(${C.map(E=>`${E}u`).join(",")});
  ${D=C.length,`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${D}u; i += 1u ) {
    if (index < sizeInConcatAxis[i]) {
        return i;
    }
    }
    return ${D}u;
}`}
  ${(E=>{const k=E.length,O=[];for(let M=0;M<k;++M){const z=E[M].setByIndices("indices","input[global_idx]");k===1?O.push(z):M===0?O.push(`if (outputNumber == ${M}u) { ${z} }`):M===k-1?O.push(`else { ${z} }`):O.push(`else if (outputNumber == ${M}) { ${z} }`)}return`
      fn writeBufferData(outputNumber: u32, indices: ${E[0].type.indices}, global_idx: u32) {
        ${O.join(`
`)}
      }`})(S)}

  ${_.mainStart()}
    ${_.guardAgainstOutOfBoundsWorkgroupSizes($)}

    var indices = ${T.offsetToIndices("global_idx")};
    let outputNumber = calculateOutputIndex(${F});
    if (outputNumber != 0) {
        ${F} -= sizeInConcatAxis[outputNumber - 1u];
    }
    writeBufferData(outputNumber, indices, global_idx);
  }`;var D},outputs:I,dispatchGroup:()=>({x:Math.ceil($/64)})})})(o,[h[0]],c)})})(l.inputs,u),{inputs:[0]})},e.parseSplitAttributes=l=>{const u=l.axis,h=l.splitSizes,f=l.numOutputs<0?h.length:l.numOutputs;if(f!==h.length)throw new Error("numOutputs and splitSizes lengh must be equal");return(0,s.createAttributeWithCacheKey)({axis:u,numOutputs:f,splitSizes:h})}},8699:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.tile=e.createTileProgramInfo=e.tileProgramMetadata=void 0;const r=t(6952),s=t(1163),a=t(2075);e.tileProgramMetadata={name:"Tile",inputTypes:[s.GpuDataType.default]};const i=l=>Array.from(l.getBigInt64Array(),Number);e.createTileProgramInfo=(l,u)=>{const h=u[0].dims,f=i(u[1]),c=((y,$)=>{const b=[];for(let x=0;x<y.length;++x)b.push(y[x]*$[x]);return b})(h,f),o=r.ShapeUtil.size(c),d=u[0].dataType,m=(0,a.inputVariable)("input",d,h),g=(0,a.outputVariable)("output",d,c);return Object.assign(Object.assign({},l),{outputs:[{dims:c,dataType:u[0].dataType,gpuDataType:s.GpuDataType.default}],getShaderSource:y=>`
      const inputShape = ${m.indices(...h)};
      ${y.declareVariables(m,g)}
      ${y.mainStart()}
      ${y.guardAgainstOutOfBoundsWorkgroupSizes(o)}
      let outputIndices = ${g.offsetToIndices("global_idx")};
      var inputIndices: ${m.type.indices};
      for (var i = 0; i < ${h.length}; i++) {
        let inputDimValue = ${g.indicesGet("outputIndices","i")}  % ${m.indicesGet("inputShape","i")};

        ${m.indicesSet("inputIndices","i","inputDimValue")}
      }
      ${g.setByOffset("global_idx",m.getByIndices("inputIndices"))}
    }`,dispatchGroup:()=>({x:Math.ceil(o/64)})})},e.tile=l=>{(h=>{if(!h||h.length!==2)throw new Error("Tile requires 2 inputs.");if(h[0].dataType!==1&&h[0].dataType!==6&&h[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(h[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(h[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(i(h[1]).length!==h[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")})(l.inputs);const u=i(l.inputs[1]).toString();l.compute(Object.assign(Object.assign({},e.tileProgramMetadata),{cacheHint:u,get:()=>(0,e.createTileProgramInfo)(e.tileProgramMetadata,l.inputs)}),{inputs:[0]})}},2625:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseTransposeAttributes=e.transpose=e.createTransposeProgramInfo=e.transposeProgramMetadata=void 0;const r=t(6952),s=t(387),a=t(1163),i=t(2075);e.transposeProgramMetadata={name:"Transpose",inputTypes:[a.GpuDataType.default]};const l=(u,h)=>h&&h.length!==u.length?[...u.keys()].reverse():h;e.createTransposeProgramInfo=(u,h)=>{const f=u.dataType,c=u.dims,o=l(c,h),d=((b,x)=>r.ShapeUtil.sortBasedOnPerm(b,l(b,x)))(c,o),m=c.length,g=r.ShapeUtil.size(d),y=(0,i.outputVariable)("output",f,d),$=(0,i.inputVariable)("a",f,c);return Object.assign(Object.assign({},e.transposeProgramMetadata),{outputs:[{dims:d,dataType:u.dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:b=>`
  ${b.declareVariables($,y)}

  ${((x,w,v,S)=>{const T=[];T.push(`fn perm(i: ${S.type.indices}) -> ${v.type.indices} {
    var a: ${v.type.indices};`);for(let C=0;C<w;++C)T.push(v.indicesSet("a",x[C],`i[${C}]`));return T.push("return a;}"),T.join(`
`)})(o,m,$,y)}

  ${b.mainStart()}
    ${b.guardAgainstOutOfBoundsWorkgroupSizes(g)}

    let indices = ${y.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${y.setByOffset("global_idx",$.getByIndices("aIndices"))}
  }`,dispatchGroup:()=>({x:Math.ceil(g/64)})})},e.transpose=(u,h)=>{(f=>{if(!f||f.length!==1)throw new Error("Transpose requires 1 input.");if(f[0].dataType!==1&&f[0].dataType!==6&&f[0].dataType!==12)throw new Error("Transpose only support float, int32, and uint32 data types")})(u.inputs),u.compute(Object.assign(Object.assign({},e.transposeProgramMetadata),{cacheHint:h.cacheKey,get:()=>(0,e.createTransposeProgramInfo)(u.inputs[0],h.perm)}))},e.parseTransposeAttributes=u=>(0,s.createAttributeWithCacheKey)({perm:u.perm})},9302:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.log=e.thresholdedRelu=e.tanh=e.tan=e.sqrt=e.sinh=e.sin=e.sigmoid=e.relu=e.reciprocal=e.neg=e.leakyRelu=e.gelu=e.floor=e.exp=e.erf=e.erfImpl=e.elu=e.parseAlphaAttributes=e.cosh=e.cos=e.ceil=e.clip=e.clipV10=e.cast=e.parseCastAttributes=e.atanh=e.atan=e.asinh=e.asin=e.acosh=e.acos=e.abs=void 0;const r=t(6952),s=t(387),a=t(1163),i=t(2075),l=(u,h,f,c,o,d=u.dataType)=>{const m={name:h,inputTypes:[a.GpuDataType.default],cacheHint:o};return Object.assign(Object.assign({},m),{get:()=>((g,y,$,b,x)=>Object.assign(Object.assign({},g),{getShaderSource:w=>((v,S,T,C,I,N)=>{const P=Math.ceil(S/4);let F="";F=typeof I=="string"?`${I}(a)`:I("a");const _=(0,i.inputVariable)("inputData",T,[P],4),D=(0,i.outputVariable)("outputData",C,[P],4);return`
  ${v.declareVariables(_,D)}

  ${N??""}

  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes(P)}

    let a = ${_.getByOffset("global_idx")};
    ${D.setByOffset("global_idx",F)}
  }`})(w,r.ShapeUtil.size(y.dims),y.dataType,$,b,x),outputs:[{dims:y.dims,dataType:$,gpuDataType:a.GpuDataType.default}],dispatchGroup:w=>({x:Math.ceil(r.ShapeUtil.size(w[0].dims)/64/4)})}))(m,u,d,f,c)})};e.abs=u=>{u.compute(l(u.inputs[0],"Abs","abs"))},e.acos=u=>{u.compute(l(u.inputs[0],"Acos","acos"))},e.acosh=u=>{u.compute(l(u.inputs[0],"Acosh","acosh"))},e.asin=u=>{u.compute(l(u.inputs[0],"Asin","asin"))},e.asinh=u=>{u.compute(l(u.inputs[0],"Asinh","asinh"))},e.atan=u=>{u.compute(l(u.inputs[0],"Atan","atan"))},e.atanh=u=>{u.compute(l(u.inputs[0],"Atanh","atanh"))},e.parseCastAttributes=u=>(0,s.createAttributeWithCacheKey)(u),e.cast=(u,h)=>{let f;switch(h.to){case 1:f="vec4<f32>";break;case 12:f="vec4<u32>";break;case 6:f="vec4<i32>";break;case 9:f="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${h.to}`)}u.compute(l(u.inputs[0],"Cast",f,void 0,h.cacheKey,h.to))},e.clipV10=(u,h)=>{u.compute(l(u.inputs[0],"Clip",f=>`clamp(${f}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<f32> = vec4(f32(${h.min}));
    const clip_max_: vec4<f32> = vec4(f32(${h.max}));
`,h.cacheKey),{inputs:[0]})},e.clip=u=>{const h=(f=>{const c=f.length>=2?f[1].getFloat32Array()[0]:r.MIN_CLIP,o=f.length>=3?f[2].getFloat32Array()[0]:r.MAX_CLIP;return(0,s.createAttributeWithCacheKey)({min:c,max:o})})(u.inputs);(0,e.clipV10)(u,h)},e.ceil=u=>{u.compute(l(u.inputs[0],"Ceil","ceil"))},e.cos=u=>{u.compute(l(u.inputs[0],"Cos","cos"))},e.cosh=u=>{u.compute(l(u.inputs[0],"Cosh","cosh"))},e.parseAlphaAttributes=u=>(0,s.createAttributeWithCacheKey)(u),e.elu=(u,h)=>{u.compute(l(u.inputs[0],"Elu",f=>`elu_vf32(${f})`,`
  const elu_alpha_: f32 = f32(${h.alpha});

  fn elu_f32(a: f32) -> f32 {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,h.cacheKey))},e.erfImpl=u=>`
const r0: f32 = 0.3275911;
const r1: f32 = 0.254829592;
const r2: f32 = -0.284496736;
const r3: f32 = 1.421413741;
const r4: f32 = -1.453152027;
const r5: f32 = 1.061405429;

fn erf_vf32(v: ${u}) -> ${u} {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,e.erf=u=>{u.compute(l(u.inputs[0],"Erf",h=>`erf_vf32(${h})`,(0,e.erfImpl)("vec4<f32>")))},e.exp=u=>{u.compute(l(u.inputs[0],"Exp","exp"))},e.floor=u=>{u.compute(l(u.inputs[0],"Floor","floor"))},e.gelu=u=>{u.compute(l(u.inputs[0],"Gelu",h=>`0.5 * ${h} * (1.0 + erf_vf32(${h} * 0.7071067811865475))`,(0,e.erfImpl)("vec4<f32>")))},e.leakyRelu=(u,h)=>{u.compute(l(u.inputs[0],"LeakyRelu",f=>`select(leaky_relu_alpha_ * ${f}, ${f}, ${f} >= vec4<f32>(0.0))`,`const leaky_relu_alpha_: f32 = f32(${h.alpha});`,h.cacheKey))},e.neg=u=>{u.compute(l(u.inputs[0],"Neg",h=>`-${h}`))},e.reciprocal=u=>{u.compute(l(u.inputs[0],"Reciprocal",h=>`1.0/${h}`))},e.relu=u=>{u.compute(l(u.inputs[0],"Relu",h=>`select(vec4<f32>(0.0), ${h}, ${h} > vec4<f32>(0.0))`))},e.sigmoid=u=>{u.compute(l(u.inputs[0],"Sigmoid",h=>`(1.0 / (1.0 + exp(-${h})))`))},e.sin=u=>{u.compute(l(u.inputs[0],"Sin","sin"))},e.sinh=u=>{u.compute(l(u.inputs[0],"Sinh","sinh"))},e.sqrt=u=>{u.compute(l(u.inputs[0],"Sqrt","sqrt"))},e.tan=u=>{u.compute(l(u.inputs[0],"Tan","tan"))},e.tanh=u=>{u.compute(l(u.inputs[0],"Tanh","tanh"))},e.thresholdedRelu=(u,h)=>(u.compute(l(u.inputs[0],"ThresholdedRelu",f=>`select(vec4<f32>(0.0), ${f}, ${f} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${h.alpha});`,h.cacheKey)),0),e.log=u=>{u.compute(l(u.inputs[0],"Log","log"))}},8305:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ProgramManager=void 0;const r=t(4955),s=t(2075);e.ProgramManager=class{constructor(a){this.backend=a,this.repo=new Map,this.attributesBound=!1}getArtifact(a){return this.repo.get(a)}setArtifact(a,i){this.repo.set(a,i)}run(a,i,l,u){const h=this.backend.device,f=this.backend.getComputePassEncoder(),c=this.backend.supportTimestampQuery&&this.backend.env.webgpu.profilingMode==="default";c&&f.writeTimestamp(this.backend.profilingQuerySet,0),f.setPipeline(a.computePipeline);const o=[];for(const m of i)o.push({binding:o.length,resource:{buffer:m.buffer}});for(const m of l)o.push({binding:o.length,resource:{buffer:m.buffer}});const d=h.createBindGroup({layout:a.computePipeline.getBindGroupLayout(0),entries:o});if(f.setBindGroup(0,d),f.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,c){f.writeTimestamp(this.backend.profilingQuerySet,1),this.backend.profilingQueryData==null&&(this.backend.profilingQueryData=this.backend.gpuDataManager.create(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));const m=this.backend.gpuDataManager.create(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet,0,2,this.backend.profilingQueryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.profilingQueryData.buffer,0,m.buffer,0,16),this.backend.flush();const g=this.backend.currentKernelId,y=this.backend.kernels.get(g)[0];m.buffer.mapAsync(GPUMapMode.READ).then(()=>{const $=new BigUint64Array(m.buffer.getMappedRange()),b=$[0],x=$[1];m.buffer.unmap(),this.backend.profilingTimeBase===void 0&&(this.backend.profilingTimeBase=b);const w=Number(b-this.backend.profilingTimeBase),v=Number(x-this.backend.profilingTimeBase);if(!Number.isSafeInteger(w)||!Number.isSafeInteger(v))throw new RangeError("incorrect timestamp range");this.backend.gpuDataManager.release(m.id),console.log(`[profiling] kernel "${g}|${y}" execution time: ${v-w} ns`)})}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(a,i){const l=this.backend.device,u=(0,s.createShaderHelper)(i),h=a.getShaderSource(u),f=`${u.additionalImplementations}
${h}`,c=l.createShaderModule({code:f});return(0,r.LOG_DEBUG)("verbose",()=>`[WebGPU] shader code: ${f}`),{programInfo:a,computePipeline:l.createComputePipeline({compute:{module:c,entryPoint:"main"},layout:"auto"})}}normalizeDispatchGroupSize(a){const i=typeof a=="number"?a:a.x,l=typeof a=="number"?1:a.y||1,u=typeof a=="number"?1:a.z||1,h=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(i<=h&&l<=h&&u<=h)return[i,l,u];const f=i*l*u;let c=Math.ceil(Math.sqrt(f));if(c>h){if(c=Math.ceil(Math.cbrt(f)),c>h)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[c,c,c]}return[c,c,1]}}},1163:(n,e)=>{var t;Object.defineProperty(e,"__esModule",{value:!0}),e.GpuDataType=void 0,(t=e.GpuDataType||(e.GpuDataType={}))[t.default=0]="default",t[t.upload=1]="upload",t[t.profile=2]="profile"},9544:function(n,e,t){var r,s=this&&this.__createBinding||(Object.create?function(N,P,F,_){_===void 0&&(_=F);var D=Object.getOwnPropertyDescriptor(P,F);D&&!("get"in D?!P.__esModule:D.writable||D.configurable)||(D={enumerable:!0,get:function(){return P[F]}}),Object.defineProperty(N,_,D)}:function(N,P,F,_){_===void 0&&(_=F),N[_]=P[F]}),a=this&&this.__setModuleDefault||(Object.create?function(N,P){Object.defineProperty(N,"default",{enumerable:!0,value:P})}:function(N,P){N.default=P}),i=this&&this.__importStar||function(N){if(N&&N.__esModule)return N;var P={};if(N!=null)for(var F in N)F!=="default"&&Object.prototype.hasOwnProperty.call(N,F)&&s(P,N,F);return a(P,N),P};Object.defineProperty(e,"__esModule",{value:!0}),e.endProfiling=e.run=e.releaseSession=e.createSession=e.createSessionFinalize=e.createSessionAllocate=e.initializeRuntime=e.initializeWebAssemblyInstance=void 0;const l=t(2235),u=i(t(1259)),h=t(263),f=()=>!!l.env.wasm.proxy&&typeof document<"u";let c,o,d,m=!1,g=!1,y=!1;const $=[],b=[],x=[],w=[],v=[],S=[],T=()=>{if(m||!g||y||!c)throw new Error("worker not ready")},C=N=>{switch(N.data.type){case"init-wasm":m=!1,N.data.err?(y=!0,o[1](N.data.err)):(g=!0,o[0]());break;case"init-ort":N.data.err?d[1](N.data.err):d[0]();break;case"create_allocate":N.data.err?$.shift()[1](N.data.err):$.shift()[0](N.data.out);break;case"create_finalize":N.data.err?b.shift()[1](N.data.err):b.shift()[0](N.data.out);break;case"create":N.data.err?x.shift()[1](N.data.err):x.shift()[0](N.data.out);break;case"release":N.data.err?w.shift()[1](N.data.err):w.shift()[0]();break;case"run":N.data.err?v.shift()[1](N.data.err):v.shift()[0](N.data.out);break;case"end-profiling":N.data.err?S.shift()[1](N.data.err):S.shift()[0]()}},I=typeof document<"u"?(r=document?.currentScript)===null||r===void 0?void 0:r.src:void 0;e.initializeWebAssemblyInstance=async()=>{if(f()){if(g)return;if(m)throw new Error("multiple calls to 'initWasm()' detected.");if(y)throw new Error("previous call to 'initWasm()' failed.");return m=!0,l.env.wasm.wasmPaths===void 0&&I&&I.indexOf("blob:")!==0&&(l.env.wasm.wasmPaths=I.substr(0,+I.lastIndexOf("/")+1)),new Promise((N,P)=>{c?.terminate(),c=t(8050).Z(),c.onmessage=C,o=[N,P];const F={type:"init-wasm",in:l.env.wasm};c.postMessage(F)})}return(0,h.initializeWebAssembly)(l.env.wasm)},e.initializeRuntime=async N=>{if(f())return T(),new Promise((P,F)=>{d=[P,F];const _={type:"init-ort",in:N};c.postMessage(_)});await u.initRuntime(N)},e.createSessionAllocate=async N=>f()?(T(),new Promise((P,F)=>{$.push([P,F]);const _={type:"create_allocate",in:{model:N}};c.postMessage(_,[N.buffer])})):u.createSessionAllocate(N),e.createSessionFinalize=async(N,P)=>f()?(T(),new Promise((F,_)=>{b.push([F,_]);const D={type:"create_finalize",in:{modeldata:N,options:P}};c.postMessage(D)})):u.createSessionFinalize(N,P),e.createSession=async(N,P)=>f()?(T(),new Promise((F,_)=>{x.push([F,_]);const D={type:"create",in:{model:N,options:P}};c.postMessage(D,[N.buffer])})):u.createSession(N,P),e.releaseSession=async N=>{if(f())return T(),new Promise((P,F)=>{w.push([P,F]);const _={type:"release",in:N};c.postMessage(_)});u.releaseSession(N)},e.run=async(N,P,F,_,D)=>f()?(T(),new Promise((E,k)=>{v.push([E,k]);const O={type:"run",in:{sessionId:N,inputIndices:P,inputs:F,outputIndices:_,options:D}};c.postMessage(O,u.extractTransferableBuffers(F))})):u.run(N,P,F,_,D),e.endProfiling=async N=>{if(f())return T(),new Promise((P,F)=>{S.push([P,F]);const _={type:"end-profiling",in:N};c.postMessage(_)});u.endProfiling(N)}},7918:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.setRunOptions=void 0;const r=t(263),s=t(1497);e.setRunOptions=a=>{const i=(0,r.getInstance)();let l=0;const u=[],h=a||{};try{if(a?.logSeverityLevel===void 0)h.logSeverityLevel=2;else if(typeof a.logSeverityLevel!="number"||!Number.isInteger(a.logSeverityLevel)||a.logSeverityLevel<0||a.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${a.logSeverityLevel}`);if(a?.logVerbosityLevel===void 0)h.logVerbosityLevel=0;else if(typeof a.logVerbosityLevel!="number"||!Number.isInteger(a.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${a.logVerbosityLevel}`);a?.terminate===void 0&&(h.terminate=!1);let f=0;return a?.tag!==void 0&&(f=(0,s.allocWasmString)(a.tag,u)),l=i._OrtCreateRunOptions(h.logSeverityLevel,h.logVerbosityLevel,!!h.terminate,f),l===0&&(0,s.checkLastError)("Can't create run options."),a?.extra!==void 0&&(0,s.iterateExtraOptions)(a.extra,"",new WeakSet,(c,o)=>{const d=(0,s.allocWasmString)(c,u),m=(0,s.allocWasmString)(o,u);i._OrtAddRunConfigEntry(l,d,m)!==0&&(0,s.checkLastError)(`Can't set a run config entry: ${c} - ${o}.`)}),[l,u]}catch(f){throw l!==0&&i._OrtReleaseRunOptions(l),u.forEach(c=>i._free(c)),f}}},6640:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OnnxruntimeWebAssemblySessionHandler=void 0;const r=t(2806),s=t(2235),a=t(2850),i=t(9544);let l;e.OnnxruntimeWebAssemblySessionHandler=class{async createSessionAllocate(u){const h=await fetch(u);if(h.status!==200)throw new Error(`failed to load model: ${u}`);const f=await h.arrayBuffer();return(0,i.createSessionAllocate)(new Uint8Array(f))}async loadModel(u,h){if(l||(await(0,i.initializeRuntime)(s.env),l=!0),typeof u=="string")if(typeof process<"u"&&process.versions&&process.versions.node){const f=await(0,a.promisify)(r.readFile)(u);[this.sessionId,this.inputNames,this.outputNames]=await(0,i.createSession)(f,h)}else{const f=await this.createSessionAllocate(u);[this.sessionId,this.inputNames,this.outputNames]=await(0,i.createSessionFinalize)(f,h)}else[this.sessionId,this.inputNames,this.outputNames]=await(0,i.createSession)(u,h)}async dispose(){return(0,i.releaseSession)(this.sessionId)}async run(u,h,f){const c=[],o=[];Object.entries(u).forEach(y=>{const $=y[0],b=y[1],x=this.inputNames.indexOf($);if(x===-1)throw new Error(`invalid input '${$}'`);c.push(b),o.push(x)});const d=[];Object.entries(h).forEach(y=>{const $=y[0],b=this.outputNames.indexOf($);if(b===-1)throw new Error(`invalid output '${$}'`);d.push(b)});const m=await(0,i.run)(this.sessionId,o,c.map(y=>[y.type,y.dims,y.data]),d,f),g={};for(let y=0;y<m.length;y++)g[this.outputNames[d[y]]]=new s.Tensor(m[y][0],m[y][2],m[y][1]);return g}startProfiling(){}endProfiling(){(0,i.endProfiling)(this.sessionId)}}},7622:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.setSessionOptions=void 0;const r=t(263),s=t(1497);e.setSessionOptions=a=>{var i,l,u,h;const f=(0,r.getInstance)();let c=0;const o=[],d=a||{};(m=>{m.extra||(m.extra={}),m.extra.session||(m.extra.session={});const g=m.extra.session;g.use_ort_model_bytes_directly||(g.use_ort_model_bytes_directly="1"),m.executionProviders&&m.executionProviders.some(y=>(typeof y=="string"?y:y.name)==="webgpu")&&(m.enableMemPattern=!1)})(d);try{const m=(w=>{switch(w){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${w}`)}})((i=d.graphOptimizationLevel)!==null&&i!==void 0?i:"all"),g=(w=>{switch(w){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${w}`)}})((l=d.executionMode)!==null&&l!==void 0?l:"sequential"),y=typeof d.logId=="string"?(0,s.allocWasmString)(d.logId,o):0,$=(u=d.logSeverityLevel)!==null&&u!==void 0?u:2;if(!Number.isInteger($)||$<0||$>4)throw new Error(`log serverity level is not valid: ${$}`);const b=(h=d.logVerbosityLevel)!==null&&h!==void 0?h:0;if(!Number.isInteger(b)||b<0||b>4)throw new Error(`log verbosity level is not valid: ${b}`);const x=typeof d.optimizedModelFilePath=="string"?(0,s.allocWasmString)(d.optimizedModelFilePath,o):0;return c=f._OrtCreateSessionOptions(m,!!d.enableCpuMemArena,!!d.enableMemPattern,g,!!d.enableProfiling,0,y,$,b,x),c===0&&(0,s.checkLastError)("Can't create session options."),d.executionProviders&&((w,v,S)=>{for(const T of v){let C=typeof T=="string"?T:T.name;switch(C){case"xnnpack":C="XNNPACK";break;case"webnn":if(C="WEBNN",typeof T!="string"){const N=T;if(N?.deviceType){const P=(0,s.allocWasmString)("deviceType",S),F=(0,s.allocWasmString)(N.deviceType,S);(0,r.getInstance)()._OrtAddSessionConfigEntry(w,P,F)!==0&&(0,s.checkLastError)(`Can't set a session config entry: 'deviceType' - ${N.deviceType}.`)}if(N?.powerPreference){const P=(0,s.allocWasmString)("powerPreference",S),F=(0,s.allocWasmString)(N.powerPreference,S);(0,r.getInstance)()._OrtAddSessionConfigEntry(w,P,F)!==0&&(0,s.checkLastError)(`Can't set a session config entry: 'powerPreference' - ${N.powerPreference}.`)}}break;case"webgpu":C="JS";break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${C}`)}const I=(0,s.allocWasmString)(C,S);(0,r.getInstance)()._OrtAppendExecutionProvider(w,I)!==0&&(0,s.checkLastError)(`Can't append execution provider: ${C}.`)}})(c,d.executionProviders,o),d.extra!==void 0&&(0,s.iterateExtraOptions)(d.extra,"",new WeakSet,(w,v)=>{const S=(0,s.allocWasmString)(w,o),T=(0,s.allocWasmString)(v,o);f._OrtAddSessionConfigEntry(c,S,T)!==0&&(0,s.checkLastError)(`Can't set a session config entry: ${w} - ${v}.`)}),[c,o]}catch(m){throw c!==0&&f._OrtReleaseSessionOptions(c),o.forEach(g=>f._free(g)),m}}},7917:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.logLevelStringToEnum=e.tensorTypeToTypedArrayConstructor=e.getTensorElementSize=e.tensorDataTypeEnumToString=e.tensorDataTypeStringToEnum=void 0,e.tensorDataTypeStringToEnum=t=>{switch(t){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${t}`)}},e.tensorDataTypeEnumToString=t=>{switch(t){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${t}`)}},e.getTensorElementSize=t=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][t],e.tensorTypeToTypedArrayConstructor=t=>{switch(t){case"float16":case"uint16":return Uint16Array;case"float32":return Float32Array;case"uint8":case"bool":return Uint8Array;case"int8":return Int8Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${t}`)}},e.logLevelStringToEnum=t=>{switch(t){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${t}`)}}},1259:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.extractTransferableBuffers=e.endProfiling=e.run=e.releaseSession=e.createSession=e.createSessionFinalize=e.createSessionAllocate=e.initRuntime=void 0;const r=t(7918),s=t(7622),a=t(7917),i=t(263),l=t(1497);e.initRuntime=async h=>{var f,c;f=h.wasm.numThreads,c=(0,a.logLevelStringToEnum)(h.logLevel),(0,i.getInstance)()._OrtInit(f,c)!==0&&(0,l.checkLastError)("Can't initialize onnxruntime.");{const o=t(7675).S;await o((0,i.getInstance)(),h)}};const u=new Map;e.createSessionAllocate=h=>{const f=(0,i.getInstance)(),c=f._malloc(h.byteLength);if(c===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${h.byteLength}.`);return f.HEAPU8.set(h,c),[c,h.byteLength]},e.createSessionFinalize=(h,f)=>{const c=(0,i.getInstance)();let o=0,d=0,m=[];const g=[],y=[];try{[d,m]=(0,s.setSessionOptions)(f),o=c._OrtCreateSession(h[0],h[1],d),o===0&&(0,l.checkLastError)("Can't create a session.");const[$,b]=(v=>{const S=(0,i.getInstance)(),T=S.stackSave();try{const C=S.stackAlloc(8);return S._OrtGetInputOutputCount(v,C,C+4)!==0&&(0,l.checkLastError)("Can't get session input/output count."),[S.HEAP32[C/4],S.HEAP32[C/4+1]]}finally{S.stackRestore(T)}})(o),x=[],w=[];for(let v=0;v<$;v++){const S=c._OrtGetInputName(o,v);S===0&&(0,l.checkLastError)("Can't get an input name."),g.push(S),x.push(c.UTF8ToString(S))}for(let v=0;v<b;v++){const S=c._OrtGetOutputName(o,v);S===0&&(0,l.checkLastError)("Can't get an output name."),y.push(S),w.push(c.UTF8ToString(S))}return u.set(o,[o,g,y]),[o,x,w]}catch($){throw g.forEach(b=>c._OrtFree(b)),y.forEach(b=>c._OrtFree(b)),o!==0&&c._OrtReleaseSession(o),$}finally{c._free(h[0]),d!==0&&c._OrtReleaseSessionOptions(d),m.forEach($=>c._free($))}},e.createSession=(h,f)=>{const c=(0,e.createSessionAllocate)(h);return(0,e.createSessionFinalize)(c,f)},e.releaseSession=h=>{const f=(0,i.getInstance)(),c=u.get(h);if(!c)throw new Error(`cannot release session. invalid session id: ${h}`);const[o,d,m]=c;d.forEach(g=>f._OrtFree(g)),m.forEach(g=>f._OrtFree(g)),f._OrtReleaseSession(o),u.delete(h)},e.run=async(h,f,c,o,d)=>{const m=(0,i.getInstance)(),g=u.get(h);if(!g)throw new Error(`cannot run inference. invalid session id: ${h}`);const[y,$,b]=g,x=f.length,w=o.length;let v=0,S=[];const T=[],C=[];try{[v,S]=(0,r.setRunOptions)(d);for(let D=0;D<x;D++){const E=c[D][0],k=c[D][1],O=c[D][2];let M,z;if(Array.isArray(O)){z=4*O.length,M=m._malloc(z),C.push(M);let K=M/4;for(let X=0;X<O.length;X++){if(typeof O[X]!="string")throw new TypeError(`tensor data at index ${X} is not a string`);m.HEAPU32[K++]=(0,l.allocWasmString)(O[X],C)}}else z=O.byteLength,M=m._malloc(z),C.push(M),m.HEAPU8.set(new Uint8Array(O.buffer,O.byteOffset,z),M);const G=m.stackSave(),j=m.stackAlloc(4*k.length);try{let K=j/4;k.forEach(Y=>m.HEAP32[K++]=Y);const X=m._OrtCreateTensor((0,a.tensorDataTypeStringToEnum)(E),M,z,j,k.length);X===0&&(0,l.checkLastError)(`Can't create tensor for input[${D}].`),T.push(X)}finally{m.stackRestore(G)}}const I=m.stackSave(),N=m.stackAlloc(4*x),P=m.stackAlloc(4*x),F=m.stackAlloc(4*w),_=m.stackAlloc(4*w);try{let D=N/4,E=P/4,k=F/4,O=_/4;for(let j=0;j<x;j++)m.HEAPU32[D++]=T[j],m.HEAPU32[E++]=$[f[j]];for(let j=0;j<w;j++)m.HEAPU32[k++]=0,m.HEAPU32[O++]=b[o[j]];let M=m._OrtRun(y,P,N,x,_,w,F,v);const z=m.jsepRunPromise;z&&z.then!==void 0&&(M=await z);const G=[];M!==0&&(0,l.checkLastError)("failed to call OrtRun().");for(let j=0;j<w;j++){const K=m.HEAPU32[F/4+j],X=m.stackSave(),Y=m.stackAlloc(16);let J,te=0;try{M=m._OrtGetTensorData(K,Y,Y+4,Y+8,Y+12),M!==0&&(0,l.checkLastError)(`Can't access output tensor data on index ${j}.`);let re=Y/4;const ue=m.HEAPU32[re++];te=m.HEAPU32[re++];const ie=m.HEAPU32[re++],ce=m.HEAPU32[re++],se=[];for(let me=0;me<ce;me++)se.push(m.HEAPU32[ie/4+me]);m._OrtFree(ie);const xe=se.length===0?1:se.reduce((me,$e)=>me*$e);if(J=(0,a.tensorDataTypeEnumToString)(ue),J==="string"){const me=[];let $e=te/4;for(let Se=0;Se<xe;Se++){const ve=m.HEAPU32[$e++],Ee=Se===xe-1?void 0:m.HEAPU32[$e]-ve;me.push(m.UTF8ToString(ve,Ee))}G.push([J,se,me])}else{const me=new((0,a.tensorTypeToTypedArrayConstructor)(J))(xe);new Uint8Array(me.buffer,me.byteOffset,me.byteLength).set(m.HEAPU8.subarray(te,te+me.byteLength)),G.push([J,se,me])}}finally{m.stackRestore(X),J==="string"&&te&&m._free(te),m._OrtReleaseTensor(K)}}return G}finally{m.stackRestore(I)}}finally{T.forEach(I=>m._OrtReleaseTensor(I)),C.forEach(I=>m._free(I)),v!==0&&m._OrtReleaseRunOptions(v),S.forEach(I=>m._free(I))}},e.endProfiling=h=>{const f=(0,i.getInstance)(),c=u.get(h);if(!c)throw new Error("invalid session id");const o=c[0],d=f._OrtEndProfiling(o);d===0&&(0,l.checkLastError)("Can't get an profile file name."),f._OrtFree(d)},e.extractTransferableBuffers=h=>{const f=[];for(const c of h){const o=c[2];!Array.isArray(o)&&o.buffer&&f.push(o.buffer)}return f}},263:function(n,e,t){var r=this&&this.__createBinding||(Object.create?function(d,m,g,y){y===void 0&&(y=g);var $=Object.getOwnPropertyDescriptor(m,g);$&&!("get"in $?!m.__esModule:$.writable||$.configurable)||($={enumerable:!0,get:function(){return m[g]}}),Object.defineProperty(d,y,$)}:function(d,m,g,y){y===void 0&&(y=g),d[y]=m[g]}),s=this&&this.__setModuleDefault||(Object.create?function(d,m){Object.defineProperty(d,"default",{enumerable:!0,value:m})}:function(d,m){d.default=m}),a=this&&this.__importStar||function(d){if(d&&d.__esModule)return d;var m={};if(d!=null)for(var g in d)g!=="default"&&Object.prototype.hasOwnProperty.call(d,g)&&r(m,d,g);return s(m,d),m};Object.defineProperty(e,"__esModule",{value:!0}),e.dispose=e.getInstance=e.initializeWebAssembly=void 0;const i=a(t(6449)),l=t(9377),u=t(5711);let h,f=!1,c=!1,o=!1;e.initializeWebAssembly=async d=>{if(f)return Promise.resolve();if(c)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(o)throw new Error("previous call to 'initializeWebAssembly()' failed.");c=!0;const m=d.initTimeout,g=d.numThreads,y=d.simd,$=g>1&&(()=>{try{return typeof SharedArrayBuffer<"u"&&(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}})(),b=y&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}})(),x=d.wasmPaths,w=typeof x=="string"?x:void 0,v=((I,N)=>N?I?"ort-wasm-simd-threaded.wasm":"ort-wasm-threaded.wasm":I?"ort-wasm-simd.wasm":"ort-wasm.wasm")(b,$),S=typeof x=="object"?x[v]:void 0;let T=!1;const C=[];if(m>0&&C.push(new Promise(I=>{setTimeout(()=>{T=!0,I()},m)})),C.push(new Promise((I,N)=>{const P=$?u:l,F={locateFile:(_,D)=>{if($&&_.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([t(4154)],{type:"text/javascript"}));if(_.endsWith(".wasm")){if(S)return S;const E=w??D;return v==="ort-wasm-simd.wasm"?E+"ort-wasm-simd.jsep.wasm":v==="ort-wasm-simd-threaded.wasm"?E+"ort-wasm-simd-threaded.jsep.wasm":E+v}return D+_}};if($)if(typeof Blob>"u")F.mainScriptUrlOrBlob=i.join(__dirname,"ort-wasm-threaded.js");else{const _=`var ortWasmThreaded=(function(){var _scriptDir;return ${P.toString()}})();`;F.mainScriptUrlOrBlob=new Blob([_],{type:"text/javascript"})}P(F).then(_=>{c=!1,f=!0,h=_,I()},_=>{c=!1,o=!0,N(_)})})),await Promise.race(C),T)throw new Error(`WebAssembly backend initializing failed due to timeout: ${m}ms`)},e.getInstance=()=>{if(f&&h)return h;throw new Error("WebAssembly is not initialized yet.")},e.dispose=()=>{var d;!f||c||o||(c=!0,(d=h.PThread)===null||d===void 0||d.terminateAllThreads(),h=void 0,c=!1,f=!1,o=!0)}},1497:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.checkLastError=e.iterateExtraOptions=e.allocWasmString=void 0;const r=t(263);e.allocWasmString=(s,a)=>{const i=(0,r.getInstance)(),l=i.lengthBytesUTF8(s)+1,u=i._malloc(l);return i.stringToUTF8(s,u,l),a.push(u),u},e.iterateExtraOptions=(s,a,i,l)=>{if(typeof s=="object"&&s!==null){if(i.has(s))throw new Error("Circular reference in options");i.add(s)}Object.entries(s).forEach(([u,h])=>{const f=a?a+u:u;if(typeof h=="object")(0,e.iterateExtraOptions)(h,f+".",i,l);else if(typeof h=="string"||typeof h=="number")l(f,h.toString());else{if(typeof h!="boolean")throw new Error("Can't handle extra config type: "+typeof h);l(f,h?"1":"0")}})},e.checkLastError=s=>{const a=(0,r.getInstance)(),i=a.stackSave();try{const l=a.stackAlloc(8);a._OrtGetLastError(l,l+4);const u=a.HEAP32[l/4],h=a.HEAPU32[l/4+1],f=h?a.UTF8ToString(h):"";throw new Error(`${s} ERROR_CODE: ${u}, ERROR_MESSAGE: ${f}`)}finally{a.stackRestore(i)}}},8050:(n,e,t)=>{t.d(e,{Z:()=>a});var r=t(6614),s=t.n(r);function a(){return s()('/*!\n* ONNX Runtime Web v1.16.0\n* Copyright (c) Microsoft Corporation. All rights reserved.\n* Licensed under the MIT License.\n*/\n(()=>{var e={3838:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WebGpuBackend=void 0;const r=n(4955),a=n(7771),i=n(8510),o=n(8305);t.WebGpuBackend=class{constructor(){this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.pendingDispatchNumber=0,this.supportTimestampQuery=!1}get currentKernelCustomData(){if(null===this.currentKernelId)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e){if(!navigator.gpu)throw new Error("WebGpuBackend: WebGPU is not available.");const t=await navigator.gpu.requestAdapter();if(!t)throw new Error("WebGpuBackend: Failed to get GPU adapter.");this.env=e;const n={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ}};t.features.has("timestamp-query-inside-passes")&&(this.supportTimestampQuery=!0,n.requiredFeatures=["timestamp-query-inside-passes"]),this.device=await t.requestDevice(n),this.gpuDataManager=(0,a.createGpuDataManager)(this),this.programManager=new o.ProgramManager(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,(0,r.configureLogger)(e.logLevel,!!e.debug),this.device.onuncapturederror=e=>{e.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${e.error.message}`)},this.supportTimestampQuery&&(this.profilingQuerySet=this.device.createQuerySet({type:"timestamp",count:2}))}dispose(){}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){return this.computePassEncoder||(this.computePassEncoder=this.getCommandEncoder().beginComputePass()),this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0}run(e,t,n,a,i){if(t.length!==e.inputTypes.length)throw new Error(`Input size must be equal to ${e.inputTypes.length}.`);const o=[];for(let e=0;e<t.length;++e){const n=this.gpuDataManager.get(t[e].data);if(!n)throw new Error(`no GPU data for input: ${t[e].data}`);o[e]=n}const s=((e,t)=>{const n=t.map((e=>`${e.dataType};${e.dims.join(",")}`)).join("|");let r=e.name;return e.cacheHint&&(r+="["+e.cacheHint+"]"),r+=":"+n,r})(e,t);let u=this.programManager.getArtifact(s);const l=u?u.programInfo:"function"==typeof e.get?e.get():e,c=0===n.length?l.outputs.map(((e,t)=>t)):n;if(c.length!==l.outputs.length)throw new Error(`Output size ${c.length} must be equal to ${l.outputs.length}.`);const d=[],p=[];for(let e=0;e<l.outputs.length;++e){if(!Number.isInteger(c[e])||c[e]<-3||c[e]>=l.outputs.length)throw new Error(`Invalid output index: ${c[e]}`);if(-3===c[e])continue;const t=-1===c[e],n=-2===c[e],r=t||n?i(l.outputs[e].dataType,l.outputs[e].dims):a(c[e],l.outputs[e].dataType,l.outputs[e].dims),o=this.gpuDataManager.get(r.data);if(!o)throw new Error(`no GPU data for output: ${r.data}`);if(t&&this.temporaryData.push(o),n){let e=this.kernelPersistentData.get(this.currentKernelId);e||(e=[],this.kernelPersistentData.set(this.currentKernelId,e)),e.push(o)}d.push(r),p.push(o)}const f=this.programManager.normalizeDispatchGroupSize(l.dispatchGroup(t));return u||(u=this.programManager.build(l,f),this.programManager.setArtifact(s,u)),(0,r.LOG_DEBUG)("info",(()=>`[ProgramManager] run "${l.name}" (key=${s}) with ${f[0]}x${f[1]}x${f[2]}`)),this.programManager.run(u,o,p,f),d}upload(e,t){this.gpuDataManager.upload(e,t)}memcpy(e,t){this.gpuDataManager.memcpy(e,t)}async download(e,t){const n=await this.gpuDataManager.download(e),r=t();r.set(new Uint8Array(n,0,r.byteLength))}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,t,n){const r=i.WEBGPU_OP_RESOLVE_RULES.get(e);if(!r)throw new Error(`kernel not implemented: ${e}`);this.kernels.set(t,[e,r[0],[r[1],n]])}releaseKernel(e){const t=this.kernelPersistentData.get(e);if(t){for(const e of t)this.gpuDataManager.release(e.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,t){const n=this.kernels.get(e);if(!n)throw new Error(`kernel not created: ${e}`);const[a,i,o]=n;if(null!==this.currentKernelId)throw new Error(`kernel "${a}" is not allowed to be called recursively`);this.currentKernelId=e,o[0]&&(o[1]=o[0](o[1]),o[0]=void 0),(0,r.LOG_DEBUG)("info",(()=>`[WebGPU] Start to run kernel "${a}"...`)),this.temporaryData=[];try{return i(t,o[1]),0}catch(e){return(0,r.LOG_DEBUG)("warning",`[WebGPU] Kernel "${a}" failed. Error: ${e}`),1}finally{for(const e of this.temporaryData)this.gpuDataManager.release(e.id);this.temporaryData=[],this.currentKernelId=null}}}},7675:(e,t,n)=>{"use strict";t.S=void 0;const r=n(7917),a=n(3838),i=n(4955),o=n(6952);class s{constructor(e,t,n,r){this.module=e,this.dataType=t,this.data=n,this.dims=r}getFloat32Array(){if(1!==this.dataType)throw new Error("Invalid data type");const e=o.ShapeUtil.size(this.dims);return 0===e?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,e)}getBigInt64Array(){if(7!==this.dataType)throw new Error("Invalid data type");const e=o.ShapeUtil.size(this.dims);return 0===e?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,e)}getInt32Array(){if(6!==this.dataType)throw new Error("Invalid data type");const e=o.ShapeUtil.size(this.dims);return 0===e?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,e)}reshape(e){if(o.ShapeUtil.size(e)!==o.ShapeUtil.size(this.dims))throw new Error("Invalid new shape");return new s(this.module,this.dataType,this.data,e)}}class u{get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}constructor(e,t,n){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0;const r=e.HEAPU32;let a=n>>2;this.opKernelContext=r[a++];const i=r[a++];this.outputCount=r[a++],this.customDataOffset=r[a++],this.customDataSize=r[a++];const o=[];for(let t=0;t<i;t++){const t=r[a++],n=r[a++],i=r[a++],u=[];for(let e=0;e<i;e++)u.push(r[a++]);o.push(new s(e,t,n,u))}this.inputs=o}compute(e,t){var n,a,i;const u=null!==(a=null===(n=null==t?void 0:t.inputs)||void 0===n?void 0:n.map((e=>"number"==typeof e?this.inputs[e]:e)))&&void 0!==a?a:this.inputs,l=null!==(i=null==t?void 0:t.outputs)&&void 0!==i?i:[];return this.backend.run(e,u,l,((e,t,n)=>new s(this.module,t,this.output(e,n),n)),((e,t)=>{const n=(0,r.getTensorElementSize)(e);if(!n)throw new Error(`Unsupported data type: ${e}`);const a=n*o.ShapeUtil.size(t);return new s(this.module,e,this.backend.gpuDataManager.create(a).id,t)}))}output(e,t){const n=this.module.stackSave();try{const n=this.module.stackAlloc(4*(1+t.length));let r=n>>2;this.module.HEAPU32[r++]=t.length;for(let e=0;e<t.length;e++)this.module.HEAPU32[r++]=t[e];return this.module._JsepOutput(this.opKernelContext,e,n)}finally{this.module.stackRestore(n)}}}t.S=async(e,t)=>{const n=e.jsepInit;if(n&&navigator.gpu){if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP");const r=new a.WebGpuBackend;await r.initialize(t),n({backend:r},(e=>r.alloc(e)),(e=>r.free(e)),((t,n,a,o=!1)=>{if(o)(0,i.LOG_DEBUG)("verbose",(()=>`[WebGPU] jsepCopyGpuToGpu: src=${t}, dst=${n}, size=${a}`)),r.memcpy(t,n);else{(0,i.LOG_DEBUG)("verbose",(()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${t}, gpuDataId=${n}, size=${a}`));const o=e.HEAPU8.subarray(t,t+a);r.upload(n,o)}}),(async(t,n,a)=>{(0,i.LOG_DEBUG)("verbose",(()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${t}, dataOffset=${n}, size=${a}`)),await r.download(t,(()=>e.HEAPU8.subarray(n,n+a)))}),((e,t,n)=>r.createKernel(e,t,n)),(e=>r.releaseKernel(e)),((t,n)=>{(0,i.LOG_DEBUG)("verbose",(()=>`[WebGPU] jsepRun: kernel=${t}, contextDataOffset=${n}`));const a=new u(e,r,n);return r.computeKernel(t,a)}))}}},4955:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LOG_DEBUG=t.LOG=t.configureLogger=void 0;const r=n(7917),a=["V","I","W","E","F"];let i,o;t.configureLogger=(e,t)=>{i=e,o=t},t.LOG=(e,t)=>{const n=(0,r.logLevelStringToEnum)(e);var o,s;n>=(0,r.logLevelStringToEnum)(i)&&(o=n,s="function"==typeof t?t():t,console.log(`[${a[o]},${(new Date).toISOString()}]${s}`))},t.LOG_DEBUG=(...e)=>{o&&(0,t.LOG)(...e)}},6952:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MAX_CLIP=t.MIN_CLIP=t.GemmUtil=t.PoolConvUtil=t.ShapeUtil=t.BroadcastUtil=t.MatMulUtil=void 0;class n{static calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]}}t.MatMulUtil=n;class r{static calcShape(e,t,r=!1){const a=e.length,i=t.length;if(0===a)return t;if(0===i)return e;const o=Math.max(e.length,t.length),s=new Array(o);if(r){if(a<2||i<2)return;const r=n.calcMatMulShape([e[a-2],e[a-1]],[t[i-2],t[i-1]]);if(void 0===r)return;[s[o-2],s[o-1]]=r}for(let n=r?3:1;n<=o;n++){const r=a-n<0?1:e[a-n],u=i-n<0?1:t[i-n];if(r!==u&&r>1&&u>1)return;s[o-n]=Math.max(r,u)}return s}static isValidBroadcast(e,t){const n=e.length,r=t.length;if(n>r)return!1;for(let a=1;a<=n;a++)if(1!==e[n-a]&&e[n-a]!==t[r-a])return!1;return!0}}t.BroadcastUtil=r;class a{static size(e){return a.getSizeFromDimensionRange(e,0,e.length)}static sizeFromDimension(e,t){if(t<0||t>e.length)throw new Error(`invalid dimension of ${t} for sizeFromDimension as Tensor has ${e.length} dimensions.`);return a.getSizeFromDimensionRange(e,t,e.length)}static sizeToDimension(e,t){if(t<0||t>e.length)throw new Error(`invalid dimension of ${t} for sizeToDimension as Tensor has ${e.length} dimensions.`);return a.getSizeFromDimensionRange(e,0,t)}static getSizeFromDimensionRange(e,t,n){let r=1;for(let a=t;a<n;a++){if(e[a]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");r*=e[a]}return r}static computeStrides(e){const t=e.length;if(0===t)return[];if(1===t)return[1];const n=new Array(t);n[t-1]=1,n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}static normalizeAxis(e,t){if(e<-t&&e>=t)throw new Error("unsupported axis for this operation.");return e<0?e+t:e}static normalizeAxes(e,t){return e.map((n=>this.normalizeAxis(n,null!=t?t:e.length)))}static sortBasedOnPerm(e,t){return t?t.map((t=>e[t])):e.slice().reverse()}static padShape(e,t){const n=e.length;return e.map(((e,r)=>e+t[r]+t[r+n]))}static areEqual(e,t){return e.length===t.length&&e.every(((e,n)=>e===t[n]))}}t.ShapeUtil=a;class i{static adjustPoolAttributes(e,t,n,r,a,i){if(!e&&n.length!==t.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(e)for(let e=0;e<t.length-2;e++)e>=n.length?n.push(t[e+2]):n[e]=t[e+2];for(let e=0;e<n.length;e++)if(e<r.length){if(r[e]<0)throw new Error("strides should be greater than or equal to 1")}else r.push(1);for(let e=0;e<n.length;e++)if(e<a.length){if(a[e]<0)throw new Error("dilations should be greater than or equal to 1")}else a.push(1);for(let e=0;e<2*n.length;e++)if(e<i.length){if(i[e]<0)throw new Error("pad should be greater than or equal to 1")}else i.push(0);for(let e=0;e<n.length;e++){if(n[e]<=0)throw new Error("kernel shapes need to be greater than 0");if(i[e]>=n[e]||i[e+n.length]>=n[e])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(e,t,n,r,a,o,s){if(s){if(a.length!==2*(e.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(t.length!==e.length-2)throw new Error("length of strides should be the length of data dimensions");if(r.length!==e.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let u=0;u<e.length-2;u++)i.adjustPadAndReturnShape(e[u+(o?1:2)],t[u],n[u],r[u],a,u,u+e.length-2,s)}}static computePoolOutputShape(e,t,n,r,a,o,s){if(t.length<=0)throw new Error("input shape must be of size greater than 0");const u=[t[0],t[1]];return i.computeShapeHelper(e,t,u,n,r,a,o,s),u}static computeConvOutputShape(e,t,n,r,a,o,s){if(e.length<=0||t.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");const u=[e[0],t[0]];return i.computeShapeHelper(!1,e,u,n,r,a,o,s),u}static computeShapeHelper(e,t,n,r,a,o,s,u){if(e)for(let e=0;e<t.length-2;e++)n.push(1);else for(let e=0;e<t.length-2;e++)n.push(i.adjustPadAndReturnShape(t[e+2],r[e],a[e],o[e],s,e,e+t.length-2,u))}static adjustPadAndReturnShape(e,t,n,r,a,i,o,s){const u=n*(r-1)+1;if(!s||"NOTSET"===s)return Math.floor((e+a[i]+a[o]-u)/t+1);switch(s){case"VALID":return a[i]=0,a[o]=0,Math.floor((e-u)/t+1);case"SAME_LOWER":case"SAME_UPPER":if(1!==n)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{const n=((e+t-1)/t-1)*t+r-e;return a[i]="SAME_LOWER"===s?Math.floor((n+1)/2):Math.floor(n/2),a[o]=n-a[i],Math.floor((e+n-r)/t+1)}default:throw new Error("Unsupported AutoPad type")}}}t.PoolConvUtil=i,t.GemmUtil=class{static getShapeOfGemmResult(e,t,n,a,i){if(2!==e.length||2!==n.length)throw new Error("shape need to be of size 2");let o,s,u;t?(o=e[1],s=e[0]):(o=e[0],s=e[1]);let l=-1;if(a?(u=n[0],l=1):(u=n[1],l=0),n[l]!==s)throw new Error("dimension mismatch");if(o<=0||u<=0||s<=0)throw new Error("invalid shape specified");if(i&&!r.isValidBroadcast(i,[o,u]))throw new Error("gemm: invalid bias shape for broadcast");return[o,u,s]}},t.MIN_CLIP=-34028234663852886e22,t.MAX_CLIP=34028234663852886e22},387:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createAttributeWithCacheKey=void 0;class n{constructor(e){Object.assign(this,e)}get cacheKey(){return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map((e=>`${this[e]}`)).join(";")),this._cacheKey}}t.createAttributeWithCacheKey=e=>new n(e)},7771:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createGpuDataManager=void 0;const r=n(4955),a=n(1163),i=e=>16*Math.ceil(e/16);let o=0;class s{constructor(e){this.backend=e,this.storageCache=new Map,this.downloadCache=new Map,this.freeBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[]}upload(e,t){const n=t.buffer,a=t.byteOffset,o=t.byteLength,s=i(o),u=this.storageCache.get(e);if(!u)throw new Error("gpu data for uploading does not exist");if(u.originalSize!==o)throw new Error(`inconsistent data size. gpu data size=${u.originalSize}, data size=${o}`);const l=this.backend.device.createBuffer({mappedAtCreation:!0,size:s,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),c=l.getMappedRange();new Uint8Array(c).set(new Uint8Array(n,a,o)),l.unmap();const d=this.backend.getCommandEncoder();this.backend.endComputePass(),d.copyBufferToBuffer(l,0,u.gpuData.buffer,0,s),(0,r.LOG_DEBUG)("verbose",(()=>`[WebGPU] GpuDataManager.upload(id=${e})`)),this.buffersForUploadingPending.push(l)}memcpy(e,t){const n=this.storageCache.get(e);if(!n)throw new Error("source gpu data for memcpy does not exist");const r=this.storageCache.get(t);if(!r)throw new Error("destination gpu data for memcpy does not exist");if(n.originalSize!==r.originalSize)throw new Error("inconsistent source and destination gpu data size");const a=i(n.originalSize),o=this.backend.getCommandEncoder();this.backend.endComputePass(),o.copyBufferToBuffer(n.gpuData.buffer,0,r.gpuData.buffer,0,a)}create(e,t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){const n=i(e);let s;if((t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let e=this.freeBuffers.get(n);e||(e=[],this.freeBuffers.set(n,e)),s=e.length>0?e.pop():this.backend.device.createBuffer({size:n,usage:t})}else s=this.backend.device.createBuffer({size:n,usage:t});const u={id:o++,type:a.GpuDataType.default,buffer:s};return this.storageCache.set(u.id,{gpuData:u,originalSize:e}),(0,r.LOG_DEBUG)("verbose",(()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${u.id}`)),u}get(e){var t;return null===(t=this.storageCache.get(e))||void 0===t?void 0:t.gpuData}release(e){const t=this.storageCache.get(e);if(!t)throw new Error("releasing data does not exist");return(0,r.LOG_DEBUG)("verbose",(()=>`[WebGPU] GpuDataManager.release(id=${e}), gpuDataId=${t.gpuData.id}`)),this.storageCache.delete(e),this.buffersPending.push(t.gpuData.buffer),this.downloadCache.get(e)&&this.downloadCache.delete(e),t.originalSize}async download(e){const t=this.downloadCache.get(e);if(t)return t.data;const n=this.storageCache.get(e);if(!n)throw new Error("data does not exist");const r=this.backend.getCommandEncoder();this.backend.endComputePass();const a=i(n.originalSize),o=this.backend.device.createBuffer({size:a,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});r.copyBufferToBuffer(n.gpuData.buffer,0,o,0,a),this.backend.flush();const s=new Promise((e=>{o.mapAsync(GPUMapMode.READ).then((()=>{const t=o.getMappedRange().slice(0);o.destroy(),e(t)}))}));return this.downloadCache.set(e,{data:s}),s}refreshPendingBuffers(){for(const e of this.buffersForUploadingPending)e.destroy();this.buffersForUploadingPending=[];for(const e of this.buffersPending)(e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(e.size).push(e):e.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach((e=>{e.forEach((e=>{e.destroy()}))})),this.storageCache.forEach((e=>{e.gpuData.buffer.destroy()})),this.storageCache=new Map,this.downloadCache=new Map,this.freeBuffers=new Map}}t.createGpuDataManager=(...e)=>new s(...e)},8510:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.WEBGPU_OP_RESOLVE_RULES=void 0;const o=n(1868),s=i(n(504)),u=n(513),l=n(9770),c=n(7640),d=n(8856),p=n(8405),f=n(4271),h=n(1798),g=n(6145),m=n(1522),y=i(n(5262)),b=n(6031),v=n(4566),w=n(8906),$=n(5101),x=n(6198),S=n(2067),_=n(8699),A=n(2625),C=i(n(9302));t.WEBGPU_OP_RESOLVE_RULES=new Map([["Abs",[C.abs]],["Acos",[C.acos]],["Acosh",[C.acosh]],["Add",[s.add]],["ArgMax",[o.argMax,o.parseArgMinMaxAttributes]],["ArgMin",[o.argMin,o.parseArgMinMaxAttributes]],["Asin",[C.asin]],["Asinh",[C.asinh]],["Atan",[C.atan]],["Atanh",[C.atanh]],["AveragePool",[y.averagePool,y.parseAveragePoolAttributes]],["Cast",[C.cast,C.parseCastAttributes]],["Ceil",[C.ceil]],["ClipV10",[C.clipV10]],["Clip",[C.clip]],["Concat",[u.concat,u.parseConcatAttributes]],["Conv",[l.conv,l.parseConvAttributes]],["ConvTranspose",[c.convTranspose,c.parseConvTransposeAttributes]],["Cos",[C.cos]],["Cosh",[C.cosh]],["Div",[s.div]],["Elu",[C.elu,C.parseAlphaAttributes]],["Erf",[C.erf]],["Exp",[C.exp]],["Expand",[d.expand]],["Floor",[C.floor]],["Gather",[p.gather,p.parseGatherAttributes]],["Gelu",[C.gelu]],["Gemm",[f.gemm,f.parseGemmAttributes]],["GlobalAveragePool",[y.globalAveragePool,y.parseGlobalAveragePoolAttributes]],["GlobalMaxPool",[y.globalMaxPool,y.parseGlobalMaxPoolAttributes]],["InstanceNormalization",[h.instanceNorm,h.parseInstanceNormAttributes]],["LayerNormalization",[g.layerNorm,g.parseLayerNormAttributes]],["LeakyRelu",[C.leakyRelu,C.parseAlphaAttributes]],["Log",[C.log]],["MatMul",[m.matMul]],["MaxPool",[y.maxPool,y.parseMaxPoolAttributes]],["Mul",[s.mul]],["Neg",[C.neg]],["Pow",[s.pow]],["Reciprocal",[C.reciprocal]],["ReduceMin",[b.reduceMin,b.parseReduceAttributes]],["ReduceMean",[b.reduceMean,b.parseReduceAttributes]],["ReduceMax",[b.reduceMax,b.parseReduceAttributes]],["ReduceSum",[b.reduceSum,b.parseReduceAttributes]],["ReduceProd",[b.reduceProd,b.parseReduceAttributes]],["ReduceL1",[b.reduceL1,b.parseReduceAttributes]],["ReduceL2",[b.reduceL2,b.parseReduceAttributes]],["ReduceLogSum",[b.reduceLogSum,b.parseReduceAttributes]],["ReduceLogSumExp",[b.reduceLogSumExp,b.parseReduceAttributes]],["ReduceSumSquare",[b.reduceSumSquare,b.parseReduceAttributes]],["Relu",[C.relu]],["Resize",[v.resize,v.parseResizeAttributes]],["Sigmoid",[C.sigmoid]],["Sin",[C.sin]],["Sinh",[C.sinh]],["Slice",[$.slice,$.parseSliceAttributes]],["SkipLayerNormalization",[w.skipLayerNorm,w.parseSkipLayerNormAttributes]],["Split",[S.split,S.parseSplitAttributes]],["Sqrt",[C.sqrt]],["Softmax",[x.softmax,x.parseSoftmaxAttributes]],["Sub",[s.sub]],["Tan",[C.tan]],["Tanh",[C.tanh]],["ThresholdedRelu",[C.thresholdedRelu,C.parseAlphaAttributes]],["Tile",[_.tile]],["Transpose",[A.transpose,A.parseTransposeAttributes]]])},1427:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.biasActivationSnippet=t.activationFnSnippet=t.typeSnippet=void 0,t.typeSnippet=e=>{switch(e){case 1:return"f32";case 2:return"vec2<f32>";case 3:return"vec3<f32>";case 4:return"vec4<f32>";default:throw new Error(`${e}-component is not supported.`)}},t.activationFnSnippet=(e,t=!1,n=!1,r=3)=>"",t.biasActivationSnippet=(e,t)=>`\\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\\n      ${t?"value = activation(value, coords);":""}\\n      `},9456:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createConv2DMatMulProgramInfo=void 0;const r=n(4955),a=n(6952),i=n(1163),o=n(1427),s=n(4085),u=n(158);t.createConv2DMatMulProgramInfo=(e,t,n,l,c,d,p,f,h)=>{const g="NHWC"===n.format,m=g?e[0].dims[3]:e[0].dims[1],y=l[0],b=g?l[2]:l[3],v=g?l[1]:l[2],w=g?l[3]:l[1],$=((m%4==0||m%3==0)&&g||b%4==0&&!g)&&w%4==0,x=g?w:b*v,S=g?b*v:w,_=$?[8,8,1]:[x<=4?4:16,x>4&&S<=4?4:16,1],A=$?[4,4,1]:[x<=4?1:2,x>4&&S<=4?1:2,1],C=[Math.ceil(x/_[0]/A[0]),Math.ceil(S/_[1]/A[1]),Math.ceil(y/_[2]/A[1])];(0,r.LOG_DEBUG)("verbose",(()=>`[conv2d_mm_webgpu] dispatch = ${C}`));const O=$?g&&m%4!=0?3:4:A[0],T=_[1]*A[1],I=_[0]*A[0],E=Math.max(_[0]*O,_[1]),P=c%T==0,M=d%I==0,R=p%E==0,k=$?[O,4,4]:[1,1,1],D=[`@group(0) @binding(0) var<storage, read> x: array<${$&&4===O?"vec4<f32>":"f32"}>;`,`@group(0) @binding(1) var<storage, read> w: array<${$?"vec4<f32>":"f32"}>;`];let z=`\\n      fn setOutputAtIndex(flatIndex : i32, value : ${$?"vec4<f32>":"f32"}) {\\n        result[flatIndex] = ${$?"vec4<f32>":"f32"}(value);\\n      }\\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${$?"vec4<f32>":"f32"}) {\\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\\n        setOutputAtIndex(flatIndex ${$?"/ 4":""}, value);\\n      }`;return f&&(D.push(`@group(0) @binding(2) var<storage, read> bias: array<${$?"vec4<f32>":"f32"}>;`),z+=`\\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${$?"vec4<f32>":"f32"} {\\n          return bias[coords.${g?"w":"y"}${$?"/ 4":""}];\\n        }`),Object.assign(Object.assign({},t),{outputs:[{dims:l,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:()=>({x:C[0],y:C[1],z:C[2]}),getShaderSource:()=>`\\n        ${s.utilFunctions}\\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\\n        ${D.join("")}\\n        @group(0) @binding(${D.length}) var<storage, read_write> result: array<${$?"vec4<f32>":"f32"}>;\\n        //@group(0) @binding(${D.length+1}) var<uniform> uniforms: Uniforms;\\n\\n        const xShape : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});\\n        const wShape : vec4<i32> = vec4<i32>(${e[1].dims.join(",")});\\n        const outShape : vec4<i32> = vec4<i32>(${l.join(",")});\\n        const outShapeStrides : vec3<i32> = vec3<i32>(${a.ShapeUtil.computeStrides(l).slice(0,3).join(",")});\\n        const filterDims : vec2<i32> = vec2<i32>(${n.kernelShape[0]}, ${n.kernelShape[1]});\\n        const pad : vec2<i32> = vec2<i32>(${n.pads[0]}, ${n.pads[1]});\\n        const stride : vec2<i32> = vec2<i32>(${n.strides[0]}, ${n.strides[1]});\\n        const dilation : vec2<i32> = vec2<i32>(${n.dilations[0]}, ${n.dilations[1]});\\n        const dimAOuter : i32 = ${c};\\n        const dimBOuter : i32 = ${d};\\n        const dimInner : i32 = ${p};\\n        ${z}\\n        ${((e,t,n,r,a=!1,i,s=!1,u=4,l=4,c=4)=>{const d=e?"\\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\\n    ":"\\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\\n    ",p=e?"\\n    let coords = vec4<i32>(\\n      batch,\\n      row / outWidth,\\n      row % outWidth,\\n      col);\\n    ":"\\n    let coords = vec4<i32>(\\n      batch,\\n      row,\\n      col / outWidth,\\n      col % outWidth);\\n    ",f=e?"xShape[1]":"xShape[2]",h=e?"xShape[2]":"xShape[3]",g=e?"row":"col",m=e?"col":"row",y=`\\n    let inChannels = wShape[2];\\n    let outWidth = ${e?"outShape[2]":"outShape[3]"};\\n    let outRow = ${g} / outWidth;\\n    let outCol = ${g} % outWidth;\\n\\n    let WRow = ${m} / (filterDims[1] * inChannels);\\n    let WCol = ${m} / inChannels % filterDims[1];\\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\\n    let xCh = ${m} % inChannels;\\n    var resData = ${(0,o.typeSnippet)(u)}(0.0);\\n    // The bounds checking is always needed since we use it to pad zero for\\n    // the \'same\' padding type.\\n    if (xRow >= 0 && xRow < ${f} && xCol >= 0 && xCol < ${h}) {\\n      ${d}\\n      let xIndex = getIndexFromCoords4D(coord, xShape);\\n      ${(e=>{switch(e){case 1:return"resData = x[xIndex];";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(u)}\\n    }\\n    return resData;`,b=e?t&&r?`\\n    let col = colIn * ${u};\\n    ${y}`:`\\n    let col = colIn * ${u};\\n    if (row < dimAOuter && col < dimInner) {\\n      ${y}\\n    }\\n    return ${(0,o.typeSnippet)(u)}(0.0);`:r&&n?`\\n    let col = colIn * ${u};\\n    ${y}`:`\\n    let col = colIn * ${u};\\n    if (row < dimInner && col < dimBOuter) {\\n      ${y}\\n    }\\n    return ${(0,o.typeSnippet)(u)}(0.0);`,v=`${(e=>{switch(e){case 1:return"return w[row * wShape[3] + colIn];";case 4:return"return w[row * wShape[3] / 4 + colIn];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(l)}`,w=(0,o.typeSnippet)(c),$=e?(0,o.typeSnippet)(u):(0,o.typeSnippet)(l),x=e?(0,o.typeSnippet)(l):(0,o.typeSnippet)(u);return`\\n    ${(0,o.activationFnSnippet)(i,s,4===c,4)}\\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${$} {\\n      ${e?b:v}\\n    }\\n\\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${x} {\\n      ${e?v:b}\\n    }\\n\\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${w}) {\\n      let col = colIn * ${c};\\n      if (row < dimAOuter && col < dimBOuter)\\n      {\\n      var value = valueIn;\\n      let outWidth = ${e?"outShape[2]":"outShape[3]"};\\n      ${p}\\n      ${(0,o.biasActivationSnippet)(a,i)}\\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\\n      }\\n    }`})(g,P,M,R,f,void 0,!1,k[0],k[1],k[2])}\\n            ${$?(0,u.makeMatMulPackedVec4Source)(A,_,!g,E):(0,u.makeMatMulPackedSource)(A,_,!g,E,!1,void 0,h)}`})}},6514:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createConvTranspose2DProgramInfo=void 0;const r=n(4955),a=n(6952),i=n(1163),o=n(2075);t.createConvTranspose2DProgramInfo=(e,t,n,s)=>{const u=e.length>2,l=n.outputShape,c=a.ShapeUtil.size(l),d=[Math.ceil(c/64),1,1];return(0,r.LOG_DEBUG)("verbose",(()=>`[conv2d_backprop_webgpu] dispatch = ${d}`)),Object.assign(Object.assign({},t),{outputs:[{dims:s?s(l):l,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:()=>({x:d[0],y:d[1],z:d[2]}),getShaderSource:t=>((e,t,n,r,i,s,u=!1)=>{const l="NHWC"===n.format,c=l?1:2,d=l?2:3,p=l?3:1,f=a.ShapeUtil.size(r),h=u?2:1,g=n.group,m=t[1].dims,y=m[0]/g,b=m[1];let v=`\\n  fn setOutputAtIndex(flatIndex : u32, value : ${u?"vec4<f32>":"f32"}) {\\n    result[flatIndex] = ${u?"vec4<f32>":"f32"}(value);\\n  }`;i&&(v+=`\\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?"vec4<f32>":"f32"} {\\n      return bias[coords.${l?"w":"y"}${u?"/ 4":""}];\\n    }`);const w=u?4:1,$=(0,o.inputVariable)("W",t[1].dataType,t[1].dims,w),x=(0,o.inputVariable)("Dy",t[0].dataType,t[0].dims,w),S=[x,$];i&&S.push((0,o.inputVariable)("bias",t[2].dataType,[r[p]],w));const _=(0,o.outputVariable)("result",t[0].dataType,r,w),A=`{\\n        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / outShape[1];\\n        let r = ${s?"global_id.z":"workgroup_id.z"} % outShape[1];\\n        let c = ${s?"global_id.y":"workgroup_id.y"} * ${h};\\n        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;\\n\\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\\n\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n        // ? = to be determined. : = across all values in that axis.\\n        var dotProd: array<vec4<f32>, ${h}>;\\n        for (var i = 0; i < ${h}; i++) {\\n          dotProd[i] = vec4<f32>(0.0);\\n        }\\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\\n          var dyR = (f32(dyCorner.x) + f32(wR)) / f32(strides.x);\\n          let wRPerm = filterDims[0] - 1 - wR;\\n          if (dyR < 0.0 || dyR >= f32(outBackprop[1]) ||\\n              fract(dyR) > 0.0 || wRPerm < 0) {\\n            continue;\\n          }\\n          let idyR: u32 = u32(dyR);\\n\\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\\n            let dyC = (f32(dyCorner.y) + f32(wC)) / f32(strides.y);\\n            let dyC2 = (f32(dyCorner.y) + 1.0 + f32(wC)) / f32(strides.y);\\n            let wCPerm = filterDims[1] - 1 - wC;\\n            if (wCPerm < 0) {\\n              continue;\\n            }\\n            var bDyCVal = true;\\n            var bDyCVal2 = true;\\n            if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\\n                fract(dyC) > 0.0) {\\n              bDyCVal = false;\\n            }\\n            if (dyC2 < 0.0 || dyC2 >= f32(outBackprop[2]) ||\\n                fract(dyC2) > 0.0) {\\n              bDyCVal2 = false;\\n            }\\n\\n            let idyC: u32 = u32(dyC);\\n            let idyC2: u32 = u32(dyC2);\\n            if (bDyCVal && bDyCVal2) {\\n              let d2Length = outBackprop[3];\\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\n                let wValue0 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\\n                let wValue1 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\\n                let wValue2 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\\n                let wValue3 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\\n\\n                var xValue = ${x.get("batch","idyR","idyC","d2")};\\n                let tmpval = vec4<f32>(dot(xValue, wValue0),\\n                                      dot(xValue, wValue1),\\n                                      dot(xValue, wValue2),\\n                                      dot(xValue, wValue3));\\n                dotProd[0] = dotProd[0] + tmpval;\\n\\n                xValue =  ${x.get("batch","idyR","idyC2","d2")};\\n\\n                dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),\\n                                                    dot(xValue, wValue1),\\n                                                    dot(xValue, wValue2),\\n                                                    dot(xValue, wValue3));\\n              }\\n            } else if (bDyCVal) {\\n              let d2Length = outBackprop[${p}];\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\n                let wValue0 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\\n                let wValue1 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\\n                let wValue2 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\\n                let wValue3 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\\n\\n                var xValue = ${x.get("batch","idyR","idyC","d2")};\\n                let tmpval = vec4<f32>(dot(xValue, wValue0),\\n                                      dot(xValue, wValue1),\\n                                      dot(xValue, wValue2),\\n                                      dot(xValue, wValue3));\\n                dotProd[0] = dotProd[0] + tmpval;\\n              }\\n            } else if (bDyCVal2) {\\n              let d2Length = outBackprop[3];\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\n                let wValue0 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\\n                let wValue1 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\\n                let wValue2 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\\n                let wValue3 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\\n\\n                var xValue = ${x.get("batch","idyR","idyC2","d2")};\\n                let tmpval = vec4<f32>(dot(xValue, wValue0),\\n                                      dot(xValue, wValue1),\\n                                      dot(xValue, wValue2),\\n                                      dot(xValue, wValue3));\\n                dotProd[1] = dotProd[1] + tmpval;\\n              }\\n            }\\n          }\\n        }\\n\\n        for (var i: u32 = 0; i < ${h}; i = i + 1) {\\n          let value = dotProd[i] + ${i?"bias[c+i]":"0.0"};\\n          ${_.set("batch","r","c + i","d1","value")};\\n        }\\n      }`,C=`\\n          let outputIndices = ${_.offsetToIndices("global_idx")};\\n          let batch = ${_.indicesGet("outputIndices",0)};\\n          let d1 = ${_.indicesGet("outputIndices",p)};\\n          let r = ${_.indicesGet("outputIndices",c)};\\n          let c = ${_.indicesGet("outputIndices",d)};\\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\\n          let dyRCorner = dyCorner.x;\\n          let dyCCorner = dyCorner.y;\\n          let groupId = d1 / ${b};\\n          let wOutChannel = d1 - groupId * ${b};\\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n          // ? = to be determined. : = across all values in that axis.\\n          var dotProd = 0.0;\\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\\n            if (wR % dilations.x != 0) {\\n              continue;\\n            }\\n            let dyR = (f32(dyRCorner) + f32(wR)) / f32(strides[0]);\\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\\n            if (dyR < 0.0 || dyR >= f32(outBackprop[${c}]) || fract(dyR) > 0.0 ||\\n                wRPerm < 0) {\\n              continue;\\n            }\\n            let idyR: u32 = u32(dyR);\\n\\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\\n              if (wC % dilations.y != 0) {\\n                continue;\\n              }\\n              let dyC = (f32(dyCCorner) + f32(wC)) / f32(strides.y);\\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\\n              if (dyC < 0.0 || dyC >= f32(outBackprop[${d}]) ||\\n                  fract(dyC) > 0.0 || wCPerm < 0) {\\n                continue;\\n              }\\n              let idyC: u32 = u32(dyC);\\n\\n              for (var d2: u32 = 0; d2 < ${y}; d2 = d2 + 1) {\\n                let inputChannel = groupId * ${y} + d2;\\n                let xValue = ${l?x.get("batch","idyR","idyC","inputChannel"):x.get("batch","inputChannel","idyR","idyC")};\\n                let wValue = ${$.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\\n                dotProd = dotProd + xValue * wValue;\\n              }\\n            }\\n          }\\n          let value = dotProd + ${i?"bias[d1]":"0.0"};\\n          ${_.setByOffset("global_idx","value")};\\n        `;return`\\n  ${e.declareVariables(...S,_)}\\n  ${v}\\n  const outShape : vec4<u32> = vec4<u32>(${r.join(",")});\\n  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});\\n  const strides : vec2<u32> = vec2<u32>(${n.strides[0]}, ${n.strides[1]});\\n  const filterDims : vec2<u32> = vec2<u32>(${n.kernelShape[l?1:2]}, ${n.kernelShape[l?2:3]});\\n  const dilations : vec2<u32> = vec2<u32>(${n.dilations[0]}, ${n.dilations[1]});\\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\\n          ${n.dilations[0]<=1?0:(n.kernelShape[l?1:2]-1)*(n.dilations[0]-1)},\\n          ${n.dilations[1]<=1?0:(n.kernelShape[l?2:3]-1)*(n.dilations[1]-1)});\\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${n.pads[0]+n.pads[2]})/2,\\n                                     i32(effectiveFilterDims[1]) - 1 - (${n.pads[1]+n.pads[3]})/2);\\n    ${e.mainStart()}\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(f)};\\n  ${u?A:C}}`})(t,e,n,l,u,1===d[1]&&1===d[2])})}},4085:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.utilFunctions=void 0,t.utilFunctions="\\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\\n  return dot(coords, vec4<i32>(\\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\\n}\\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\\n  return dot(coords, vec4<i32>(\\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\\n}\\n"},158:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.makeMatMulPackedSource=t.makeMatMulPackedVec4Source=void 0,t.makeMatMulPackedVec4Source=(e,t,n=!1,r=32,a=!1,i=32,o=!1)=>{const s=t[1]*e[1],u=t[0]*e[0],l=n?s:r,c=n?r:s,d=l/t[0],p=r/t[1];if((!n||4!==d||4!==e[1])&&(n||3!==d&&4!==d)||l%t[0]!=0||r%t[1]!=0||4!==e[0])throw new Error(`If transposeA ${n} is true, innerElementSize ${d} and workPerThread[1] ${e[1]} must be 4.\\n      Otherwise, innerElementSize ${d} must be 3 or 4.\\n  tileAWidth ${l} must be divisible by workgroupSize[0]${t[0]}. tileInner ${r} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\\nvar<workgroup> mm_Asub : array<array<vec${d}<f32>, ${l/d}>, ${c}>;\\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${u/e[0]}>, ${r}>;\\n\\nconst rowPerThread = ${e[1]};\\nconst colPerThread = ${e[0]};\\nconst innerElementSize = ${d};\\nconst tileInner = ${r};\\n\\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\n  let localRow = i32(localId.y);\\n  let tileRow = ${o?"0":"localRow * rowPerThread"};\\n  let tileCol = i32(localId.x);\\n\\n  let globalRow = ${o?"0":"i32(globalId.y) * rowPerThread"};\\n  let globalCol = i32(globalId.x);\\n  let batch = ${a?"0":"i32(globalId.z)"};\\n  let globalRowStart = i32(workgroupId.y) * ${s};\\n\\n  let numTiles = ${a?`${Math.ceil(i/r)}`:"(dimInner - 1) / tileInner + 1"};\\n  var kStart = ${a?`i32(globalId.z) * ${i}`:"0"};\\n\\n  var acc: array<vec4<f32>, rowPerThread>;\\n\\n  // Loop over shared dimension.\\n  let tileRowB = localRow * ${p};\\n  for (var t = 0; t < numTiles; t = t + 1) {\\n      // Load one tile of A into local memory.\\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n          let inputRow = tileRow + innerRow;\\n          let inputCol = tileCol;\\n          ${f=n,f?"\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\n          kStart + inputRow,\\n          globalRowStart / innerElementSize + inputCol);\\n        ":"\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\n          globalRow + innerRow,\\n          kStart / innerElementSize + inputCol);\\n        "}\\n      }\\n\\n      // Load one tile of B into local memory.\\n      for (var innerRow = 0; innerRow < ${p}; innerRow = innerRow + 1) {\\n          let inputRow = tileRowB + innerRow;\\n          let inputCol = tileCol;\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\\n      }\\n      kStart = kStart + tileInner;\\n      workgroupBarrier();\\n\\n      // Compute acc values for a single thread.\\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\\n          ${3===d?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\\n\\n          ${((e,t)=>e?`\\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\\n        ${3===t?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\n          acc[i] = BCached0 * ACached0[i] + acc[i];\\n          acc[i] = BCached1 * ACached1[i] + acc[i];\\n          acc[i] = BCached2 * ACached2[i] + acc[i];\\n          ${3===t?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\\n        }`:`\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\n          let ACached = mm_Asub[tileRow + i][k];\\n          acc[i] = BCached0 * ACached.x + acc[i];\\n          acc[i] = BCached1 * ACached.y + acc[i];\\n          acc[i] = BCached2 * ACached.z + acc[i];\\n          ${3===t?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\\n        }`)(n,d)}\\n      }\\n\\n      workgroupBarrier();\\n  }\\n\\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\\n  }\\n}`;var f};const n=e=>e?"\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\n              kStart + inputRow,\\n              globalRowStart + inputCol);\\n            ":"\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\n              globalRowStart + inputRow,\\n              kStart + inputCol);\\n            ";t.makeMatMulPackedSource=(e,t,r=!1,a=32,i=!1,o=32,s=!1)=>{const u=e[1]*t[1],l=e[0]*t[0],c=r?u:a,d=r?a:u;if(d%t[1]!=0||c%t[0]!=0||a%t[1]!=0)throw new Error(`tileAHight ${d} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${c} must be divisible by workgroupSize[0]${t[0]}, tileInner ${a} must be divisible by workgroupSize[1]${t[1]}`);const p=d/t[1],f=c/t[0],h=a/t[1],g=s?`\\n    let localRow = i32(localId.y);\\n    let localCol = i32(localId.x);\\n    let globalRowStart = i32(workgroupId.y) * ${u};\\n    let globalColStart = i32(workgroupId.x) * ${l};\\n\\n    // Loop over shared dimension.\\n    for (var t = 0; t < numTiles; t = t + 1) {\\n      // Load one tile of A into local memory.\\n      for (var inputRow = localRow; inputRow < ${d}; inputRow = inputRow + ${t[1]}) {\\n        for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${t[0]}) {\\n          ${n(r)}\\n        }\\n      }\\n      // Load one tile of B into local memory.\\n      for (var inputRow = localRow; inputRow < ${a}; inputRow = inputRow + ${t[1]}) {\\n            for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${t[0]}) {\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\n            kStart + inputRow,\\n            globalColStart + inputCol);\\n        }\\n      }\\n      kStart = kStart + tileInner;\\n      workgroupBarrier();\\n\\n      // Compute acc values for a single thread.\\n      var BCached : array<f32, colPerThread>;\\n      for (var k = 0; k < tileInner; k = k + 1) {\\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\\n        }\\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n          let ACached = ${r?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\\n                ACached * BCached[innerCol];\\n          }\\n        }\\n      }\\n      workgroupBarrier();\\n    }\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\\n      }\\n    }\\n    `:`\\nlet tileRow = i32(localId.y) * rowPerThread;\\nlet tileCol = i32(localId.x) * colPerThread;\\n\\nlet globalRow = i32(globalId.y) * rowPerThread;\\nlet globalCol = i32(globalId.x) * colPerThread;\\nlet globalRowStart = i32(workgroupId.y) * ${u};\\n\\nlet tileRowA = i32(localId.y) * ${p};\\nlet tileColA = i32(localId.x) * ${f};\\nlet tileRowB = i32(localId.y) * ${h};\\n// Loop over shared dimension.\\nfor (var t = 0; t < numTiles; t = t + 1) {\\n  // Load one tile of A into local memory.\\n  for (var innerRow = 0; innerRow < ${p}; innerRow = innerRow + 1) {\\n    for (var innerCol = 0; innerCol < ${f}; innerCol = innerCol + 1) {\\n      let inputRow = tileRowA + innerRow;\\n      let inputCol = tileColA + innerCol;\\n      ${n(r)}\\n    }\\n  }\\n\\n  // Load one tile of B into local memory.\\n  for (var innerRow = 0; innerRow < ${h}; innerRow = innerRow + 1) {\\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n      let inputRow = tileRowB + innerRow;\\n      let inputCol = tileCol + innerCol;\\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\n        kStart + inputRow,\\n        globalCol + innerCol);\\n    }\\n  }\\n  kStart = kStart + tileInner;\\n  workgroupBarrier();\\n\\n  // Compute acc values for a single thread.\\n  var BCached : array<f32, colPerThread>;\\n  for (var k = 0; k < tileInner; k = k + 1) {\\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\\n    }\\n\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n      ${(e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];")(r)}\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\\n      }\\n    }\\n  }\\n\\n  workgroupBarrier();\\n}\\n\\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\\n        acc[innerRow][innerCol]);\\n  }\\n}\\n`;return`\\n  var<workgroup> mm_Asub : array<array<f32, ${c}>, ${d}>;\\n  var<workgroup> mm_Bsub : array<array<f32, ${l}>, ${a}>;\\n  const rowPerThread = ${e[1]};\\n  const colPerThread = ${e[0]};\\n  const tileInner = ${a};\\n\\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\n    let batch = ${i?"0":"i32(globalId.z)"};\\n    let numTiles = ${i?`${Math.ceil(o/a)}`:"(dimInner - 1) / tileInner + 1"};\\n    var kStart = ${i?`i32(globalId.z) * ${o}`:"0"};\\n\\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\\n\\n    // Without this initialization strange values show up in acc.\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n        acc[innerRow][innerCol] = 0.0;\\n      }\\n    }\\n    ${g}\\n  }\\n`}},1868:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseArgMinMaxAttributes=t.argMax=t.argMin=void 0;const r=n(387),a=n(1163),i=n(6031),o=e=>{if(!e||0===e.length||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(1!==e[0].dataType)throw new Error("Invalid input type.")},s=(e,t,n,o)=>{const s=1===e.length?n:((e,t)=>(0,r.createAttributeWithCacheKey)({axis:t.axis,keepDims:t.keepDims,selectLastIndex:t.selectLastIndex}))(0,n),u=s.cacheKey+e.map((e=>e.dims.toString())).join("_"),l={name:t,inputTypes:[a.GpuDataType.default],cacheHint:u};return Object.assign(Object.assign({},l),{get:()=>(0,i.createReduceProgramInfo)(l,[e[0]],o,[s.axis],7,s.keepDims)})};t.argMin=(e,t)=>{o(e.inputs),e.compute(s(e.inputs,"ArgMin",t,((e,n,r)=>{const a=[];for(let t=0;t<e.shape.length;t++)(r.indexOf(t)>=0||0===r.length)&&a.push(`inputIndices[${t}] = 0;`);return[`${a.join("\\n")}`,`var value = ${e.getByOffset("inputOffset")};\\nvar bestIndex : i32 = 0;`,`if (${e.getByOffset("inputOffset")} ${t.selectLastIndex>0?"<=":"<"} value) {\\n         value = ${e.getByOffset("inputOffset")};\\n         bestIndex = i32(lastIndex);\\n       }`,"",n.setByOffset("global_idx","bestIndex")]})),{inputs:[0]})},t.argMax=(e,t)=>{o(e.inputs),e.compute(s(e.inputs,"argMax",t,((e,n,r)=>{const a=[];for(let t=0;t<e.shape.length;t++)(r.indexOf(t)>=0||0===r.length)&&a.push(`inputIndices[${t}] = 0;`);return[`${a.join("\\n")}`,`var value = ${e.getByOffset("inputOffset")};\\nvar bestIndex : i32 = 0;`,`if (${e.getByOffset("inputOffset")} ${t.selectLastIndex>0?">=":">"} value) {\\n         value = ${e.getByOffset("inputOffset")};\\n         bestIndex = i32(lastIndex);\\n       }`,"",n.setByOffset("global_idx","bestIndex")]})),{inputs:[0]})},t.parseArgMinMaxAttributes=e=>(0,r.createAttributeWithCacheKey)(e)},504:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sub=t.pow=t.mul=t.div=t.add=void 0;const r=n(6952),a=n(1163),i=n(2075),o=(e,t,n,o,s)=>{const u={name:t,inputTypes:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:s};return Object.assign(Object.assign({},u),{get:()=>((e,t,n,o,s,u=t.dataType)=>{var l,c;const d=!r.ShapeUtil.areEqual(t.dims,n.dims);let p=t.dims,f=r.ShapeUtil.size(t.dims),h=!1;if(d){const e=r.BroadcastUtil.calcShape(t.dims,n.dims,!1);if(!e)throw new Error("Can\'t perform binary op on the given tensors");p=e,f=r.ShapeUtil.size(p);let a=1;for(let e=0;e<p.length;e++){const r=null!==(l=t.dims[t.dims.length-e])&&void 0!==l?l:1;if(r!==(null!==(c=n.dims[n.dims.length-e])&&void 0!==c?c:1))break;a*=r}a%4==0&&(h=!0)}else h=!0;return Object.assign(Object.assign({},e),{getShaderSource:e=>((e,t,n,a,o,s,u,l,c,d,p)=>{const f=r.ShapeUtil.size(a),h=Math.ceil(f/4);let g,m;"string"==typeof u?g=m=(e,t)=>`${u}((${e}),(${t}))`:"function"==typeof u?g=m=u:(g=u.scalar,m=u.vector);let y="";const b=(0,i.outputVariable)("outputData",d,a,4),v=(0,i.inputVariable)("aData",l,t,4),w=(0,i.inputVariable)("bData",c,n,4);if(s){const e=e=>{const t=r.ShapeUtil.computeStrides(e),n=[];for(let r=e.length-1;r>=0;r--){const i=0===a.length?"0u":1===a.length?"outputIndices":`outputIndices[${r+a.length-e.length}]`;n.push(`${t[r]}u * (${i} % ${e[r]}u)`)}return n.length>0?n.join("+"):"0u"};y=`\\n  fn calcOffsetA(outputIndices: ${b.type.indices}) -> u32 {\\n    return ${e(t)};\\n  }\\n\\n  fn calcOffsetB(outputIndices: ${b.type.indices}) -> u32 {\\n    return ${e(n)};\\n  }\\n  `}let $;if(o)$=s?`\\n      let outputIndices = ${b.offsetToIndices("global_idx * 4u")};\\n      let offsetA = calcOffsetA(outputIndices);\\n      let offsetB = calcOffsetB(outputIndices);\\n      ${b.setByOffset("global_idx",m(v.getByOffset("offsetA / 4u"),w.getByOffset("offsetB / 4u")))}`:b.setByOffset("global_idx",m(v.getByOffset("global_idx"),w.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");const e=e=>{const t=`aData[indexA${e}][componentA${e}]`,n=`bData[indexB${e}][componentB${e}]`;return`\\n      let outputIndices${e} = ${b.offsetToIndices(`global_idx * 4u + ${e}u`)};\\n      let offsetA${e} = calcOffsetA(outputIndices${e});\\n      let offsetB${e} = calcOffsetB(outputIndices${e});\\n      let indexA${e} = offsetA${e} / 4u;\\n      let indexB${e} = offsetB${e} / 4u;\\n      let componentA${e} = offsetA${e} % 4u;\\n      let componentB${e} = offsetB${e} % 4u;\\n      outputData[global_idx][${e}] = ${g(t,n)};`};$=`\\n      ${e(0)}\\n      ${e(1)}\\n      ${e(2)}\\n      ${e(3)}`}return`\\n  ${e.declareVariables(v,w,b)}\\n\\n  ${null!=p?p:""}\\n  ${y}\\n\\n  ${e.mainStart()}\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(h)}\\n    ${$}\\n  }`})(e,t.dims,n.dims,p,h,d,o,t.dataType,n.dataType,u,s),outputs:[{dims:p,dataType:u,gpuDataType:a.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(f/64/(h?4:1))})})})(u,e[0],e[1],n,o)})};t.add=e=>{e.compute(o(e.inputs,"Add",((e,t)=>`${e}+${t}`)))},t.div=e=>{e.compute(o(e.inputs,"Div",((e,t)=>`${e}/${t}`)))},t.mul=e=>{e.compute(o(e.inputs,"Mul",((e,t)=>`${e}*${t}`)))},t.pow=e=>{const t=(0,i.inputVariable)("input",e.inputs[0].dataType,e.inputs[0].dims).type.value,n="i32"===t?"round":"";e.compute(o(e.inputs,"Pow",{scalar:(e,t)=>`pow_custom(${e},${t})`,vector:(e,t)=>`pow_vector_custom(${e},${t})`},`\\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\\n      if (b == ${t}(0.0)) {\\n        return ${t}(1.0);\\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\\n        return ${t}(pow(f32(a), f32(b))); // NaN\\n      }\\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${n}(pow(f32(abs(a)), f32(b))));\\n    }\\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\\n      // TODO: implement vectorized pow\\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\\n    }\\n      `))},t.sub=e=>{e.compute(o(e.inputs,"Sub",((e,t)=>`${e}-${t}`)))}},2075:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createShaderHelper=t.outputVariable=t.inputVariable=t.tensorTypeToWsglStorageType=t.WORKGROUP_SIZE=void 0;const r=n(6952);t.WORKGROUP_SIZE=64;const a=(e,t)=>{switch(e){case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(4!==t)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}};t.tensorTypeToWsglStorageType=(e,t=1)=>{const n=a(e,t);return"string"==typeof n?n:n[0]};const i=(e,t,n,i,o)=>{const s=n.length,u=s<2?"u32":s<=4?`vec${s}<u32>`:`array<u32, ${s}>`,l=a(t,o),c="string"==typeof l?l:l[1],d="string"==typeof l?l:l[0],p={indices:u,value:c,storage:d,tensor:t},f=e=>"string"==typeof e?e:`${e}u`,h={offsetToIndices:!1,indicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},g=r.ShapeUtil.computeStrides(n);let m="";for(let e=0;e<s-1;e++)m+=`\\n    let dim${e} = current / ${g[e]}u;\\n    let rest${e} = current % ${g[e]}u;\\n    indices[${e}] = dim${e};\\n    current = rest${e};\\n    `;m+=`indices[${s-1}] = current;`;const y=s<2?"":`\\n  fn o2i_${e}(offset: u32) -> ${p.indices} {\\n    var indices: ${p.indices};\\n    var current = offset;\\n    ${m}\\n    return indices;\\n  }`,b=[];if(s>=2)for(let e=s-1;e>=0;e--)b.push(`${g[e]}u * (indices[${e}])`);const v=s<2?"":`\\n  fn i2o_${e}(indices: ${p.indices}) -> u32 {\\n    return ${b.join("+")};\\n  }`,w=(...e)=>0===s?"0u":`${p.indices}(${e.map(f).join(",")})`,$=(t,n)=>(()=>{if(p.storage===p.value)return`${e}[${t}]=${n};`;if("vec2<u32>"===p.storage&&"i32"===p.value)return`${e}[${t}]=vec2<u32>(u32(${n}), select(0u, 0xFFFFFFFFu, ${n} < 0));`;if("vec2<u32>"===p.storage&&"u32"===p.value)return`${e}[${t}]=vec2<u32>(u32(${n}), 0u);`;if("u32"===p.storage&&"vec4<bool>"===p.value)return`${e}[${t}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${n}));`;throw new Error(`not supported combination of storage type ${p.storage} and value type ${p.value} yet`)})(),x=t=>(()=>{if(p.storage===p.value)return`${e}[${t}]`;if("vec2<u32>"===p.storage&&"i32"===p.value)return`i32(${e}[${t}].x)`;if("vec2<u32>"===p.storage&&"u32"===p.value)return`u32(${e}[${t}].x)`;if("u32"===p.storage&&"vec4<bool>"===p.value)return`vec4<bool>(bool(${e}[${t}] & 0xFFu), bool(${e}[${t}] & 0xFF00u), bool(${e}[${t}] & 0xFF0000u), bool(${e}[${t}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${p.storage} and value type ${p.value} yet`)})(),S=s<2?"":`\\n  fn get_${e}ByIndices(indices: ${p.indices}) -> ${c} {\\n    return ${e}[i2o_${e}(indices)];\\n  }`,_=s<2?"":(()=>{const t=n.map(((e,t)=>`d${t}: u32`)).join(", "),r=n.map(((e,t)=>`d${t}`)).join(", ");return`\\n  fn get_${e}(${t}) -> ${c} {\\n    return get_${e}ByIndices(${w(r)});\\n  }`})(),A=s<2?"":`\\n  fn set_${e}ByIndices(indices: ${p.indices}, value: ${c}) {\\n    ${$(`i2o_${e}(indices)`,"value")}\\n  }`,C=s<2?"":(()=>{const t=n.map(((e,t)=>`d${t}: u32`)).join(", "),r=n.map(((e,t)=>`d${t}`)).join(", ");return`\\n  fn set_${e}(${t}, value: ${c}) {\\n    set_${e}ByIndices(${w(r)}, value);\\n  }`})();return{impl:()=>{const e=[];return h.offsetToIndices&&e.push(y),h.indicesToOffset&&e.push(v),h.set&&e.push(C),h.setByIndices&&e.push(A),h.get&&e.push(_),h.getByIndices&&e.push(S),e.join("\\n")},type:p,offsetToIndices:t=>(h.offsetToIndices=!0,s<2?t:`o2i_${e}(${t})`),indicesToOffset:t=>(h.indicesToOffset=!0,s<2?t:`i2o_${e}(${t})`),indices:w,indicesGet:(e,t)=>s<2?`${e}`:`${e}[${t}]`,indicesSet:(e,t,n)=>s<2?`${e}=${n};`:`${e}[${t}]=${n};`,set:(...t)=>{if(t.length!==s+1)throw new Error(`indices length must be ${s}`);const n=t[s];if("string"!=typeof n)throw new Error("value must be string");const r=t.slice(0,s).map(f).join(",");return 0===s?$("0u",n):1===s?$(r[0],n):(h.set=!0,h.setByIndices=!0,h.indicesToOffset=!0,`set_${e}(${r}, ${n})`)},setByOffset:$,setByIndices:(t,n)=>s<2?$(t,n):(h.setByIndices=!0,h.indicesToOffset=!0,`set_${e}ByIndices(${t}, ${n});`),get:(...t)=>{if(t.length!==s)throw new Error(`indices length must be ${s}`);const n=t.map(f).join(",");return 0===s?x("0u"):1===s?x(n[0]):(h.get=!0,h.getByIndices=!0,h.indicesToOffset=!0,`get_${e}(${n})`)},getByOffset:x,getByIndices:t=>s<2?x(t):(h.getByIndices=!0,h.indicesToOffset=!0,`get_${e}ByIndices(${t})`),usage:i?"input":"output",name:e,shape:n}};t.inputVariable=(e,t,n,r=1)=>i(e,t,n,!0,r),t.outputVariable=(e,t,n,r=1)=>i(e,t,n,!1,r);class o{constructor(e){this.normalizedDispatchGroup=e,this.indicesHelpers=[]}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${"number"==typeof e?`${e}u`:e}) { return; }`}mainStart(e=t.WORKGROUP_SIZE){const n="number"==typeof e?e:e[0],r="number"==typeof e?1:e[1],a="number"==typeof e?1:e[2],i=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2];return`@compute @workgroup_size(${n}, ${r}, ${a})\\n  fn main(${i?"@builtin(global_invocation_id) global_id : vec3<u32>":"@builtin(local_invocation_index) local_index : u32,\\n    @builtin(workgroup_id) workgroup_id : vec3<u32>"}) {\\n    ${i?"let global_idx = global_id.x;":`let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0]*this.normalizedDispatchGroup[1]}u +\\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${n*r*a}u + local_index;`}\\n  `}declareVariable(e,t){this.indicesHelpers.push(e);const n="input"===e.usage?"read":"read_write",r=e.type.storage;return`@group(0) @binding(${t}) var<storage, ${n}> ${e.name}: array<${r}>;`}declareVariables(...e){let t=0;return e.filter((e=>r.ShapeUtil.size(e.shape)>0)).map((e=>this.declareVariable(e,t++))).join("\\n")}get additionalImplementations(){return this.indicesHelpers.map((e=>e.impl())).join("\\n")}}t.createShaderHelper=e=>new o(e)},513:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseConcatAttributes=t.concat=void 0;const r=n(6952),a=n(387),i=n(1163),o=n(2075);t.concat=(e,t)=>{(e=>{if(!e||e.length<1)throw new Error("too few inputs");const t=e[0].dataType,n=e[0].dims.length;for(const r of e){if(r.dataType!==t)throw new Error("input tensors should be one type");if(r.dims.length!==n)throw new Error("input tensors should have the same shape")}})(e.inputs),e.compute(((e,t)=>{const n=(a=e.length,s=t.cacheKey,{name:"Concat",inputTypes:Array(a).fill(i.GpuDataType.default),cacheHint:s});var a,s;return Object.assign(Object.assign({},n),{get:()=>((e,t,n)=>{const a=t[0].dims.slice();if(n>=a.length||n<-1*a.length)throw new Error("axis specified for concat doesn\'t match input dimensionality");const s=n<0?a.length+n:n,u=a.slice(0);for(let e=1;e<t.length;e++){const n=t[e].dims.slice();for(let e=0;e<a.length;e++)if(e===s)u[s]+=n[e];else if(a[e]!==n[e])throw new Error("non concat dimensions must match")}const l=r.ShapeUtil.size(u),c=new Array(t.length),d=new Array(t.length),p=t[0].dataType;let f=0;for(let e=0;e<t.length;++e)f+=t[e].dims[s],c[e]=f,d[e]=(0,o.inputVariable)(`input${e}`,p,t[e].dims);const h=(0,o.outputVariable)("output",p,u),g=h.indicesGet("indices",s);return Object.assign(Object.assign({},e),{outputs:[{dims:u,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:e=>{return`\\n  ${e.declareVariables(...d,h)}\\n\\n  const sizeInConcatAxis = array<u32, ${c.length}>(${c.map((e=>`${e}u`)).join(",")});\\n  ${t=c.length,`\\n  fn calculateInputIndex(index: u32) -> u32 {\\n    for (var i: u32 = 0u; i < ${t}u; i += 1u ) {\\n      if (index < sizeInConcatAxis[i]) {\\n        return i;\\n      }\\n    }\\n    return ${t}u;\\n  }`}\\n\\n  ${e.mainStart()}\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(l)}\\n\\n    var indices = ${h.offsetToIndices("global_idx")};\\n\\n    let inputIndex = calculateInputIndex(${g});\\n    if (inputIndex != 0u) {\\n      ${g} -= sizeInConcatAxis[inputIndex - 1u];\\n    }\\n\\n    ${((e,t)=>{const n=e.length,r=[];for(let a=0;a<n;++a){const i=t.setByOffset("global_idx",e[a].getByIndices("indices"));1===n?r.push(i):0===a?r.push(`if (inputIndex == ${a}u) { ${i} }`):a===n-1?r.push(`else { ${i} }`):r.push(`else if (inputIndex == ${a}) { ${i} }`)}return r.join("\\n")})(d,h)}\\n  }`;var t},dispatchGroup:()=>({x:Math.ceil(l/64)})})})(n,e,t.axis)})})(e.inputs,t))},t.parseConcatAttributes=e=>(0,a.createAttributeWithCacheKey)({axis:e.axis})},9192:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createGroupedConvProgramInfoLoader=void 0;const r=n(6952),a=n(1163),i=n(2075),o=n(9770),s=n(3997);t.createGroupedConvProgramInfoLoader=(e,t,n)=>{const u=(l=e.length>2,c=t.cacheKey,{name:"GroupedConv",inputTypes:l?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:c});var l,c;return Object.assign(Object.assign({},u),{get:()=>((e,t,n,u)=>{const l=e.length>2,c=l?"value += b[output_channel];":"",d=e[0].dims,p=e[1].dims,f=p[0]/n.group,{activationFunction:h,applyActivation:g}=(0,s.getActicationSnippet)(n),m="NHWC"===n.format,y=(0,o.calculateOutputShape)(d,p,n.dilations,n.pads,n.strides,m),b=r.ShapeUtil.size(y),v=(0,i.outputVariable)("output",e[0].dataType,y),w=(0,i.inputVariable)("x",e[0].dataType,d),$=(0,i.inputVariable)("w",e[1].dataType,p),x=[w,$];return l&&x.push((0,i.inputVariable)("b",e[2].dataType,e[2].dims)),Object.assign(Object.assign({},t),{outputs:[{dims:u?u(y):y,dataType:e[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>`\\n  const strides: vec2<u32> = vec2(${n.strides[0]}u, ${n.strides[1]}u);\\n  const pads: vec2<u32> = vec2(${n.pads[0]}u, ${n.pads[1]}u);\\n\\n  ${e.declareVariables(...x,v)}\\n\\n  ${h}\\n\\n  ${e.mainStart()}\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(b)}\\n\\n    let outputIndices = ${v.offsetToIndices("global_idx")};\\n    let batch: u32 = outputIndices[0];\\n    let output_channel: u32 = outputIndices[${m?3:1}];\\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${m?1:2}], outputIndices[${m?2:3}]) * strides - pads;\\n    let group_id: u32 = output_channel / ${f}u;\\n\\n    var value: ${v.type.value} = ${v.type.value}(0);\\n    for (var wInChannel: u32 = 0u; wInChannel < ${p[1]}u; wInChannel++) {\\n      let input_channel = group_id * ${p[1]}u + wInChannel;\\n      for (var wHeight: u32 = 0u; wHeight < ${p[2]}u; wHeight++) {\\n        let xHeight = xRCCorner.x + wHeight * ${n.dilations[0]}u;\\n\\n        if (xHeight < 0u || xHeight >= ${d[m?1:2]}u) {\\n          continue;\\n        }\\n\\n        for (var wWidth: u32 = 0u; wWidth < ${p[3]}u; wWidth++) {\\n          let xWidth = xRCCorner.y + wWidth * ${n.dilations[1]}u;\\n          if (xWidth < 0u || xWidth >= ${d[m?2:3]}u) {\\n            continue;\\n          }\\n\\n          let xVal = ${m?w.get("batch","xHeight","xWidth","input_channel"):w.get("batch","input_channel","xHeight","xWidth")};\\n          let wVal = ${$.get("output_channel","wInChannel","wHeight","wWidth")};\\n          value += xVal*wVal;\\n        }\\n      }\\n    }\\n    ${c}\\n    ${g}\\n    ${v.setByOffset("global_idx","value")}\\n  }`,dispatchGroup:()=>({x:Math.ceil(b/64)})})})(e,u,t,n)})}},7640:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convTranspose=t.parseConvTransposeAttributes=void 0;const r=n(387),a=n(1163),i=n(6514),o=n(3997),s=(e,t,n,r,a,i)=>(e-1)*t+n+(r-1)*a+1-i,u=(e,t,n,r,a)=>{const i=Math.floor(e/2);"SAME_UPPER"===t?(n[r]=i,n[a]=e-i):"SAME_LOWER"===t&&(n[r]=e-i,n[a]=i)},l=(e,t)=>{const n=e.kernelShape.slice();if(0===e.kernelShape.length||0===e.kernelShape.reduce(((e,t)=>e*t),0)){n.length=0;for(let e=2;e<t[1].dims.length;++e)n.push(t[1].dims[e])}const r="NHWC"===e.format;n.splice(0,0,t[1].dims[0]),n.splice(r?3:1,0,t[1].dims[1]);const a=e.pads.slice(),i=e.outputShape.slice(),o=e.outputPadding.slice(),l=t[0].dims;let c=e.dilations.slice();if(0===c.reduce(((e,t)=>e+t),0)){const e=t[0].dims.length-2;c=new Array(e).fill(1)}let d=e.strides.slice();if(0===d.reduce(((e,t)=>e+t),0)){const e=t[0].dims.length-2;d=new Array(e).fill(1)}((e,t,n,r,a,i,o,l,c,d)=>{const p=e.length-2,f=0===d.length;if(0===c.length)for(let e=0;e<p;++e)c.push(0);const h=e[0],g=t[l?3:1]*a;for(let a=0,h=e.length-p-(l?1:0);a<p;++a,++h){const l=e[h],g=f?l*o[a]:d[a],m=s(l,o[a],i[a],t[h],n[a],g);u(m,r,i,a,a+p),f&&d.push(o[a]*(l-1)+c[a]+(t[h]-1)*n[a]+1-i[a]-i[a+p])}d.splice(0,0,h),d.splice(l?3:1,0,g)})(l,n,c,e.autoPad,e.group,a,d,r,o,i);const p=Object.assign({},e);return Object.assign(p,{kernelShape:n,pads:a,outputPadding:o,outputShape:i,dilations:c,strides:d,cacheKey:e.cacheKey}),p};t.parseConvTransposeAttributes=e=>{const t=(0,o.parseInternalActivationAttributes)(e),n=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][void 0===e.autoPad?0:e.autoPad],i=e.dilations,s=e.group,u=e.kernelShape,l=e.pads,c=e.strides,d=e.wIsConst(),p=e.outputPadding,f=e.outputShape;return(0,r.createAttributeWithCacheKey)(Object.assign({autoPad:a,format:n,dilations:i,group:s,kernelShape:u,outputPadding:p,outputShape:f,pads:l,strides:c,wIsConst:d},t))};const c=(e,t,n)=>{const r=(o=3===e.length,s=t.cacheKey,{name:"ConvTranspose2D",inputTypes:o?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:s});var o,s;return Object.assign(Object.assign({},r),{get:()=>(0,i.createConvTranspose2DProgramInfo)(e,r,t,n)})};t.convTranspose=(e,t)=>{((e,t)=>{if(!e||2!==e.length&&3!==e.length)throw new Error("Conv requires 2 or 3 inputs");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");if(e[0].dims["NHWC"===t.format?e[0].dims.length-1:1]!==e[1].dims[0])throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");const n=e[1].dims[1]*t.group;if(3===e.length&&(1!==e[2].dims.length||e[2].dims[0]!==n))throw new Error("invalid bias");const r=e[0].dims.length-2;if(t.dilations.reduce(((e,t)=>e+t),0)>0&&t.dilations.length!==r)throw new Error(`dilations should be ${r}D`);if(t.strides.reduce(((e,t)=>e+t),0)>0&&t.strides.length!==r)throw new Error(`strides should be ${r}D`);if(t.pads.reduce(((e,t)=>e+t),0)>0&&t.pads.length!==2*r)throw new Error(`pads should be ${2*r}D`);if(t.outputPadding.length!==r&&0!==t.outputPadding.length)throw new Error(`output_padding should be ${r}D`);if(t.kernelShape.reduce(((e,t)=>e+t),0)>0&&0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(0!==t.outputShape.length&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error("ConvTranspose input(X,W) should be float tensor");if(3===e.length&&1!==e[2].dataType)throw new Error("ConvTranspose input(bias) should be float tensor")})(e.inputs,t),3===e.inputs[0].dims.length?((e,t)=>{const n="NHWC"===t.format,r=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===r.length&&r.push(e.inputs[2]);let a=t.kernelShape;0!==a.length&&0!==a[0]||(a=[e.inputs[1].dims[2]]);let i=t.dilations;0!==i.length&&0!==i[0]||(i=[1]);let o=t.strides;0!==o.length&&0!==o[0]||(o=[1]);let s=t.pads;0===s.length&&(s=[0,0]),s=[0,s[0],0,s[1]],o=[1].concat(o),i=[1].concat(i),a=[1].concat(a);const u=l(Object.assign(Object.assign({},t),{pads:s,strides:o,dilations:i,kernelShape:a}),r);e.compute(c(r,u,(e=>n?[e[0],e[2],e[3]]:[e[0],e[1],e[3]])))})(e,t):((e,t,n)=>{const r=l(n,t);e.compute(c(t,r))})(e,e.inputs,t)}},9770:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.conv=t.parseConvAttributes=t.calculateOutputShape=void 0;const r=n(6952),a=n(387),i=n(9192),o=n(3822),s=n(3997),u=n(2625);t.calculateOutputShape=(e,t,n,r,a,i)=>{const o=e[0],s=e.slice(i?1:2,i?3:4),u=s.length,l=t[0],c=t.slice(2).map(((e,t)=>e+(e-1)*(n[t]-1))),d=s.map(((e,t)=>e+r[t]+r[t+u])).map(((e,t)=>Math.floor((e-c[t]+a[t])/a[t])));return d.splice(0,0,o),d.splice(i?3:1,0,l),d};const l=(0,a.createAttributeWithCacheKey)({perm:[2,3,1,0]}),c=(e,t)=>{const n=e.kernelShape.slice();for(let e=2;e<t[1].dims.length;++e)0===n[e-2]&&(n[e-2]=t[1].dims[e]);const a=e.pads.slice();r.PoolConvUtil.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,n,a,"NHWC"===e.format,e.autoPad);const i=Object.assign({},e);return Object.assign(i,{kernelShape:n,pads:a,cacheKey:e.cacheKey}),i};t.parseConvAttributes=e=>{const t=(0,s.parseInternalActivationAttributes)(e),n=e.format,r=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],i=e.dilations,o=e.group,u=e.kernel_shape,l=e.pads,c=e.strides,d=e.w_is_const();return(0,a.createAttributeWithCacheKey)(Object.assign({autoPad:r,format:n,dilations:i,group:o,kernelShape:u,pads:l,strides:c,wIsConst:d},t))},t.conv=(e,n)=>{((e,t)=>{if(!e||2!==e.length&&3!==e.length)throw new Error("Conv requires 2 or 3 inputs");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");if(e[0].dims["NHWC"===t.format?e[0].dims.length-1:1]!==e[1].dims[1]*t.group)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(3===e.length&&(1!==e[2].dims.length||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");const n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==2*n)throw new Error(`pads should be ${2*n}D`);if(0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error("Conv input(X,W) should be float tensor");if(3===e.length&&1!==e[2].dataType)throw new Error("Conv input(bias) should be float tensor")})(e.inputs,n),3===e.inputs[0].dims.length?((e,t)=>{const n="NHWC"===t.format,r=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&r.push(e.inputs[2]);const a=[0,t.pads[0],0,t.pads[1]],o=[1].concat(t.strides),s=[1].concat(t.dilations),u=[1].concat(t.kernelShape),l=c(Object.assign(Object.assign({},t),{pads:a,strides:o,dilations:s,kernelShape:u}),r);e.compute((0,i.createGroupedConvProgramInfoLoader)(r,l,(e=>n?[e[0],e[2],e[3]]:[])))})(e,n):((e,n,r)=>{var a;const s=c(r,n),d=3===n.length,p="NHWC"===r.format,f=n[0].dims[p?1:2],h=n[0].dims[p?2:3],g=n[0].dims[p?3:1],m=n[1].dims[2],y=n[1].dims[3],b=(0,t.calculateOutputShape)(n[0].dims,n[1].dims,r.dilations,s.pads,r.strides,p),v=b[p?1:2],w=b[p?2:3],$=b[p?3:1];if(p&&m===f&&y===h&&"VALID"===r.autoPad||1===m&&1===y&&1===r.dilations[0]&&1===r.dilations[1]&&1===r.strides[0]&&1===r.strides[1]&&("SAME_UPPER"===r.autoPad||"SAME_LOWER"===r.autoPad||"VALID"===r.autoPad))return void e.compute((0,i.createGroupedConvProgramInfoLoader)(n,s));if(!p||1!==r.group)return void e.compute((0,i.createGroupedConvProgramInfoLoader)(n,s));const x=p?v*w:$,S=p?$:v*w,_=m*y*g,A=null!==(a=e.kernelCustomData.wT)&&void 0!==a?a:e.compute(Object.assign(Object.assign({},u.transposeProgramMetadata),{cacheHint:l.cacheKey,get:()=>(0,u.createTransposeProgramInfo)(n[1],l.perm)}),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=A);const C=[n[0],A];d&&(p||1!==n[2].dims.length?C.push(n[2]):C.push(n[2].reshape([n[2].dims[0],1,1]))),e.compute((0,o.createConv2DMatMulProgramInfoLoader)(C,s,b,x,S,_,d,!0),{inputs:C})})(e,e.inputs,n)}},3822:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createConv2DMatMulProgramInfoLoader=void 0;const r=n(1163),a=n(9456);t.createConv2DMatMulProgramInfoLoader=(e,t,n,i,o,s,u,l)=>{const c=((e,t)=>({name:"Conv2DMatMul",inputTypes:e?[r.GpuDataType.default,r.GpuDataType.default,r.GpuDataType.default]:[r.GpuDataType.default,r.GpuDataType.default],cacheHint:t}))(u,t.cacheKey);return Object.assign(Object.assign({},c),{get:()=>(0,a.createConv2DMatMulProgramInfo)(e,c,t,n,i,o,s,u,l)})}},8856:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.expand=t.expandProgramMetadata=void 0;const r=n(6952),a=n(1163),i=n(2075);t.expandProgramMetadata={name:"Expand",inputTypes:[a.GpuDataType.default]};const o=(e,t)=>{const n=e.length-t.length,r=[];for(let t=0;t<n;++t)r.push(e[t]);for(let a=0;a<t.length;++a)r.push(1===t[a]?e[a+n]:t[a]);return r};t.expand=e=>{(e=>{if(!e||2!==e.length)throw new Error("Expand requires 2 input.");const t=e[0].dims,n=Array.from(e[1].getBigInt64Array(),Number);let r=n.length<t.length?0:n.length-t.length,a=t.length<n.length?0:t.length-n.length;for(;r<n.length&&a<t.length;++r,++a)if(n[r]!==t[a]&&1!==n[r]&&1!==t[a])throw new Error("Expand requires shape to be broadcastable to input")})(e.inputs);const n=Array.from(e.inputs[1].getBigInt64Array(),Number).toString();e.compute(Object.assign(Object.assign({},t.expandProgramMetadata),{cacheHint:n,get:()=>((e,t)=>{const n=t[0].dims,s=Array.from(t[1].getBigInt64Array(),Number),u=((e,t)=>e.length>t.length?o(e,t):o(t,e))(n,s),l=r.ShapeUtil.size(u),c=t[0].dataType,d=(0,i.inputVariable)("input",c,n),p=(0,i.outputVariable)("output",c,u);return Object.assign(Object.assign({},e),{getShaderSource:e=>`\\n  const inputShape = ${d.indices(...n)};\\n  ${e.declareVariables(d,p)}\\n  ${e.mainStart()}\\n  ${e.guardAgainstOutOfBoundsWorkgroupSizes(l)}\\n    let outputIndices = ${p.offsetToIndices("global_idx")};\\n    var inputIndices: ${d.type.indices};\\n    for (var i = 0; i < ${n.length}; i++) {\\n      if (${d.indicesGet("inputShape","i")} == 1) {\\n        ${d.indicesSet("inputIndices","i",0)}\\n      } else {\\n        ${d.indicesSet("inputIndices","i",p.indicesGet("outputIndices","i + "+(u.length-n.length)))}\\n      }\\n    }\\n    ${p.setByOffset("global_idx",d.getByIndices("inputIndices"))}\\n  }`,outputs:[{dims:u,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(l/64)})})})(t.expandProgramMetadata,e.inputs)}),{inputs:[0]})}},3997:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseInternalActivationAttributes=t.getActicationSnippet=void 0;const r=n(6952);t.getActicationSnippet=e=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:"value = max(value, 0.0);"};case"Sigmoid":return{activationFunction:"",applyActivation:"value = (1.0 / (1.0 + exp(-value)));"};case"Clip":return{activationFunction:`const clip_min_=f32(${e.clipMin});const clip_max_=f32(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},t.parseInternalActivationAttributes=e=>{const t=(null==e?void 0:e.activation)||"";if("Clip"===t){const[n,a]=(null==e?void 0:e.activation_params)||[r.MIN_CLIP,r.MAX_CLIP];return{activation:t,clipMax:a,clipMin:n,activationCacheKey:`${t}:${n},${a}`}}return{activation:t,activationCacheKey:t}}},8405:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.gather=t.parseGatherAttributes=void 0;const r=n(6952),a=n(387),i=n(1163);t.parseGatherAttributes=e=>(0,a.createAttributeWithCacheKey)({axis:e.axis}),t.gather=(e,t)=>{(e=>{if(!e||2!==e.length)throw new Error("Gather requires 2 inputs.")})(e.inputs);const n={name:"Gather",inputTypes:[i.GpuDataType.default,i.GpuDataType.default],cacheHint:t.cacheKey};e.compute(((e,t,n)=>{const a=t[0].dims,o=t[1].dims,s=a.length,u=r.ShapeUtil.normalizeAxis(n.axis,s),l=a.slice(0);l.splice(u,1,...o);const c=t[0].dataType,d=r.ShapeUtil.sizeFromDimension(a,u+1),p=[7,13,11].includes(c)?2:1,f=7===t[1].dataType?2:1,h=p*d,g=r.ShapeUtil.sizeToDimension(a,u),m=r.ShapeUtil.size(o),y=r.ShapeUtil.sizeFromDimension(a,u)*p,b=m*d*p,v=a[u],w=r.ShapeUtil.size(a)*p,$=r.ShapeUtil.size(l)*p,x=g*m;return Object.assign(Object.assign({},e),{outputs:[{dims:l,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:e=>`\\n  const N: u32 = ${m};\\n  const elementSize: u32 = ${p};\\n  const indicesElementSize: u32 = ${f};\\n\\n  @group(0) @binding(0) var<storage, read> input : array<u32>;\\n  @group(0) @binding(1) var<storage, read> inputIndices : array<i32>;\\n  @group(0) @binding(2) var<storage, read_write> output: array<u32>;\\n\\n  ${e.mainStart()}\\n    let batch: u32 = global_idx / N;\\n    let i: u32 = global_idx % N;\\n\\n    let srcOffsetBatch: u32 = batch * ${y};\\n    let dstOffsetBatch: u32 = batch * ${b};\\n    var idx = inputIndices[i * indicesElementSize];\\n    if (idx < 0) {\\n        idx = idx + ${v};\\n    }\\n\\n    let srcOffset = srcOffsetBatch + u32(idx) * ${h};\\n    let dstOffset = dstOffsetBatch + i * ${h};\\n    if (srcOffset >= ${w}) {\\n        return;\\n    }\\n    if (dstOffset >= ${$}) {\\n        return;\\n    }\\n    for (var j: u32 = 0; j < ${h}; j++) {\\n        output[dstOffset + j] = input[srcOffset + j];\\n    }\\n  }`,dispatchGroup:()=>({x:Math.ceil(x/64)})})})(n,e.inputs,t))}},4271:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseGemmAttributes=t.gemm=void 0;const r=n(6952),a=n(387),i=n(1163);t.gemm=(e,t)=>{(e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(3===e.length&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(1!==e[0].dataType||1!==e[1].dataType||3===e.length&&1!==e[2].dataType)throw new Error("Invalid input type.");if(e[0].dataType!==e[1].dataType||3===e.length&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")})(e.inputs),e.compute(((e,t)=>{const n={name:"Gemm",inputTypes:3===e.length?[i.GpuDataType.default,i.GpuDataType.default,i.GpuDataType.default]:[i.GpuDataType.default,i.GpuDataType.default],cacheHint:t.cacheKey};return Object.assign(Object.assign({},n),{get:()=>((e,t,n)=>{const a=t[0].dims.slice(),o=t[1].dims.slice(),[s,u,l]=r.GemmUtil.getShapeOfGemmResult(a,n.transA,o,n.transB,3===t.length?t[2].dims:void 0),c=[s,u];if(!c)throw new Error("Can\'t use gemm on the given tensors");const d=r.ShapeUtil.size(c);let p="";n.transA&&n.transB?p="value += a[k * M + m] * b[n * K + k];":n.transA&&!n.transB?p="value += a[k * M + m] * b[k * N + n];":!n.transA&&n.transB?p="value += a[m * K + k] * b[n * K + k];":n.transA||n.transB||(p="value += a[m * K + k] * b[k * N + n];");const f="f32",h=1===n.alpha?"":"value *= alpha;",g=3===t.length?`value += beta * c[${((e,t,n)=>{if(0===n.length)return"0u";const r=1===n.length&&1!==e||2===n.length&&n[0]!==e,a=n[n.length-1]!==t;let i="0u";return r||(i+=`+ m * ${n[n.length-1]}u`),a||(i+="+n"),i})(s,u,t[2].dims)}];`:"",m=[`@group(0) @binding(0) var<storage, read> a : array<${f}>;`,`@group(0) @binding(1) var<storage, read> b : array<${f}>;`];return 3===t.length&&m.push(`@group(0) @binding(2) var<storage, read> c : array<${f}>;`),Object.assign(Object.assign({},e),{outputs:[{dims:c,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:e=>`\\n  const M: u32 = ${s}u;\\n  const N: u32 = ${u}u;\\n  const K: u32 = ${l}u;\\n  const alpha = ${f}(${n.alpha});\\n  const beta = ${f}(${n.beta});\\n\\n  ${m.join("\\n")}\\n  @group(0) @binding(${t.length}) var<storage, read_write> output : array<${f}>;\\n\\n  ${e.mainStart()}\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(d)}\\n\\n    let m = global_id.x / N;\\n    let n = global_id.x % N;\\n\\n    var value = ${f}(0);\\n    for (var k: u32 = 0u; k<${l}u; k++) {\\n      ${p}\\n    }\\n\\n    ${h}\\n    ${g}\\n    output[global_id.x] = value;\\n\\n  }`,dispatchGroup:()=>({x:Math.ceil(d/64)})})})(n,e,t)})})(e.inputs,t))},t.parseGemmAttributes=e=>(0,a.createAttributeWithCacheKey)(e)},1798:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.instanceNorm=t.parseInstanceNormAttributes=void 0;const r=n(6952),a=n(387),i=n(1163),o=n(2075);t.parseInstanceNormAttributes=e=>(0,a.createAttributeWithCacheKey)({epsilon:e.epsilon,format:e.format}),t.instanceNorm=(e,t)=>{(e=>{if(!e||3!==e.length)throw new Error("instanceNorm requires 3 inputs.");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error("inputs should be float type")})(e.inputs);const n={name:"InstanceNormalization",inputTypes:[i.GpuDataType.default,i.GpuDataType.default,i.GpuDataType.default],cacheHint:t.cacheKey};"NHWC"===t.format?e.compute(((e,t,n)=>{const a=t[0].dims,s=a,u=r.ShapeUtil.size(s),l=a[0],c=a[a.length-1],d=r.ShapeUtil.sizeFromDimension(a,1)/c,p=(0,o.tensorTypeToWsglStorageType)(t[0].dataType),f=c*l;return Object.assign(Object.assign({},e),{outputs:[{dims:s,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:e=>`\\n  const N: u32 = ${l};\\n  const H: u32 = ${d};\\n  const C: u32 = ${c};\\n  const normSizeTyped: ${p} = ${d};\\n  const imageSize: u32 = ${d*c};\\n  const epsilon: f32 = ${n.epsilon};\\n\\n  @group(0) @binding(0) var<storage, read> x : array<${p}>;\\n  @group(0) @binding(1) var<storage, read> scale : array<${p}>;\\n  @group(0) @binding(2) var<storage, read> bias : array<${p}>;\\n  @group(0) @binding(3) var<storage, read_write> output : array<${p}>;\\n\\n  ${e.mainStart()}\\n    let currentImageNumber = global_idx / C;\\n    let currentChannelNumber = global_idx % C;\\n    \\n    // offset is channel num * N\\n    let offset = currentImageNumber * imageSize;\\n    if (offset >= ${u}) { return; }\\n    var mean: ${p} = 0;\\n\\n    for (var i: u32 = 0u; i < H; i++) {\\n        mean = mean + x[offset + i * C + currentChannelNumber];\\n    }\\n    mean = mean / normSizeTyped;\\n\\n    var squaredNorm: ${p} = 0;\\n    for (var i: u32 = 0u; i < H; i++) {\\n        let deviation: f32 = x[offset + i * C + currentChannelNumber] - mean;\\n        squaredNorm = squaredNorm + deviation * deviation;\\n    }\\n    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);\\n    let channelScale = invStdDev * scale[currentChannelNumber];\\n    let channelShift = bias[currentChannelNumber] - mean * channelScale;\\n    for (var i: u32 = 0u; i < H; i++) {\\n        let currentOffset = offset + i * C + currentChannelNumber;\\n        output[currentOffset] = x[currentOffset] * channelScale + channelShift;\\n    }\\n  }`,dispatchGroup:()=>({x:Math.ceil(f/64)})})})(n,e.inputs,t)):e.compute(((e,t,n)=>{const a=t[0].dims,s=t[1],u=t[2],l=a,c=r.ShapeUtil.size(l),d=r.ShapeUtil.sizeToDimension(a,2),p=r.ShapeUtil.sizeFromDimension(a,2),f=a[1],h=r.ShapeUtil.size(s.dims),g=u?r.ShapeUtil.size(u.dims):0;if(h!==p||u&&g!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.\\n             Size of scale and bias (if provided) must match this. \\n             Got scale size of ${h} and bias size of ${g}`);const m=(0,o.tensorTypeToWsglStorageType)(t[0].dataType);return Object.assign(Object.assign({},e),{outputs:[{dims:l,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:e=>`\\n  const C: u32 = ${f};\\n  const normSize: u32 = ${p};\\n  const normSizeTyped: ${m} = ${p};\\n  const epsilon: f32 = ${n.epsilon};\\n\\n  @group(0) @binding(0) var<storage, read> x : array<${m}>;\\n  @group(0) @binding(1) var<storage, read> scale : array<${m}>;\\n  @group(0) @binding(2) var<storage, read> bias : array<${m}>;\\n  @group(0) @binding(3) var<storage, read_write> output : array<${m}>;\\n\\n  ${e.mainStart()}\\n    let offset = global_idx * normSize;\\n    if (offset + normSize >= ${c}) { return; }\\n    var mean: ${m} = 0;\\n\\n    for (var h: u32 = 0u; h < normSize; h++) {\\n        mean = mean + x[h + offset];\\n    }\\n    mean = mean / normSizeTyped;\\n\\n    var squaredNorm: ${m} = 0;\\n    for (var h: u32 = 0u; h < normSize; h++) {\\n        let deviation: f32 = x[h + offset] - mean;\\n        squaredNorm = squaredNorm + deviation * deviation;\\n    }\\n    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);\\n    let channelScale = invStdDev * scale[global_idx % C];\\n    let channelShift = bias[global_idx % C] - mean * channelScale;\\n    for (var j: u32 = 0; j < normSize; j++) {\\n        output[j + offset] = x[j + offset] * channelScale + channelShift;\\n    }\\n  }`,dispatchGroup:()=>({x:Math.ceil(d/64)})})})(n,e.inputs,t))}},6145:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.layerNorm=t.parseLayerNormAttributes=void 0;const r=n(6952),a=n(387),i=n(1163),o=n(2075);t.parseLayerNormAttributes=e=>(0,a.createAttributeWithCacheKey)({axis:e.axis,epsilon:e.epsilon}),t.layerNorm=(e,t)=>{(e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error("inputs should be float type")})(e.inputs);const n={name:"LayerNormalization",inputTypes:2===e.inputs.length?[i.GpuDataType.default,i.GpuDataType.default]:[i.GpuDataType.default,i.GpuDataType.default,i.GpuDataType.default],cacheHint:t.cacheKey+e.outputCount.toString(10)+e.inputs.length.toString(10)};e.compute(((e,t,n,a)=>{const s=t[0].dims,u=t[1],l=t[2],c=s,d=r.ShapeUtil.size(c),p=r.ShapeUtil.normalizeAxis(n.axis,s.length),f=r.ShapeUtil.sizeToDimension(s,p),h=r.ShapeUtil.sizeFromDimension(s,p),g=r.ShapeUtil.size(u.dims),m=l?r.ShapeUtil.size(l.dims):0;if(g!==h||l&&m!==h)throw new Error(`Size of X.shape()[axis:] == ${h}.\\n       Size of scale and bias (if provided) must match this.\\n       Got scale size of ${g} and bias size of ${m}`);const y=[];for(let e=0;e<s.length;++e)e<p?y.push(s[e]):y.push(1);const b=(0,o.tensorTypeToWsglStorageType)(t[0].dataType),v=a>1,w=a>2;let $=0;const x=[{dims:c,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}];return v&&x.push({dims:y,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),w&&x.push({dims:y,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),Object.assign(Object.assign({},e),{outputs:x,getShaderSource:e=>`\\n  const normSize: u32 = ${h};\\n  const normSizeTyped: ${b} = ${h};\\n  const epsilon: f32 = ${n.epsilon};\\n\\n  @group(0) @binding(${$++}) var<storage, read> x : array<${b}>;\\n  @group(0) @binding(${$++}) var<storage, read> scale : array<${b}>;\\n  ${l?`@group(0) @binding(${$++}) var<storage, read> bias : array<${b}>;`:""}\\n  @group(0) @binding(${$++}) var<storage, read_write> output : array<${b}>;\\n  ${v?`@group(0) @binding(${$++}) var<storage, read_write> meanDataOutput : array<${b}>`:""};\\n  ${w?`@group(0) @binding(${$++}) var<storage, read_write> invStdOutput : array<${b}>`:""};\\n\\n  ${e.mainStart()}\\n    let offset = global_idx * normSize;\\n    if (offset >= ${d}) { return; }\\n    var mean: ${b} = 0;\\n    var meanSquare: ${b} = 0;\\n\\n    for (var h: u32 = 0u; h < normSize; h++) {\\n      mean = mean + x[h + offset];\\n      meanSquare = meanSquare + x[h + offset] * x[h + offset];\\n    }\\n    mean = mean / normSizeTyped;\\n    meanSquare = sqrt(meanSquare / normSizeTyped - mean * mean + epsilon);\\n\\n    for (var j: u32 = 0; j < normSize; j++) {\\n      output[j + offset] = (x[j + offset] - mean) / meanSquare * scale[j] ${l?"+ bias[j]":""};\\n    }\\n\\n    ${v?"meanDataOutput[global_idx] = mean":""};\\n    ${w?"invStdOutput[global_idx] = 1 / meanSquare":""};\\n  }`,dispatchGroup:()=>({x:Math.ceil(f/64)})})})(n,e.inputs,t,e.outputCount))}},1522:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.matMul=t.createMatmulProgramInfoLoader=void 0;const r=n(6952),a=n(1163),i=n(3997);t.createMatmulProgramInfoLoader=(e,t)=>{const n=(o=e.length>2,s=t.activationCacheKey,{name:"MatMul",inputTypes:o?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:s});var o,s;return Object.assign(Object.assign({},n),{get:()=>((e,t,n)=>{const o=t[0].dims,s=t[1].dims,u=r.BroadcastUtil.calcShape(o,s,!0);if(!u)throw new Error("Can\'t use matmul on the given tensors");const l=r.ShapeUtil.size(u),c="f32",{activationFunction:d,applyActivation:p}=(0,i.getActicationSnippet)(n),f=u[u.length-2],h=o[o.length-1],g=u[u.length-1];return Object.assign(Object.assign({},e),{outputs:[{dims:u,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>`\\n  const M: u32 = ${f}u;\\n  const N: u32 = ${g}u;\\n  const K: u32 = ${h}u;\\n\\n  @group(0) @binding(0) var<storage, read> a : array<${c}>;\\n  @group(0) @binding(1) var<storage, read> b : array<${c}>;\\n  @group(0) @binding(2) var<storage, read_write> output : array<${c}>;\\n\\n  ${d}\\n\\n  ${e.mainStart()}\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(l)}\\n\\n    let stack = global_idx / (M * N);\\n    let mn = global_idx % (M * N);\\n    let n = global_idx % N;\\n    let m = mn / N;\\n\\n    let offsetA = stack * (M * K);\\n    let offsetB = stack * (K * N);\\n\\n    var value = ${c}(0);\\n    for (var k: u32 = 0u; k<${h}u; k++) {\\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\\n    }\\n    ${p}\\n    output[global_idx] = value;\\n  }`,dispatchGroup:()=>({x:Math.ceil(l/64)})})})(n,e,t)})},t.matMul=e=>{(e=>{if(!e||2!==e.length)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error("inputs should be float type")})(e.inputs),e.compute((0,t.createMatmulProgramInfoLoader)(e.inputs,{activation:"",activationCacheKey:""}))}},5262:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.globalMaxPool=t.parseGlobalMaxPoolAttributes=t.parseMaxPoolAttributes=t.maxPool=t.globalAveragePool=t.parseGlobalAveragePoolAttributes=t.averagePool=t.parseAveragePoolAttributes=void 0;const r=n(6952),a=n(387),i=n(1163),o=n(2075),s=e=>{if(!e||1!==e.length)throw new Error("Pool ops requires 1 input.");if(4!==e[0].dims.length)throw new Error("Pool ops supports 2-D inputs only for now.");if(1!==e[0].dataType)throw new Error("Invalid input type.")},u=(e,t,n)=>{const a="NHWC"===t.format,i=a?[e.dims[0],e.dims[3],e.dims[1],e.dims[2]]:e.dims.slice(),o=Object.hasOwnProperty.call(t,"dilations"),s=t.kernelShape.slice(),u=t.strides.slice(),l=o?t.dilations.slice():[],c=t.pads.slice();r.PoolConvUtil.adjustPoolAttributes(n,i,s,u,l,c);const d=r.PoolConvUtil.computePoolOutputShape(n,i,u,l,s,c,t.autoPad),p=Object.assign({},t);return o?Object.assign(p,{kernelShape:s,strides:u,pads:c,dilations:l,cacheKey:t.cacheKey}):Object.assign(p,{kernelShape:s,strides:u,pads:c,cacheKey:t.cacheKey}),[p,a?[d[0],d[2],d[3],d[1]]:d]},l=(e,t,n,a,i,s,u)=>{const l="NHWC"===a.format,c=t.shape,d=t.type.value,p=c.length,f=r.ShapeUtil.size(n),h=(0,o.outputVariable)("output",t.type.tensor,n);if(a.kernelShape.length<=2){const n=a.kernelShape[a.kernelShape.length-1],r=a.strides[a.strides.length-1],o=a.pads[a.pads.length/2-1],g=p-(l?2:1);let m="",y="",b="";if(m=o+a.pads[a.pads.length-1]!==0?`\\n              for (var i: u32 = 0u; i < ${n}u; i++) {\\n                xIndices[${g}] = indices[${g}] * ${r} - ${o} + i;\\n                if (xIndices[${g}] < 0 || xIndices[${g}] >= ${c[g]}) {\\n                  pad++;\\n                  continue;\\n                }\\n                let x_val = x[${t.indicesToOffset("xIndices")}];\\n                ${i}\\n              }`:`\\n              for (var i: u32 = 0u; i < ${n}u; i++) {\\n                xIndices[${g}] = indices[${g}] * ${r} - ${o} + i;\\n                let x_val = x[${t.indicesToOffset("xIndices")}];\\n                ${i}\\n              }`,2===a.kernelShape.length){const e=a.kernelShape[a.kernelShape.length-2],t=a.strides[a.strides.length-2],r=a.pads[a.pads.length/2-2],i=a.pads[a.pads.length-2],o=p-(l?3:2),s=c[o];y=r+i!==0?`\\n                for (var j: u32 = 0u; j < ${e}u; j++) {\\n                  xIndices[${o}] = indices[${o}] * ${t} - ${r} + j;\\n                  if (xIndices[${o}] < 0 || xIndices[${o}] >= ${s}) {\\n                    pad+= ${n};\\n                    continue;\\n                  }\\n              `:`\\n                for (var j: u32 = 0u; j < ${e}u; j++) {\\n                  xIndices[${o}] = indices[${o}] * ${t} - ${r} + j;\\n                `,b="\\n              }\\n            "}return`\\n            ${e.declareVariables(t,h)}\\n\\n            ${e.mainStart()}\\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(f)}\\n\\n              let indices = ${h.offsetToIndices("global_idx")};\\n              var xIndices = ${h.offsetToIndices("global_idx")};\\n\\n              var value: ${d} = ${d}(${u});\\n              var pad = 0;\\n              ${y}\\n              ${m}\\n              ${b}\\n              ${s}\\n\\n              output[global_idx] = value;\\n            }`}{if(l)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");const n=r.ShapeUtil.size(a.kernelShape),o=r.ShapeUtil.computeStrides(a.kernelShape),d=o.length,g=a.pads.length;let m="";return m=a.pads.reduce(((e,t)=>e+t))?`\\n                if (xIndices[j] >= inputDims[j]) {\\n                  pad++;\\n                  isPad = true;\\n                  break;\\n                }\\n              }\\n              if (!isPad) {\\n                let x_val = x[${t.indicesToOffset("xIndices")}];\\n                ${i}\\n              }`:`\\n              }\\n              let x_val = x[${t.indicesToOffset("xIndices")}];\\n              ${i}\\n            `,`\\n            ${e.declareVariables(t,h)}\\n\\n            const pads = array<u32, ${g}>(${a.pads.map((e=>`${e}u`)).join(",")});\\n            const inputDims = array<u32, ${p}>(${c.map((e=>`${e}u`)).join(",")});\\n            const kernelStrides = array<u32, ${d}>(${o.map((e=>`${e}u`)).join(",")});\\n            const strides = array<u32, ${d}>(${a.strides.map((e=>`${e}u`)).join(",")});\\n\\n            ${e.mainStart()}\\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(f)}\\n\\n              let indices = ${h.offsetToIndices("global_idx")};\\n              let xIndices = ${h.offsetToIndices("global_idx")};\\n\\n              var offsets: array<u32, ${d}>;\\n\\n              var value = ${h.type.value}(${u});\\n              var pad = 0;\\n              var isPad = false;\\n\\n              for (var i: u32 = 0u; i < ${n}u; i++) {\\n                var offset = i;\\n                for (var j = 0u; j < ${d-1}u; j++) {\\n                  offsets[j] = offset / kernelStrides[j];\\n                  offset -= offsets[j] * kernelStrides[j];\\n                }\\n                offsets[${d-1}] = offset;\\n\\n                isPad = false;\\n                for (var j = ${p-d}u; j < ${p}u; j++) {\\n                  xIndices[j] = indices[j] * strides[j - ${p-d}u]\\n                    + offsets[j - ${p-d}u] - pads[j - 2u];\\n                  ${m}\\n              }\\n              ${s}\\n\\n              output[global_idx] = value;\\n            }`}},c=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),d=(e,t,n,a)=>{const[s,c]=u(e,a,n),d=r.ShapeUtil.size(s.kernelShape),p=(0,o.inputVariable)("x",e.dataType,e.dims);let f="";return s.countIncludePad?f+=`value /= f32(${d});`:f+=`value /= f32(${d} - pad);`,Object.assign(Object.assign({},t),{outputs:[{dims:c,dataType:e.dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:e=>l(e,p,c,s,"value += x_val;",f,"0.0"),dispatchGroup:()=>({x:Math.ceil(r.ShapeUtil.size(c)/64)})})};t.parseAveragePoolAttributes=e=>{const t=0!==e.count_include_pad,n=c(e);if(0!==n.ceilMode)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return(0,a.createAttributeWithCacheKey)(Object.assign({countIncludePad:t},n))},t.averagePool=(e,t)=>{s(e.inputs);const n={name:"AveragePool",inputTypes:[i.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>d(e.inputs[0],n,!1,t)}))};const p={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""};t.parseGlobalAveragePoolAttributes=e=>{const t=e.format;return Object.assign(Object.assign({format:t},p),{cacheKey:t})},t.globalAveragePool=(e,t)=>{s(e.inputs);const n={name:"GlobalAveragePool",inputTypes:[i.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>d(e.inputs[0],n,!0,t)}))};const f=(e,t,n,a)=>{const[s,c]=u(e,a,n),d=(0,o.inputVariable)("x",e.dataType,e.dims);return Object.assign(Object.assign({},t),{outputs:[{dims:c,dataType:e.dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:e=>l(e,d,c,s,"\\n      value = max(x_val, value);\\n    ","","-1e5"),dispatchGroup:()=>({x:Math.ceil(r.ShapeUtil.size(c)/64)})})};t.maxPool=(e,t)=>{s(e.inputs);const n={name:"MaxPool",inputTypes:[i.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>f(e.inputs[0],n,!1,t)}))},t.parseMaxPoolAttributes=e=>{const t=e.storage_order,n=e.dilations,r=c(e);if(0!==t)throw new Error("column major storage order is not yet supported for MaxPool");if(0!==r.ceilMode)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return(0,a.createAttributeWithCacheKey)(Object.assign({storageOrder:t,dilations:n},r))},t.parseGlobalMaxPoolAttributes=e=>{const t=e.format;return Object.assign(Object.assign({format:t},p),{cacheKey:t})},t.globalMaxPool=(e,t)=>{s(e.inputs);const n={name:"GlobalMaxPool",inputTypes:[i.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>f(e.inputs[0],n,!0,t)}))}},6031:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseReduceAttributes=t.reduceSumSquare=t.reduceSum=t.reduceProd=t.reduceMin=t.reduceMean=t.reduceMax=t.reduceLogSumExp=t.reduceL2=t.reduceL1=t.reduceLogSum=t.createReduceProgramInfo=void 0;const r=n(6952),a=n(387),i=n(1163),o=n(2075),s=e=>{if(!e||0===e.length||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(2===e.length&&1!==e[1].dims.length)throw new Error("Invalid axes input dims.");if(1!==e[0].dataType)throw new Error("Invalid input type.")},u=e=>["","",`var value = ${e.getByOffset("inputOffset")};`,""];t.createReduceProgramInfo=(e,t,n,a,s,u=!1,l=!1)=>{const c=[],d=t[0].dims,p=r.ShapeUtil.normalizeAxes(a,t[0].dims.length),f=!l&&0===p.length;d.forEach(((e,t)=>{f||p.indexOf(t)>=0?u&&c.push(1):c.push(e)}));const h=[],g=(0,o.inputVariable)("_A",t[0].dataType,d),m=(0,o.outputVariable)("output",s,c),y=n(g,m,p),b=`inputOffset = ${g.indicesToOffset("inputIndices")};`,v=`let ${b};`,w=`var ${b};`,$=""===y[1]?"":w;let x=(""===y[1]?v:b)+"\\n"+y[2];for(let e=0,n=0;e<t[0].dims.length;e++)f||p.indexOf(e)>=0?(u&&n++,x=`for(var j${e}: u32 = 0; j${e} < ${t[0].dims[e]}; j${e}++) {\\n                ${y[2].includes("lastIndex")?`let lastIndex = j${e};`:""}\\n                ${g.indicesSet("inputIndices",e,`j${e}`)}\\n                ${x}\\n              }`):(h.push(`${g.indicesSet("inputIndices",e,m.indicesGet("outputIndices",n))};`),n++);const S=r.ShapeUtil.size(c);return Object.assign(Object.assign({},e),{getShaderSource:e=>`\\n        ${e.declareVariables(g,m)}\\n\\n        ${e.mainStart()}\\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes(S)}\\n          var inputIndices: ${g.type.indices};\\n          let outputIndices = ${m.offsetToIndices("global_idx")};\\n\\n          ${h.join("\\n")}\\n          ${y[0]}       // init ops for reduce max/min\\n          ${$}\\n          ${y[1]}\\n          ${x}\\n          ${y[3]}\\n          ${4===y.length?m.setByOffset("global_idx","value"):y.slice(4).join("\\n")}\\n        }`,outputs:[{dims:c,dataType:s,gpuDataType:i.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(S/64)})})};const l=(e,n,r,o)=>{const s=1===e.length?r:((e,t)=>{const n=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((e=>n.push(Number(e)))),(0,a.createAttributeWithCacheKey)({axes:n,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})})(e,r),l={name:n,inputTypes:[i.GpuDataType.default],cacheHint:s.cacheKey+"_"+e[0].dims.map((e=>e.toString())).join(",")};return Object.assign(Object.assign({},l),{get:()=>(0,t.createReduceProgramInfo)(l,[e[0]],s.noopWithEmptyAxes&&0===s.axes.length?u:o,s.axes,e[0].dataType,s.keepDims,s.noopWithEmptyAxes)})};t.reduceLogSum=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,"ReduceLogSum",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += ${e.getByOffset("inputOffset")};`,"value = log(value);"])),{inputs:[0]})},t.reduceL1=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,"ReduceL1",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += abs(${e.getByOffset("inputOffset")});`,""])),{inputs:[0]})},t.reduceL2=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,"ReduceL2",t,((e,t)=>[`var t = f32(0); var value = ${t.type.storage}(0);`,"",`t = ${e.getByOffset("inputOffset")}; value += (t * t);`,"value = sqrt(value);"])),{inputs:[0]})},t.reduceLogSumExp=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,"ReduceLogSumExp",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += exp(${e.getByOffset("inputOffset")});`,"value = log(value);"])),{inputs:[0]})},t.reduceMax=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,"ReduceMax",t,((e,t,n)=>{const r=[];for(let t=0;t<e.shape.length;t++)(n.indexOf(t)>=0||0===n.length)&&r.push(e.indicesSet("inputIndices",t,0));return[`${r.join("\\n")}`,`var value = ${e.getByOffset("inputOffset")};`,`value = max(value, ${e.getByOffset("inputOffset")});`,""]})),{inputs:[0]})},t.reduceMean=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,"ReduceMean",t,((e,t,n)=>{let r=1;for(let t=0;t<e.shape.length;t++)(n.indexOf(t)>=0||0===n.length)&&(r*=e.shape[t]);return[`var value = ${t.type.storage}(0);`,"",`value += ${e.getByOffset("inputOffset")};`,`value = value / ${r}.;`]})),{inputs:[0]})},t.reduceMin=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,"ReduceMin",t,((e,t,n)=>{const r=[];for(let t=0;t<e.shape.length;t++)(n.indexOf(t)>=0||0===n.length)&&r.push(`inputIndices[${t}] = 0;`);return[`${r.join("\\n")}`,`var value = ${e.getByOffset("inputOffset")};`,`value = min(value, ${e.getByOffset("inputOffset")});`,""]})),{inputs:[0]})},t.reduceProd=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,"ReduceProd",t,((e,t)=>[`var value = ${t.type.storage}(1);`,"",`value *= ${e.getByOffset("inputOffset")};`,""])),{inputs:[0]})},t.reduceSum=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,"ReduceSum",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += ${e.getByOffset("inputOffset")};`,""])),{inputs:[0]})},t.reduceSumSquare=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,"ReduceSumSquare",t,((e,t)=>[`var t = f32(0); var value = ${t.type.storage}(0);`,"",`t = ${e.getByOffset("inputOffset")}; value += t * t;`,""])),{inputs:[0]})},t.parseReduceAttributes=e=>(0,a.createAttributeWithCacheKey)(e)},4566:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseResizeAttributes=t.resize=t.createResizeProgramInfoLoader=void 0;const r=n(6952),a=n(387),i=n(1163),o=n(2075);t.createResizeProgramInfoLoader=(e,t,n,a,s,u)=>{const l={name:"Resize",inputTypes:[i.GpuDataType.default],cacheHint:t.cacheKey+n.toString()+(a.length>0?"_scales_"+a.toString():"")+(s.length>0?"_sizes_"+s.toString():"")};return Object.assign(Object.assign({},l),{get:()=>((e,t,n,a,s,u,l)=>{const c=t.dims,d=((e,t,n)=>{const r=new Array(n).fill(0).concat(new Array(n).fill(1)),a=0===e.length?r:e.slice();return t.length>0?(t.forEach(((e,i)=>{r[e]=a[i],r[i+n]=a[t.length+i]})),r):a})(l,n.axes,c.length);let p=((e,t,n,r)=>{let a=[];if(n.length>0)if(r.length>0){if(e.forEach((e=>a.push(e))),Math.max(...r)>e.length)throw new Error("axes is out of bound");r.forEach(((e,t)=>a[e]=n[t]))}else n.forEach((e=>a.push(e)));else{if(0===t.length)throw new Error("Resize requires either scales or sizes.");a=e.map(((e,n)=>Math.round(e*t[n])))}return a})(c,s,u,n.axes),f=s.slice();0===s.length&&(f=c.map(((e,t)=>0===e?1:p[t]/e)),"stretch"!==n.keepAspectRatioPolicy&&(p=((e,t,n,r)=>{const a=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map((e=>n[e])),Number.MAX_VALUE):Math.min(...n,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map((e=>n[e])),Number.MIN_VALUE):Math.max(...n,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();n.fill(1,0,n.length);const i=e.slice();return r.axes.length>0?(r.axes.forEach((e=>n[e]=a)),r.axes.forEach((t=>i[t]=Math.round(e[t]*n[t])))):(n.fill(a,0,n.length),i.forEach(((e,t)=>i[t]=Math.round(e*n[t])))),i})(c,0,f,n)));const h=(0,o.outputVariable)("output",t.dataType,p),g=(0,o.inputVariable)("input",t.dataType,c),m=r.ShapeUtil.size(p),y=c.length===p.length&&c.every(((e,t)=>e===p[t])),b="tf_crop_and_resize"===n.coordinateTransformMode;return Object.assign(Object.assign({},e),{getShaderSource:e=>{return`\\n      ${t=n.coordinateTransformMode,"fn getOriginalCoordinateFromResizedCoordinate(xResized: f32, xScale: f32, lengthResized: f32,    lengthOriginal: f32, roiStart: f32, roiEnd: f32) -> f32 { "+(()=>{switch(t){case"asymmetric":return"return xResized / xScale;";case"pytorch_half_pixel":return"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }";case"tf_half_pixel_for_nn":return"return (xResized + 0.5) / xScale;";case"align_corners":return"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }";case"tf_crop_and_resize":return"if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * f32(lengthOriginal - 1);                   }";case"half_pixel_symmetric":return["const outputWidth = xScale * lengthResized;","const adjustment = lengthResized / outputWidth;","const center = lengthOriginal / 2;","const offset = center * (1 - adjustment);","return offset + ((xResized + 0.5) / xScale) - 0.5;"].join("\\n");case"half_pixel":return"return ((xResized + 0.5) / xScale) - 0.5;";default:throw new Error(`Coordinate transform mode ${t} is not supported`)}})()+"}"};\\n      ${(()=>{switch(n.mode){case"nearest":return`\\n              ${((e,t)=>`\\n    fn checkInputIndices(inputIndices: ${e.type.indices}) -> bool {\\n      const inputShape = array<u32, ${t.length}>(${t.map((e=>`${e}u`)).join(",")});\\n      for (var i:u32 = 0; i < ${t.length}; i++) {\\n        var inputIndex = ${1===t.length?"inputIndices":"inputIndices[i]"};\\n        if (inputIndex < 0 || inputIndex >= inputShape[i]) {\\n          return false;\\n        }\\n      }\\n      return true;\\n    }`)(g,c)};\\n              ${((e,t)=>"fn getNearestPixelFromOriginal(xOriginal: f32, isDownSample: bool) -> f32 {"+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}")(n.nearestMode,a)};\\n              ${((e,t,n,r,a,i,o)=>`\\n    fn calculateInputIndicesFromOutputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {\\n        const inputShape = array<u32, ${n.length}>(${n.map((e=>`${e}u`)).join(",")});\\n        const outputShape = array<u32, ${r.length}>(${r.map((e=>`${e}u`)).join(",")});\\n        const scales = array<f32, ${a.length}>(${a.map((e=>`${e}f`)).join(",")});\\n        const roi = array<f32, ${i.length}>(${i.map((e=>`${e}f`)).join(",")});\\n        var inputIndices: ${e.type.indices};\\n        for (var i:u32 = 0; i < ${r.length}; i++) {\\n          var outputIndex = ${1===r.length?"outputIndices":"outputIndices[i]"};\\n          var inputIndex: u32;\\n          if (scales[i] == 1.0) {\\n            inputIndex = outputIndex;\\n          } else {\\n            var original_idx = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\\n                    f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${n.length}]);\\n            if (!${o} || (original_idx >= 0 && original_idx < f32(inputShape[i]))) {\\n              if (original_idx < 0) {\\n                inputIndex = 0;\\n              } else if (original_idx > (f32(inputShape[i]) - 1)) {\\n                inputIndex = inputShape[i] - 1;\\n              } else {\\n                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));\\n              }\\n            } else {\\n              inputIndex = u32(original_idx);\\n            }\\n          }\\n          ${e.indicesSet("inputIndices","i","inputIndex")}\\n        }\\n        return inputIndices;\\n    }`)(g,h,c,p,f,d,b)};\\n              `;case"linear":return`\\n              ${((e,t,n,r,a)=>`\\n    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${e.type.indices}) -> array<f32, ${n.length}> {\\n      const inputShape = array<u32, ${t.length}>(${t.map((e=>`${e}u`)).join(",")});\\n      const outputShape = array<u32, ${n.length}>(${n.map((e=>`${e}u`)).join(",")});\\n      const scales = array<f32, ${r.length}>(${r.map((e=>`${e}f`)).join(",")});\\n      const roi = array<f32, ${a.length}>(${a.map((e=>`${e}f`)).join(",")});\\n      var originalIndices: array<f32, ${n.length}>;\\n      for (var i:u32 = 0; i < ${n.length}; i++) {\\n        var outputIndex = ${1===n.length?"outputIndices":"outputIndices[i]"};\\n        if (scales[i] == 1.0) {\\n          originalIndices[i] = f32(outputIndex);\\n        } else {\\n          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\\n                f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${t.length}]);\\n        }\\n      }\\n      return originalIndices;\\n    }`)(h,c,p,f,d)};\\n              ${((e,t,n,r,a,i,o)=>{const[s,u,l,c]=2===n.length?[-1,0,1,-1]:1===a[1]?[0,2,3,1]:[0,1,2,3];return`\\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> f32 {\\n      var inputIndices: ${e.type.indices};\\n      inputIndices[${u}] = max(0, min(row, ${n[u]} - 1));\\n      inputIndices[${l}] = max(0, min(col, ${n[l]} - 1));\\n      if (${n.length} > 2) {\\n        inputIndices[${c}] = channel;\\n        inputIndices[${s}] = batch;\\n      };\\n      return input[${e.indicesToOffset("inputIndices")}];\\n    }\\n\\n    fn bilinearInterpolation(outputIndices: ${t.type.indices}) -> f32 {\\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);\\n      var row:f32 = originalIndices[${u}];\\n      var col:f32 = originalIndices[${l}];\\n      if (${i} && (row < 0 || row > (${n[u]} - 1) || col < 0 || col > ${n[l]} - 1)) {\\n        return ${o};\\n      }\\n      row = max(0, min(row, ${n[u]} - 1));\\n      col = max(0, min(col, ${n[l]} - 1));\\n      var row1: u32 = u32(row);\\n      var col1: u32 = u32(col);\\n      var row2: u32 = u32(row + 1);\\n      var col2: u32 = u32(col + 1);\\n      var channel: u32 = 0;\\n      var batch: u32 = 0;\\n      if (${n.length>2}) {\\n        channel = u32(originalIndices[${c}]);\\n        batch = u32(originalIndices[${s}]);\\n      }\\n      var x11: f32 = getInputValue(batch, channel, row1, col1);\\n      var x12: f32 = getInputValue(batch, channel, row1, col2);\\n      var x21: f32 = getInputValue(batch, channel, row2, col1);\\n      var x22: f32 = getInputValue(batch, channel, row2, col2);\\n      var dx1: f32 = row - f32(row1);\\n      var dx2: f32 = f32(row2 ) - row;\\n      var dy1 = col - f32(col1);\\n      var dy2 = f32(col2) - col;\\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\\n    }`})(g,h,c,0,f,b,n.extrapolationValue)};\\n              `;case"cubic":return`\\n            ${((e,t,n,r,a,i,o,s,u,l)=>{const[c,d]=2===n.length?[0,1]:1===a[1]?[2,3]:[1,2],p=o=>{const d=o===c?"row":"col";return`\\n      fn ${d}CubicInterpolation(inputIndices: ${e.type.indices}, outputIndices: ${t.type.indices}) -> f32 {\\n        var outputIndex = ${1===r.length?"outputIndices":`outputIndices[${o}]`};\\n        var originalIdx: f32 = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), ${a[o]},\\n        f32(${r[o]}), f32(${n[o]}), ${i[o]}, ${i[o]} + ${n.length});\\n        var fractOriginalIdx: f32 = originalIdx - floor(originalIdx);\\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\\n\\n        if (${s} && (originalIdx < 0 || originalIdx > (${n[o]} - 1))) {\\n          return ${u};\\n        }\\n        var data: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\\n        for (var i: i32 = -1; i < 3; i++) {\\n          var ${d}: f32 = originalIdx + f32(i);\\n          if (${d} < 0 || ${d} >= ${n[o]}) {\\n            if (${l}) {\\n              coefs[i + 1] = 0.0;\\n              continue;\\n            } else if (${s}) {\\n              return ${u};\\n            } else {\\n              ${d} = max(0, min(${d}, ${n[o]} - 1));\\n            }\\n          }\\n          var inputIndicesCopy: ${e.type.indices} = inputIndices;\\n          inputIndicesCopy[${o}] = u32(${d});\\n          data[i + 1] = ${o===c?`input[${e.indicesToOffset("inputIndicesCopy")}];`:"\\n                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);"}\\n        }\\n        return cubicInterpolation1D(data, coefs);\\n      }`};return`\\n    ${p(c)};\\n    ${p(d)};\\n  fn getCubicInterpolationCoefs(s: f32) -> array<f32, 4> {\\n    var absS = abs(s);\\n    var coeffs: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\\n    var oneMinusAbsS: f32 = 1.0 - absS;\\n    var twoMinusAbsS: f32 = 2.0 - absS;\\n    var onePlusAbsS: f32 = 1.0 + absS;\\n    coeffs[0] = ((${o} * onePlusAbsS - 5 * ${o}) * onePlusAbsS + 8 * ${o}) * onePlusAbsS - 4 * ${o};\\n    coeffs[1] = ((${o} + 2) * absS - (${o} + 3)) * absS * absS + 1;\\n    coeffs[2] = ((${o} + 2) * oneMinusAbsS - (${o} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\\n    coeffs[3] = ((${o} * twoMinusAbsS - 5 * ${o}) * twoMinusAbsS + 8 * ${o}) * twoMinusAbsS - 4 * ${o};\\n    return coeffs;\\n  }\\n\\n  fn cubicInterpolation1D(x: array<f32, 4>, coefs: array<f32, 4>) -> f32 {\\n    var coefsSum: f32 = coefs[0] + coefs[1] + coefs[2] + coefs[3];\\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\\n  }\\n\\n  fn bicubicInterpolation(outputIndices: ${t.type.indices}) -> f32 {\\n    var inputIndices: ${e.type.indices} = outputIndices;\\n    return colCubicInterpolation(inputIndices, outputIndices);\\n  }\\n    `})(g,h,c,p,f,d,n.cubicCoeffA,b,n.extrapolationValue,n.excludeOutside)};\\n            `;default:throw Error("Invalid resize mode")}})()};\\n      ${e.declareVariables(g,h)}\\n      ${e.mainStart()}\\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes(m)}\\n        if (${y}) {\\n          output[global_idx] = input[global_idx];\\n        } else {\\n          let outputIndices = ${h.offsetToIndices("global_idx")};\\n          var inputIndices: ${g.type.indices};\\n          ${(()=>{switch(n.mode){case"nearest":return`inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);\\n                  if (checkInputIndices(inputIndices)) {\\n                    output[global_idx] = input[${g.indicesToOffset("inputIndices")}];\\n                  } else {\\n                    output[global_idx] = ${n.extrapolationValue};\\n                  }`;case"linear":return"output[global_idx] = bilinearInterpolation(outputIndices);";case"cubic":return"output[global_idx] = bicubicInterpolation(outputIndices);";default:throw Error(`Unsupported resize mode: ${n.mode}`)}})()};\\n        }\\n      }`;var t},outputs:[{dims:p,dataType:t.dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(m/64)})})})(l,e,t,n,a,s,u)})},t.resize=(e,n)=>{const r=[],a=[],i=[],o=(e=>{const t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]})(e);((e,t,n,r,a,i)=>{const[o,s,u]=n>10?[1,2,3]:[-1,e.length>1?1:-1,-1],l=e[0].dims.length;if(o>0&&e.length>o&&e[o].dims.length>0)e[o].getFloat32Array().forEach((e=>i.push(e)));else if("tf_crop_and_resize"===t.coordinateTransformMode)throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(s>0&&e.length>s&&e[s].dims.length>0){if(e[s].getFloat32Array().forEach((e=>r.push(e))),0!==r.length&&r.length!==l&&n>=18&&r.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");((e,t)=>{if(e.every((e=>e>0||(()=>{throw new Error("Resize requires scales input values to be positive")}))),e.length>0)if("linear"===t.mode){if(!(2===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]))throw new Error("Resize requires scales input size to be 2 or 4 for linear mode")}else if("cubic"===t.mode&&!(2===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")})(r,t),t.axes.length>0&&((e,t,n)=>{t.every((e=>e>=0&&e<n||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")})));const r=new Array(n).fill(1);return t.forEach(((t,n)=>r[t]=e[n])),r})(r,t.axes,l).forEach(((e,t)=>r[t]=e))}if(u>0&&e.length>u&&(e[u].getBigInt64Array().forEach((e=>a.push(Number(e)))),a.length!==l||n>=18&&a.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(r.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(a.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(void 0!==r&&void 0!==a&&r.length>0&&a.length>l)throw new Error("Resize requires only of scales or sizes to be specified")})(e.inputs,n,o,r,a,i),e.compute((0,t.createResizeProgramInfoLoader)(e.inputs[0],n,o,r,a,i),{inputs:[0]})},t.parseResizeAttributes=e=>{const t=e.antialias,n=e.axes,r=e.coordinateTransformMode,i=e.cubicCoeffA,o=0!==e.excludeOutside,s=e.extrapolationValue,u=e.keepAspectRatioPolicy,l=e.mode,c=""===e.nearestMode?"simple":e.nearestMode;return(0,a.createAttributeWithCacheKey)({antialias:t,axes:n,coordinateTransformMode:r,cubicCoeffA:i,excludeOutside:o,extrapolationValue:s,keepAspectRatioPolicy:u,mode:l,nearestMode:c})}},8906:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseSkipLayerNormAttributes=t.skipLayerNorm=void 0;const r=n(6952),a=n(387),i=n(1163),o=n(2075);t.skipLayerNorm=(e,t)=>{(e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error("inputs should be float type");const t=e[0],n=e[1],r=e[2];if(t.dataType!==n.dataType||t.dataType!==r.dataType)throw new Error("All inputs must have the same data type");if(3!==t.dims.length&&2!==t.dims.length)throw new Error("Input must be 2D or 3D");if(3!==n.dims.length&&2!==n.dims.length)throw new Error("Skip must be 2D or 3D");const a=t.dims[t.dims.length-1],i=t.dims[t.dims.length-2];if(n.dims[n.dims.length-1]!==a)throw new Error("Skip must have the same hidden size as input");if(n.dims[n.dims.length-2]!==i)throw new Error("Skip must have the same sequence length as input");if(1!==r.dims.length)throw new Error("Gamma must be 1D");if(r.dims[r.dims.length-1]!==a)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){const t=e[3];if(1!==t.dims.length)throw new Error("Beta must be 1D");if(t.dims[t.dims.length-1]!==a)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){const t=e[4];if(1!==t.dims.length)throw new Error("Bias must be 1D");if(t.dims[t.dims.length-1]!==a)throw new Error("Bias must have the same hidden size as input")}})(e.inputs);const n=[0];e.outputCount>1&&n.push(-3),e.outputCount>2&&n.push(-3),e.outputCount>3&&n.push(3),e.compute(((e,t,n,a)=>{const s={name:"SkipLayerNormalization",inputTypes:new Array(e.length).fill(i.GpuDataType.default),cacheHint:t.cacheKey};return Object.assign(Object.assign({},s),{get:()=>((e,t,n,a,s)=>{const u=t[0].dims,l=u,c=r.ShapeUtil.size(u),d=u.slice(-1)[0],p=s?u.slice(0,-1).concat(1):[],f=t.length>3,h=t.length>4,g=(0,o.tensorTypeToWsglStorageType)(t[0].dataType),m=s&&a>1,y=s&&a>2,b=a>3;let v=0;const w=[{dims:l,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}];return a>1&&w.push({dims:p,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),a>2&&w.push({dims:p,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),a>3&&w.push({dims:u,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),Object.assign(Object.assign({},e),{getShaderSource:e=>`\\n      const hiddenSize: u32 = ${d};\\n      const epsilon: f32 = ${n.epsilon};\\n\\n      @group(0) @binding(${v++}) var<storage, read> x : array<${g}>;\\n      @group(0) @binding(${v++}) var<storage, read> skip : array<${g}>;\\n      @group(0) @binding(${v++}) var<storage, read> gamma : array<${g}>;\\n      ${f?`@group(0) @binding(${v++}) var<storage, read> beta : array<${g}>;`:""}\\n      ${h?`@group(0) @binding(${v++}) var<storage, read> bias : array<${g}>;`:""}\\n      @group(0) @binding(${v++}) var<storage, read_write> output : array<${g}>;\\n      ${m?`@group(0) @binding(${v++}) var<storage, read_write> meanOutput : array<${g}>;`:""}\\n      ${y?`@group(0) @binding(${v++}) var<storage, read_write> invStdOutput : array<${g}>;`:""}\\n      ${b?`@group(0) @binding(${v++}) var<storage, read_write> inputSkipBiasSum : array<${g}>;`:""}\\n\\n      ${e.mainStart()}\\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes(c/d)}\\n        let offset = global_idx * hiddenSize;\\n        var sum: f32 = 0.0;\\n        var squareSum: f32 = 0.0;\\n        for (var i: u32 = 0; i < hiddenSize; i++) {\\n          let skipValue = skip[offset + i];\\n          let biasValue = ${h?"bias[i]":"0.0"};\\n          let inputValue = x[offset + i];\\n          let value = inputValue + skipValue + biasValue;\\n          ${b?"inputSkipBiasSum[offset + i] = value;":""}\\n          output[offset + i] = value;\\n          sum += value;\\n          squareSum += value * value;\\n        }\\n        let mean: f32 = sum / f32(hiddenSize);\\n        let variance: f32 = sqrt(squareSum / f32(hiddenSize) - mean * mean + epsilon);\\n        ${m?"meanOutput[global_idx] = mean;":""}\\n        ${y?"invStdOutput[global_idx] = 1.0 / variance;":""}\\n        for (var i: u32 = 0; i < hiddenSize; i++) {\\n          output[offset + i] = (output[offset + i] - mean) / variance * gamma[i] + ${f?"beta[i]":"0.0"};\\n        }\\n      }`,outputs:w,dispatchGroup:()=>({x:Math.ceil(c/d/64)})})})(s,e,t,n,a)})})(e.inputs,t,e.outputCount,!1),{outputs:n})},t.parseSkipLayerNormAttributes=e=>{const t=e.epsilon;return(0,a.createAttributeWithCacheKey)({epsilon:t})}},5101:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseSliceAttributes=t.slice=void 0;const r=n(6952),a=n(387),i=n(1163),o=n(2075),s=(e,t)=>{const n=[];if(e.length>t)if(7===e[t].dataType)e[t].getBigInt64Array().forEach((e=>n.push(Number(e))));else{if(6!==e[t].dataType)throw new Error(`Input ${t} must be an array of int32 or int64`);e[t].getInt32Array().forEach((e=>n.push(Number(e))))}return n},u=(e,t,n,r,a)=>{let i=e;return e<0&&(i+=n[r[t]]),a[t]<0?Math.max(0,Math.min(i,n[r[t]]-1)):Math.max(0,Math.min(i,n[r[t]]))};t.slice=(e,t)=>{((e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(0!==t.axes.length){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach(((t,n)=>{if(6!==e[n+1].dataType&&7!==e[n+1].dataType)throw new Error(`Input ${n} must be an array of int32 or int64`)}))})(e.inputs,t);const n=((e,t)=>{const n=((e,t)=>{if(e.length>1){const t=s(e,1),n=s(e,2);let r=s(e,3);return 0===r.length&&(r=[...Array(e[0].dims.length).keys()]),(0,a.createAttributeWithCacheKey)({starts:t,ends:n,axes:r})}return t})(e,t),l={name:"Slice",inputTypes:[i.GpuDataType.default],cacheHint:n.cacheKey+(e.length>4?"steps_"+e[4].dims.toString():"")};return Object.assign(Object.assign({},l),{get:()=>((e,t,n)=>{const a=t[0].dims,l=r.ShapeUtil.size(a),c=n.axes.length>0?r.ShapeUtil.normalizeAxes(n.axes,a.length):[...Array(a.length).keys()];let d=s(t,4);d.forEach((e=>0!==e||(()=>{throw new Error("step cannot be 0")}))),0===d.length&&(d=Array(c.length).fill(1));const p=n.starts.map(((e,t)=>u(e,t,a,c,d))),f=n.ends.map(((e,t)=>u(e,t,a,c,d)));if(c.length!==a.length)for(let e=0;e<a.length;++e)c.includes(e)||(p.splice(e,0,0),f.splice(e,0,a[e]),d.splice(e,0,1));const h=d.map((e=>Math.sign(e)));d.forEach(((e,t,n)=>{if(e<0){const r=(f[t]-p[t])/e,a=p[t],i=a+r*d[t];p[t]=i,f[t]=a,n[t]=-e}}));const g=a.slice(0);c.forEach(((e,t)=>{g[e]=Math.ceil((f[e]-p[e])/d[e])}));const m={dims:g,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default},y=(0,o.outputVariable)("output",t[0].dataType,g),b=(0,o.inputVariable)("input",t[0].dataType,a),v=r.ShapeUtil.size(g);return Object.assign(Object.assign({},e),{getShaderSource:e=>`\\n      ${e.declareVariables(b,y)}\\n        const signs = array<i32, ${h.length}>(${h.map((e=>`${e}i`)).join(",")});\\n        const starts = array<u32, ${p.length}>(${p.map((e=>`${e}u`)).join(",")});\\n        const ends = array<u32, ${f.length}>(${f.map((e=>`${e}u`)).join(",")});\\n        const steps = array<u32, ${d.length}>(${d.map((e=>`${e}u`)).join(",")});\\n        const inputShape = array<u32, ${a.length}>(${a.map((e=>`${e}u`)).join(",")});\\n\\n        ${((e,t,n,r)=>`fn calculateInputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {\\n          var inputIndices: ${e.type.indices};\\n          var carry = 0u;\\n          for (var i = ${n.length}; i >= 0; i--) {\\n            var outputIndex = ${1===r.length?"outputIndices":"outputIndices[i]"};\\n            var inputIndex = outputIndex * steps[i] + starts[i] + carry;\\n            carry = inputIndex / inputShape[i];\\n            inputIndex = inputIndex % inputShape[i];\\n            if (signs[i] < 0) {\\n              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];\\n            }\\n            ${1===n.length?"inputIndices":"inputIndices[i]"} = inputIndex;\\n          }\\n          return inputIndices;\\n      }`)(b,y,a,g)}\\n        ${e.mainStart()}\\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes(v)}\\n          let outputIndices = ${y.offsetToIndices("global_idx")};\\n          let inputIndices = calculateInputIndices(outputIndices);\\n          ${y.setByOffset("global_idx",b.getByIndices("inputIndices"))}\\n      }`,outputs:[m],dispatchGroup:()=>({x:Math.ceil(l/64)})})})(l,e,n)})})(e.inputs,t),l=n.get();if(!(r.ShapeUtil.size(l.outputs[0].dims)>0))throw new Error("slice: output size is 0");e.compute(n,{inputs:[0]})},t.parseSliceAttributes=e=>{const t=e.starts,n=e.ends,r=e.axes;return(0,a.createAttributeWithCacheKey)({starts:t,ends:n,axes:r})}},6198:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseSoftmaxAttributes=t.softmax=t.softmaxProgramMetadata=void 0;const r=n(6952),a=n(387),i=n(1163);t.softmaxProgramMetadata={name:"Softmax",inputTypes:[i.GpuDataType.default]},t.softmax=(e,n)=>{(e=>{if(!e||1!==e.length)throw new Error("Softmax op requires 1 input.");if(1!==e[0].dataType)throw new Error("Softmax input needs to be float.")})(e.inputs),e.compute(Object.assign(Object.assign({},t.softmaxProgramMetadata),{cacheHint:n.cacheKey,get:()=>((e,n)=>{const a="f32",o=e.dims,s=r.ShapeUtil.size(o);let u=n.axis;if(u<0&&(u=o.length+u),u<o.length-1)throw new Error("softmax only supports last axis for now.");const l=o[u],c=s/l;return Object.assign(Object.assign({},t.softmaxProgramMetadata),{outputs:[{dims:o,dataType:e.dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:e=>`\\n      var<workgroup> rowMaxShared : ${a};\\n      var<workgroup> rowSumShared : ${a};\\n      var<workgroup> threadShared : array<${a}, 64>;\\n\\n      @group(0) @binding(0) var<storage, read> x : array<${a}>;\\n      @group(0) @binding(1) var<storage, read_write> result : array<${a}>;\\n\\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${a} {\\n        let index = row * row_stride + col;\\n        return x[index];\\n      }\\n\\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${a}) {\\n        let index = row * row_stride + col;\\n        result[index] = value;\\n      }\\n\\n      @compute @workgroup_size(64, 1, 1)\\n      fn main(@builtin(local_invocation_id) local_id : vec3<u32>, @builtin(global_invocation_id) global_id : vec3u) {\\n        let gindex = i32(global_id.x);\\n        let lindex = i32(local_id.x);\\n        const wg = 64;\\n        let row = gindex / wg;\\n        let cols = ${l};\\n        let row_stride : i32 = ${l};\\n\\n        // find the rows max\\n        var threadMax = -3.402823e+38f; // 6.2.4 in wgsl spec\\n        for (var col = lindex; col < cols; col += wg) {\\n          let value = getValue(row, col, row_stride);\\n          threadMax = max(threadMax, value);\\n        }\\n        if (lindex < cols) {\\n          threadShared[lindex] = threadMax;\\n        }\\n        workgroupBarrier();\\n\\n        var reduceSize = min(cols, wg);\\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\\n          reduceSize = currSize + (reduceSize & 1);\\n          if (lindex < currSize) {\\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\\n          }\\n          workgroupBarrier();\\n        }\\n        if (lindex == 0) {\\n          rowMaxShared = threadShared[0];\\n        }\\n        workgroupBarrier();\\n\\n        // find the rows sum\\n        var threadSum = 0.0;\\n        for (var col = lindex; col < cols; col += wg) {\\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\\n          threadSum += subExp;\\n        }\\n        threadShared[lindex] = threadSum;\\n        workgroupBarrier();\\n\\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\\n          if (lindex < currSize) {\\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\\n          }\\n          workgroupBarrier();\\n        }\\n        if (lindex == 0) {\\n          rowSumShared = threadShared[0];\\n        }\\n        workgroupBarrier();\\n\\n        // calculate final value for each element in the row\\n        for (var col = lindex; col < cols; col += wg) {\\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\\n          setValue(row, col, row_stride, value);\\n        }\\n      }`,dispatchGroup:()=>({x:c})})})(e.inputs[0],n)}))},t.parseSoftmaxAttributes=e=>(0,a.createAttributeWithCacheKey)({axis:e.axis})},2067:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseSplitAttributes=t.split=void 0;const r=n(6952),a=n(387),i=n(1163),o=n(2075);t.split=(e,t)=>{(e=>{if(!e||e.length<1)throw new Error("too few inputs")})(e.inputs),e.compute(((e,t)=>{const n=1===e.length?t:((e,t)=>{const n=[];let r=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach((e=>n.push(Number(e)))),r=n.length),(0,a.createAttributeWithCacheKey)({numOutputs:r,axis:t.axis,splitSizes:n})})(e,t),s={name:"Split",inputTypes:[i.GpuDataType.default],cacheHint:n.cacheKey};return Object.assign(Object.assign({},s),{get:()=>((e,t,n)=>{const a=t[0].dims,s=r.ShapeUtil.size(a),u=t[0].dataType,l=a.length,c=n.axis,d=c<0?a.length+c:c,p=new Array(n.numOutputs),f=(0,o.inputVariable)("input",u,a),h=new Array(n.numOutputs),g=[],m=[];let y=0;for(let e=0;e<n.numOutputs;e++){y+=n.splitSizes[e],h[e]=y;const r=a.slice();r[n.axis]=n.splitSizes[e],m.push(r),p[e]=(0,o.outputVariable)(`output${e}`,u,m[e]),g.push({dims:m[e],dataType:t[0].dataType,gpuDataType:i.GpuDataType.default})}const b=l<2?"indices":`indices[${d}]`;return Object.assign(Object.assign({},e),{getShaderSource:e=>{return`\\n  ${e.declareVariables(f,...p)}\\n  const sizeInConcatAxis = array<u32, ${h.length}>(${h.map((e=>`${e}u`)).join(",")});\\n  ${t=h.length,`\\nfn calculateOutputIndex(index: u32) -> u32 {\\n    for (var i: u32 = 0u; i < ${t}u; i += 1u ) {\\n    if (index < sizeInConcatAxis[i]) {\\n        return i;\\n    }\\n    }\\n    return ${t}u;\\n}`}\\n  ${(e=>{const t=e.length,n=[];for(let r=0;r<t;++r){const a=e[r].setByIndices("indices","input[global_idx]");1===t?n.push(a):0===r?n.push(`if (outputNumber == ${r}u) { ${a} }`):r===t-1?n.push(`else { ${a} }`):n.push(`else if (outputNumber == ${r}) { ${a} }`)}return`\\n      fn writeBufferData(outputNumber: u32, indices: ${e[0].type.indices}, global_idx: u32) {\\n        ${n.join("\\n")}\\n      }`})(p)}\\n\\n  ${e.mainStart()}\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(s)}\\n\\n    var indices = ${f.offsetToIndices("global_idx")};\\n    let outputNumber = calculateOutputIndex(${b});\\n    if (outputNumber != 0) {\\n        ${b} -= sizeInConcatAxis[outputNumber - 1u];\\n    }\\n    writeBufferData(outputNumber, indices, global_idx);\\n  }`;var t},outputs:g,dispatchGroup:()=>({x:Math.ceil(s/64)})})})(s,[e[0]],n)})})(e.inputs,t),{inputs:[0]})},t.parseSplitAttributes=e=>{const t=e.axis,n=e.splitSizes,r=e.numOutputs<0?n.length:e.numOutputs;if(r!==n.length)throw new Error("numOutputs and splitSizes lengh must be equal");return(0,a.createAttributeWithCacheKey)({axis:t,numOutputs:r,splitSizes:n})}},8699:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tile=t.createTileProgramInfo=t.tileProgramMetadata=void 0;const r=n(6952),a=n(1163),i=n(2075);t.tileProgramMetadata={name:"Tile",inputTypes:[a.GpuDataType.default]};const o=e=>Array.from(e.getBigInt64Array(),Number);t.createTileProgramInfo=(e,t)=>{const n=t[0].dims,s=o(t[1]),u=((e,t)=>{const n=[];for(let r=0;r<e.length;++r)n.push(e[r]*t[r]);return n})(n,s),l=r.ShapeUtil.size(u),c=t[0].dataType,d=(0,i.inputVariable)("input",c,n),p=(0,i.outputVariable)("output",c,u);return Object.assign(Object.assign({},e),{outputs:[{dims:u,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>`\\n      const inputShape = ${d.indices(...n)};\\n      ${e.declareVariables(d,p)}\\n      ${e.mainStart()}\\n      ${e.guardAgainstOutOfBoundsWorkgroupSizes(l)}\\n      let outputIndices = ${p.offsetToIndices("global_idx")};\\n      var inputIndices: ${d.type.indices};\\n      for (var i = 0; i < ${n.length}; i++) {\\n        let inputDimValue = ${p.indicesGet("outputIndices","i")}  % ${d.indicesGet("inputShape","i")};\\n\\n        ${d.indicesSet("inputIndices","i","inputDimValue")}\\n      }\\n      ${p.setByOffset("global_idx",d.getByIndices("inputIndices"))}\\n    }`,dispatchGroup:()=>({x:Math.ceil(l/64)})})},t.tile=e=>{(e=>{if(!e||2!==e.length)throw new Error("Tile requires 2 inputs.");if(1!==e[0].dataType&&6!==e[0].dataType&&12!==e[0].dataType)throw new Error("Tile only support float, int32, and uint32 data types");if(7!==e[1].dataType)throw new Error("Tile `repeats` input should be of int64 data type");if(1!==e[1].dims.length)throw new Error("Tile `repeats` input should be 1-D");if(o(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")})(e.inputs);const n=o(e.inputs[1]).toString();e.compute(Object.assign(Object.assign({},t.tileProgramMetadata),{cacheHint:n,get:()=>(0,t.createTileProgramInfo)(t.tileProgramMetadata,e.inputs)}),{inputs:[0]})}},2625:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseTransposeAttributes=t.transpose=t.createTransposeProgramInfo=t.transposeProgramMetadata=void 0;const r=n(6952),a=n(387),i=n(1163),o=n(2075);t.transposeProgramMetadata={name:"Transpose",inputTypes:[i.GpuDataType.default]};const s=(e,t)=>t&&t.length!==e.length?[...e.keys()].reverse():t;t.createTransposeProgramInfo=(e,n)=>{const a=e.dataType,u=e.dims,l=s(u,n),c=((e,t)=>r.ShapeUtil.sortBasedOnPerm(e,s(e,t)))(u,l),d=u.length,p=r.ShapeUtil.size(c),f=(0,o.outputVariable)("output",a,c),h=(0,o.inputVariable)("a",a,u);return Object.assign(Object.assign({},t.transposeProgramMetadata),{outputs:[{dims:c,dataType:e.dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:e=>`\\n  ${e.declareVariables(h,f)}\\n\\n  ${((e,t,n,r)=>{const a=[];a.push(`fn perm(i: ${r.type.indices}) -> ${n.type.indices} {\\n    var a: ${n.type.indices};`);for(let r=0;r<t;++r)a.push(n.indicesSet("a",e[r],`i[${r}]`));return a.push("return a;}"),a.join("\\n")})(l,d,h,f)}\\n\\n  ${e.mainStart()}\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(p)}\\n\\n    let indices = ${f.offsetToIndices("global_idx")};\\n    let aIndices = perm(indices);\\n\\n    ${f.setByOffset("global_idx",h.getByIndices("aIndices"))}\\n  }`,dispatchGroup:()=>({x:Math.ceil(p/64)})})},t.transpose=(e,n)=>{(e=>{if(!e||1!==e.length)throw new Error("Transpose requires 1 input.");if(1!==e[0].dataType&&6!==e[0].dataType&&12!==e[0].dataType)throw new Error("Transpose only support float, int32, and uint32 data types")})(e.inputs),e.compute(Object.assign(Object.assign({},t.transposeProgramMetadata),{cacheHint:n.cacheKey,get:()=>(0,t.createTransposeProgramInfo)(e.inputs[0],n.perm)}))},t.parseTransposeAttributes=e=>(0,a.createAttributeWithCacheKey)({perm:e.perm})},9302:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.log=t.thresholdedRelu=t.tanh=t.tan=t.sqrt=t.sinh=t.sin=t.sigmoid=t.relu=t.reciprocal=t.neg=t.leakyRelu=t.gelu=t.floor=t.exp=t.erf=t.erfImpl=t.elu=t.parseAlphaAttributes=t.cosh=t.cos=t.ceil=t.clip=t.clipV10=t.cast=t.parseCastAttributes=t.atanh=t.atan=t.asinh=t.asin=t.acosh=t.acos=t.abs=void 0;const r=n(6952),a=n(387),i=n(1163),o=n(2075),s=(e,t,n,a,s,u=e.dataType)=>{const l={name:t,inputTypes:[i.GpuDataType.default],cacheHint:s};return Object.assign(Object.assign({},l),{get:()=>((e,t,n,a,s)=>Object.assign(Object.assign({},e),{getShaderSource:e=>((e,t,n,r,a,i)=>{const s=Math.ceil(t/4);let u="";u="string"==typeof a?`${a}(a)`:a("a");const l=(0,o.inputVariable)("inputData",n,[s],4),c=(0,o.outputVariable)("outputData",r,[s],4);return`\\n  ${e.declareVariables(l,c)}\\n\\n  ${null!=i?i:""}\\n\\n  ${e.mainStart()}\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(s)}\\n\\n    let a = ${l.getByOffset("global_idx")};\\n    ${c.setByOffset("global_idx",u)}\\n  }`})(e,r.ShapeUtil.size(t.dims),t.dataType,n,a,s),outputs:[{dims:t.dims,dataType:n,gpuDataType:i.GpuDataType.default}],dispatchGroup:e=>({x:Math.ceil(r.ShapeUtil.size(e[0].dims)/64/4)})}))(l,e,u,n,a)})};t.abs=e=>{e.compute(s(e.inputs[0],"Abs","abs"))},t.acos=e=>{e.compute(s(e.inputs[0],"Acos","acos"))},t.acosh=e=>{e.compute(s(e.inputs[0],"Acosh","acosh"))},t.asin=e=>{e.compute(s(e.inputs[0],"Asin","asin"))},t.asinh=e=>{e.compute(s(e.inputs[0],"Asinh","asinh"))},t.atan=e=>{e.compute(s(e.inputs[0],"Atan","atan"))},t.atanh=e=>{e.compute(s(e.inputs[0],"Atanh","atanh"))},t.parseCastAttributes=e=>(0,a.createAttributeWithCacheKey)(e),t.cast=(e,t)=>{let n;switch(t.to){case 1:n="vec4<f32>";break;case 12:n="vec4<u32>";break;case 6:n="vec4<i32>";break;case 9:n="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute(s(e.inputs[0],"Cast",n,void 0,t.cacheKey,t.to))},t.clipV10=(e,t)=>{e.compute(s(e.inputs[0],"Clip",(e=>`clamp(${e}, clip_min_, clip_max_)`),`\\n    const clip_min_: vec4<f32> = vec4(f32(${t.min}));\\n    const clip_max_: vec4<f32> = vec4(f32(${t.max}));\\n`,t.cacheKey),{inputs:[0]})},t.clip=e=>{const n=(e=>{const t=e.length>=2?e[1].getFloat32Array()[0]:r.MIN_CLIP,n=e.length>=3?e[2].getFloat32Array()[0]:r.MAX_CLIP;return(0,a.createAttributeWithCacheKey)({min:t,max:n})})(e.inputs);(0,t.clipV10)(e,n)},t.ceil=e=>{e.compute(s(e.inputs[0],"Ceil","ceil"))},t.cos=e=>{e.compute(s(e.inputs[0],"Cos","cos"))},t.cosh=e=>{e.compute(s(e.inputs[0],"Cosh","cosh"))},t.parseAlphaAttributes=e=>(0,a.createAttributeWithCacheKey)(e),t.elu=(e,t)=>{e.compute(s(e.inputs[0],"Elu",(e=>`elu_vf32(${e})`),`\\n  const elu_alpha_: f32 = f32(${t.alpha});\\n\\n  fn elu_f32(a: f32) -> f32 {\\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\\n  }\\n\\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\\n  }`,t.cacheKey))},t.erfImpl=e=>`\\nconst r0: f32 = 0.3275911;\\nconst r1: f32 = 0.254829592;\\nconst r2: f32 = -0.284496736;\\nconst r3: f32 = 1.421413741;\\nconst r4: f32 = -1.453152027;\\nconst r5: f32 = 1.061405429;\\n\\nfn erf_vf32(v: ${e}) -> ${e} {\\n  let absv = abs(v);\\n  let x = 1.0 / (1.0 + r0 * absv);\\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\\n}`,t.erf=e=>{e.compute(s(e.inputs[0],"Erf",(e=>`erf_vf32(${e})`),(0,t.erfImpl)("vec4<f32>")))},t.exp=e=>{e.compute(s(e.inputs[0],"Exp","exp"))},t.floor=e=>{e.compute(s(e.inputs[0],"Floor","floor"))},t.gelu=e=>{e.compute(s(e.inputs[0],"Gelu",(e=>`0.5 * ${e} * (1.0 + erf_vf32(${e} * 0.7071067811865475))`),(0,t.erfImpl)("vec4<f32>")))},t.leakyRelu=(e,t)=>{e.compute(s(e.inputs[0],"LeakyRelu",(e=>`select(leaky_relu_alpha_ * ${e}, ${e}, ${e} >= vec4<f32>(0.0))`),`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},t.neg=e=>{e.compute(s(e.inputs[0],"Neg",(e=>`-${e}`)))},t.reciprocal=e=>{e.compute(s(e.inputs[0],"Reciprocal",(e=>`1.0/${e}`)))},t.relu=e=>{e.compute(s(e.inputs[0],"Relu",(e=>`select(vec4<f32>(0.0), ${e}, ${e} > vec4<f32>(0.0))`)))},t.sigmoid=e=>{e.compute(s(e.inputs[0],"Sigmoid",(e=>`(1.0 / (1.0 + exp(-${e})))`)))},t.sin=e=>{e.compute(s(e.inputs[0],"Sin","sin"))},t.sinh=e=>{e.compute(s(e.inputs[0],"Sinh","sinh"))},t.sqrt=e=>{e.compute(s(e.inputs[0],"Sqrt","sqrt"))},t.tan=e=>{e.compute(s(e.inputs[0],"Tan","tan"))},t.tanh=e=>{e.compute(s(e.inputs[0],"Tanh","tanh"))},t.thresholdedRelu=(e,t)=>(e.compute(s(e.inputs[0],"ThresholdedRelu",(e=>`select(vec4<f32>(0.0), ${e}, ${e} > thresholded_relu_alpha_)`),`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0),t.log=e=>{e.compute(s(e.inputs[0],"Log","log"))}},8305:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProgramManager=void 0;const r=n(4955),a=n(2075);t.ProgramManager=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,t){this.repo.set(e,t)}run(e,t,n,r){const a=this.backend.device,i=this.backend.getComputePassEncoder(),o=this.backend.supportTimestampQuery&&"default"===this.backend.env.webgpu.profilingMode;o&&i.writeTimestamp(this.backend.profilingQuerySet,0),i.setPipeline(e.computePipeline);const s=[];for(const e of t)s.push({binding:s.length,resource:{buffer:e.buffer}});for(const e of n)s.push({binding:s.length,resource:{buffer:e.buffer}});const u=a.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:s});if(i.setBindGroup(0,u),i.dispatchWorkgroups(...r),this.backend.pendingDispatchNumber++,o){i.writeTimestamp(this.backend.profilingQuerySet,1),null==this.backend.profilingQueryData&&(this.backend.profilingQueryData=this.backend.gpuDataManager.create(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));const e=this.backend.gpuDataManager.create(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet,0,2,this.backend.profilingQueryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.profilingQueryData.buffer,0,e.buffer,0,16),this.backend.flush();const t=this.backend.currentKernelId,n=this.backend.kernels.get(t)[0];e.buffer.mapAsync(GPUMapMode.READ).then((()=>{const r=new BigUint64Array(e.buffer.getMappedRange()),a=r[0],i=r[1];e.buffer.unmap(),void 0===this.backend.profilingTimeBase&&(this.backend.profilingTimeBase=a);const o=Number(a-this.backend.profilingTimeBase),s=Number(i-this.backend.profilingTimeBase);if(!Number.isSafeInteger(o)||!Number.isSafeInteger(s))throw new RangeError("incorrect timestamp range");this.backend.gpuDataManager.release(e.id),console.log(`[profiling] kernel "${t}|${n}" execution time: ${s-o} ns`)}))}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(e,t){const n=this.backend.device,i=(0,a.createShaderHelper)(t),o=e.getShaderSource(i),s=`${i.additionalImplementations}\\n${o}`,u=n.createShaderModule({code:s});return(0,r.LOG_DEBUG)("verbose",(()=>`[WebGPU] shader code: ${s}`)),{programInfo:e,computePipeline:n.createComputePipeline({compute:{module:u,entryPoint:"main"},layout:"auto"})}}normalizeDispatchGroupSize(e){const t="number"==typeof e?e:e.x,n="number"==typeof e?1:e.y||1,r="number"==typeof e?1:e.z||1,a=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=a&&n<=a&&r<=a)return[t,n,r];const i=t*n*r;let o=Math.ceil(Math.sqrt(i));if(o>a){if(o=Math.ceil(Math.cbrt(i)),o>a)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[o,o,o]}return[o,o,1]}}},1163:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.GpuDataType=void 0,(n=t.GpuDataType||(t.GpuDataType={}))[n.default=0]="default",n[n.upload=1]="upload",n[n.profile=2]="profile"},7918:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setRunOptions=void 0;const r=n(263),a=n(1497);t.setRunOptions=e=>{const t=(0,r.getInstance)();let n=0;const i=[],o=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))o.logSeverityLevel=2;else if("number"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))o.logVerbosityLevel=0;else if("number"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(o.terminate=!1);let r=0;return void 0!==(null==e?void 0:e.tag)&&(r=(0,a.allocWasmString)(e.tag,i)),n=t._OrtCreateRunOptions(o.logSeverityLevel,o.logVerbosityLevel,!!o.terminate,r),0===n&&(0,a.checkLastError)("Can\'t create run options."),void 0!==(null==e?void 0:e.extra)&&(0,a.iterateExtraOptions)(e.extra,"",new WeakSet,((e,r)=>{const o=(0,a.allocWasmString)(e,i),s=(0,a.allocWasmString)(r,i);0!==t._OrtAddRunConfigEntry(n,o,s)&&(0,a.checkLastError)(`Can\'t set a run config entry: ${e} - ${r}.`)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),i.forEach((e=>t._free(e))),e}}},7622:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setSessionOptions=void 0;const r=n(263),a=n(1497);t.setSessionOptions=e=>{var t,n,i,o;const s=(0,r.getInstance)();let u=0;const l=[],c=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some((e=>"webgpu"===("string"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(c);try{const e=(e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=c.graphOptimizationLevel)&&void 0!==t?t:"all"),d=(e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(n=c.executionMode)&&void 0!==n?n:"sequential"),p="string"==typeof c.logId?(0,a.allocWasmString)(c.logId,l):0,f=null!==(i=c.logSeverityLevel)&&void 0!==i?i:2;if(!Number.isInteger(f)||f<0||f>4)throw new Error(`log serverity level is not valid: ${f}`);const h=null!==(o=c.logVerbosityLevel)&&void 0!==o?o:0;if(!Number.isInteger(h)||h<0||h>4)throw new Error(`log verbosity level is not valid: ${h}`);const g="string"==typeof c.optimizedModelFilePath?(0,a.allocWasmString)(c.optimizedModelFilePath,l):0;return u=s._OrtCreateSessionOptions(e,!!c.enableCpuMemArena,!!c.enableMemPattern,d,!!c.enableProfiling,0,p,f,h,g),0===u&&(0,a.checkLastError)("Can\'t create session options."),c.executionProviders&&((e,t,n)=>{for(const i of t){let t="string"==typeof i?i:i.name;switch(t){case"xnnpack":t="XNNPACK";break;case"webnn":if(t="WEBNN","string"!=typeof i){const t=i;if(null==t?void 0:t.deviceType){const i=(0,a.allocWasmString)("deviceType",n),o=(0,a.allocWasmString)(t.deviceType,n);0!==(0,r.getInstance)()._OrtAddSessionConfigEntry(e,i,o)&&(0,a.checkLastError)(`Can\'t set a session config entry: \'deviceType\' - ${t.deviceType}.`)}if(null==t?void 0:t.powerPreference){const i=(0,a.allocWasmString)("powerPreference",n),o=(0,a.allocWasmString)(t.powerPreference,n);0!==(0,r.getInstance)()._OrtAddSessionConfigEntry(e,i,o)&&(0,a.checkLastError)(`Can\'t set a session config entry: \'powerPreference\' - ${t.powerPreference}.`)}}break;case"webgpu":t="JS";break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${t}`)}const o=(0,a.allocWasmString)(t,n);0!==(0,r.getInstance)()._OrtAppendExecutionProvider(e,o)&&(0,a.checkLastError)(`Can\'t append execution provider: ${t}.`)}})(u,c.executionProviders,l),void 0!==c.extra&&(0,a.iterateExtraOptions)(c.extra,"",new WeakSet,((e,t)=>{const n=(0,a.allocWasmString)(e,l),r=(0,a.allocWasmString)(t,l);0!==s._OrtAddSessionConfigEntry(u,n,r)&&(0,a.checkLastError)(`Can\'t set a session config entry: ${e} - ${t}.`)})),[u,l]}catch(e){throw 0!==u&&s._OrtReleaseSessionOptions(u),l.forEach((e=>s._free(e))),e}}},7917:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case"float16":case"uint16":return Uint16Array;case"float32":return Float32Array;case"uint8":case"bool":return Uint8Array;case"int8":return Int8Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},1259:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initRuntime=void 0;const r=n(7918),a=n(7622),i=n(7917),o=n(263),s=n(1497);t.initRuntime=async e=>{var t,r;t=e.wasm.numThreads,r=(0,i.logLevelStringToEnum)(e.logLevel),0!==(0,o.getInstance)()._OrtInit(t,r)&&(0,s.checkLastError)("Can\'t initialize onnxruntime.");{const t=n(7675).S;await t((0,o.getInstance)(),e)}};const u=new Map;t.createSessionAllocate=e=>{const t=(0,o.getInstance)(),n=t._malloc(e.byteLength);if(0===n)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,n),[n,e.byteLength]},t.createSessionFinalize=(e,t)=>{const n=(0,o.getInstance)();let r=0,i=0,l=[];const c=[],d=[];try{[i,l]=(0,a.setSessionOptions)(t),r=n._OrtCreateSession(e[0],e[1],i),0===r&&(0,s.checkLastError)("Can\'t create a session.");const[p,f]=(e=>{const t=(0,o.getInstance)(),n=t.stackSave();try{const n=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,n,n+4)&&(0,s.checkLastError)("Can\'t get session input/output count."),[t.HEAP32[n/4],t.HEAP32[n/4+1]]}finally{t.stackRestore(n)}})(r),h=[],g=[];for(let e=0;e<p;e++){const t=n._OrtGetInputName(r,e);0===t&&(0,s.checkLastError)("Can\'t get an input name."),c.push(t),h.push(n.UTF8ToString(t))}for(let e=0;e<f;e++){const t=n._OrtGetOutputName(r,e);0===t&&(0,s.checkLastError)("Can\'t get an output name."),d.push(t),g.push(n.UTF8ToString(t))}return u.set(r,[r,c,d]),[r,h,g]}catch(e){throw c.forEach((e=>n._OrtFree(e))),d.forEach((e=>n._OrtFree(e))),0!==r&&n._OrtReleaseSession(r),e}finally{n._free(e[0]),0!==i&&n._OrtReleaseSessionOptions(i),l.forEach((e=>n._free(e)))}},t.createSession=(e,n)=>{const r=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(r,n)},t.releaseSession=e=>{const t=(0,o.getInstance)(),n=u.get(e);if(!n)throw new Error(`cannot release session. invalid session id: ${e}`);const[r,a,i]=n;a.forEach((e=>t._OrtFree(e))),i.forEach((e=>t._OrtFree(e))),t._OrtReleaseSession(r),u.delete(e)},t.run=async(e,t,n,a,l)=>{const c=(0,o.getInstance)(),d=u.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);const[p,f,h]=d,g=t.length,m=a.length;let y=0,b=[];const v=[],w=[];try{[y,b]=(0,r.setRunOptions)(l);for(let e=0;e<g;e++){const t=n[e][0],r=n[e][1],a=n[e][2];let o,u;if(Array.isArray(a)){u=4*a.length,o=c._malloc(u),w.push(o);let e=o/4;for(let t=0;t<a.length;t++){if("string"!=typeof a[t])throw new TypeError(`tensor data at index ${t} is not a string`);c.HEAPU32[e++]=(0,s.allocWasmString)(a[t],w)}}else u=a.byteLength,o=c._malloc(u),w.push(o),c.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),o);const l=c.stackSave(),d=c.stackAlloc(4*r.length);try{let n=d/4;r.forEach((e=>c.HEAP32[n++]=e));const a=c._OrtCreateTensor((0,i.tensorDataTypeStringToEnum)(t),o,u,d,r.length);0===a&&(0,s.checkLastError)(`Can\'t create tensor for input[${e}].`),v.push(a)}finally{c.stackRestore(l)}}const e=c.stackSave(),o=c.stackAlloc(4*g),u=c.stackAlloc(4*g),d=c.stackAlloc(4*m),$=c.stackAlloc(4*m);try{let e=o/4,n=u/4,r=d/4,l=$/4;for(let r=0;r<g;r++)c.HEAPU32[e++]=v[r],c.HEAPU32[n++]=f[t[r]];for(let e=0;e<m;e++)c.HEAPU32[r++]=0,c.HEAPU32[l++]=h[a[e]];let b=c._OrtRun(p,u,o,g,$,m,d,y);const w=c.jsepRunPromise;w&&void 0!==w.then&&(b=await w);const x=[];0!==b&&(0,s.checkLastError)("failed to call OrtRun().");for(let e=0;e<m;e++){const t=c.HEAPU32[d/4+e],n=c.stackSave(),r=c.stackAlloc(16);let a,o=0;try{b=c._OrtGetTensorData(t,r,r+4,r+8,r+12),0!==b&&(0,s.checkLastError)(`Can\'t access output tensor data on index ${e}.`);let n=r/4;const u=c.HEAPU32[n++];o=c.HEAPU32[n++];const l=c.HEAPU32[n++],d=c.HEAPU32[n++],p=[];for(let e=0;e<d;e++)p.push(c.HEAPU32[l/4+e]);c._OrtFree(l);const f=0===p.length?1:p.reduce(((e,t)=>e*t));if(a=(0,i.tensorDataTypeEnumToString)(u),"string"===a){const e=[];let t=o/4;for(let n=0;n<f;n++){const r=c.HEAPU32[t++],a=n===f-1?void 0:c.HEAPU32[t]-r;e.push(c.UTF8ToString(r,a))}x.push([a,p,e])}else{const e=new((0,i.tensorTypeToTypedArrayConstructor)(a))(f);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(c.HEAPU8.subarray(o,o+e.byteLength)),x.push([a,p,e])}}finally{c.stackRestore(n),"string"===a&&o&&c._free(o),c._OrtReleaseTensor(t)}}return x}finally{c.stackRestore(e)}}finally{v.forEach((e=>c._OrtReleaseTensor(e))),w.forEach((e=>c._free(e))),0!==y&&c._OrtReleaseRunOptions(y),b.forEach((e=>c._free(e)))}},t.endProfiling=e=>{const t=(0,o.getInstance)(),n=u.get(e);if(!n)throw new Error("invalid session id");const r=n[0],a=t._OrtEndProfiling(r);0===a&&(0,s.checkLastError)("Can\'t get an profile file name."),t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const n of e){const e=n[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const o=i(n(6449)),s=n(9377),u=n(5711);let l,c=!1,d=!1,p=!1;t.initializeWebAssembly=async e=>{if(c)return Promise.resolve();if(d)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(p)throw new Error("previous call to \'initializeWebAssembly()\' failed.");d=!0;const t=e.initTimeout,r=e.numThreads,a=e.simd,i=r>1&&(()=>{try{return"undefined"!=typeof SharedArrayBuffer&&("undefined"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),f=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),h=e.wasmPaths,g="string"==typeof h?h:void 0,m=((e,t)=>t?e?"ort-wasm-simd-threaded.wasm":"ort-wasm-threaded.wasm":e?"ort-wasm-simd.wasm":"ort-wasm.wasm")(f,i),y="object"==typeof h?h[m]:void 0;let b=!1;const v=[];if(t>0&&v.push(new Promise((e=>{setTimeout((()=>{b=!0,e()}),t)}))),v.push(new Promise(((e,t)=>{const r=i?u:s,a={locateFile:(e,t)=>{if(i&&e.endsWith(".worker.js")&&"undefined"!=typeof Blob)return URL.createObjectURL(new Blob([n(4154)],{type:"text/javascript"}));if(e.endsWith(".wasm")){if(y)return y;const e=null!=g?g:t;return"ort-wasm-simd.wasm"===m?e+"ort-wasm-simd.jsep.wasm":"ort-wasm-simd-threaded.wasm"===m?e+"ort-wasm-simd-threaded.jsep.wasm":e+m}return t+e}};if(i)if("undefined"==typeof Blob)a.mainScriptUrlOrBlob=o.join(__dirname,"ort-wasm-threaded.js");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:"text/javascript"})}r(a).then((t=>{d=!1,c=!0,l=t,e()}),(e=>{d=!1,p=!0,t(e)}))}))),await Promise.race(v),b)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},t.getInstance=()=>{if(c&&l)return l;throw new Error("WebAssembly is not initialized yet.")},t.dispose=()=>{var e;!c||d||p||(d=!0,null===(e=l.PThread)||void 0===e||e.terminateAllThreads(),l=void 0,d=!1,c=!1,p=!0)}},1497:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.checkLastError=t.iterateExtraOptions=t.allocWasmString=void 0;const r=n(263);t.allocWasmString=(e,t)=>{const n=(0,r.getInstance)(),a=n.lengthBytesUTF8(e)+1,i=n._malloc(a);return n.stringToUTF8(e,i,a),t.push(i),i},t.iterateExtraOptions=(e,n,r,a)=>{if("object"==typeof e&&null!==e){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach((([e,i])=>{const o=n?n+e:e;if("object"==typeof i)(0,t.iterateExtraOptions)(i,o+".",r,a);else if("string"==typeof i||"number"==typeof i)a(o,i.toString());else{if("boolean"!=typeof i)throw new Error("Can\'t handle extra config type: "+typeof i);a(o,i?"1":"0")}}))},t.checkLastError=e=>{const t=(0,r.getInstance)(),n=t.stackSave();try{const n=t.stackAlloc(8);t._OrtGetLastError(n,n+4);const r=t.HEAP32[n/4],a=t.HEAPU32[n/4+1],i=a?t.UTF8ToString(a):"";throw new Error(`${e} ERROR_CODE: ${r}, ERROR_MESSAGE: ${i}`)}finally{t.stackRestore(n)}}},5711:(e,t,n)=>{var _scriptDir,r=(_scriptDir="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,"undefined"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return E.buffer!=k.buffer&&G(),k}function r(){return E.buffer!=k.buffer&&G(),D}function a(){return E.buffer!=k.buffer&&G(),z}function i(){return E.buffer!=k.buffer&&G(),j}function o(){return E.buffer!=k.buffer&&G(),B}var s,u,l=e;l.ready=new Promise(((e,t)=>{s=e,u=t})),l.jsepInit=function(e,t,n,r,a,i,o,s){l.Ib=e,l.ob=t,l.qb=n,l.ab=r,l.pb=a,l.xa=i,l.rb=o,l.sb=s};var c,d,p,f=Object.assign({},l),h="./this.program",g=(e,t)=>{throw t},m="object"==typeof window,y="function"==typeof importScripts,b="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,v=l.ENVIRONMENT_IS_PTHREAD||!1,w="";function $(e){return l.locateFile?l.locateFile(e,w):w+e}if(b){var x=n(1384),S=n(908);let e;w=y?S.dirname(w)+"/":__dirname+"/",c=(e,t)=>(e=e.startsWith("file://")?new URL(e):S.normalize(e),x.readFileSync(e,t?void 0:"utf8")),p=e=>((e=c(e,!0)).buffer||(e=new Uint8Array(e)),e),d=(e,t,n,r=!0)=>{e=e.startsWith("file://")?new URL(e):S.normalize(e),x.readFile(e,r?void 0:"utf8",((e,a)=>{e?n(e):t(r?a.buffer:a)}))},!l.thisProgram&&1<process.argv.length&&(h=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),g=(e,t)=>{throw process.exitCode=e,t},l.inspect=()=>"[Emscripten Module object]";try{e=n(9925)}catch(e){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),e}global.Worker=e.Worker}else(m||y)&&(y?w=self.location.href:"undefined"!=typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),w=0!==w.indexOf("blob:")?w.substr(0,w.replace(/[?#].*/,"").lastIndexOf("/")+1):"",b||(c=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},y&&(p=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),d=(e,t,n)=>{var r=new XMLHttpRequest;r.open("GET",e,!0),r.responseType="arraybuffer",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));b&&"undefined"==typeof performance&&(global.performance=n(6953).performance);var _=console.log.bind(console),A=console.error.bind(console);b&&(_=(...e)=>x.writeSync(1,e.join(" ")+"\\n"),A=(...e)=>x.writeSync(2,e.join(" ")+"\\n"));var C,O=l.print||_,T=l.printErr||A;Object.assign(l,f),f=null,l.thisProgram&&(h=l.thisProgram),l.quit&&(g=l.quit),l.wasmBinary&&(C=l.wasmBinary);var I=l.noExitRuntime||!0;"object"!=typeof WebAssembly&&Z("no native wasm support detected");var E,P,M,R,k,D,z,j,B,W=!1;function G(){var e=E.buffer;l.HEAP8=k=new Int8Array(e),l.HEAP16=new Int16Array(e),l.HEAP32=z=new Int32Array(e),l.HEAPU8=D=new Uint8Array(e),l.HEAPU16=new Uint16Array(e),l.HEAPU32=j=new Uint32Array(e),l.HEAPF32=new Float32Array(e),l.HEAPF64=B=new Float64Array(e)}var U=l.INITIAL_MEMORY||16777216;if(5242880<=U||Z("INITIAL_MEMORY should be larger than STACK_SIZE, was "+U+"! (STACK_SIZE=5242880)"),v)E=l.wasmMemory;else if(l.wasmMemory)E=l.wasmMemory;else if(!((E=new WebAssembly.Memory({initial:U/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw T("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),b&&T("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");G(),U=E.buffer.byteLength;var N=[],L=[],H=[],F=0;function V(){return I||0<F}var K,q=0,Y=null,X=null;function J(){q++,l.monitorRunDependencies&&l.monitorRunDependencies(q)}function Q(){if(q--,l.monitorRunDependencies&&l.monitorRunDependencies(q),0==q&&(null!==Y&&(clearInterval(Y),Y=null),X)){var e=X;X=null,e()}}function Z(e){throw l.onAbort&&l.onAbort(e),T(e="Aborted("+e+")"),W=!0,R=1,e=new WebAssembly.RuntimeError(e+". Build with -sASSERTIONS for more info."),u(e),e}function ee(e){return e.startsWith("data:application/octet-stream;base64,")}function te(e){if(e==K&&C)return new Uint8Array(C);if(p)return p(e);throw"both async and sync fetching of the wasm failed"}function ne(e,t,n){return function(e){if(!C&&(m||y)){if("function"==typeof fetch&&!e.startsWith("file://"))return fetch(e,{credentials:"same-origin"}).then((t=>{if(!t.ok)throw"failed to load wasm binary file at \'"+e+"\'";return t.arrayBuffer()})).catch((()=>te(e)));if(d)return new Promise(((t,n)=>{d(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>te(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{T("failed to asynchronously prepare wasm: "+e),Z(e)}))}ee(K="ort-wasm-simd-threaded.wasm")||(K=$(K));var re,ae={891692:()=>{l.jsepRunPromise=new Promise((function(e){l.tb=e}))},891787:e=>{l.tb(e)},891825:e=>l.ob(e),891858:e=>l.qb(e),891890:(e,t,n)=>{l.ab(e,t,n,!0)},891929:(e,t,n)=>{l.ab(e,t,n)},891962:e=>{l.xa("Abs",e,void 0)},892013:e=>{l.xa("Neg",e,void 0)},892064:e=>{l.xa("Floor",e,void 0)},892117:e=>{l.xa("Ceil",e,void 0)},892169:e=>{l.xa("Reciprocal",e,void 0)},892227:e=>{l.xa("Sqrt",e,void 0)},892279:e=>{l.xa("Exp",e,void 0)},892330:e=>{l.xa("Erf",e,void 0)},892381:e=>{l.xa("Sigmoid",e,void 0)},892436:e=>{l.xa("Log",e,void 0)},892487:e=>{l.xa("Sin",e,void 0)},892538:e=>{l.xa("Cos",e,void 0)},892589:e=>{l.xa("Tan",e,void 0)},892640:e=>{l.xa("Asin",e,void 0)},892692:e=>{l.xa("Acos",e,void 0)},892744:e=>{l.xa("Atan",e,void 0)},892796:e=>{l.xa("Sinh",e,void 0)},892848:e=>{l.xa("Cosh",e,void 0)},892900:e=>{l.xa("Asinh",e,void 0)},892953:e=>{l.xa("Acosh",e,void 0)},893006:e=>{l.xa("Atanh",e,void 0)},893059:e=>{l.xa("Tanh",e,void 0)},893111:(e,t,n)=>{l.xa("ClipV10",e,{min:t,max:n})},893183:e=>{l.xa("Clip",e,void 0)},893235:(e,t)=>{l.xa("Elu",e,{alpha:t})},893293:e=>{l.xa("Relu",e,void 0)},893345:(e,t)=>{l.xa("LeakyRelu",e,{alpha:t})},893409:(e,t)=>{l.xa("ThresholdedRelu",e,{alpha:t})},893479:(e,t)=>{l.xa("Cast",e,{to:t})},893537:e=>{l.xa("Add",e,void 0)},893588:e=>{l.xa("Sub",e,void 0)},893639:e=>{l.xa("Mul",e,void 0)},893690:e=>{l.xa("Div",e,void 0)},893741:e=>{l.xa("Pow",e,void 0)},893792:(e,t,n,r,i)=>{l.xa("ReduceMean",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(a().subarray(i>>>0,i+r>>>0)):[]})},893956:(e,t,n,r,i)=>{l.xa("ReduceMax",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(a().subarray(i>>>0,i+r>>>0)):[]})},894119:(e,t,n,r,i)=>{l.xa("ReduceMin",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(a().subarray(i>>>0,i+r>>>0)):[]})},894282:(e,t,n,r,i)=>{l.xa("ReduceProd",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(a().subarray(i>>>0,i+r>>>0)):[]})},894446:(e,t,n,r,i)=>{l.xa("ReduceSum",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(a().subarray(i>>>0,i+r>>>0)):[]})},894609:(e,t,n,r,i)=>{l.xa("ReduceL1",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(a().subarray(i>>>0,i+r>>>0)):[]})},894771:(e,t,n,r,i)=>{l.xa("ReduceL2",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(a().subarray(i>>>0,i+r>>>0)):[]})},894933:(e,t,n,r,i)=>{l.xa("ReduceLogSum",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(a().subarray(i>>>0,i+r>>>0)):[]})},895099:(e,t,n,r,i)=>{l.xa("ReduceSumSquare",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(a().subarray(i>>>0,i+r>>>0)):[]})},895268:(e,t,n,r,i)=>{l.xa("ReduceLogSumExp",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(a().subarray(i>>>0,i+r>>>0)):[]})},895437:(e,t,n)=>{l.xa("Transpose",e,{perm:t?Array.from(a().subarray(n>>>0,n+t>>>0)):[]})},895550:(e,n,r,a,i,o,s,u,c,d)=>{l.xa("Conv",e,{format:c?"NHWC":"NCHW",auto_pad:n,dilations:[r],group:a,kernel_shape:[i],pads:[o,s],strides:[u],w_is_const:()=>!!t()[d>>>0]})},895778:(e,n,r,a,i,o,s,u,c,d,p,f,h,g,m)=>{l.xa("Conv",e,{format:g?"NHWC":"NCHW",auto_pad:n,dilations:[r,a],group:i,kernel_shape:[o,s],pads:[u,c,d,p],strides:[f,h],w_is_const:()=>!!t()[m>>>0]})},896037:(e,n,r,a,i,o,s,u,c,d)=>{l.xa("Conv",e,{format:c?"NHWC":"NCHW",auto_pad:n,dilations:[r],group:a,kernel_shape:[i],pads:[o,s],strides:[u],w_is_const:()=>!!t()[d>>>0]})},896265:(e,n,r,a,i,o,s,u,c,d,p,f,h,g,m)=>{l.xa("Conv",e,{format:g?"NHWC":"NCHW",auto_pad:n,dilations:[r,a],group:i,kernel_shape:[o,s],pads:[u,c,d,p],strides:[f,h],w_is_const:()=>!!t()[m>>>0]})},896524:(e,n,r,i,o,s,u,c,d,p,f,h,g,m)=>{l.xa("ConvTranspose",e,{format:d?"NHWC":"NCHW",autoPad:n,dilations:[r],group:i,kernel_shape:[o],pads:[s,u],strides:[c],wIsConst:()=>!!t()[p>>>0],outputPadding:f?Array.from(a().subarray(h>>>0,h+f>>>0)):[],outputShape:g?Array.from(a().subarray(m>>>0,m+g>>>0)):[]})},896904:(e,n,r,i,o,s,u,c,d,p,f,h,g)=>{l.xa("ConvTranspose",e,{format:c?"NHWC":"NCHW",autoPad:n,dilations:Array.from(a().subarray(r>>>0,r+2>>>0)),group:i,kernelShape:Array.from(a().subarray(o>>>0,o+2>>>0)),pads:Array.from(a().subarray(s>>>0,s+4>>>0)),strides:Array.from(a().subarray(u>>>0,u+2>>>0)),wIsConst:()=>!!t()[d>>>0],outputPadding:0<p?Array.from(a().subarray(f>>>0,f+p>>>0)):[],outputShape:0<h?Array.from(a().subarray(g>>>0,g+h>>>0)):[]})},897427:(e,n,r,i,o,s,u,c,d,p,f,h,g,m)=>{l.xa("ConvTranspose",e,{format:d?"NHWC":"NCHW",autoPad:n,dilations:[r],group:i,kernel_shape:[o],pads:[s,u],strides:[c],wIsConst:()=>!!t()[p>>>0],outputPadding:f?Array.from(a().subarray(h>>>0,h+f>>>0)):[],outputShape:g?Array.from(a().subarray(m>>>0,m+g>>>0)):[]})},897807:(e,n,r,i,o,s,u,c,d,p,f,h,g)=>{l.xa("ConvTranspose",e,{format:c?"NHWC":"NCHW",autoPad:n,dilations:Array.from(a().subarray(r>>>0,r+2>>>0)),group:i,kernelShape:Array.from(a().subarray(o>>>0,o+2>>>0)),pads:Array.from(a().subarray(s>>>0,s+4>>>0)),strides:Array.from(a().subarray(u>>>0,u+2>>>0)),wIsConst:()=>!!t()[d>>>0],outputPadding:0<p?Array.from(a().subarray(f>>>0,f+p>>>0)):[],outputShape:0<h?Array.from(a().subarray(g>>>0,g+h>>>0)):[]})},898330:(e,t)=>{l.xa("GlobalAveragePool",e,{format:t?"NHWC":"NCHW"})},898421:(e,t,n,r,a,i,o,s,u,c,d,p,f,h,g,m)=>{l.xa("AveragePool",e,{format:m?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[i,o],kernel_shape:[s,u],pads:[c,d,p,f],strides:[h,g]})},898705:(e,t)=>{l.xa("GlobalAveragePool",e,{format:t?"NHWC":"NCHW"})},898796:(e,t,n,r,a,i,o,s,u,c,d,p,f,h,g,m)=>{l.xa("AveragePool",e,{format:m?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[i,o],kernel_shape:[s,u],pads:[c,d,p,f],strides:[h,g]})},899080:(e,t)=>{l.xa("GlobalMaxPool",e,{format:t?"NHWC":"NCHW"})},899167:(e,t,n,r,a,i,o,s,u,c,d,p,f,h,g,m)=>{l.xa("MaxPool",e,{format:m?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[i,o],kernel_shape:[s,u],pads:[c,d,p,f],strides:[h,g]})},899447:(e,t)=>{l.xa("GlobalMaxPool",e,{format:t?"NHWC":"NCHW"})},899534:(e,t,n,r,a,i,o,s,u,c,d,p,f,h,g,m)=>{l.xa("MaxPool",e,{format:m?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[i,o],kernel_shape:[s,u],pads:[c,d,p,f],strides:[h,g]})},899814:(e,t,n,r,a)=>{l.xa("Gemm",e,{alpha:t,beta:n,transA:r,transB:a})},899918:e=>{l.xa("MatMul",e,void 0)},899972:(e,t,n,r)=>{l.xa("ArgMax",e,{keepDims:!!t,selectLastIndex:!!n,axis:r})},900080:(e,t,n,r)=>{l.xa("ArgMin",e,{keepDims:!!t,selectLastIndex:!!n,axis:r})},900188:(e,t)=>{l.xa("Softmax",e,{axis:t})},900251:(e,t)=>{l.xa("Concat",e,{axis:t})},900311:(e,t,n,r,i)=>{l.xa("Split",e,{axis:t,numOutputs:n,splitSizes:r?Array.from(a().subarray(i>>>0,i+r>>>0)):[]})},900456:e=>{l.xa("Expand",e,void 0)},900510:(e,t)=>{l.xa("Gather",e,{axis:Number(t)})},900581:(e,t,n,r,i,o,s,u,c,d,p)=>{l.xa("Resize",e,{antialias:t,axes:n?Array.from(a().subarray(r>>>0,r+n>>>0)):[],coordinateTransformMode:de(i),cubicCoeffA:o,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:de(c),mode:de(d),nearestMode:de(p)})},900932:(e,t,n,r,i,o,s)=>{l.xa("Slice",e,{starts:t?Array.from(a().subarray(n>>>0,n+t>>>0)):[],ends:r?Array.from(a().subarray(i>>>0,i+r>>>0)):[],axes:o?Array.from(a().subarray(s>>>0,s+o>>>0)):[]})},901163:e=>{l.xa("Tile",e,void 0)},901215:(e,t,n)=>{l.xa("LayerNormalization",e,{axis:Number(t),epsilon:Number(n)})},901322:(e,t,n)=>{l.xa("InstanceNormalization",e,{epsilon:t,format:n?"NHWC":"NCHW"})},901436:(e,t,n)=>{l.xa("InstanceNormalization",e,{epsilon:t,format:n?"NHWC":"NCHW"})},901550:e=>{l.xa("Gelu",e,void 0)},901602:(e,t)=>{l.xa("SkipLayerNormalization",e,{epsilon:t})},901683:e=>{l.rb(e)},901717:(e,t)=>l.sb(e,t)};function ie(e){this.name="ExitStatus",this.message=`Program terminated with exit(${e})`,this.status=e}function oe(e){e.terminate(),e.onmessage=()=>{}}function se(e){(e=he.Ja[e])||Z(),he.xb(e)}function ue(e){var t=he.lb();if(!t)return 6;he.Ra.push(t),he.Ja[e.Qa]=t,t.Qa=e.Qa;var n={cmd:"run",start_routine:e.yb,arg:e.jb,pthread_ptr:e.Qa};return b&&t.unref(),t.postMessage(n,e.Eb),0}var le="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,ce=(e,t,n)=>{var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&le)return le.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r="";t<n;){var a=e[t++];if(128&a){var i=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r},de=(e,t)=>(e>>>=0)?ce(r(),e,t):"";function pe(e){if(v)return qe(1,1,e);R=e,V()||(he.zb(),l.onExit&&l.onExit(e),W=!0),g(e,new ie(e))}var fe=e=>{if(R=e,v)throw me(e),"unwind";pe(e)},he={Ua:[],Ra:[],eb:[],Ja:{},Xa:function(){v?he.nb():he.mb()},mb:function(){N.unshift((()=>{J(),he.ub((()=>Q()))}))},nb:function(){he.receiveObjectTransfer=he.wb,he.threadInitTLS=he.cb,he.setExitStatus=he.bb,I=!1},bb:function(e){R=e},Kb:["$terminateWorker"],zb:function(){for(var e of he.Ra)oe(e);for(e of he.Ua)oe(e);he.Ua=[],he.Ra=[],he.Ja=[]},xb:function(e){var t=e.Qa;delete he.Ja[t],he.Ua.push(e),he.Ra.splice(he.Ra.indexOf(e),1),e.Qa=0,It(t)},wb:function(){},cb:function(){he.eb.forEach((e=>e()))},vb:e=>new Promise((t=>{e.onmessage=n=>{var r=(n=n.data).cmd;if(n.targetThread&&n.targetThread!=St()){var a=he.Ja[n.Jb];a?a.postMessage(n,n.transferList):T(\'Internal error! Worker sent a message "\'+r+\'" to target pthread \'+n.targetThread+", but that thread no longer exists!")}else"checkMailbox"===r?Be():"spawnThread"===r?ue(n):"cleanupThread"===r?se(n.thread):"killThread"===r?(n=n.thread,r=he.Ja[n],delete he.Ja[n],oe(r),It(n),he.Ra.splice(he.Ra.indexOf(r),1),r.Qa=0):"cancelThread"===r?he.Ja[n.thread].postMessage({cmd:"cancel"}):"loaded"===r?(e.loaded=!0,t(e)):"alert"===r?alert("Thread "+n.threadId+": "+n.text):"setimmediate"===n.target?e.postMessage(n):"callHandler"===r?l[n.handler](...n.args):r&&T("worker sent an unknown command "+r)},e.onerror=e=>{throw T("worker sent an error! "+e.filename+":"+e.lineno+": "+e.message),e},b&&(e.on("message",(function(t){e.onmessage({data:t})})),e.on("error",(function(t){e.onerror(t)})));var n,r=[];for(n of["onExit","onAbort","print","printErr"])l.hasOwnProperty(n)&&r.push(n);e.postMessage({cmd:"load",handlers:r,urlOrBlob:l.mainScriptUrlOrBlob||_scriptDir,wasmMemory:E,wasmModule:M})})),ub:function(e){e()},ib:function(){var e=$("ort-wasm-simd-threaded.worker.js");e=new Worker(e),he.Ua.push(e)},lb:function(){return 0==he.Ua.length&&(he.ib(),he.vb(he.Ua[0])),he.Ua.pop()}};l.PThread=he;var ge=e=>{for(;0<e.length;)e.shift()(l)};function me(e){if(v)return qe(2,0,e);fe(e)}function ye(e){this.$a=e-24,this.hb=function(e){i()[this.$a+4>>2>>>0]=e},this.gb=function(e){i()[this.$a+8>>2>>>0]=e},this.Xa=function(e,t){this.fb(),this.hb(e),this.gb(t)},this.fb=function(){i()[this.$a+16>>2>>>0]=0}}function be(e,t,n,r){return v?qe(3,1,e,t,n,r):ve(e,t,n,r)}function ve(e,t,n,r){if(e>>>=0,t>>>=0,n>>>=0,r>>>=0,"undefined"==typeof SharedArrayBuffer)return T("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var a=[];return v&&0===a.length?be(e,t,n,r):(e={yb:n,Qa:e,jb:r,Eb:a},v?(e.Gb="spawnThread",postMessage(e,a),0):ue(e))}function we(e,t,n){return v?qe(4,1,e,t,n):0}function $e(e,t){if(v)return qe(5,1,e,t)}l.establishStackSpace=function(){var e=St(),t=a()[e+52>>2>>>0];e=a()[e+56>>2>>>0],Rt(t,t-e),Dt(t)},l.invokeEntryPoint=function(e,t){e=jt.apply(null,[e,t]),V()?he.bb(e):Et(e)};var xe=e=>{for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t},Se=(e,t,n,r)=>{if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<e.length;++i){var o=e.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++i)),127>=o){if(n>=r)break;t[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;t[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;t[n++>>>0]=224|o>>12}else{if(n+3>=r)break;t[n++>>>0]=240|o>>18,t[n++>>>0]=128|o>>12&63}t[n++>>>0]=128|o>>6&63}t[n++>>>0]=128|63&o}}return t[n>>>0]=0,n-a},_e=(e,t,n)=>Se(e,r(),t,n);function Ae(e,t){if(v)return qe(6,1,e,t)}function Ce(e,t,n){if(v)return qe(7,1,e,t,n)}function Oe(e,t,n){return v?qe(8,1,e,t,n):0}function Te(e,t){if(v)return qe(9,1,e,t)}function Ie(e,t,n){if(v)return qe(10,1,e,t,n)}function Ee(e,t,n,r){if(v)return qe(11,1,e,t,n,r)}function Pe(e,t,n,r){if(v)return qe(12,1,e,t,n,r)}function Me(e,t,n,r){if(v)return qe(13,1,e,t,n,r)}function Re(e){if(v)return qe(14,1,e)}function ke(e,t){if(v)return qe(15,1,e,t)}function De(e,t,n){if(v)return qe(16,1,e,t,n)}var ze=e=>{if(!W)try{if(e(),!V())try{v?Et(R):fe(R)}catch(e){e instanceof ie||"unwind"==e||g(1,e)}}catch(e){e instanceof ie||"unwind"==e||g(1,e)}};function je(e){e>>>=0,"function"==typeof Atomics.Fb&&(Atomics.Fb(a(),e>>2,e).value.then(Be),e+=128,Atomics.store(a(),e>>2,1))}function Be(){var e=St();e&&(je(e),ze((()=>Pt())))}l.__emscripten_thread_mailbox_await=je,l.checkMailbox=Be;var We=e=>0==e%4&&(0!=e%100||0==e%400),Ge=[0,31,60,91,121,152,182,213,244,274,305,335],Ue=[0,31,59,90,120,151,181,212,243,273,304,334];function Ne(e,t,n,r,a,i,o,s){return v?qe(17,1,e,t,n,r,a,i,o,s):-52}function Le(e,t,n,r,a,i,o){if(v)return qe(18,1,e,t,n,r,a,i,o)}var He=e=>{var t=xe(e)+1,n=_t(t);return n&&_e(e,n,t),n},Fe=[],Ve=(e,t)=>{var n;for(Fe.length=0,t>>=2;n=r()[e++>>>0];)t+=105!=n&t,Fe.push(105==n?a()[t>>>0]:o()[t++>>>1]),++t;return Fe},Ke=e=>{var t=kt();return e=e(),Dt(t),e};function qe(e,t){var n=arguments.length-2,r=arguments;return Ke((()=>{for(var a=zt(8*n),i=a>>3,s=0;s<n;s++){var u=r[2+s];o()[i+s>>>0]=u}return Tt(e,n,a,t)}))}var Ye,Xe=[],Je={},Qe=()=>{if(!Ye){var e,t={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:h||"./this.program"};for(e in Je)void 0===Je[e]?delete t[e]:t[e]=Je[e];var n=[];for(e in t)n.push(`${e}=${t[e]}`);Ye=n}return Ye};function Ze(e,n){if(v)return qe(19,1,e,n);e>>>=0,n>>>=0;var r=0;return Qe().forEach((function(a,o){var s=n+r;for(o=i()[e+4*o>>2>>>0]=s,s=0;s<a.length;++s)t()[o++>>0>>>0]=a.charCodeAt(s);t()[o>>0>>>0]=0,r+=a.length+1})),0}function et(e,t){if(v)return qe(20,1,e,t);e>>>=0,t>>>=0;var n=Qe();i()[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),i()[t>>2>>>0]=r,0}function tt(e){return v?qe(21,1,e):52}function nt(e,t,n,r){return v?qe(22,1,e,t,n,r):52}function rt(e,t,n,r,a){return v?qe(23,1,e,t,n,r,a):70}var at=[null,[],[]];function it(e,t,n,a){if(v)return qe(24,1,e,t,n,a);t>>>=0,n>>>=0,a>>>=0;for(var o=0,s=0;s<n;s++){var u=i()[t>>2>>>0],l=i()[t+4>>2>>>0];t+=8;for(var c=0;c<l;c++){var d=r()[u+c>>>0],p=at[e];0===d||10===d?((1===e?O:T)(ce(p,0)),p.length=0):p.push(d)}o+=l}return i()[a>>2>>>0]=o,0}var ot=e=>(ot=(()=>{if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return e=>(e.set(crypto.getRandomValues(new Uint8Array(e.byteLength))),e);if(b)try{var e=n(760);if(e.randomFillSync)return t=>e.randomFillSync(t);var t=e.randomBytes;return e=>(e.set(t(e.byteLength)),e)}catch(e){}Z("initRandomDevice")})())(e),st=[31,29,31,30,31,30,31,31,30,31,30,31],ut=[31,28,31,30,31,30,31,31,30,31,30,31],lt=(e,n)=>{t().set(e,n>>>0)};function ct(e,t,n,r){function i(e,t,n){for(e="number"==typeof e?e.toString():e||"";e.length<t;)e=n[0]+e;return e}function o(e,t){return i(e,t,"0")}function s(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){var t=e.Sa;for(e=new Date(new Date(e.Ta+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(We(e.getFullYear())?st:ut)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),n=u(n),0>=s(t,e)?0>=s(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,n>>>=0,r>>>=0;var c=a()[r+40>>2>>>0];for(var d in r={Cb:a()[r>>2>>>0],Bb:a()[r+4>>2>>>0],Va:a()[r+8>>2>>>0],Za:a()[r+12>>2>>>0],Wa:a()[r+16>>2>>>0],Ta:a()[r+20>>2>>>0],Pa:a()[r+24>>2>>>0],Sa:a()[r+28>>2>>>0],Lb:a()[r+32>>2>>>0],Ab:a()[r+36>>2>>>0],Db:c?de(c):""},n=de(n),c={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})n=n.replace(new RegExp(d,"g"),c[d]);var p="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),f="January February March April May June July August September October November December".split(" ");for(d in c={"%a":e=>p[e.Pa].substring(0,3),"%A":e=>p[e.Pa],"%b":e=>f[e.Wa].substring(0,3),"%B":e=>f[e.Wa],"%C":e=>o((e.Ta+1900)/100|0,2),"%d":e=>o(e.Za,2),"%e":e=>i(e.Za,2," "),"%g":e=>l(e).toString().substring(2),"%G":e=>l(e),"%H":e=>o(e.Va,2),"%I":e=>(0==(e=e.Va)?e=12:12<e&&(e-=12),o(e,2)),"%j":e=>{for(var t=0,n=0;n<=e.Wa-1;t+=(We(e.Ta+1900)?st:ut)[n++]);return o(e.Za+t,3)},"%m":e=>o(e.Wa+1,2),"%M":e=>o(e.Bb,2),"%n":()=>"\\n","%p":e=>0<=e.Va&&12>e.Va?"AM":"PM","%S":e=>o(e.Cb,2),"%t":()=>"\\t","%u":e=>e.Pa||7,"%U":e=>o(Math.floor((e.Sa+7-e.Pa)/7),2),"%V":e=>{var t=Math.floor((e.Sa+7-(e.Pa+6)%7)/7);if(2>=(e.Pa+371-e.Sa-2)%7&&t++,t)53==t&&(4==(n=(e.Pa+371-e.Sa)%7)||3==n&&We(e.Ta)||(t=1));else{t=52;var n=(e.Pa+7-e.Sa-1)%7;(4==n||5==n&&We(e.Ta%400-1))&&t++}return o(t,2)},"%w":e=>e.Pa,"%W":e=>o(Math.floor((e.Sa+7-(e.Pa+6)%7)/7),2),"%y":e=>(e.Ta+1900).toString().substring(2),"%Y":e=>e.Ta+1900,"%z":e=>{var t=0<=(e=e.Ab);return e=Math.abs(e)/60,(t?"+":"-")+String("0000"+(e/60*100+e%60)).slice(-4)},"%Z":e=>e.Db,"%%":()=>"%"},n=n.replace(/%%/g,"\\0\\0"),c)n.includes(d)&&(n=n.replace(new RegExp(d,"g"),c[d](r)));return d=function(e){var t=Array(xe(e)+1);return Se(e,t,0,t.length),t}(n=n.replace(/\\0\\0/g,"%")),d.length>t?0:(lt(d,e),d.length-1)}function dt(e){try{e()}catch(e){Z(e)}}var pt=0,ft=null,ht=0,gt=[],mt={},yt={},bt=0,vt=null,wt=[];he.Xa();var $t=[null,pe,me,be,we,$e,Ae,Ce,Oe,Te,Ie,Ee,Pe,Me,Re,ke,De,Ne,Le,Ze,et,tt,nt,rt,it],xt={r:function(e,t,n){return function(e){return function(e){if(!W){if(0===pt){var t=!1,n=!1;e(((e=0)=>{if(!W&&(ht=e,t=!0,n)){pt=2,dt((()=>Gt(ft))),"undefined"!=typeof Browser&&Browser.Ya.kb&&Browser.Ya.resume(),e=!1;try{var r=function(){var e=a()[ft+8>>2>>>0];return e=P[yt[e]],--F,e()}()}catch(t){r=t,e=!0}var i=!1;if(!ft){var o=vt;o&&(vt=null,(e?o.reject:o.resolve)(r),i=!0)}if(e&&!i)throw r}})),n=!0,t||(pt=1,ft=function(){var e=_t(65548),t=e+12;i()[e>>2>>>0]=t,i()[e+4>>2>>>0]=t+65536,t=gt[0];var n=mt[t];return void 0===n&&(n=bt++,mt[t]=n,yt[n]=t),t=n,a()[e+8>>2>>>0]=t,e}(),"undefined"!=typeof Browser&&Browser.Ya.kb&&Browser.Ya.pause(),dt((()=>Bt(ft))))}else 2===pt?(pt=0,dt(Ut),At(ft),ft=null,wt.forEach((e=>ze(e)))):Z(`invalid state: ${pt}`);return ht}}((t=>{e().then(t)}))}((async()=>{await l.pb(e,t,n)}))},b:function(e,t,n){throw new ye(e>>>=0).Xa(t>>>0,n>>>0),e},O:function(e){Ct(e>>>0,!y,1,!m,131072,!1),he.cb()},m:function(e){e>>>=0,v?postMessage({cmd:"cleanupThread",thread:e}):se(e)},J:ve,i:we,U:$e,G:Ae,I:Ce,V:Oe,S:Te,K:Ie,R:Ee,q:Pe,H:Me,E:Re,T:ke,F:De,Y:()=>!0,C:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>Be())):v?postMessage({targetThread:e,cmd:"checkMailbox"}):(e=he.Ja[e])&&e.postMessage({cmd:"checkMailbox"})},M:function(){return-1},N:je,X:function(e){b&&he.Ja[e>>>0].ref()},u:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),a()[n>>2>>>0]=e.getUTCSeconds(),a()[n+4>>2>>>0]=e.getUTCMinutes(),a()[n+8>>2>>>0]=e.getUTCHours(),a()[n+12>>2>>>0]=e.getUTCDate(),a()[n+16>>2>>>0]=e.getUTCMonth(),a()[n+20>>2>>>0]=e.getUTCFullYear()-1900,a()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[n+28>>2>>>0]=e},v:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),a()[n>>2>>>0]=e.getSeconds(),a()[n+4>>2>>>0]=e.getMinutes(),a()[n+8>>2>>>0]=e.getHours(),a()[n+12>>2>>>0]=e.getDate(),a()[n+16>>2>>>0]=e.getMonth(),a()[n+20>>2>>>0]=e.getFullYear()-1900,a()[n+24>>2>>>0]=e.getDay(),t=(We(e.getFullYear())?Ge:Ue)[e.getMonth()]+e.getDate()-1|0,a()[n+28>>2>>>0]=t,a()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var r=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=r&&e.getTimezoneOffset()==Math.min(r,t)),a()[n+32>>2>>>0]=e},w:function(e){e>>>=0;var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),n=a()[e+32>>2>>>0],r=t.getTimezoneOffset(),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),s=Math.min(o,i);return 0>n?a()[e+32>>2>>>0]=Number(i!=o&&s==r):0<n!=(s==r)&&(i=Math.max(o,i),t.setTime(t.getTime()+6e4*((0<n?s:i)-r))),a()[e+24>>2>>>0]=t.getDay(),n=(We(t.getFullYear())?Ge:Ue)[t.getMonth()]+t.getDate()-1|0,a()[e+28>>2>>>0]=n,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,Mt((re=e,1<=+Math.abs(re)?0<re?+Math.floor(re/4294967296)>>>0:~~+Math.ceil((re-+(~~re>>>0))/4294967296)>>>0:0)),e>>>0},s:Ne,t:Le,A:function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:"GMT"}e>>>=0,t>>>=0,n>>>=0;var o=(new Date).getFullYear(),s=new Date(o,0,1),u=new Date(o,6,1);o=s.getTimezoneOffset();var l=u.getTimezoneOffset(),c=Math.max(o,l);i()[e>>2>>>0]=60*c,a()[t>>2>>>0]=Number(o!=l),e=r(s),t=r(u),e=He(e),t=He(t),l<o?(i()[n>>2>>>0]=e,i()[n+4>>2>>>0]=t):(i()[n>>2>>>0]=t,i()[n+4>>2>>>0]=e)},d:()=>{Z("")},c:function(e,t,n){return e>>>=0,t=Ve(t>>>0,n>>>0),ae[e].apply(null,t)},l:function(e,t,n){return e>>>=0,t=Ve(t>>>0,n>>>0),ae[e].apply(null,t)},n:function(){},j:function(){return Date.now()},W:()=>{throw F+=1,"unwind"},D:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:function(){return b?n(3993).cpus().length:navigator.hardwareConcurrency},L:function(e,t,n,r){for(he.Hb=t>>>0,Xe.length=n,t=r>>>0>>3,r=0;r<n;r++)Xe[r]=o()[t+r>>>0];return(0>e?ae[-e-1]:$t[e]).apply(null,Xe)},z:function(e){e>>>=0;var t=r().length;if(e<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var i=Math;a=Math.max(e,a);e:{i=i.min.call(i,4294901760,a+(65536-a%65536)%65536)-E.buffer.byteLength+65535>>>16;try{E.grow(i),G();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},P:Ze,Q:et,k:fe,h:tt,p:nt,x:rt,o:it,y:function(e,t){return e>>>=0,t>>>=0,ot(r().subarray(e>>>0,e+t>>>0)),0},a:E||l.wasmMemory,B:ct,e:function(e,t,n,r){return ct(e>>>0,t>>>0,n>>>0,r>>>0)}};!function(){function e(e,t){return e=function(e){var t,n={};for(t in e)!function(t){var r=e[t];n[t]="function"==typeof r?function(){gt.push(t);try{return r.apply(null,arguments)}finally{W||(gt.pop()===t||Z(),ft&&1===pt&&0===gt.length&&(pt=0,F+=1,dt(Wt),"undefined"!=typeof Fibers&&Fibers.Mb()))}}:r}(t);return n}(e=e.exports),P=e=function(e){var t=e=>()=>e()>>>0,n=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=n(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=n(e.stackAlloc),e}(e),he.eb.push(P.wa),L.unshift(P.Z),M=t,Q(),e}var t={a:xt};if(J(),l.instantiateWasm)try{return l.instantiateWasm(t,e)}catch(e){T("Module.instantiateWasm callback failed with error: "+e),u(e)}(function(e,t){var n=K;return C||"function"!=typeof WebAssembly.instantiateStreaming||ee(n)||n.startsWith("file://")||b||"function"!=typeof fetch?ne(n,e,t):fetch(n,{credentials:"same-origin"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(t,(function(r){return T("wasm streaming compile failed: "+r),T("falling back to ArrayBuffer instantiation"),ne(n,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),l._OrtInit=(e,t)=>(l._OrtInit=P._)(e,t),l._OrtGetLastError=(e,t)=>(l._OrtGetLastError=P.$)(e,t),l._OrtCreateSessionOptions=(e,t,n,r,a,i,o,s,u,c)=>(l._OrtCreateSessionOptions=P.aa)(e,t,n,r,a,i,o,s,u,c),l._OrtAppendExecutionProvider=(e,t)=>(l._OrtAppendExecutionProvider=P.ba)(e,t),l._OrtAddSessionConfigEntry=(e,t,n)=>(l._OrtAddSessionConfigEntry=P.ca)(e,t,n),l._OrtReleaseSessionOptions=e=>(l._OrtReleaseSessionOptions=P.da)(e),l._OrtCreateSession=(e,t,n)=>(l._OrtCreateSession=P.ea)(e,t,n),l._OrtReleaseSession=e=>(l._OrtReleaseSession=P.fa)(e),l._OrtGetInputOutputCount=(e,t,n)=>(l._OrtGetInputOutputCount=P.ga)(e,t,n),l._OrtGetInputName=(e,t)=>(l._OrtGetInputName=P.ha)(e,t),l._OrtGetOutputName=(e,t)=>(l._OrtGetOutputName=P.ia)(e,t),l._OrtFree=e=>(l._OrtFree=P.ja)(e),l._OrtCreateTensor=(e,t,n,r,a)=>(l._OrtCreateTensor=P.ka)(e,t,n,r,a),l._OrtGetTensorData=(e,t,n,r,a)=>(l._OrtGetTensorData=P.la)(e,t,n,r,a),l._OrtReleaseTensor=e=>(l._OrtReleaseTensor=P.ma)(e),l._OrtCreateRunOptions=(e,t,n,r)=>(l._OrtCreateRunOptions=P.na)(e,t,n,r),l._OrtAddRunConfigEntry=(e,t,n)=>(l._OrtAddRunConfigEntry=P.oa)(e,t,n),l._OrtReleaseRunOptions=e=>(l._OrtReleaseRunOptions=P.pa)(e),l._OrtRun=(e,t,n,r,a,i,o,s)=>(l._OrtRun=P.qa)(e,t,n,r,a,i,o,s),l._OrtEndProfiling=e=>(l._OrtEndProfiling=P.ra)(e),l._JsepOutput=(e,t,n)=>(l._JsepOutput=P.sa)(e,t,n);var St=l._pthread_self=()=>(St=l._pthread_self=P.ta)(),_t=l._malloc=e=>(_t=l._malloc=P.ua)(e),At=l._free=e=>(At=l._free=P.va)(e);l.__emscripten_tls_init=()=>(l.__emscripten_tls_init=P.wa)();var Ct=l.__emscripten_thread_init=(e,t,n,r,a,i)=>(Ct=l.__emscripten_thread_init=P.ya)(e,t,n,r,a,i);l.__emscripten_thread_crashed=()=>(l.__emscripten_thread_crashed=P.za)();var Ot,Tt=(e,t,n,r)=>(Tt=P.Aa)(e,t,n,r),It=e=>(It=P.Ba)(e),Et=l.__emscripten_thread_exit=e=>(Et=l.__emscripten_thread_exit=P.Ca)(e),Pt=l.__emscripten_check_mailbox=()=>(Pt=l.__emscripten_check_mailbox=P.Da)(),Mt=e=>(Mt=P.Ea)(e),Rt=(e,t)=>(Rt=P.Fa)(e,t),kt=()=>(kt=P.Ga)(),Dt=e=>(Dt=P.Ha)(e),zt=e=>(zt=P.Ia)(e),jt=l.dynCall_ii=(e,t)=>(jt=l.dynCall_ii=P.Ka)(e,t),Bt=e=>(Bt=P.La)(e),Wt=()=>(Wt=P.Ma)(),Gt=e=>(Gt=P.Na)(e),Ut=()=>(Ut=P.Oa)();function Nt(){function e(){if(!Ot&&(Ot=!0,l.calledRun=!0,!W)&&(v||ge(L),s(l),l.onRuntimeInitialized&&l.onRuntimeInitialized(),!v)){if(l.postRun)for("function"==typeof l.postRun&&(l.postRun=[l.postRun]);l.postRun.length;){var e=l.postRun.shift();H.unshift(e)}ge(H)}}if(!(0<q))if(v)s(l),v||ge(L),startWorker(l);else{if(l.preRun)for("function"==typeof l.preRun&&(l.preRun=[l.preRun]);l.preRun.length;)N.unshift(l.preRun.shift());ge(N),0<q||(l.setStatus?(l.setStatus("Running..."),setTimeout((function(){setTimeout((function(){l.setStatus("")}),1),e()}),1)):e())}}if(l.___start_em_js=901752,l.___stop_em_js=901913,l.keepRuntimeAlive=V,l.wasmMemory=E,l.stackAlloc=zt,l.stackSave=kt,l.stackRestore=Dt,l.UTF8ToString=de,l.stringToUTF8=_e,l.lengthBytesUTF8=xe,l.ExitStatus=ie,l.PThread=he,X=function e(){Ot||Nt(),Ot||(X=e)},l.preInit)for("function"==typeof l.preInit&&(l.preInit=[l.preInit]);0<l.preInit.length;)l.preInit.pop()();return Nt(),e.ready});e.exports=r},9377:(e,t,n)=>{var _scriptDir,r=(_scriptDir="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,"undefined"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){var t,r,a=e;a.ready=new Promise(((e,n)=>{t=e,r=n})),a.jsepInit=function(e,t,n,r,i,o,s,u){a.Sa=e,a.Ea=t,a.Ga=n,a.Ca=r,a.Fa=i,a.la=o,a.Ha=s,a.Ia=u};var i,o,s,u=Object.assign({},a),l="./this.program",c=(e,t)=>{throw t},d="object"==typeof window,p="function"==typeof importScripts,f="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,h="";if(f){var g=n(1384),m=n(908);h=p?m.dirname(h)+"/":__dirname+"/",i=(e,t)=>(e=e.startsWith("file://")?new URL(e):m.normalize(e),g.readFileSync(e,t?void 0:"utf8")),s=e=>((e=i(e,!0)).buffer||(e=new Uint8Array(e)),e),o=(e,t,n,r=!0)=>{e=e.startsWith("file://")?new URL(e):m.normalize(e),g.readFile(e,r?void 0:"utf8",((e,a)=>{e?n(e):t(r?a.buffer:a)}))},!a.thisProgram&&1<process.argv.length&&(l=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),c=(e,t)=>{throw process.exitCode=e,t},a.inspect=()=>"[Emscripten Module object]"}else(d||p)&&(p?h=self.location.href:"undefined"!=typeof document&&document.currentScript&&(h=document.currentScript.src),_scriptDir&&(h=_scriptDir),h=0!==h.indexOf("blob:")?h.substr(0,h.replace(/[?#].*/,"").lastIndexOf("/")+1):"",i=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},p&&(s=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),o=(e,t,n)=>{var r=new XMLHttpRequest;r.open("GET",e,!0),r.responseType="arraybuffer",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var y,b=a.print||console.log.bind(console),v=a.printErr||console.error.bind(console);Object.assign(a,u),u=null,a.thisProgram&&(l=a.thisProgram),a.quit&&(c=a.quit),a.wasmBinary&&(y=a.wasmBinary);var w=a.noExitRuntime||!0;"object"!=typeof WebAssembly&&W("no native wasm support detected");var $,x,S,_,A,C,O,T,I=!1;function E(){var e=$.buffer;a.HEAP8=_=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=C=new Int32Array(e),a.HEAPU8=A=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=O=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=T=new Float64Array(e)}var P=[],M=[],R=[];function k(){var e=a.preRun.shift();P.unshift(e)}var D,z=0,j=null,B=null;function W(e){throw a.onAbort&&a.onAbort(e),v(e="Aborted("+e+")"),I=!0,S=1,e=new WebAssembly.RuntimeError(e+". Build with -sASSERTIONS for more info."),r(e),e}function G(e){return e.startsWith("data:application/octet-stream;base64,")}if(!G(D="ort-wasm-simd.wasm")){var U=D;D=a.locateFile?a.locateFile(U,h):h+U}function N(e){if(e==D&&y)return new Uint8Array(y);if(s)return s(e);throw"both async and sync fetching of the wasm failed"}function L(e,t,n){return function(e){if(!y&&(d||p)){if("function"==typeof fetch&&!e.startsWith("file://"))return fetch(e,{credentials:"same-origin"}).then((t=>{if(!t.ok)throw"failed to load wasm binary file at \'"+e+"\'";return t.arrayBuffer()})).catch((()=>N(e)));if(o)return new Promise(((t,n)=>{o(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>N(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{v("failed to asynchronously prepare wasm: "+e),W(e)}))}var H,F={887872:()=>{a.jsepRunPromise=new Promise((function(e){a.Ja=e}))},887967:e=>{a.Ja(e)},888005:e=>a.Ea(e),888038:e=>a.Ga(e),888070:(e,t,n)=>{a.Ca(e,t,n,!0)},888109:(e,t,n)=>{a.Ca(e,t,n)},888142:e=>{a.la("Abs",e,void 0)},888193:e=>{a.la("Neg",e,void 0)},888244:e=>{a.la("Floor",e,void 0)},888297:e=>{a.la("Ceil",e,void 0)},888349:e=>{a.la("Reciprocal",e,void 0)},888407:e=>{a.la("Sqrt",e,void 0)},888459:e=>{a.la("Exp",e,void 0)},888510:e=>{a.la("Erf",e,void 0)},888561:e=>{a.la("Sigmoid",e,void 0)},888616:e=>{a.la("Log",e,void 0)},888667:e=>{a.la("Sin",e,void 0)},888718:e=>{a.la("Cos",e,void 0)},888769:e=>{a.la("Tan",e,void 0)},888820:e=>{a.la("Asin",e,void 0)},888872:e=>{a.la("Acos",e,void 0)},888924:e=>{a.la("Atan",e,void 0)},888976:e=>{a.la("Sinh",e,void 0)},889028:e=>{a.la("Cosh",e,void 0)},889080:e=>{a.la("Asinh",e,void 0)},889133:e=>{a.la("Acosh",e,void 0)},889186:e=>{a.la("Atanh",e,void 0)},889239:e=>{a.la("Tanh",e,void 0)},889291:(e,t,n)=>{a.la("ClipV10",e,{min:t,max:n})},889363:e=>{a.la("Clip",e,void 0)},889415:(e,t)=>{a.la("Elu",e,{alpha:t})},889473:e=>{a.la("Relu",e,void 0)},889525:(e,t)=>{a.la("LeakyRelu",e,{alpha:t})},889589:(e,t)=>{a.la("ThresholdedRelu",e,{alpha:t})},889659:(e,t)=>{a.la("Cast",e,{to:t})},889717:e=>{a.la("Add",e,void 0)},889768:e=>{a.la("Sub",e,void 0)},889819:e=>{a.la("Mul",e,void 0)},889870:e=>{a.la("Div",e,void 0)},889921:e=>{a.la("Pow",e,void 0)},889972:(e,t,n,r,i)=>{a.la("ReduceMean",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(C.subarray(i>>>0,i+r>>>0)):[]})},890136:(e,t,n,r,i)=>{a.la("ReduceMax",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(C.subarray(i>>>0,i+r>>>0)):[]})},890299:(e,t,n,r,i)=>{a.la("ReduceMin",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(C.subarray(i>>>0,i+r>>>0)):[]})},890462:(e,t,n,r,i)=>{a.la("ReduceProd",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(C.subarray(i>>>0,i+r>>>0)):[]})},890626:(e,t,n,r,i)=>{a.la("ReduceSum",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(C.subarray(i>>>0,i+r>>>0)):[]})},890789:(e,t,n,r,i)=>{a.la("ReduceL1",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(C.subarray(i>>>0,i+r>>>0)):[]})},890951:(e,t,n,r,i)=>{a.la("ReduceL2",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(C.subarray(i>>>0,i+r>>>0)):[]})},891113:(e,t,n,r,i)=>{a.la("ReduceLogSum",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(C.subarray(i>>>0,i+r>>>0)):[]})},891279:(e,t,n,r,i)=>{a.la("ReduceSumSquare",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(C.subarray(i>>>0,i+r>>>0)):[]})},891448:(e,t,n,r,i)=>{a.la("ReduceLogSumExp",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(C.subarray(i>>>0,i+r>>>0)):[]})},891617:(e,t,n)=>{a.la("Transpose",e,{perm:t?Array.from(C.subarray(n>>>0,n+t>>>0)):[]})},891730:(e,t,n,r,i,o,s,u,l,c)=>{a.la("Conv",e,{format:l?"NHWC":"NCHW",auto_pad:t,dilations:[n],group:r,kernel_shape:[i],pads:[o,s],strides:[u],w_is_const:()=>!!_[c>>>0]})},891958:(e,t,n,r,i,o,s,u,l,c,d,p,f,h,g)=>{a.la("Conv",e,{format:h?"NHWC":"NCHW",auto_pad:t,dilations:[n,r],group:i,kernel_shape:[o,s],pads:[u,l,c,d],strides:[p,f],w_is_const:()=>!!_[g>>>0]})},892217:(e,t,n,r,i,o,s,u,l,c)=>{a.la("Conv",e,{format:l?"NHWC":"NCHW",auto_pad:t,dilations:[n],group:r,kernel_shape:[i],pads:[o,s],strides:[u],w_is_const:()=>!!_[c>>>0]})},892445:(e,t,n,r,i,o,s,u,l,c,d,p,f,h,g)=>{a.la("Conv",e,{format:h?"NHWC":"NCHW",auto_pad:t,dilations:[n,r],group:i,kernel_shape:[o,s],pads:[u,l,c,d],strides:[p,f],w_is_const:()=>!!_[g>>>0]})},892704:(e,t,n,r,i,o,s,u,l,c,d,p,f,h)=>{a.la("ConvTranspose",e,{format:l?"NHWC":"NCHW",autoPad:t,dilations:[n],group:r,kernel_shape:[i],pads:[o,s],strides:[u],wIsConst:()=>!!_[c>>>0],outputPadding:d?Array.from(C.subarray(p>>>0,p+d>>>0)):[],outputShape:f?Array.from(C.subarray(h>>>0,h+f>>>0)):[]})},893084:(e,t,n,r,i,o,s,u,l,c,d,p,f)=>{a.la("ConvTranspose",e,{format:u?"NHWC":"NCHW",autoPad:t,dilations:Array.from(C.subarray(n>>>0,n+2>>>0)),group:r,kernelShape:Array.from(C.subarray(i>>>0,i+2>>>0)),pads:Array.from(C.subarray(o>>>0,o+4>>>0)),strides:Array.from(C.subarray(s>>>0,s+2>>>0)),wIsConst:()=>!!_[l>>>0],outputPadding:0<c?Array.from(C.subarray(d>>>0,d+c>>>0)):[],outputShape:0<p?Array.from(C.subarray(f>>>0,f+p>>>0)):[]})},893607:(e,t,n,r,i,o,s,u,l,c,d,p,f,h)=>{a.la("ConvTranspose",e,{format:l?"NHWC":"NCHW",autoPad:t,dilations:[n],group:r,kernel_shape:[i],pads:[o,s],strides:[u],wIsConst:()=>!!_[c>>>0],outputPadding:d?Array.from(C.subarray(p>>>0,p+d>>>0)):[],outputShape:f?Array.from(C.subarray(h>>>0,h+f>>>0)):[]})},893987:(e,t,n,r,i,o,s,u,l,c,d,p,f)=>{a.la("ConvTranspose",e,{format:u?"NHWC":"NCHW",autoPad:t,dilations:Array.from(C.subarray(n>>>0,n+2>>>0)),group:r,kernelShape:Array.from(C.subarray(i>>>0,i+2>>>0)),pads:Array.from(C.subarray(o>>>0,o+4>>>0)),strides:Array.from(C.subarray(s>>>0,s+2>>>0)),wIsConst:()=>!!_[l>>>0],outputPadding:0<c?Array.from(C.subarray(d>>>0,d+c>>>0)):[],outputShape:0<p?Array.from(C.subarray(f>>>0,f+p>>>0)):[]})},894510:(e,t)=>{a.la("GlobalAveragePool",e,{format:t?"NHWC":"NCHW"})},894601:(e,t,n,r,i,o,s,u,l,c,d,p,f,h,g,m)=>{a.la("AveragePool",e,{format:m?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:i,dilations:[o,s],kernel_shape:[u,l],pads:[c,d,p,f],strides:[h,g]})},894885:(e,t)=>{a.la("GlobalAveragePool",e,{format:t?"NHWC":"NCHW"})},894976:(e,t,n,r,i,o,s,u,l,c,d,p,f,h,g,m)=>{a.la("AveragePool",e,{format:m?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:i,dilations:[o,s],kernel_shape:[u,l],pads:[c,d,p,f],strides:[h,g]})},895260:(e,t)=>{a.la("GlobalMaxPool",e,{format:t?"NHWC":"NCHW"})},895347:(e,t,n,r,i,o,s,u,l,c,d,p,f,h,g,m)=>{a.la("MaxPool",e,{format:m?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:i,dilations:[o,s],kernel_shape:[u,l],pads:[c,d,p,f],strides:[h,g]})},895627:(e,t)=>{a.la("GlobalMaxPool",e,{format:t?"NHWC":"NCHW"})},895714:(e,t,n,r,i,o,s,u,l,c,d,p,f,h,g,m)=>{a.la("MaxPool",e,{format:m?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:i,dilations:[o,s],kernel_shape:[u,l],pads:[c,d,p,f],strides:[h,g]})},895994:(e,t,n,r,i)=>{a.la("Gemm",e,{alpha:t,beta:n,transA:r,transB:i})},896098:e=>{a.la("MatMul",e,void 0)},896152:(e,t,n,r)=>{a.la("ArgMax",e,{keepDims:!!t,selectLastIndex:!!n,axis:r})},896260:(e,t,n,r)=>{a.la("ArgMin",e,{keepDims:!!t,selectLastIndex:!!n,axis:r})},896368:(e,t)=>{a.la("Softmax",e,{axis:t})},896431:(e,t)=>{a.la("Concat",e,{axis:t})},896491:(e,t,n,r,i)=>{a.la("Split",e,{axis:t,numOutputs:n,splitSizes:r?Array.from(C.subarray(i>>>0,i+r>>>0)):[]})},896636:e=>{a.la("Expand",e,void 0)},896690:(e,t)=>{a.la("Gather",e,{axis:Number(t)})},896761:(e,t,n,r,i,o,s,u,l,c,d)=>{a.la("Resize",e,{antialias:t,axes:n?Array.from(C.subarray(r>>>0,r+n>>>0)):[],coordinateTransformMode:Q(i),cubicCoeffA:o,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:Q(l),mode:Q(c),nearestMode:Q(d)})},897112:(e,t,n,r,i,o,s)=>{a.la("Slice",e,{starts:t?Array.from(C.subarray(n>>>0,n+t>>>0)):[],ends:r?Array.from(C.subarray(i>>>0,i+r>>>0)):[],axes:o?Array.from(C.subarray(s>>>0,s+o>>>0)):[]})},897343:e=>{a.la("Tile",e,void 0)},897395:(e,t,n)=>{a.la("LayerNormalization",e,{axis:Number(t),epsilon:Number(n)})},897502:(e,t,n)=>{a.la("InstanceNormalization",e,{epsilon:t,format:n?"NHWC":"NCHW"})},897616:(e,t,n)=>{a.la("InstanceNormalization",e,{epsilon:t,format:n?"NHWC":"NCHW"})},897730:e=>{a.la("Gelu",e,void 0)},897782:(e,t)=>{a.la("SkipLayerNormalization",e,{epsilon:t})},897863:e=>{a.Ha(e)},897897:(e,t)=>a.Ia(e,t)};function V(e){this.name="ExitStatus",this.message=`Program terminated with exit(${e})`,this.status=e}var K=e=>{for(;0<e.length;)e.shift()(a)};function q(e){this.za=e-24,this.Ra=function(e){O[this.za+4>>2>>>0]=e},this.Qa=function(e){O[this.za+8>>2>>>0]=e},this.Ka=function(e,t){this.Pa(),this.Ra(e),this.Qa(t)},this.Pa=function(){O[this.za+16>>2>>>0]=0}}var Y,X="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,J=(e,t,n)=>{var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&X)return X.decode(e.subarray(t,n));for(r="";t<n;){var a=e[t++];if(128&a){var i=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r},Q=(e,t)=>(e>>>=0)?J(A,e,t):"",Z=e=>{for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t},ee=(e,t,n,r)=>{if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<e.length;++i){var o=e.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++i)),127>=o){if(n>=r)break;t[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;t[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;t[n++>>>0]=224|o>>12}else{if(n+3>=r)break;t[n++>>>0]=240|o>>18,t[n++>>>0]=128|o>>12&63}t[n++>>>0]=128|o>>6&63}t[n++>>>0]=128|63&o}}return t[n>>>0]=0,n-a},te=e=>0==e%4&&(0!=e%100||0==e%400),ne=[0,31,60,91,121,152,182,213,244,274,305,335],re=[0,31,59,90,120,151,181,212,243,273,304,334],ae=e=>{var t=Z(e)+1,n=Oe(t);return n&&ee(e,A,n,t),n},ie=[],oe=(e,t)=>{var n;for(ie.length=0,t>>=2;n=A[e++>>>0];)t+=105!=n&t,ie.push(105==n?C[t>>>0]:T[t++>>>1]),++t;return ie},se={},ue=()=>{if(!Y){var e,t={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:l||"./this.program"};for(e in se)void 0===se[e]?delete t[e]:t[e]=se[e];var n=[];for(e in t)n.push(`${e}=${t[e]}`);Y=n}return Y},le=e=>{S=e,w||(a.onExit&&a.onExit(e),I=!0),c(e,new V(e))},ce=[null,[],[]],de=e=>(de=(()=>{if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return e=>crypto.getRandomValues(e);if(f)try{var e=n(760);if(e.randomFillSync)return t=>e.randomFillSync(t);var t=e.randomBytes;return e=>(e.set(t(e.byteLength)),e)}catch(e){}W("initRandomDevice")})())(e),pe=[31,29,31,30,31,30,31,31,30,31,30,31],fe=[31,28,31,30,31,30,31,31,30,31,30,31];function he(e,t,n,r){function a(e,t,n){for(e="number"==typeof e?e.toString():e||"";e.length<t;)e=n[0]+e;return e}function i(e,t){return a(e,t,"0")}function o(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.va;for(e=new Date(new Date(e.wa+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(te(e.getFullYear())?pe:fe)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),n=s(n),0>=o(t,e)?0>=o(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,n>>>=0;var l=C[40+(r>>>=0)>>2>>>0];for(var c in r={Na:C[r>>2>>>0],Ma:C[r+4>>2>>>0],xa:C[r+8>>2>>>0],Ba:C[r+12>>2>>>0],ya:C[r+16>>2>>>0],wa:C[r+20>>2>>>0],qa:C[r+24>>2>>>0],va:C[r+28>>2>>>0],Ta:C[r+32>>2>>>0],La:C[r+36>>2>>>0],Oa:l?Q(l):""},n=Q(n),l={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})n=n.replace(new RegExp(c,"g"),l[c]);var d="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),p="January February March April May June July August September October November December".split(" ");for(c in l={"%a":e=>d[e.qa].substring(0,3),"%A":e=>d[e.qa],"%b":e=>p[e.ya].substring(0,3),"%B":e=>p[e.ya],"%C":e=>i((e.wa+1900)/100|0,2),"%d":e=>i(e.Ba,2),"%e":e=>a(e.Ba,2," "),"%g":e=>u(e).toString().substring(2),"%G":e=>u(e),"%H":e=>i(e.xa,2),"%I":e=>(0==(e=e.xa)?e=12:12<e&&(e-=12),i(e,2)),"%j":e=>{for(var t=0,n=0;n<=e.ya-1;t+=(te(e.wa+1900)?pe:fe)[n++]);return i(e.Ba+t,3)},"%m":e=>i(e.ya+1,2),"%M":e=>i(e.Ma,2),"%n":()=>"\\n","%p":e=>0<=e.xa&&12>e.xa?"AM":"PM","%S":e=>i(e.Na,2),"%t":()=>"\\t","%u":e=>e.qa||7,"%U":e=>i(Math.floor((e.va+7-e.qa)/7),2),"%V":e=>{var t=Math.floor((e.va+7-(e.qa+6)%7)/7);if(2>=(e.qa+371-e.va-2)%7&&t++,t)53==t&&(4==(n=(e.qa+371-e.va)%7)||3==n&&te(e.wa)||(t=1));else{t=52;var n=(e.qa+7-e.va-1)%7;(4==n||5==n&&te(e.wa%400-1))&&t++}return i(t,2)},"%w":e=>e.qa,"%W":e=>i(Math.floor((e.va+7-(e.qa+6)%7)/7),2),"%y":e=>(e.wa+1900).toString().substring(2),"%Y":e=>e.wa+1900,"%z":e=>{var t=0<=(e=e.La);return e=Math.abs(e)/60,(t?"+":"-")+String("0000"+(e/60*100+e%60)).slice(-4)},"%Z":e=>e.Oa,"%%":()=>"%"},n=n.replace(/%%/g,"\\0\\0"),l)n.includes(c)&&(n=n.replace(new RegExp(c,"g"),l[c](r)));return c=function(e){var t=Array(Z(e)+1);return ee(e,t,0,t.length),t}(n=n.replace(/\\0\\0/g,"%")),c.length>t?0:(_.set(c,e>>>0),c.length-1)}function ge(e){try{e()}catch(e){W(e)}}var me=0,ye=null,be=0,ve=[],we={},$e={},xe=0,Se=null,_e=[];var Ae={o:function(e,t,n){return function(e){return function(e){if(!I){if(0===me){var t=!1,n=!1;e(((e=0)=>{if(!I&&(be=e,t=!0,n)){me=2,ge((()=>De(ye))),"undefined"!=typeof Browser&&Browser.Aa.Da&&Browser.Aa.resume(),e=!1;try{var r=(0,x[$e[C[ye+8>>2>>>0]]])()}catch(t){r=t,e=!0}var a=!1;if(!ye){var i=Se;i&&(Se=null,(e?i.reject:i.resolve)(r),a=!0)}if(e&&!a)throw r}})),n=!0,t||(me=1,ye=function(){var e=Oe(65548),t=e+12;O[e>>2>>>0]=t,O[e+4>>2>>>0]=t+65536,t=ve[0];var n=we[t];return void 0===n&&(n=xe++,we[t]=n,$e[n]=t),C[e+8>>2>>>0]=n,e}(),"undefined"!=typeof Browser&&Browser.Aa.Da&&Browser.Aa.pause(),ge((()=>Re(ye))))}else 2===me?(me=0,ge(ze),Te(ye),ye=null,_e.forEach((e=>{if(!I)try{if(e(),!w)try{S=e=S,le(e)}catch(e){e instanceof V||"unwind"==e||c(1,e)}}catch(e){e instanceof V||"unwind"==e||c(1,e)}}))):W(`invalid state: ${me}`);return be}}((t=>{e().then(t)}))}((async()=>{await a.Fa(e,t,n)}))},a:function(e,t,n){throw new q(e>>>=0).Ka(t>>>0,n>>>0),e},g:function(){return 0},L:function(){},C:function(){},E:function(){},N:function(){return 0},J:function(){},F:function(){},I:function(){},l:function(){},D:function(){},A:function(){},K:function(){},B:function(){},m:()=>!0,r:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),C[n>>2>>>0]=e.getUTCSeconds(),C[n+4>>2>>>0]=e.getUTCMinutes(),C[n+8>>2>>>0]=e.getUTCHours(),C[n+12>>2>>>0]=e.getUTCDate(),C[n+16>>2>>>0]=e.getUTCMonth(),C[n+20>>2>>>0]=e.getUTCFullYear()-1900,C[n+24>>2>>>0]=e.getUTCDay(),C[n+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},s:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),C[n>>2>>>0]=e.getSeconds(),C[n+4>>2>>>0]=e.getMinutes(),C[n+8>>2>>>0]=e.getHours(),C[n+12>>2>>>0]=e.getDate(),C[n+16>>2>>>0]=e.getMonth(),C[n+20>>2>>>0]=e.getFullYear()-1900,C[n+24>>2>>>0]=e.getDay(),C[n+28>>2>>>0]=(te(e.getFullYear())?ne:re)[e.getMonth()]+e.getDate()-1|0,C[n+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var r=new Date(e.getFullYear(),0,1).getTimezoneOffset();C[n+32>>2>>>0]=0|(t!=r&&e.getTimezoneOffset()==Math.min(r,t))},t:function(e){e>>>=0;var t=new Date(C[e+20>>2>>>0]+1900,C[e+16>>2>>>0],C[e+12>>2>>>0],C[e+8>>2>>>0],C[e+4>>2>>>0],C[e>>2>>>0],0),n=C[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),o=Math.min(i,a);return 0>n?C[e+32>>2>>>0]=Number(a!=i&&o==r):0<n!=(o==r)&&(a=Math.max(i,a),t.setTime(t.getTime()+6e4*((0<n?o:a)-r))),C[e+24>>2>>>0]=t.getDay(),C[e+28>>2>>>0]=(te(t.getFullYear())?ne:re)[t.getMonth()]+t.getDate()-1|0,C[e>>2>>>0]=t.getSeconds(),C[e+4>>2>>>0]=t.getMinutes(),C[e+8>>2>>>0]=t.getHours(),C[e+12>>2>>>0]=t.getDate(),C[e+16>>2>>>0]=t.getMonth(),C[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,Ie((H=e,1<=+Math.abs(H)?0<H?+Math.floor(H/4294967296)>>>0:~~+Math.ceil((H-+(~~H>>>0))/4294967296)>>>0:0)),e>>>0},p:function(){return-52},q:function(){},x:function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:"GMT"}n>>>=0;var a=(new Date).getFullYear(),i=new Date(a,0,1),o=new Date(a,6,1);a=i.getTimezoneOffset();var s=o.getTimezoneOffset();O[e>>>0>>2>>>0]=60*Math.max(a,s),C[t>>>0>>2>>>0]=Number(a!=s),e=r(i),t=r(o),e=ae(e),t=ae(t),s<a?(O[n>>2>>>0]=e,O[n+4>>2>>>0]=t):(O[n>>2>>>0]=t,O[n+4>>2>>>0]=e)},e:()=>{W("")},b:function(e,t,n){return e>>>=0,t=oe(t>>>0,n>>>0),F[e].apply(null,t)},i:function(e,t,n){return e>>>=0,t=oe(t>>>0,n>>>0),F[e].apply(null,t)},h:function(){return Date.now()},z:function(){return 4294901760},d:()=>performance.now(),M:function(e,t,n){return t>>>=0,A.copyWithin(e>>>0>>>0,t>>>0,t+(n>>>0)>>>0)},w:function(e){e>>>=0;var t=A.length;if(4294901760<e)return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math;r=Math.max(e,r);e:{a=a.min.call(a,4294901760,r+(65536-r%65536)%65536)-$.buffer.byteLength+65535>>>16;try{$.grow(a),E();var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},G:function(e,t){e>>>=0,t>>>=0;var n=0;return ue().forEach((function(r,a){var i=t+n;for(a=O[e+4*a>>2>>>0]=i,i=0;i<r.length;++i)_[a++>>0>>>0]=r.charCodeAt(i);_[a>>0>>>0]=0,n+=r.length+1})),0},H:function(e,t){e>>>=0,t>>>=0;var n=ue();O[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),O[t>>2>>>0]=r,0},n:e=>{S=e,le(e)},f:()=>52,k:function(){return 52},u:function(){return 70},j:function(e,t,n,r){t>>>=0,n>>>=0,r>>>=0;for(var a=0,i=0;i<n;i++){var o=O[t>>2>>>0],s=O[t+4>>2>>>0];t+=8;for(var u=0;u<s;u++){var l=A[o+u>>>0],c=ce[e];0===l||10===l?((1===e?b:v)(J(c,0)),c.length=0):c.push(l)}a+=s}return O[r>>2>>>0]=a,0},v:function(e,t){return e>>>=0,de(A.subarray(e>>>0,e+(t>>>0)>>>0)),0},y:he,c:function(e,t,n,r){return he(e>>>0,t>>>0,n>>>0,r>>>0)}};!function(){function e(e){if(e=function(e){var t,n={};for(t in e)!function(t){var r=e[t];n[t]="function"==typeof r?function(){ve.push(t);try{return r.apply(null,arguments)}finally{I||(ve.pop()===t||W(),ye&&1===me&&0===ve.length&&(me=0,ge(ke),"undefined"!=typeof Fibers&&Fibers.Ua()))}}:r}(t);return n}(e=e.exports),x=e=function(e){var t=e=>()=>e()>>>0,n=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.malloc=n(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=n(e.stackAlloc),e}(e),$=x.O,E(),M.unshift(x.P),z--,a.monitorRunDependencies&&a.monitorRunDependencies(z),0==z&&(null!==j&&(clearInterval(j),j=null),B)){var t=B;B=null,t()}return e}var t={a:Ae};if(z++,a.monitorRunDependencies&&a.monitorRunDependencies(z),a.instantiateWasm)try{return a.instantiateWasm(t,e)}catch(e){v("Module.instantiateWasm callback failed with error: "+e),r(e)}(function(e,t){var n=D;return y||"function"!=typeof WebAssembly.instantiateStreaming||G(n)||n.startsWith("file://")||f||"function"!=typeof fetch?L(n,e,t):fetch(n,{credentials:"same-origin"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(t,(function(r){return v("wasm streaming compile failed: "+r),v("falling back to ArrayBuffer instantiation"),L(n,e,t)}))))})(t,(function(t){e(t.instance)})).catch(r)}(),a._OrtInit=(e,t)=>(a._OrtInit=x.Q)(e,t),a._OrtGetLastError=(e,t)=>(a._OrtGetLastError=x.R)(e,t),a._OrtCreateSessionOptions=(e,t,n,r,i,o,s,u,l,c)=>(a._OrtCreateSessionOptions=x.S)(e,t,n,r,i,o,s,u,l,c),a._OrtAppendExecutionProvider=(e,t)=>(a._OrtAppendExecutionProvider=x.T)(e,t),a._OrtAddSessionConfigEntry=(e,t,n)=>(a._OrtAddSessionConfigEntry=x.U)(e,t,n),a._OrtReleaseSessionOptions=e=>(a._OrtReleaseSessionOptions=x.V)(e),a._OrtCreateSession=(e,t,n)=>(a._OrtCreateSession=x.W)(e,t,n),a._OrtReleaseSession=e=>(a._OrtReleaseSession=x.X)(e),a._OrtGetInputOutputCount=(e,t,n)=>(a._OrtGetInputOutputCount=x.Y)(e,t,n),a._OrtGetInputName=(e,t)=>(a._OrtGetInputName=x.Z)(e,t),a._OrtGetOutputName=(e,t)=>(a._OrtGetOutputName=x._)(e,t),a._OrtFree=e=>(a._OrtFree=x.$)(e),a._OrtCreateTensor=(e,t,n,r,i)=>(a._OrtCreateTensor=x.aa)(e,t,n,r,i),a._OrtGetTensorData=(e,t,n,r,i)=>(a._OrtGetTensorData=x.ba)(e,t,n,r,i),a._OrtReleaseTensor=e=>(a._OrtReleaseTensor=x.ca)(e),a._OrtCreateRunOptions=(e,t,n,r)=>(a._OrtCreateRunOptions=x.da)(e,t,n,r),a._OrtAddRunConfigEntry=(e,t,n)=>(a._OrtAddRunConfigEntry=x.ea)(e,t,n),a._OrtReleaseRunOptions=e=>(a._OrtReleaseRunOptions=x.fa)(e),a._OrtRun=(e,t,n,r,i,o,s,u)=>(a._OrtRun=x.ga)(e,t,n,r,i,o,s,u),a._OrtEndProfiling=e=>(a._OrtEndProfiling=x.ha)(e),a._JsepOutput=(e,t,n)=>(a._JsepOutput=x.ia)(e,t,n);var Ce,Oe=a._malloc=e=>(Oe=a._malloc=x.ja)(e),Te=a._free=e=>(Te=a._free=x.ka)(e),Ie=e=>(Ie=x.ma)(e),Ee=()=>(Ee=x.na)(),Pe=e=>(Pe=x.oa)(e),Me=e=>(Me=x.pa)(e),Re=e=>(Re=x.ra)(e),ke=()=>(ke=x.sa)(),De=e=>(De=x.ta)(e),ze=()=>(ze=x.ua)();function je(){function e(){if(!Ce&&(Ce=!0,a.calledRun=!0,!I)){if(K(M),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),a.postRun)for("function"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;){var e=a.postRun.shift();R.unshift(e)}K(R)}}if(!(0<z)){if(a.preRun)for("function"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)k();K(P),0<z||(a.setStatus?(a.setStatus("Running..."),setTimeout((function(){setTimeout((function(){a.setStatus("")}),1),e()}),1)):e())}}if(a.___start_em_js=897932,a.___stop_em_js=898093,a.stackAlloc=Me,a.stackSave=Ee,a.stackRestore=Pe,a.UTF8ToString=Q,a.stringToUTF8=(e,t,n)=>ee(e,A,t,n),a.lengthBytesUTF8=Z,B=function e(){Ce||je(),Ce||(B=e)},a.preInit)for("function"==typeof a.preInit&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return je(),e.ready});e.exports=r},4154:e=>{"use strict";e.exports=\'"use strict";var e={},a="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node;if(a){var r=require("worker_threads"),t=r.parentPort;t.on("message",(e=>onmessage({data:e})));var s=require("fs");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:e=>(0,eval)(s.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>t.postMessage(e),performance:global.performance||{now:Date.now}})}var o=!1,d=function(){var e=Array.prototype.slice.call(arguments).join(" ");a?s.writeSync(2,e+"\\\\n"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if("load"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:"loaded"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=(...e)=>{postMessage({cmd:"callHandler",handler:a,args:e})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,"string"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if("run"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if("unwind"!=e)throw e}}else"cancel"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):"setimmediate"===r.data.target||("checkMailbox"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(d("worker.js received unknown command "+r.data.cmd),d(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\n\'},760:()=>{},1384:()=>{},3993:()=>{},908:()=>{},6953:()=>{},9925:()=>{},6449:()=>{}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}(()=>{"use strict";const e=n(1259),t=n(263);self.onmessage=n=>{switch(n.data.type){case"init-wasm":try{(0,t.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:"init-wasm"})),(e=>postMessage({type:"init-wasm",err:e})))}catch(e){postMessage({type:"init-wasm",err:e})}break;case"init-ort":try{(0,e.initRuntime)(n.data.in).then((()=>postMessage({type:"init-ort"})),(e=>postMessage({type:"init-ort",err:e}))),postMessage({type:"init-ort"})}catch(e){postMessage({type:"init-ort",err:e})}break;case"create_allocate":try{const{model:t}=n.data.in,r=(0,e.createSessionAllocate)(t);postMessage({type:"create_allocate",out:r})}catch(e){postMessage({type:"create_allocate",err:e})}break;case"create_finalize":try{const{modeldata:t,options:r}=n.data.in,a=(0,e.createSessionFinalize)(t,r);postMessage({type:"create_finalize",out:a})}catch(e){postMessage({type:"create_finalize",err:e})}break;case"create":try{const{model:t,options:r}=n.data.in,a=(0,e.createSession)(t,r);postMessage({type:"create",out:a})}catch(e){postMessage({type:"create",err:e})}break;case"release":try{const t=n.data.in;(0,e.releaseSession)(t),postMessage({type:"release"})}catch(e){postMessage({type:"release",err:e})}break;case"run":try{const{sessionId:t,inputIndices:r,inputs:a,outputIndices:i,options:o}=n.data.in;(0,e.run)(t,r,a,i,o).then((t=>{postMessage({type:"run",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:"run",err:e})}))}catch(e){postMessage({type:"run",err:e})}break;case"end-profiling":try{const t=n.data.in;(0,e.endProfiling)(t),postMessage({type:"end-profiling"})}catch(e){postMessage({type:"end-profiling",err:e})}}}})()})();\n',"Worker",void 0,void 0)}},6614:n=>{n.exports=function(e,t,r,s){var a=self||window;try{try{var i;try{i=new a.Blob([e])}catch{(i=new(a.BlobBuilder||a.WebKitBlobBuilder||a.MozBlobBuilder||a.MSBlobBuilder)).append(e),i=i.getBlob()}var l=a.URL||a.webkitURL,u=l.createObjectURL(i),h=new a[t](u,r);return l.revokeObjectURL(u),h}catch{return new a[t]("data:application/javascript,".concat(encodeURIComponent(e)),r)}}catch{if(!s)throw Error("Inline worker is not supported");return new a[t](s,r)}}},2446:(n,e,t)=>{var r,s,a,i=t(2100),l=i.Reader,u=i.Writer,h=i.util,f=i.roots.default||(i.roots.default={});f.onnx=((a={}).Version=(r={},(s=Object.create(r))[r[0]="_START_VERSION"]=0,s[r[1]="IR_VERSION_2017_10_10"]=1,s[r[2]="IR_VERSION_2017_10_30"]=2,s[r[3]="IR_VERSION_2017_11_3"]=3,s[r[4]="IR_VERSION_2019_1_22"]=4,s[r[5]="IR_VERSION_2019_3_18"]=5,s[r[6]="IR_VERSION_2019_9_19"]=6,s[r[7]="IR_VERSION_2020_5_8"]=7,s[r[8]="IR_VERSION_2021_7_30"]=8,s[r[9]="IR_VERSION"]=9,s),a.AttributeProto=function(){function c(o){if(this.floats=[],this.ints=[],this.strings=[],this.tensors=[],this.graphs=[],this.sparseTensors=[],this.typeProtos=[],o)for(var d=Object.keys(o),m=0;m<d.length;++m)o[d[m]]!=null&&(this[d[m]]=o[d[m]])}return c.prototype.name="",c.prototype.refAttrName="",c.prototype.docString="",c.prototype.type=0,c.prototype.f=0,c.prototype.i=h.Long?h.Long.fromBits(0,0,!1):0,c.prototype.s=h.newBuffer([]),c.prototype.t=null,c.prototype.g=null,c.prototype.sparseTensor=null,c.prototype.tp=null,c.prototype.floats=h.emptyArray,c.prototype.ints=h.emptyArray,c.prototype.strings=h.emptyArray,c.prototype.tensors=h.emptyArray,c.prototype.graphs=h.emptyArray,c.prototype.sparseTensors=h.emptyArray,c.prototype.typeProtos=h.emptyArray,c.create=function(o){return new c(o)},c.encode=function(o,d){if(d||(d=u.create()),o.name!=null&&Object.hasOwnProperty.call(o,"name")&&d.uint32(10).string(o.name),o.f!=null&&Object.hasOwnProperty.call(o,"f")&&d.uint32(21).float(o.f),o.i!=null&&Object.hasOwnProperty.call(o,"i")&&d.uint32(24).int64(o.i),o.s!=null&&Object.hasOwnProperty.call(o,"s")&&d.uint32(34).bytes(o.s),o.t!=null&&Object.hasOwnProperty.call(o,"t")&&f.onnx.TensorProto.encode(o.t,d.uint32(42).fork()).ldelim(),o.g!=null&&Object.hasOwnProperty.call(o,"g")&&f.onnx.GraphProto.encode(o.g,d.uint32(50).fork()).ldelim(),o.floats!=null&&o.floats.length){d.uint32(58).fork();for(var m=0;m<o.floats.length;++m)d.float(o.floats[m]);d.ldelim()}if(o.ints!=null&&o.ints.length){for(d.uint32(66).fork(),m=0;m<o.ints.length;++m)d.int64(o.ints[m]);d.ldelim()}if(o.strings!=null&&o.strings.length)for(m=0;m<o.strings.length;++m)d.uint32(74).bytes(o.strings[m]);if(o.tensors!=null&&o.tensors.length)for(m=0;m<o.tensors.length;++m)f.onnx.TensorProto.encode(o.tensors[m],d.uint32(82).fork()).ldelim();if(o.graphs!=null&&o.graphs.length)for(m=0;m<o.graphs.length;++m)f.onnx.GraphProto.encode(o.graphs[m],d.uint32(90).fork()).ldelim();if(o.docString!=null&&Object.hasOwnProperty.call(o,"docString")&&d.uint32(106).string(o.docString),o.tp!=null&&Object.hasOwnProperty.call(o,"tp")&&f.onnx.TypeProto.encode(o.tp,d.uint32(114).fork()).ldelim(),o.typeProtos!=null&&o.typeProtos.length)for(m=0;m<o.typeProtos.length;++m)f.onnx.TypeProto.encode(o.typeProtos[m],d.uint32(122).fork()).ldelim();if(o.type!=null&&Object.hasOwnProperty.call(o,"type")&&d.uint32(160).int32(o.type),o.refAttrName!=null&&Object.hasOwnProperty.call(o,"refAttrName")&&d.uint32(170).string(o.refAttrName),o.sparseTensor!=null&&Object.hasOwnProperty.call(o,"sparseTensor")&&f.onnx.SparseTensorProto.encode(o.sparseTensor,d.uint32(178).fork()).ldelim(),o.sparseTensors!=null&&o.sparseTensors.length)for(m=0;m<o.sparseTensors.length;++m)f.onnx.SparseTensorProto.encode(o.sparseTensors[m],d.uint32(186).fork()).ldelim();return d},c.encodeDelimited=function(o,d){return this.encode(o,d).ldelim()},c.decode=function(o,d){o instanceof l||(o=l.create(o));for(var m=d===void 0?o.len:o.pos+d,g=new f.onnx.AttributeProto;o.pos<m;){var y=o.uint32();switch(y>>>3){case 1:g.name=o.string();break;case 21:g.refAttrName=o.string();break;case 13:g.docString=o.string();break;case 20:g.type=o.int32();break;case 2:g.f=o.float();break;case 3:g.i=o.int64();break;case 4:g.s=o.bytes();break;case 5:g.t=f.onnx.TensorProto.decode(o,o.uint32());break;case 6:g.g=f.onnx.GraphProto.decode(o,o.uint32());break;case 22:g.sparseTensor=f.onnx.SparseTensorProto.decode(o,o.uint32());break;case 14:g.tp=f.onnx.TypeProto.decode(o,o.uint32());break;case 7:if(g.floats&&g.floats.length||(g.floats=[]),(7&y)==2)for(var $=o.uint32()+o.pos;o.pos<$;)g.floats.push(o.float());else g.floats.push(o.float());break;case 8:if(g.ints&&g.ints.length||(g.ints=[]),(7&y)==2)for($=o.uint32()+o.pos;o.pos<$;)g.ints.push(o.int64());else g.ints.push(o.int64());break;case 9:g.strings&&g.strings.length||(g.strings=[]),g.strings.push(o.bytes());break;case 10:g.tensors&&g.tensors.length||(g.tensors=[]),g.tensors.push(f.onnx.TensorProto.decode(o,o.uint32()));break;case 11:g.graphs&&g.graphs.length||(g.graphs=[]),g.graphs.push(f.onnx.GraphProto.decode(o,o.uint32()));break;case 23:g.sparseTensors&&g.sparseTensors.length||(g.sparseTensors=[]),g.sparseTensors.push(f.onnx.SparseTensorProto.decode(o,o.uint32()));break;case 15:g.typeProtos&&g.typeProtos.length||(g.typeProtos=[]),g.typeProtos.push(f.onnx.TypeProto.decode(o,o.uint32()));break;default:o.skipType(7&y)}}return g},c.decodeDelimited=function(o){return o instanceof l||(o=new l(o)),this.decode(o,o.uint32())},c.verify=function(o){if(typeof o!="object"||o===null)return"object expected";if(o.name!=null&&o.hasOwnProperty("name")&&!h.isString(o.name))return"name: string expected";if(o.refAttrName!=null&&o.hasOwnProperty("refAttrName")&&!h.isString(o.refAttrName))return"refAttrName: string expected";if(o.docString!=null&&o.hasOwnProperty("docString")&&!h.isString(o.docString))return"docString: string expected";if(o.type!=null&&o.hasOwnProperty("type"))switch(o.type){default:return"type: enum value expected";case 0:case 1:case 2:case 3:case 4:case 5:case 11:case 13:case 6:case 7:case 8:case 9:case 10:case 12:case 14:}if(o.f!=null&&o.hasOwnProperty("f")&&typeof o.f!="number")return"f: number expected";if(o.i!=null&&o.hasOwnProperty("i")&&!(h.isInteger(o.i)||o.i&&h.isInteger(o.i.low)&&h.isInteger(o.i.high)))return"i: integer|Long expected";if(o.s!=null&&o.hasOwnProperty("s")&&!(o.s&&typeof o.s.length=="number"||h.isString(o.s)))return"s: buffer expected";if(o.t!=null&&o.hasOwnProperty("t")&&(m=f.onnx.TensorProto.verify(o.t)))return"t."+m;if(o.g!=null&&o.hasOwnProperty("g")&&(m=f.onnx.GraphProto.verify(o.g)))return"g."+m;if(o.sparseTensor!=null&&o.hasOwnProperty("sparseTensor")&&(m=f.onnx.SparseTensorProto.verify(o.sparseTensor)))return"sparseTensor."+m;if(o.tp!=null&&o.hasOwnProperty("tp")&&(m=f.onnx.TypeProto.verify(o.tp)))return"tp."+m;if(o.floats!=null&&o.hasOwnProperty("floats")){if(!Array.isArray(o.floats))return"floats: array expected";for(var d=0;d<o.floats.length;++d)if(typeof o.floats[d]!="number")return"floats: number[] expected"}if(o.ints!=null&&o.hasOwnProperty("ints")){if(!Array.isArray(o.ints))return"ints: array expected";for(d=0;d<o.ints.length;++d)if(!(h.isInteger(o.ints[d])||o.ints[d]&&h.isInteger(o.ints[d].low)&&h.isInteger(o.ints[d].high)))return"ints: integer|Long[] expected"}if(o.strings!=null&&o.hasOwnProperty("strings")){if(!Array.isArray(o.strings))return"strings: array expected";for(d=0;d<o.strings.length;++d)if(!(o.strings[d]&&typeof o.strings[d].length=="number"||h.isString(o.strings[d])))return"strings: buffer[] expected"}if(o.tensors!=null&&o.hasOwnProperty("tensors")){if(!Array.isArray(o.tensors))return"tensors: array expected";for(d=0;d<o.tensors.length;++d)if(m=f.onnx.TensorProto.verify(o.tensors[d]))return"tensors."+m}if(o.graphs!=null&&o.hasOwnProperty("graphs")){if(!Array.isArray(o.graphs))return"graphs: array expected";for(d=0;d<o.graphs.length;++d)if(m=f.onnx.GraphProto.verify(o.graphs[d]))return"graphs."+m}if(o.sparseTensors!=null&&o.hasOwnProperty("sparseTensors")){if(!Array.isArray(o.sparseTensors))return"sparseTensors: array expected";for(d=0;d<o.sparseTensors.length;++d)if(m=f.onnx.SparseTensorProto.verify(o.sparseTensors[d]))return"sparseTensors."+m}if(o.typeProtos!=null&&o.hasOwnProperty("typeProtos")){if(!Array.isArray(o.typeProtos))return"typeProtos: array expected";for(d=0;d<o.typeProtos.length;++d){var m;if(m=f.onnx.TypeProto.verify(o.typeProtos[d]))return"typeProtos."+m}}return null},c.fromObject=function(o){if(o instanceof f.onnx.AttributeProto)return o;var d=new f.onnx.AttributeProto;switch(o.name!=null&&(d.name=String(o.name)),o.refAttrName!=null&&(d.refAttrName=String(o.refAttrName)),o.docString!=null&&(d.docString=String(o.docString)),o.type){default:if(typeof o.type=="number"){d.type=o.type;break}break;case"UNDEFINED":case 0:d.type=0;break;case"FLOAT":case 1:d.type=1;break;case"INT":case 2:d.type=2;break;case"STRING":case 3:d.type=3;break;case"TENSOR":case 4:d.type=4;break;case"GRAPH":case 5:d.type=5;break;case"SPARSE_TENSOR":case 11:d.type=11;break;case"TYPE_PROTO":case 13:d.type=13;break;case"FLOATS":case 6:d.type=6;break;case"INTS":case 7:d.type=7;break;case"STRINGS":case 8:d.type=8;break;case"TENSORS":case 9:d.type=9;break;case"GRAPHS":case 10:d.type=10;break;case"SPARSE_TENSORS":case 12:d.type=12;break;case"TYPE_PROTOS":case 14:d.type=14}if(o.f!=null&&(d.f=Number(o.f)),o.i!=null&&(h.Long?(d.i=h.Long.fromValue(o.i)).unsigned=!1:typeof o.i=="string"?d.i=parseInt(o.i,10):typeof o.i=="number"?d.i=o.i:typeof o.i=="object"&&(d.i=new h.LongBits(o.i.low>>>0,o.i.high>>>0).toNumber())),o.s!=null&&(typeof o.s=="string"?h.base64.decode(o.s,d.s=h.newBuffer(h.base64.length(o.s)),0):o.s.length>=0&&(d.s=o.s)),o.t!=null){if(typeof o.t!="object")throw TypeError(".onnx.AttributeProto.t: object expected");d.t=f.onnx.TensorProto.fromObject(o.t)}if(o.g!=null){if(typeof o.g!="object")throw TypeError(".onnx.AttributeProto.g: object expected");d.g=f.onnx.GraphProto.fromObject(o.g)}if(o.sparseTensor!=null){if(typeof o.sparseTensor!="object")throw TypeError(".onnx.AttributeProto.sparseTensor: object expected");d.sparseTensor=f.onnx.SparseTensorProto.fromObject(o.sparseTensor)}if(o.tp!=null){if(typeof o.tp!="object")throw TypeError(".onnx.AttributeProto.tp: object expected");d.tp=f.onnx.TypeProto.fromObject(o.tp)}if(o.floats){if(!Array.isArray(o.floats))throw TypeError(".onnx.AttributeProto.floats: array expected");d.floats=[];for(var m=0;m<o.floats.length;++m)d.floats[m]=Number(o.floats[m])}if(o.ints){if(!Array.isArray(o.ints))throw TypeError(".onnx.AttributeProto.ints: array expected");for(d.ints=[],m=0;m<o.ints.length;++m)h.Long?(d.ints[m]=h.Long.fromValue(o.ints[m])).unsigned=!1:typeof o.ints[m]=="string"?d.ints[m]=parseInt(o.ints[m],10):typeof o.ints[m]=="number"?d.ints[m]=o.ints[m]:typeof o.ints[m]=="object"&&(d.ints[m]=new h.LongBits(o.ints[m].low>>>0,o.ints[m].high>>>0).toNumber())}if(o.strings){if(!Array.isArray(o.strings))throw TypeError(".onnx.AttributeProto.strings: array expected");for(d.strings=[],m=0;m<o.strings.length;++m)typeof o.strings[m]=="string"?h.base64.decode(o.strings[m],d.strings[m]=h.newBuffer(h.base64.length(o.strings[m])),0):o.strings[m].length>=0&&(d.strings[m]=o.strings[m])}if(o.tensors){if(!Array.isArray(o.tensors))throw TypeError(".onnx.AttributeProto.tensors: array expected");for(d.tensors=[],m=0;m<o.tensors.length;++m){if(typeof o.tensors[m]!="object")throw TypeError(".onnx.AttributeProto.tensors: object expected");d.tensors[m]=f.onnx.TensorProto.fromObject(o.tensors[m])}}if(o.graphs){if(!Array.isArray(o.graphs))throw TypeError(".onnx.AttributeProto.graphs: array expected");for(d.graphs=[],m=0;m<o.graphs.length;++m){if(typeof o.graphs[m]!="object")throw TypeError(".onnx.AttributeProto.graphs: object expected");d.graphs[m]=f.onnx.GraphProto.fromObject(o.graphs[m])}}if(o.sparseTensors){if(!Array.isArray(o.sparseTensors))throw TypeError(".onnx.AttributeProto.sparseTensors: array expected");for(d.sparseTensors=[],m=0;m<o.sparseTensors.length;++m){if(typeof o.sparseTensors[m]!="object")throw TypeError(".onnx.AttributeProto.sparseTensors: object expected");d.sparseTensors[m]=f.onnx.SparseTensorProto.fromObject(o.sparseTensors[m])}}if(o.typeProtos){if(!Array.isArray(o.typeProtos))throw TypeError(".onnx.AttributeProto.typeProtos: array expected");for(d.typeProtos=[],m=0;m<o.typeProtos.length;++m){if(typeof o.typeProtos[m]!="object")throw TypeError(".onnx.AttributeProto.typeProtos: object expected");d.typeProtos[m]=f.onnx.TypeProto.fromObject(o.typeProtos[m])}}return d},c.toObject=function(o,d){d||(d={});var m={};if((d.arrays||d.defaults)&&(m.floats=[],m.ints=[],m.strings=[],m.tensors=[],m.graphs=[],m.typeProtos=[],m.sparseTensors=[]),d.defaults){if(m.name="",m.f=0,h.Long){var g=new h.Long(0,0,!1);m.i=d.longs===String?g.toString():d.longs===Number?g.toNumber():g}else m.i=d.longs===String?"0":0;d.bytes===String?m.s="":(m.s=[],d.bytes!==Array&&(m.s=h.newBuffer(m.s))),m.t=null,m.g=null,m.docString="",m.tp=null,m.type=d.enums===String?"UNDEFINED":0,m.refAttrName="",m.sparseTensor=null}if(o.name!=null&&o.hasOwnProperty("name")&&(m.name=o.name),o.f!=null&&o.hasOwnProperty("f")&&(m.f=d.json&&!isFinite(o.f)?String(o.f):o.f),o.i!=null&&o.hasOwnProperty("i")&&(typeof o.i=="number"?m.i=d.longs===String?String(o.i):o.i:m.i=d.longs===String?h.Long.prototype.toString.call(o.i):d.longs===Number?new h.LongBits(o.i.low>>>0,o.i.high>>>0).toNumber():o.i),o.s!=null&&o.hasOwnProperty("s")&&(m.s=d.bytes===String?h.base64.encode(o.s,0,o.s.length):d.bytes===Array?Array.prototype.slice.call(o.s):o.s),o.t!=null&&o.hasOwnProperty("t")&&(m.t=f.onnx.TensorProto.toObject(o.t,d)),o.g!=null&&o.hasOwnProperty("g")&&(m.g=f.onnx.GraphProto.toObject(o.g,d)),o.floats&&o.floats.length){m.floats=[];for(var y=0;y<o.floats.length;++y)m.floats[y]=d.json&&!isFinite(o.floats[y])?String(o.floats[y]):o.floats[y]}if(o.ints&&o.ints.length)for(m.ints=[],y=0;y<o.ints.length;++y)typeof o.ints[y]=="number"?m.ints[y]=d.longs===String?String(o.ints[y]):o.ints[y]:m.ints[y]=d.longs===String?h.Long.prototype.toString.call(o.ints[y]):d.longs===Number?new h.LongBits(o.ints[y].low>>>0,o.ints[y].high>>>0).toNumber():o.ints[y];if(o.strings&&o.strings.length)for(m.strings=[],y=0;y<o.strings.length;++y)m.strings[y]=d.bytes===String?h.base64.encode(o.strings[y],0,o.strings[y].length):d.bytes===Array?Array.prototype.slice.call(o.strings[y]):o.strings[y];if(o.tensors&&o.tensors.length)for(m.tensors=[],y=0;y<o.tensors.length;++y)m.tensors[y]=f.onnx.TensorProto.toObject(o.tensors[y],d);if(o.graphs&&o.graphs.length)for(m.graphs=[],y=0;y<o.graphs.length;++y)m.graphs[y]=f.onnx.GraphProto.toObject(o.graphs[y],d);if(o.docString!=null&&o.hasOwnProperty("docString")&&(m.docString=o.docString),o.tp!=null&&o.hasOwnProperty("tp")&&(m.tp=f.onnx.TypeProto.toObject(o.tp,d)),o.typeProtos&&o.typeProtos.length)for(m.typeProtos=[],y=0;y<o.typeProtos.length;++y)m.typeProtos[y]=f.onnx.TypeProto.toObject(o.typeProtos[y],d);if(o.type!=null&&o.hasOwnProperty("type")&&(m.type=d.enums===String?f.onnx.AttributeProto.AttributeType[o.type]===void 0?o.type:f.onnx.AttributeProto.AttributeType[o.type]:o.type),o.refAttrName!=null&&o.hasOwnProperty("refAttrName")&&(m.refAttrName=o.refAttrName),o.sparseTensor!=null&&o.hasOwnProperty("sparseTensor")&&(m.sparseTensor=f.onnx.SparseTensorProto.toObject(o.sparseTensor,d)),o.sparseTensors&&o.sparseTensors.length)for(m.sparseTensors=[],y=0;y<o.sparseTensors.length;++y)m.sparseTensors[y]=f.onnx.SparseTensorProto.toObject(o.sparseTensors[y],d);return m},c.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},c.getTypeUrl=function(o){return o===void 0&&(o="type.googleapis.com"),o+"/onnx.AttributeProto"},c.AttributeType=function(){var o={},d=Object.create(o);return d[o[0]="UNDEFINED"]=0,d[o[1]="FLOAT"]=1,d[o[2]="INT"]=2,d[o[3]="STRING"]=3,d[o[4]="TENSOR"]=4,d[o[5]="GRAPH"]=5,d[o[11]="SPARSE_TENSOR"]=11,d[o[13]="TYPE_PROTO"]=13,d[o[6]="FLOATS"]=6,d[o[7]="INTS"]=7,d[o[8]="STRINGS"]=8,d[o[9]="TENSORS"]=9,d[o[10]="GRAPHS"]=10,d[o[12]="SPARSE_TENSORS"]=12,d[o[14]="TYPE_PROTOS"]=14,d}(),c}(),a.ValueInfoProto=function(){function c(o){if(o)for(var d=Object.keys(o),m=0;m<d.length;++m)o[d[m]]!=null&&(this[d[m]]=o[d[m]])}return c.prototype.name="",c.prototype.type=null,c.prototype.docString="",c.create=function(o){return new c(o)},c.encode=function(o,d){return d||(d=u.create()),o.name!=null&&Object.hasOwnProperty.call(o,"name")&&d.uint32(10).string(o.name),o.type!=null&&Object.hasOwnProperty.call(o,"type")&&f.onnx.TypeProto.encode(o.type,d.uint32(18).fork()).ldelim(),o.docString!=null&&Object.hasOwnProperty.call(o,"docString")&&d.uint32(26).string(o.docString),d},c.encodeDelimited=function(o,d){return this.encode(o,d).ldelim()},c.decode=function(o,d){o instanceof l||(o=l.create(o));for(var m=d===void 0?o.len:o.pos+d,g=new f.onnx.ValueInfoProto;o.pos<m;){var y=o.uint32();switch(y>>>3){case 1:g.name=o.string();break;case 2:g.type=f.onnx.TypeProto.decode(o,o.uint32());break;case 3:g.docString=o.string();break;default:o.skipType(7&y)}}return g},c.decodeDelimited=function(o){return o instanceof l||(o=new l(o)),this.decode(o,o.uint32())},c.verify=function(o){if(typeof o!="object"||o===null)return"object expected";if(o.name!=null&&o.hasOwnProperty("name")&&!h.isString(o.name))return"name: string expected";if(o.type!=null&&o.hasOwnProperty("type")){var d=f.onnx.TypeProto.verify(o.type);if(d)return"type."+d}return o.docString!=null&&o.hasOwnProperty("docString")&&!h.isString(o.docString)?"docString: string expected":null},c.fromObject=function(o){if(o instanceof f.onnx.ValueInfoProto)return o;var d=new f.onnx.ValueInfoProto;if(o.name!=null&&(d.name=String(o.name)),o.type!=null){if(typeof o.type!="object")throw TypeError(".onnx.ValueInfoProto.type: object expected");d.type=f.onnx.TypeProto.fromObject(o.type)}return o.docString!=null&&(d.docString=String(o.docString)),d},c.toObject=function(o,d){d||(d={});var m={};return d.defaults&&(m.name="",m.type=null,m.docString=""),o.name!=null&&o.hasOwnProperty("name")&&(m.name=o.name),o.type!=null&&o.hasOwnProperty("type")&&(m.type=f.onnx.TypeProto.toObject(o.type,d)),o.docString!=null&&o.hasOwnProperty("docString")&&(m.docString=o.docString),m},c.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},c.getTypeUrl=function(o){return o===void 0&&(o="type.googleapis.com"),o+"/onnx.ValueInfoProto"},c}(),a.NodeProto=function(){function c(o){if(this.input=[],this.output=[],this.attribute=[],o)for(var d=Object.keys(o),m=0;m<d.length;++m)o[d[m]]!=null&&(this[d[m]]=o[d[m]])}return c.prototype.input=h.emptyArray,c.prototype.output=h.emptyArray,c.prototype.name="",c.prototype.opType="",c.prototype.domain="",c.prototype.attribute=h.emptyArray,c.prototype.docString="",c.create=function(o){return new c(o)},c.encode=function(o,d){if(d||(d=u.create()),o.input!=null&&o.input.length)for(var m=0;m<o.input.length;++m)d.uint32(10).string(o.input[m]);if(o.output!=null&&o.output.length)for(m=0;m<o.output.length;++m)d.uint32(18).string(o.output[m]);if(o.name!=null&&Object.hasOwnProperty.call(o,"name")&&d.uint32(26).string(o.name),o.opType!=null&&Object.hasOwnProperty.call(o,"opType")&&d.uint32(34).string(o.opType),o.attribute!=null&&o.attribute.length)for(m=0;m<o.attribute.length;++m)f.onnx.AttributeProto.encode(o.attribute[m],d.uint32(42).fork()).ldelim();return o.docString!=null&&Object.hasOwnProperty.call(o,"docString")&&d.uint32(50).string(o.docString),o.domain!=null&&Object.hasOwnProperty.call(o,"domain")&&d.uint32(58).string(o.domain),d},c.encodeDelimited=function(o,d){return this.encode(o,d).ldelim()},c.decode=function(o,d){o instanceof l||(o=l.create(o));for(var m=d===void 0?o.len:o.pos+d,g=new f.onnx.NodeProto;o.pos<m;){var y=o.uint32();switch(y>>>3){case 1:g.input&&g.input.length||(g.input=[]),g.input.push(o.string());break;case 2:g.output&&g.output.length||(g.output=[]),g.output.push(o.string());break;case 3:g.name=o.string();break;case 4:g.opType=o.string();break;case 7:g.domain=o.string();break;case 5:g.attribute&&g.attribute.length||(g.attribute=[]),g.attribute.push(f.onnx.AttributeProto.decode(o,o.uint32()));break;case 6:g.docString=o.string();break;default:o.skipType(7&y)}}return g},c.decodeDelimited=function(o){return o instanceof l||(o=new l(o)),this.decode(o,o.uint32())},c.verify=function(o){if(typeof o!="object"||o===null)return"object expected";if(o.input!=null&&o.hasOwnProperty("input")){if(!Array.isArray(o.input))return"input: array expected";for(var d=0;d<o.input.length;++d)if(!h.isString(o.input[d]))return"input: string[] expected"}if(o.output!=null&&o.hasOwnProperty("output")){if(!Array.isArray(o.output))return"output: array expected";for(d=0;d<o.output.length;++d)if(!h.isString(o.output[d]))return"output: string[] expected"}if(o.name!=null&&o.hasOwnProperty("name")&&!h.isString(o.name))return"name: string expected";if(o.opType!=null&&o.hasOwnProperty("opType")&&!h.isString(o.opType))return"opType: string expected";if(o.domain!=null&&o.hasOwnProperty("domain")&&!h.isString(o.domain))return"domain: string expected";if(o.attribute!=null&&o.hasOwnProperty("attribute")){if(!Array.isArray(o.attribute))return"attribute: array expected";for(d=0;d<o.attribute.length;++d){var m=f.onnx.AttributeProto.verify(o.attribute[d]);if(m)return"attribute."+m}}return o.docString!=null&&o.hasOwnProperty("docString")&&!h.isString(o.docString)?"docString: string expected":null},c.fromObject=function(o){if(o instanceof f.onnx.NodeProto)return o;var d=new f.onnx.NodeProto;if(o.input){if(!Array.isArray(o.input))throw TypeError(".onnx.NodeProto.input: array expected");d.input=[];for(var m=0;m<o.input.length;++m)d.input[m]=String(o.input[m])}if(o.output){if(!Array.isArray(o.output))throw TypeError(".onnx.NodeProto.output: array expected");for(d.output=[],m=0;m<o.output.length;++m)d.output[m]=String(o.output[m])}if(o.name!=null&&(d.name=String(o.name)),o.opType!=null&&(d.opType=String(o.opType)),o.domain!=null&&(d.domain=String(o.domain)),o.attribute){if(!Array.isArray(o.attribute))throw TypeError(".onnx.NodeProto.attribute: array expected");for(d.attribute=[],m=0;m<o.attribute.length;++m){if(typeof o.attribute[m]!="object")throw TypeError(".onnx.NodeProto.attribute: object expected");d.attribute[m]=f.onnx.AttributeProto.fromObject(o.attribute[m])}}return o.docString!=null&&(d.docString=String(o.docString)),d},c.toObject=function(o,d){d||(d={});var m={};if((d.arrays||d.defaults)&&(m.input=[],m.output=[],m.attribute=[]),d.defaults&&(m.name="",m.opType="",m.docString="",m.domain=""),o.input&&o.input.length){m.input=[];for(var g=0;g<o.input.length;++g)m.input[g]=o.input[g]}if(o.output&&o.output.length)for(m.output=[],g=0;g<o.output.length;++g)m.output[g]=o.output[g];if(o.name!=null&&o.hasOwnProperty("name")&&(m.name=o.name),o.opType!=null&&o.hasOwnProperty("opType")&&(m.opType=o.opType),o.attribute&&o.attribute.length)for(m.attribute=[],g=0;g<o.attribute.length;++g)m.attribute[g]=f.onnx.AttributeProto.toObject(o.attribute[g],d);return o.docString!=null&&o.hasOwnProperty("docString")&&(m.docString=o.docString),o.domain!=null&&o.hasOwnProperty("domain")&&(m.domain=o.domain),m},c.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},c.getTypeUrl=function(o){return o===void 0&&(o="type.googleapis.com"),o+"/onnx.NodeProto"},c}(),a.TrainingInfoProto=function(){function c(o){if(this.initializationBinding=[],this.updateBinding=[],o)for(var d=Object.keys(o),m=0;m<d.length;++m)o[d[m]]!=null&&(this[d[m]]=o[d[m]])}return c.prototype.initialization=null,c.prototype.algorithm=null,c.prototype.initializationBinding=h.emptyArray,c.prototype.updateBinding=h.emptyArray,c.create=function(o){return new c(o)},c.encode=function(o,d){if(d||(d=u.create()),o.initialization!=null&&Object.hasOwnProperty.call(o,"initialization")&&f.onnx.GraphProto.encode(o.initialization,d.uint32(10).fork()).ldelim(),o.algorithm!=null&&Object.hasOwnProperty.call(o,"algorithm")&&f.onnx.GraphProto.encode(o.algorithm,d.uint32(18).fork()).ldelim(),o.initializationBinding!=null&&o.initializationBinding.length)for(var m=0;m<o.initializationBinding.length;++m)f.onnx.StringStringEntryProto.encode(o.initializationBinding[m],d.uint32(26).fork()).ldelim();if(o.updateBinding!=null&&o.updateBinding.length)for(m=0;m<o.updateBinding.length;++m)f.onnx.StringStringEntryProto.encode(o.updateBinding[m],d.uint32(34).fork()).ldelim();return d},c.encodeDelimited=function(o,d){return this.encode(o,d).ldelim()},c.decode=function(o,d){o instanceof l||(o=l.create(o));for(var m=d===void 0?o.len:o.pos+d,g=new f.onnx.TrainingInfoProto;o.pos<m;){var y=o.uint32();switch(y>>>3){case 1:g.initialization=f.onnx.GraphProto.decode(o,o.uint32());break;case 2:g.algorithm=f.onnx.GraphProto.decode(o,o.uint32());break;case 3:g.initializationBinding&&g.initializationBinding.length||(g.initializationBinding=[]),g.initializationBinding.push(f.onnx.StringStringEntryProto.decode(o,o.uint32()));break;case 4:g.updateBinding&&g.updateBinding.length||(g.updateBinding=[]),g.updateBinding.push(f.onnx.StringStringEntryProto.decode(o,o.uint32()));break;default:o.skipType(7&y)}}return g},c.decodeDelimited=function(o){return o instanceof l||(o=new l(o)),this.decode(o,o.uint32())},c.verify=function(o){if(typeof o!="object"||o===null)return"object expected";if(o.initialization!=null&&o.hasOwnProperty("initialization")&&(m=f.onnx.GraphProto.verify(o.initialization)))return"initialization."+m;if(o.algorithm!=null&&o.hasOwnProperty("algorithm")&&(m=f.onnx.GraphProto.verify(o.algorithm)))return"algorithm."+m;if(o.initializationBinding!=null&&o.hasOwnProperty("initializationBinding")){if(!Array.isArray(o.initializationBinding))return"initializationBinding: array expected";for(var d=0;d<o.initializationBinding.length;++d)if(m=f.onnx.StringStringEntryProto.verify(o.initializationBinding[d]))return"initializationBinding."+m}if(o.updateBinding!=null&&o.hasOwnProperty("updateBinding")){if(!Array.isArray(o.updateBinding))return"updateBinding: array expected";for(d=0;d<o.updateBinding.length;++d){var m;if(m=f.onnx.StringStringEntryProto.verify(o.updateBinding[d]))return"updateBinding."+m}}return null},c.fromObject=function(o){if(o instanceof f.onnx.TrainingInfoProto)return o;var d=new f.onnx.TrainingInfoProto;if(o.initialization!=null){if(typeof o.initialization!="object")throw TypeError(".onnx.TrainingInfoProto.initialization: object expected");d.initialization=f.onnx.GraphProto.fromObject(o.initialization)}if(o.algorithm!=null){if(typeof o.algorithm!="object")throw TypeError(".onnx.TrainingInfoProto.algorithm: object expected");d.algorithm=f.onnx.GraphProto.fromObject(o.algorithm)}if(o.initializationBinding){if(!Array.isArray(o.initializationBinding))throw TypeError(".onnx.TrainingInfoProto.initializationBinding: array expected");d.initializationBinding=[];for(var m=0;m<o.initializationBinding.length;++m){if(typeof o.initializationBinding[m]!="object")throw TypeError(".onnx.TrainingInfoProto.initializationBinding: object expected");d.initializationBinding[m]=f.onnx.StringStringEntryProto.fromObject(o.initializationBinding[m])}}if(o.updateBinding){if(!Array.isArray(o.updateBinding))throw TypeError(".onnx.TrainingInfoProto.updateBinding: array expected");for(d.updateBinding=[],m=0;m<o.updateBinding.length;++m){if(typeof o.updateBinding[m]!="object")throw TypeError(".onnx.TrainingInfoProto.updateBinding: object expected");d.updateBinding[m]=f.onnx.StringStringEntryProto.fromObject(o.updateBinding[m])}}return d},c.toObject=function(o,d){d||(d={});var m={};if((d.arrays||d.defaults)&&(m.initializationBinding=[],m.updateBinding=[]),d.defaults&&(m.initialization=null,m.algorithm=null),o.initialization!=null&&o.hasOwnProperty("initialization")&&(m.initialization=f.onnx.GraphProto.toObject(o.initialization,d)),o.algorithm!=null&&o.hasOwnProperty("algorithm")&&(m.algorithm=f.onnx.GraphProto.toObject(o.algorithm,d)),o.initializationBinding&&o.initializationBinding.length){m.initializationBinding=[];for(var g=0;g<o.initializationBinding.length;++g)m.initializationBinding[g]=f.onnx.StringStringEntryProto.toObject(o.initializationBinding[g],d)}if(o.updateBinding&&o.updateBinding.length)for(m.updateBinding=[],g=0;g<o.updateBinding.length;++g)m.updateBinding[g]=f.onnx.StringStringEntryProto.toObject(o.updateBinding[g],d);return m},c.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},c.getTypeUrl=function(o){return o===void 0&&(o="type.googleapis.com"),o+"/onnx.TrainingInfoProto"},c}(),a.ModelProto=function(){function c(o){if(this.opsetImport=[],this.metadataProps=[],this.trainingInfo=[],this.functions=[],o)for(var d=Object.keys(o),m=0;m<d.length;++m)o[d[m]]!=null&&(this[d[m]]=o[d[m]])}return c.prototype.irVersion=h.Long?h.Long.fromBits(0,0,!1):0,c.prototype.opsetImport=h.emptyArray,c.prototype.producerName="",c.prototype.producerVersion="",c.prototype.domain="",c.prototype.modelVersion=h.Long?h.Long.fromBits(0,0,!1):0,c.prototype.docString="",c.prototype.graph=null,c.prototype.metadataProps=h.emptyArray,c.prototype.trainingInfo=h.emptyArray,c.prototype.functions=h.emptyArray,c.create=function(o){return new c(o)},c.encode=function(o,d){if(d||(d=u.create()),o.irVersion!=null&&Object.hasOwnProperty.call(o,"irVersion")&&d.uint32(8).int64(o.irVersion),o.producerName!=null&&Object.hasOwnProperty.call(o,"producerName")&&d.uint32(18).string(o.producerName),o.producerVersion!=null&&Object.hasOwnProperty.call(o,"producerVersion")&&d.uint32(26).string(o.producerVersion),o.domain!=null&&Object.hasOwnProperty.call(o,"domain")&&d.uint32(34).string(o.domain),o.modelVersion!=null&&Object.hasOwnProperty.call(o,"modelVersion")&&d.uint32(40).int64(o.modelVersion),o.docString!=null&&Object.hasOwnProperty.call(o,"docString")&&d.uint32(50).string(o.docString),o.graph!=null&&Object.hasOwnProperty.call(o,"graph")&&f.onnx.GraphProto.encode(o.graph,d.uint32(58).fork()).ldelim(),o.opsetImport!=null&&o.opsetImport.length)for(var m=0;m<o.opsetImport.length;++m)f.onnx.OperatorSetIdProto.encode(o.opsetImport[m],d.uint32(66).fork()).ldelim();if(o.metadataProps!=null&&o.metadataProps.length)for(m=0;m<o.metadataProps.length;++m)f.onnx.StringStringEntryProto.encode(o.metadataProps[m],d.uint32(114).fork()).ldelim();if(o.trainingInfo!=null&&o.trainingInfo.length)for(m=0;m<o.trainingInfo.length;++m)f.onnx.TrainingInfoProto.encode(o.trainingInfo[m],d.uint32(162).fork()).ldelim();if(o.functions!=null&&o.functions.length)for(m=0;m<o.functions.length;++m)f.onnx.FunctionProto.encode(o.functions[m],d.uint32(202).fork()).ldelim();return d},c.encodeDelimited=function(o,d){return this.encode(o,d).ldelim()},c.decode=function(o,d){o instanceof l||(o=l.create(o));for(var m=d===void 0?o.len:o.pos+d,g=new f.onnx.ModelProto;o.pos<m;){var y=o.uint32();switch(y>>>3){case 1:g.irVersion=o.int64();break;case 8:g.opsetImport&&g.opsetImport.length||(g.opsetImport=[]),g.opsetImport.push(f.onnx.OperatorSetIdProto.decode(o,o.uint32()));break;case 2:g.producerName=o.string();break;case 3:g.producerVersion=o.string();break;case 4:g.domain=o.string();break;case 5:g.modelVersion=o.int64();break;case 6:g.docString=o.string();break;case 7:g.graph=f.onnx.GraphProto.decode(o,o.uint32());break;case 14:g.metadataProps&&g.metadataProps.length||(g.metadataProps=[]),g.metadataProps.push(f.onnx.StringStringEntryProto.decode(o,o.uint32()));break;case 20:g.trainingInfo&&g.trainingInfo.length||(g.trainingInfo=[]),g.trainingInfo.push(f.onnx.TrainingInfoProto.decode(o,o.uint32()));break;case 25:g.functions&&g.functions.length||(g.functions=[]),g.functions.push(f.onnx.FunctionProto.decode(o,o.uint32()));break;default:o.skipType(7&y)}}return g},c.decodeDelimited=function(o){return o instanceof l||(o=new l(o)),this.decode(o,o.uint32())},c.verify=function(o){if(typeof o!="object"||o===null)return"object expected";if(o.irVersion!=null&&o.hasOwnProperty("irVersion")&&!(h.isInteger(o.irVersion)||o.irVersion&&h.isInteger(o.irVersion.low)&&h.isInteger(o.irVersion.high)))return"irVersion: integer|Long expected";if(o.opsetImport!=null&&o.hasOwnProperty("opsetImport")){if(!Array.isArray(o.opsetImport))return"opsetImport: array expected";for(var d=0;d<o.opsetImport.length;++d)if(m=f.onnx.OperatorSetIdProto.verify(o.opsetImport[d]))return"opsetImport."+m}if(o.producerName!=null&&o.hasOwnProperty("producerName")&&!h.isString(o.producerName))return"producerName: string expected";if(o.producerVersion!=null&&o.hasOwnProperty("producerVersion")&&!h.isString(o.producerVersion))return"producerVersion: string expected";if(o.domain!=null&&o.hasOwnProperty("domain")&&!h.isString(o.domain))return"domain: string expected";if(o.modelVersion!=null&&o.hasOwnProperty("modelVersion")&&!(h.isInteger(o.modelVersion)||o.modelVersion&&h.isInteger(o.modelVersion.low)&&h.isInteger(o.modelVersion.high)))return"modelVersion: integer|Long expected";if(o.docString!=null&&o.hasOwnProperty("docString")&&!h.isString(o.docString))return"docString: string expected";if(o.graph!=null&&o.hasOwnProperty("graph")&&(m=f.onnx.GraphProto.verify(o.graph)))return"graph."+m;if(o.metadataProps!=null&&o.hasOwnProperty("metadataProps")){if(!Array.isArray(o.metadataProps))return"metadataProps: array expected";for(d=0;d<o.metadataProps.length;++d)if(m=f.onnx.StringStringEntryProto.verify(o.metadataProps[d]))return"metadataProps."+m}if(o.trainingInfo!=null&&o.hasOwnProperty("trainingInfo")){if(!Array.isArray(o.trainingInfo))return"trainingInfo: array expected";for(d=0;d<o.trainingInfo.length;++d)if(m=f.onnx.TrainingInfoProto.verify(o.trainingInfo[d]))return"trainingInfo."+m}if(o.functions!=null&&o.hasOwnProperty("functions")){if(!Array.isArray(o.functions))return"functions: array expected";for(d=0;d<o.functions.length;++d){var m;if(m=f.onnx.FunctionProto.verify(o.functions[d]))return"functions."+m}}return null},c.fromObject=function(o){if(o instanceof f.onnx.ModelProto)return o;var d=new f.onnx.ModelProto;if(o.irVersion!=null&&(h.Long?(d.irVersion=h.Long.fromValue(o.irVersion)).unsigned=!1:typeof o.irVersion=="string"?d.irVersion=parseInt(o.irVersion,10):typeof o.irVersion=="number"?d.irVersion=o.irVersion:typeof o.irVersion=="object"&&(d.irVersion=new h.LongBits(o.irVersion.low>>>0,o.irVersion.high>>>0).toNumber())),o.opsetImport){if(!Array.isArray(o.opsetImport))throw TypeError(".onnx.ModelProto.opsetImport: array expected");d.opsetImport=[];for(var m=0;m<o.opsetImport.length;++m){if(typeof o.opsetImport[m]!="object")throw TypeError(".onnx.ModelProto.opsetImport: object expected");d.opsetImport[m]=f.onnx.OperatorSetIdProto.fromObject(o.opsetImport[m])}}if(o.producerName!=null&&(d.producerName=String(o.producerName)),o.producerVersion!=null&&(d.producerVersion=String(o.producerVersion)),o.domain!=null&&(d.domain=String(o.domain)),o.modelVersion!=null&&(h.Long?(d.modelVersion=h.Long.fromValue(o.modelVersion)).unsigned=!1:typeof o.modelVersion=="string"?d.modelVersion=parseInt(o.modelVersion,10):typeof o.modelVersion=="number"?d.modelVersion=o.modelVersion:typeof o.modelVersion=="object"&&(d.modelVersion=new h.LongBits(o.modelVersion.low>>>0,o.modelVersion.high>>>0).toNumber())),o.docString!=null&&(d.docString=String(o.docString)),o.graph!=null){if(typeof o.graph!="object")throw TypeError(".onnx.ModelProto.graph: object expected");d.graph=f.onnx.GraphProto.fromObject(o.graph)}if(o.metadataProps){if(!Array.isArray(o.metadataProps))throw TypeError(".onnx.ModelProto.metadataProps: array expected");for(d.metadataProps=[],m=0;m<o.metadataProps.length;++m){if(typeof o.metadataProps[m]!="object")throw TypeError(".onnx.ModelProto.metadataProps: object expected");d.metadataProps[m]=f.onnx.StringStringEntryProto.fromObject(o.metadataProps[m])}}if(o.trainingInfo){if(!Array.isArray(o.trainingInfo))throw TypeError(".onnx.ModelProto.trainingInfo: array expected");for(d.trainingInfo=[],m=0;m<o.trainingInfo.length;++m){if(typeof o.trainingInfo[m]!="object")throw TypeError(".onnx.ModelProto.trainingInfo: object expected");d.trainingInfo[m]=f.onnx.TrainingInfoProto.fromObject(o.trainingInfo[m])}}if(o.functions){if(!Array.isArray(o.functions))throw TypeError(".onnx.ModelProto.functions: array expected");for(d.functions=[],m=0;m<o.functions.length;++m){if(typeof o.functions[m]!="object")throw TypeError(".onnx.ModelProto.functions: object expected");d.functions[m]=f.onnx.FunctionProto.fromObject(o.functions[m])}}return d},c.toObject=function(o,d){d||(d={});var m={};if((d.arrays||d.defaults)&&(m.opsetImport=[],m.metadataProps=[],m.trainingInfo=[],m.functions=[]),d.defaults){if(h.Long){var g=new h.Long(0,0,!1);m.irVersion=d.longs===String?g.toString():d.longs===Number?g.toNumber():g}else m.irVersion=d.longs===String?"0":0;m.producerName="",m.producerVersion="",m.domain="",h.Long?(g=new h.Long(0,0,!1),m.modelVersion=d.longs===String?g.toString():d.longs===Number?g.toNumber():g):m.modelVersion=d.longs===String?"0":0,m.docString="",m.graph=null}if(o.irVersion!=null&&o.hasOwnProperty("irVersion")&&(typeof o.irVersion=="number"?m.irVersion=d.longs===String?String(o.irVersion):o.irVersion:m.irVersion=d.longs===String?h.Long.prototype.toString.call(o.irVersion):d.longs===Number?new h.LongBits(o.irVersion.low>>>0,o.irVersion.high>>>0).toNumber():o.irVersion),o.producerName!=null&&o.hasOwnProperty("producerName")&&(m.producerName=o.producerName),o.producerVersion!=null&&o.hasOwnProperty("producerVersion")&&(m.producerVersion=o.producerVersion),o.domain!=null&&o.hasOwnProperty("domain")&&(m.domain=o.domain),o.modelVersion!=null&&o.hasOwnProperty("modelVersion")&&(typeof o.modelVersion=="number"?m.modelVersion=d.longs===String?String(o.modelVersion):o.modelVersion:m.modelVersion=d.longs===String?h.Long.prototype.toString.call(o.modelVersion):d.longs===Number?new h.LongBits(o.modelVersion.low>>>0,o.modelVersion.high>>>0).toNumber():o.modelVersion),o.docString!=null&&o.hasOwnProperty("docString")&&(m.docString=o.docString),o.graph!=null&&o.hasOwnProperty("graph")&&(m.graph=f.onnx.GraphProto.toObject(o.graph,d)),o.opsetImport&&o.opsetImport.length){m.opsetImport=[];for(var y=0;y<o.opsetImport.length;++y)m.opsetImport[y]=f.onnx.OperatorSetIdProto.toObject(o.opsetImport[y],d)}if(o.metadataProps&&o.metadataProps.length)for(m.metadataProps=[],y=0;y<o.metadataProps.length;++y)m.metadataProps[y]=f.onnx.StringStringEntryProto.toObject(o.metadataProps[y],d);if(o.trainingInfo&&o.trainingInfo.length)for(m.trainingInfo=[],y=0;y<o.trainingInfo.length;++y)m.trainingInfo[y]=f.onnx.TrainingInfoProto.toObject(o.trainingInfo[y],d);if(o.functions&&o.functions.length)for(m.functions=[],y=0;y<o.functions.length;++y)m.functions[y]=f.onnx.FunctionProto.toObject(o.functions[y],d);return m},c.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},c.getTypeUrl=function(o){return o===void 0&&(o="type.googleapis.com"),o+"/onnx.ModelProto"},c}(),a.StringStringEntryProto=function(){function c(o){if(o)for(var d=Object.keys(o),m=0;m<d.length;++m)o[d[m]]!=null&&(this[d[m]]=o[d[m]])}return c.prototype.key="",c.prototype.value="",c.create=function(o){return new c(o)},c.encode=function(o,d){return d||(d=u.create()),o.key!=null&&Object.hasOwnProperty.call(o,"key")&&d.uint32(10).string(o.key),o.value!=null&&Object.hasOwnProperty.call(o,"value")&&d.uint32(18).string(o.value),d},c.encodeDelimited=function(o,d){return this.encode(o,d).ldelim()},c.decode=function(o,d){o instanceof l||(o=l.create(o));for(var m=d===void 0?o.len:o.pos+d,g=new f.onnx.StringStringEntryProto;o.pos<m;){var y=o.uint32();switch(y>>>3){case 1:g.key=o.string();break;case 2:g.value=o.string();break;default:o.skipType(7&y)}}return g},c.decodeDelimited=function(o){return o instanceof l||(o=new l(o)),this.decode(o,o.uint32())},c.verify=function(o){return typeof o!="object"||o===null?"object expected":o.key!=null&&o.hasOwnProperty("key")&&!h.isString(o.key)?"key: string expected":o.value!=null&&o.hasOwnProperty("value")&&!h.isString(o.value)?"value: string expected":null},c.fromObject=function(o){if(o instanceof f.onnx.StringStringEntryProto)return o;var d=new f.onnx.StringStringEntryProto;return o.key!=null&&(d.key=String(o.key)),o.value!=null&&(d.value=String(o.value)),d},c.toObject=function(o,d){d||(d={});var m={};return d.defaults&&(m.key="",m.value=""),o.key!=null&&o.hasOwnProperty("key")&&(m.key=o.key),o.value!=null&&o.hasOwnProperty("value")&&(m.value=o.value),m},c.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},c.getTypeUrl=function(o){return o===void 0&&(o="type.googleapis.com"),o+"/onnx.StringStringEntryProto"},c}(),a.TensorAnnotation=function(){function c(o){if(this.quantParameterTensorNames=[],o)for(var d=Object.keys(o),m=0;m<d.length;++m)o[d[m]]!=null&&(this[d[m]]=o[d[m]])}return c.prototype.tensorName="",c.prototype.quantParameterTensorNames=h.emptyArray,c.create=function(o){return new c(o)},c.encode=function(o,d){if(d||(d=u.create()),o.tensorName!=null&&Object.hasOwnProperty.call(o,"tensorName")&&d.uint32(10).string(o.tensorName),o.quantParameterTensorNames!=null&&o.quantParameterTensorNames.length)for(var m=0;m<o.quantParameterTensorNames.length;++m)f.onnx.StringStringEntryProto.encode(o.quantParameterTensorNames[m],d.uint32(18).fork()).ldelim();return d},c.encodeDelimited=function(o,d){return this.encode(o,d).ldelim()},c.decode=function(o,d){o instanceof l||(o=l.create(o));for(var m=d===void 0?o.len:o.pos+d,g=new f.onnx.TensorAnnotation;o.pos<m;){var y=o.uint32();switch(y>>>3){case 1:g.tensorName=o.string();break;case 2:g.quantParameterTensorNames&&g.quantParameterTensorNames.length||(g.quantParameterTensorNames=[]),g.quantParameterTensorNames.push(f.onnx.StringStringEntryProto.decode(o,o.uint32()));break;default:o.skipType(7&y)}}return g},c.decodeDelimited=function(o){return o instanceof l||(o=new l(o)),this.decode(o,o.uint32())},c.verify=function(o){if(typeof o!="object"||o===null)return"object expected";if(o.tensorName!=null&&o.hasOwnProperty("tensorName")&&!h.isString(o.tensorName))return"tensorName: string expected";if(o.quantParameterTensorNames!=null&&o.hasOwnProperty("quantParameterTensorNames")){if(!Array.isArray(o.quantParameterTensorNames))return"quantParameterTensorNames: array expected";for(var d=0;d<o.quantParameterTensorNames.length;++d){var m=f.onnx.StringStringEntryProto.verify(o.quantParameterTensorNames[d]);if(m)return"quantParameterTensorNames."+m}}return null},c.fromObject=function(o){if(o instanceof f.onnx.TensorAnnotation)return o;var d=new f.onnx.TensorAnnotation;if(o.tensorName!=null&&(d.tensorName=String(o.tensorName)),o.quantParameterTensorNames){if(!Array.isArray(o.quantParameterTensorNames))throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: array expected");d.quantParameterTensorNames=[];for(var m=0;m<o.quantParameterTensorNames.length;++m){if(typeof o.quantParameterTensorNames[m]!="object")throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: object expected");d.quantParameterTensorNames[m]=f.onnx.StringStringEntryProto.fromObject(o.quantParameterTensorNames[m])}}return d},c.toObject=function(o,d){d||(d={});var m={};if((d.arrays||d.defaults)&&(m.quantParameterTensorNames=[]),d.defaults&&(m.tensorName=""),o.tensorName!=null&&o.hasOwnProperty("tensorName")&&(m.tensorName=o.tensorName),o.quantParameterTensorNames&&o.quantParameterTensorNames.length){m.quantParameterTensorNames=[];for(var g=0;g<o.quantParameterTensorNames.length;++g)m.quantParameterTensorNames[g]=f.onnx.StringStringEntryProto.toObject(o.quantParameterTensorNames[g],d)}return m},c.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},c.getTypeUrl=function(o){return o===void 0&&(o="type.googleapis.com"),o+"/onnx.TensorAnnotation"},c}(),a.GraphProto=function(){function c(o){if(this.node=[],this.initializer=[],this.sparseInitializer=[],this.input=[],this.output=[],this.valueInfo=[],this.quantizationAnnotation=[],o)for(var d=Object.keys(o),m=0;m<d.length;++m)o[d[m]]!=null&&(this[d[m]]=o[d[m]])}return c.prototype.node=h.emptyArray,c.prototype.name="",c.prototype.initializer=h.emptyArray,c.prototype.sparseInitializer=h.emptyArray,c.prototype.docString="",c.prototype.input=h.emptyArray,c.prototype.output=h.emptyArray,c.prototype.valueInfo=h.emptyArray,c.prototype.quantizationAnnotation=h.emptyArray,c.create=function(o){return new c(o)},c.encode=function(o,d){if(d||(d=u.create()),o.node!=null&&o.node.length)for(var m=0;m<o.node.length;++m)f.onnx.NodeProto.encode(o.node[m],d.uint32(10).fork()).ldelim();if(o.name!=null&&Object.hasOwnProperty.call(o,"name")&&d.uint32(18).string(o.name),o.initializer!=null&&o.initializer.length)for(m=0;m<o.initializer.length;++m)f.onnx.TensorProto.encode(o.initializer[m],d.uint32(42).fork()).ldelim();if(o.docString!=null&&Object.hasOwnProperty.call(o,"docString")&&d.uint32(82).string(o.docString),o.input!=null&&o.input.length)for(m=0;m<o.input.length;++m)f.onnx.ValueInfoProto.encode(o.input[m],d.uint32(90).fork()).ldelim();if(o.output!=null&&o.output.length)for(m=0;m<o.output.length;++m)f.onnx.ValueInfoProto.encode(o.output[m],d.uint32(98).fork()).ldelim();if(o.valueInfo!=null&&o.valueInfo.length)for(m=0;m<o.valueInfo.length;++m)f.onnx.ValueInfoProto.encode(o.valueInfo[m],d.uint32(106).fork()).ldelim();if(o.quantizationAnnotation!=null&&o.quantizationAnnotation.length)for(m=0;m<o.quantizationAnnotation.length;++m)f.onnx.TensorAnnotation.encode(o.quantizationAnnotation[m],d.uint32(114).fork()).ldelim();if(o.sparseInitializer!=null&&o.sparseInitializer.length)for(m=0;m<o.sparseInitializer.length;++m)f.onnx.SparseTensorProto.encode(o.sparseInitializer[m],d.uint32(122).fork()).ldelim();return d},c.encodeDelimited=function(o,d){return this.encode(o,d).ldelim()},c.decode=function(o,d){o instanceof l||(o=l.create(o));for(var m=d===void 0?o.len:o.pos+d,g=new f.onnx.GraphProto;o.pos<m;){var y=o.uint32();switch(y>>>3){case 1:g.node&&g.node.length||(g.node=[]),g.node.push(f.onnx.NodeProto.decode(o,o.uint32()));break;case 2:g.name=o.string();break;case 5:g.initializer&&g.initializer.length||(g.initializer=[]),g.initializer.push(f.onnx.TensorProto.decode(o,o.uint32()));break;case 15:g.sparseInitializer&&g.sparseInitializer.length||(g.sparseInitializer=[]),g.sparseInitializer.push(f.onnx.SparseTensorProto.decode(o,o.uint32()));break;case 10:g.docString=o.string();break;case 11:g.input&&g.input.length||(g.input=[]),g.input.push(f.onnx.ValueInfoProto.decode(o,o.uint32()));break;case 12:g.output&&g.output.length||(g.output=[]),g.output.push(f.onnx.ValueInfoProto.decode(o,o.uint32()));break;case 13:g.valueInfo&&g.valueInfo.length||(g.valueInfo=[]),g.valueInfo.push(f.onnx.ValueInfoProto.decode(o,o.uint32()));break;case 14:g.quantizationAnnotation&&g.quantizationAnnotation.length||(g.quantizationAnnotation=[]),g.quantizationAnnotation.push(f.onnx.TensorAnnotation.decode(o,o.uint32()));break;default:o.skipType(7&y)}}return g},c.decodeDelimited=function(o){return o instanceof l||(o=new l(o)),this.decode(o,o.uint32())},c.verify=function(o){if(typeof o!="object"||o===null)return"object expected";if(o.node!=null&&o.hasOwnProperty("node")){if(!Array.isArray(o.node))return"node: array expected";for(var d=0;d<o.node.length;++d)if(m=f.onnx.NodeProto.verify(o.node[d]))return"node."+m}if(o.name!=null&&o.hasOwnProperty("name")&&!h.isString(o.name))return"name: string expected";if(o.initializer!=null&&o.hasOwnProperty("initializer")){if(!Array.isArray(o.initializer))return"initializer: array expected";for(d=0;d<o.initializer.length;++d)if(m=f.onnx.TensorProto.verify(o.initializer[d]))return"initializer."+m}if(o.sparseInitializer!=null&&o.hasOwnProperty("sparseInitializer")){if(!Array.isArray(o.sparseInitializer))return"sparseInitializer: array expected";for(d=0;d<o.sparseInitializer.length;++d)if(m=f.onnx.SparseTensorProto.verify(o.sparseInitializer[d]))return"sparseInitializer."+m}if(o.docString!=null&&o.hasOwnProperty("docString")&&!h.isString(o.docString))return"docString: string expected";if(o.input!=null&&o.hasOwnProperty("input")){if(!Array.isArray(o.input))return"input: array expected";for(d=0;d<o.input.length;++d)if(m=f.onnx.ValueInfoProto.verify(o.input[d]))return"input."+m}if(o.output!=null&&o.hasOwnProperty("output")){if(!Array.isArray(o.output))return"output: array expected";for(d=0;d<o.output.length;++d)if(m=f.onnx.ValueInfoProto.verify(o.output[d]))return"output."+m}if(o.valueInfo!=null&&o.hasOwnProperty("valueInfo")){if(!Array.isArray(o.valueInfo))return"valueInfo: array expected";for(d=0;d<o.valueInfo.length;++d)if(m=f.onnx.ValueInfoProto.verify(o.valueInfo[d]))return"valueInfo."+m}if(o.quantizationAnnotation!=null&&o.hasOwnProperty("quantizationAnnotation")){if(!Array.isArray(o.quantizationAnnotation))return"quantizationAnnotation: array expected";for(d=0;d<o.quantizationAnnotation.length;++d){var m;if(m=f.onnx.TensorAnnotation.verify(o.quantizationAnnotation[d]))return"quantizationAnnotation."+m}}return null},c.fromObject=function(o){if(o instanceof f.onnx.GraphProto)return o;var d=new f.onnx.GraphProto;if(o.node){if(!Array.isArray(o.node))throw TypeError(".onnx.GraphProto.node: array expected");d.node=[];for(var m=0;m<o.node.length;++m){if(typeof o.node[m]!="object")throw TypeError(".onnx.GraphProto.node: object expected");d.node[m]=f.onnx.NodeProto.fromObject(o.node[m])}}if(o.name!=null&&(d.name=String(o.name)),o.initializer){if(!Array.isArray(o.initializer))throw TypeError(".onnx.GraphProto.initializer: array expected");for(d.initializer=[],m=0;m<o.initializer.length;++m){if(typeof o.initializer[m]!="object")throw TypeError(".onnx.GraphProto.initializer: object expected");d.initializer[m]=f.onnx.TensorProto.fromObject(o.initializer[m])}}if(o.sparseInitializer){if(!Array.isArray(o.sparseInitializer))throw TypeError(".onnx.GraphProto.sparseInitializer: array expected");for(d.sparseInitializer=[],m=0;m<o.sparseInitializer.length;++m){if(typeof o.sparseInitializer[m]!="object")throw TypeError(".onnx.GraphProto.sparseInitializer: object expected");d.sparseInitializer[m]=f.onnx.SparseTensorProto.fromObject(o.sparseInitializer[m])}}if(o.docString!=null&&(d.docString=String(o.docString)),o.input){if(!Array.isArray(o.input))throw TypeError(".onnx.GraphProto.input: array expected");for(d.input=[],m=0;m<o.input.length;++m){if(typeof o.input[m]!="object")throw TypeError(".onnx.GraphProto.input: object expected");d.input[m]=f.onnx.ValueInfoProto.fromObject(o.input[m])}}if(o.output){if(!Array.isArray(o.output))throw TypeError(".onnx.GraphProto.output: array expected");for(d.output=[],m=0;m<o.output.length;++m){if(typeof o.output[m]!="object")throw TypeError(".onnx.GraphProto.output: object expected");d.output[m]=f.onnx.ValueInfoProto.fromObject(o.output[m])}}if(o.valueInfo){if(!Array.isArray(o.valueInfo))throw TypeError(".onnx.GraphProto.valueInfo: array expected");for(d.valueInfo=[],m=0;m<o.valueInfo.length;++m){if(typeof o.valueInfo[m]!="object")throw TypeError(".onnx.GraphProto.valueInfo: object expected");d.valueInfo[m]=f.onnx.ValueInfoProto.fromObject(o.valueInfo[m])}}if(o.quantizationAnnotation){if(!Array.isArray(o.quantizationAnnotation))throw TypeError(".onnx.GraphProto.quantizationAnnotation: array expected");for(d.quantizationAnnotation=[],m=0;m<o.quantizationAnnotation.length;++m){if(typeof o.quantizationAnnotation[m]!="object")throw TypeError(".onnx.GraphProto.quantizationAnnotation: object expected");d.quantizationAnnotation[m]=f.onnx.TensorAnnotation.fromObject(o.quantizationAnnotation[m])}}return d},c.toObject=function(o,d){d||(d={});var m={};if((d.arrays||d.defaults)&&(m.node=[],m.initializer=[],m.input=[],m.output=[],m.valueInfo=[],m.quantizationAnnotation=[],m.sparseInitializer=[]),d.defaults&&(m.name="",m.docString=""),o.node&&o.node.length){m.node=[];for(var g=0;g<o.node.length;++g)m.node[g]=f.onnx.NodeProto.toObject(o.node[g],d)}if(o.name!=null&&o.hasOwnProperty("name")&&(m.name=o.name),o.initializer&&o.initializer.length)for(m.initializer=[],g=0;g<o.initializer.length;++g)m.initializer[g]=f.onnx.TensorProto.toObject(o.initializer[g],d);if(o.docString!=null&&o.hasOwnProperty("docString")&&(m.docString=o.docString),o.input&&o.input.length)for(m.input=[],g=0;g<o.input.length;++g)m.input[g]=f.onnx.ValueInfoProto.toObject(o.input[g],d);if(o.output&&o.output.length)for(m.output=[],g=0;g<o.output.length;++g)m.output[g]=f.onnx.ValueInfoProto.toObject(o.output[g],d);if(o.valueInfo&&o.valueInfo.length)for(m.valueInfo=[],g=0;g<o.valueInfo.length;++g)m.valueInfo[g]=f.onnx.ValueInfoProto.toObject(o.valueInfo[g],d);if(o.quantizationAnnotation&&o.quantizationAnnotation.length)for(m.quantizationAnnotation=[],g=0;g<o.quantizationAnnotation.length;++g)m.quantizationAnnotation[g]=f.onnx.TensorAnnotation.toObject(o.quantizationAnnotation[g],d);if(o.sparseInitializer&&o.sparseInitializer.length)for(m.sparseInitializer=[],g=0;g<o.sparseInitializer.length;++g)m.sparseInitializer[g]=f.onnx.SparseTensorProto.toObject(o.sparseInitializer[g],d);return m},c.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},c.getTypeUrl=function(o){return o===void 0&&(o="type.googleapis.com"),o+"/onnx.GraphProto"},c}(),a.TensorProto=function(){function c(o){if(this.dims=[],this.floatData=[],this.int32Data=[],this.stringData=[],this.int64Data=[],this.externalData=[],this.doubleData=[],this.uint64Data=[],o)for(var d=Object.keys(o),m=0;m<d.length;++m)o[d[m]]!=null&&(this[d[m]]=o[d[m]])}return c.prototype.dims=h.emptyArray,c.prototype.dataType=0,c.prototype.segment=null,c.prototype.floatData=h.emptyArray,c.prototype.int32Data=h.emptyArray,c.prototype.stringData=h.emptyArray,c.prototype.int64Data=h.emptyArray,c.prototype.name="",c.prototype.docString="",c.prototype.rawData=h.newBuffer([]),c.prototype.externalData=h.emptyArray,c.prototype.dataLocation=0,c.prototype.doubleData=h.emptyArray,c.prototype.uint64Data=h.emptyArray,c.create=function(o){return new c(o)},c.encode=function(o,d){if(d||(d=u.create()),o.dims!=null&&o.dims.length){d.uint32(10).fork();for(var m=0;m<o.dims.length;++m)d.int64(o.dims[m]);d.ldelim()}if(o.dataType!=null&&Object.hasOwnProperty.call(o,"dataType")&&d.uint32(16).int32(o.dataType),o.segment!=null&&Object.hasOwnProperty.call(o,"segment")&&f.onnx.TensorProto.Segment.encode(o.segment,d.uint32(26).fork()).ldelim(),o.floatData!=null&&o.floatData.length){for(d.uint32(34).fork(),m=0;m<o.floatData.length;++m)d.float(o.floatData[m]);d.ldelim()}if(o.int32Data!=null&&o.int32Data.length){for(d.uint32(42).fork(),m=0;m<o.int32Data.length;++m)d.int32(o.int32Data[m]);d.ldelim()}if(o.stringData!=null&&o.stringData.length)for(m=0;m<o.stringData.length;++m)d.uint32(50).bytes(o.stringData[m]);if(o.int64Data!=null&&o.int64Data.length){for(d.uint32(58).fork(),m=0;m<o.int64Data.length;++m)d.int64(o.int64Data[m]);d.ldelim()}if(o.name!=null&&Object.hasOwnProperty.call(o,"name")&&d.uint32(66).string(o.name),o.rawData!=null&&Object.hasOwnProperty.call(o,"rawData")&&d.uint32(74).bytes(o.rawData),o.doubleData!=null&&o.doubleData.length){for(d.uint32(82).fork(),m=0;m<o.doubleData.length;++m)d.double(o.doubleData[m]);d.ldelim()}if(o.uint64Data!=null&&o.uint64Data.length){for(d.uint32(90).fork(),m=0;m<o.uint64Data.length;++m)d.uint64(o.uint64Data[m]);d.ldelim()}if(o.docString!=null&&Object.hasOwnProperty.call(o,"docString")&&d.uint32(98).string(o.docString),o.externalData!=null&&o.externalData.length)for(m=0;m<o.externalData.length;++m)f.onnx.StringStringEntryProto.encode(o.externalData[m],d.uint32(106).fork()).ldelim();return o.dataLocation!=null&&Object.hasOwnProperty.call(o,"dataLocation")&&d.uint32(112).int32(o.dataLocation),d},c.encodeDelimited=function(o,d){return this.encode(o,d).ldelim()},c.decode=function(o,d){o instanceof l||(o=l.create(o));for(var m=d===void 0?o.len:o.pos+d,g=new f.onnx.TensorProto;o.pos<m;){var y=o.uint32();switch(y>>>3){case 1:if(g.dims&&g.dims.length||(g.dims=[]),(7&y)==2)for(var $=o.uint32()+o.pos;o.pos<$;)g.dims.push(o.int64());else g.dims.push(o.int64());break;case 2:g.dataType=o.int32();break;case 3:g.segment=f.onnx.TensorProto.Segment.decode(o,o.uint32());break;case 4:if(g.floatData&&g.floatData.length||(g.floatData=[]),(7&y)==2)for($=o.uint32()+o.pos;o.pos<$;)g.floatData.push(o.float());else g.floatData.push(o.float());break;case 5:if(g.int32Data&&g.int32Data.length||(g.int32Data=[]),(7&y)==2)for($=o.uint32()+o.pos;o.pos<$;)g.int32Data.push(o.int32());else g.int32Data.push(o.int32());break;case 6:g.stringData&&g.stringData.length||(g.stringData=[]),g.stringData.push(o.bytes());break;case 7:if(g.int64Data&&g.int64Data.length||(g.int64Data=[]),(7&y)==2)for($=o.uint32()+o.pos;o.pos<$;)g.int64Data.push(o.int64());else g.int64Data.push(o.int64());break;case 8:g.name=o.string();break;case 12:g.docString=o.string();break;case 9:g.rawData=o.bytes();break;case 13:g.externalData&&g.externalData.length||(g.externalData=[]),g.externalData.push(f.onnx.StringStringEntryProto.decode(o,o.uint32()));break;case 14:g.dataLocation=o.int32();break;case 10:if(g.doubleData&&g.doubleData.length||(g.doubleData=[]),(7&y)==2)for($=o.uint32()+o.pos;o.pos<$;)g.doubleData.push(o.double());else g.doubleData.push(o.double());break;case 11:if(g.uint64Data&&g.uint64Data.length||(g.uint64Data=[]),(7&y)==2)for($=o.uint32()+o.pos;o.pos<$;)g.uint64Data.push(o.uint64());else g.uint64Data.push(o.uint64());break;default:o.skipType(7&y)}}return g},c.decodeDelimited=function(o){return o instanceof l||(o=new l(o)),this.decode(o,o.uint32())},c.verify=function(o){if(typeof o!="object"||o===null)return"object expected";if(o.dims!=null&&o.hasOwnProperty("dims")){if(!Array.isArray(o.dims))return"dims: array expected";for(var d=0;d<o.dims.length;++d)if(!(h.isInteger(o.dims[d])||o.dims[d]&&h.isInteger(o.dims[d].low)&&h.isInteger(o.dims[d].high)))return"dims: integer|Long[] expected"}if(o.dataType!=null&&o.hasOwnProperty("dataType")&&!h.isInteger(o.dataType))return"dataType: integer expected";if(o.segment!=null&&o.hasOwnProperty("segment")&&(m=f.onnx.TensorProto.Segment.verify(o.segment)))return"segment."+m;if(o.floatData!=null&&o.hasOwnProperty("floatData")){if(!Array.isArray(o.floatData))return"floatData: array expected";for(d=0;d<o.floatData.length;++d)if(typeof o.floatData[d]!="number")return"floatData: number[] expected"}if(o.int32Data!=null&&o.hasOwnProperty("int32Data")){if(!Array.isArray(o.int32Data))return"int32Data: array expected";for(d=0;d<o.int32Data.length;++d)if(!h.isInteger(o.int32Data[d]))return"int32Data: integer[] expected"}if(o.stringData!=null&&o.hasOwnProperty("stringData")){if(!Array.isArray(o.stringData))return"stringData: array expected";for(d=0;d<o.stringData.length;++d)if(!(o.stringData[d]&&typeof o.stringData[d].length=="number"||h.isString(o.stringData[d])))return"stringData: buffer[] expected"}if(o.int64Data!=null&&o.hasOwnProperty("int64Data")){if(!Array.isArray(o.int64Data))return"int64Data: array expected";for(d=0;d<o.int64Data.length;++d)if(!(h.isInteger(o.int64Data[d])||o.int64Data[d]&&h.isInteger(o.int64Data[d].low)&&h.isInteger(o.int64Data[d].high)))return"int64Data: integer|Long[] expected"}if(o.name!=null&&o.hasOwnProperty("name")&&!h.isString(o.name))return"name: string expected";if(o.docString!=null&&o.hasOwnProperty("docString")&&!h.isString(o.docString))return"docString: string expected";if(o.rawData!=null&&o.hasOwnProperty("rawData")&&!(o.rawData&&typeof o.rawData.length=="number"||h.isString(o.rawData)))return"rawData: buffer expected";if(o.externalData!=null&&o.hasOwnProperty("externalData")){if(!Array.isArray(o.externalData))return"externalData: array expected";for(d=0;d<o.externalData.length;++d){var m;if(m=f.onnx.StringStringEntryProto.verify(o.externalData[d]))return"externalData."+m}}if(o.dataLocation!=null&&o.hasOwnProperty("dataLocation"))switch(o.dataLocation){default:return"dataLocation: enum value expected";case 0:case 1:}if(o.doubleData!=null&&o.hasOwnProperty("doubleData")){if(!Array.isArray(o.doubleData))return"doubleData: array expected";for(d=0;d<o.doubleData.length;++d)if(typeof o.doubleData[d]!="number")return"doubleData: number[] expected"}if(o.uint64Data!=null&&o.hasOwnProperty("uint64Data")){if(!Array.isArray(o.uint64Data))return"uint64Data: array expected";for(d=0;d<o.uint64Data.length;++d)if(!(h.isInteger(o.uint64Data[d])||o.uint64Data[d]&&h.isInteger(o.uint64Data[d].low)&&h.isInteger(o.uint64Data[d].high)))return"uint64Data: integer|Long[] expected"}return null},c.fromObject=function(o){if(o instanceof f.onnx.TensorProto)return o;var d=new f.onnx.TensorProto;if(o.dims){if(!Array.isArray(o.dims))throw TypeError(".onnx.TensorProto.dims: array expected");d.dims=[];for(var m=0;m<o.dims.length;++m)h.Long?(d.dims[m]=h.Long.fromValue(o.dims[m])).unsigned=!1:typeof o.dims[m]=="string"?d.dims[m]=parseInt(o.dims[m],10):typeof o.dims[m]=="number"?d.dims[m]=o.dims[m]:typeof o.dims[m]=="object"&&(d.dims[m]=new h.LongBits(o.dims[m].low>>>0,o.dims[m].high>>>0).toNumber())}if(o.dataType!=null&&(d.dataType=0|o.dataType),o.segment!=null){if(typeof o.segment!="object")throw TypeError(".onnx.TensorProto.segment: object expected");d.segment=f.onnx.TensorProto.Segment.fromObject(o.segment)}if(o.floatData){if(!Array.isArray(o.floatData))throw TypeError(".onnx.TensorProto.floatData: array expected");for(d.floatData=[],m=0;m<o.floatData.length;++m)d.floatData[m]=Number(o.floatData[m])}if(o.int32Data){if(!Array.isArray(o.int32Data))throw TypeError(".onnx.TensorProto.int32Data: array expected");for(d.int32Data=[],m=0;m<o.int32Data.length;++m)d.int32Data[m]=0|o.int32Data[m]}if(o.stringData){if(!Array.isArray(o.stringData))throw TypeError(".onnx.TensorProto.stringData: array expected");for(d.stringData=[],m=0;m<o.stringData.length;++m)typeof o.stringData[m]=="string"?h.base64.decode(o.stringData[m],d.stringData[m]=h.newBuffer(h.base64.length(o.stringData[m])),0):o.stringData[m].length>=0&&(d.stringData[m]=o.stringData[m])}if(o.int64Data){if(!Array.isArray(o.int64Data))throw TypeError(".onnx.TensorProto.int64Data: array expected");for(d.int64Data=[],m=0;m<o.int64Data.length;++m)h.Long?(d.int64Data[m]=h.Long.fromValue(o.int64Data[m])).unsigned=!1:typeof o.int64Data[m]=="string"?d.int64Data[m]=parseInt(o.int64Data[m],10):typeof o.int64Data[m]=="number"?d.int64Data[m]=o.int64Data[m]:typeof o.int64Data[m]=="object"&&(d.int64Data[m]=new h.LongBits(o.int64Data[m].low>>>0,o.int64Data[m].high>>>0).toNumber())}if(o.name!=null&&(d.name=String(o.name)),o.docString!=null&&(d.docString=String(o.docString)),o.rawData!=null&&(typeof o.rawData=="string"?h.base64.decode(o.rawData,d.rawData=h.newBuffer(h.base64.length(o.rawData)),0):o.rawData.length>=0&&(d.rawData=o.rawData)),o.externalData){if(!Array.isArray(o.externalData))throw TypeError(".onnx.TensorProto.externalData: array expected");for(d.externalData=[],m=0;m<o.externalData.length;++m){if(typeof o.externalData[m]!="object")throw TypeError(".onnx.TensorProto.externalData: object expected");d.externalData[m]=f.onnx.StringStringEntryProto.fromObject(o.externalData[m])}}switch(o.dataLocation){default:if(typeof o.dataLocation=="number"){d.dataLocation=o.dataLocation;break}break;case"DEFAULT":case 0:d.dataLocation=0;break;case"EXTERNAL":case 1:d.dataLocation=1}if(o.doubleData){if(!Array.isArray(o.doubleData))throw TypeError(".onnx.TensorProto.doubleData: array expected");for(d.doubleData=[],m=0;m<o.doubleData.length;++m)d.doubleData[m]=Number(o.doubleData[m])}if(o.uint64Data){if(!Array.isArray(o.uint64Data))throw TypeError(".onnx.TensorProto.uint64Data: array expected");for(d.uint64Data=[],m=0;m<o.uint64Data.length;++m)h.Long?(d.uint64Data[m]=h.Long.fromValue(o.uint64Data[m])).unsigned=!0:typeof o.uint64Data[m]=="string"?d.uint64Data[m]=parseInt(o.uint64Data[m],10):typeof o.uint64Data[m]=="number"?d.uint64Data[m]=o.uint64Data[m]:typeof o.uint64Data[m]=="object"&&(d.uint64Data[m]=new h.LongBits(o.uint64Data[m].low>>>0,o.uint64Data[m].high>>>0).toNumber(!0))}return d},c.toObject=function(o,d){d||(d={});var m={};if((d.arrays||d.defaults)&&(m.dims=[],m.floatData=[],m.int32Data=[],m.stringData=[],m.int64Data=[],m.doubleData=[],m.uint64Data=[],m.externalData=[]),d.defaults&&(m.dataType=0,m.segment=null,m.name="",d.bytes===String?m.rawData="":(m.rawData=[],d.bytes!==Array&&(m.rawData=h.newBuffer(m.rawData))),m.docString="",m.dataLocation=d.enums===String?"DEFAULT":0),o.dims&&o.dims.length){m.dims=[];for(var g=0;g<o.dims.length;++g)typeof o.dims[g]=="number"?m.dims[g]=d.longs===String?String(o.dims[g]):o.dims[g]:m.dims[g]=d.longs===String?h.Long.prototype.toString.call(o.dims[g]):d.longs===Number?new h.LongBits(o.dims[g].low>>>0,o.dims[g].high>>>0).toNumber():o.dims[g]}if(o.dataType!=null&&o.hasOwnProperty("dataType")&&(m.dataType=o.dataType),o.segment!=null&&o.hasOwnProperty("segment")&&(m.segment=f.onnx.TensorProto.Segment.toObject(o.segment,d)),o.floatData&&o.floatData.length)for(m.floatData=[],g=0;g<o.floatData.length;++g)m.floatData[g]=d.json&&!isFinite(o.floatData[g])?String(o.floatData[g]):o.floatData[g];if(o.int32Data&&o.int32Data.length)for(m.int32Data=[],g=0;g<o.int32Data.length;++g)m.int32Data[g]=o.int32Data[g];if(o.stringData&&o.stringData.length)for(m.stringData=[],g=0;g<o.stringData.length;++g)m.stringData[g]=d.bytes===String?h.base64.encode(o.stringData[g],0,o.stringData[g].length):d.bytes===Array?Array.prototype.slice.call(o.stringData[g]):o.stringData[g];if(o.int64Data&&o.int64Data.length)for(m.int64Data=[],g=0;g<o.int64Data.length;++g)typeof o.int64Data[g]=="number"?m.int64Data[g]=d.longs===String?String(o.int64Data[g]):o.int64Data[g]:m.int64Data[g]=d.longs===String?h.Long.prototype.toString.call(o.int64Data[g]):d.longs===Number?new h.LongBits(o.int64Data[g].low>>>0,o.int64Data[g].high>>>0).toNumber():o.int64Data[g];if(o.name!=null&&o.hasOwnProperty("name")&&(m.name=o.name),o.rawData!=null&&o.hasOwnProperty("rawData")&&(m.rawData=d.bytes===String?h.base64.encode(o.rawData,0,o.rawData.length):d.bytes===Array?Array.prototype.slice.call(o.rawData):o.rawData),o.doubleData&&o.doubleData.length)for(m.doubleData=[],g=0;g<o.doubleData.length;++g)m.doubleData[g]=d.json&&!isFinite(o.doubleData[g])?String(o.doubleData[g]):o.doubleData[g];if(o.uint64Data&&o.uint64Data.length)for(m.uint64Data=[],g=0;g<o.uint64Data.length;++g)typeof o.uint64Data[g]=="number"?m.uint64Data[g]=d.longs===String?String(o.uint64Data[g]):o.uint64Data[g]:m.uint64Data[g]=d.longs===String?h.Long.prototype.toString.call(o.uint64Data[g]):d.longs===Number?new h.LongBits(o.uint64Data[g].low>>>0,o.uint64Data[g].high>>>0).toNumber(!0):o.uint64Data[g];if(o.docString!=null&&o.hasOwnProperty("docString")&&(m.docString=o.docString),o.externalData&&o.externalData.length)for(m.externalData=[],g=0;g<o.externalData.length;++g)m.externalData[g]=f.onnx.StringStringEntryProto.toObject(o.externalData[g],d);return o.dataLocation!=null&&o.hasOwnProperty("dataLocation")&&(m.dataLocation=d.enums===String?f.onnx.TensorProto.DataLocation[o.dataLocation]===void 0?o.dataLocation:f.onnx.TensorProto.DataLocation[o.dataLocation]:o.dataLocation),m},c.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},c.getTypeUrl=function(o){return o===void 0&&(o="type.googleapis.com"),o+"/onnx.TensorProto"},c.DataType=function(){var o={},d=Object.create(o);return d[o[0]="UNDEFINED"]=0,d[o[1]="FLOAT"]=1,d[o[2]="UINT8"]=2,d[o[3]="INT8"]=3,d[o[4]="UINT16"]=4,d[o[5]="INT16"]=5,d[o[6]="INT32"]=6,d[o[7]="INT64"]=7,d[o[8]="STRING"]=8,d[o[9]="BOOL"]=9,d[o[10]="FLOAT16"]=10,d[o[11]="DOUBLE"]=11,d[o[12]="UINT32"]=12,d[o[13]="UINT64"]=13,d[o[14]="COMPLEX64"]=14,d[o[15]="COMPLEX128"]=15,d[o[16]="BFLOAT16"]=16,d[o[17]="FLOAT8E4M3FN"]=17,d[o[18]="FLOAT8E4M3FNUZ"]=18,d[o[19]="FLOAT8E5M2"]=19,d[o[20]="FLOAT8E5M2FNUZ"]=20,d}(),c.Segment=function(){function o(d){if(d)for(var m=Object.keys(d),g=0;g<m.length;++g)d[m[g]]!=null&&(this[m[g]]=d[m[g]])}return o.prototype.begin=h.Long?h.Long.fromBits(0,0,!1):0,o.prototype.end=h.Long?h.Long.fromBits(0,0,!1):0,o.create=function(d){return new o(d)},o.encode=function(d,m){return m||(m=u.create()),d.begin!=null&&Object.hasOwnProperty.call(d,"begin")&&m.uint32(8).int64(d.begin),d.end!=null&&Object.hasOwnProperty.call(d,"end")&&m.uint32(16).int64(d.end),m},o.encodeDelimited=function(d,m){return this.encode(d,m).ldelim()},o.decode=function(d,m){d instanceof l||(d=l.create(d));for(var g=m===void 0?d.len:d.pos+m,y=new f.onnx.TensorProto.Segment;d.pos<g;){var $=d.uint32();switch($>>>3){case 1:y.begin=d.int64();break;case 2:y.end=d.int64();break;default:d.skipType(7&$)}}return y},o.decodeDelimited=function(d){return d instanceof l||(d=new l(d)),this.decode(d,d.uint32())},o.verify=function(d){return typeof d!="object"||d===null?"object expected":d.begin!=null&&d.hasOwnProperty("begin")&&!(h.isInteger(d.begin)||d.begin&&h.isInteger(d.begin.low)&&h.isInteger(d.begin.high))?"begin: integer|Long expected":d.end!=null&&d.hasOwnProperty("end")&&!(h.isInteger(d.end)||d.end&&h.isInteger(d.end.low)&&h.isInteger(d.end.high))?"end: integer|Long expected":null},o.fromObject=function(d){if(d instanceof f.onnx.TensorProto.Segment)return d;var m=new f.onnx.TensorProto.Segment;return d.begin!=null&&(h.Long?(m.begin=h.Long.fromValue(d.begin)).unsigned=!1:typeof d.begin=="string"?m.begin=parseInt(d.begin,10):typeof d.begin=="number"?m.begin=d.begin:typeof d.begin=="object"&&(m.begin=new h.LongBits(d.begin.low>>>0,d.begin.high>>>0).toNumber())),d.end!=null&&(h.Long?(m.end=h.Long.fromValue(d.end)).unsigned=!1:typeof d.end=="string"?m.end=parseInt(d.end,10):typeof d.end=="number"?m.end=d.end:typeof d.end=="object"&&(m.end=new h.LongBits(d.end.low>>>0,d.end.high>>>0).toNumber())),m},o.toObject=function(d,m){m||(m={});var g={};if(m.defaults){if(h.Long){var y=new h.Long(0,0,!1);g.begin=m.longs===String?y.toString():m.longs===Number?y.toNumber():y}else g.begin=m.longs===String?"0":0;h.Long?(y=new h.Long(0,0,!1),g.end=m.longs===String?y.toString():m.longs===Number?y.toNumber():y):g.end=m.longs===String?"0":0}return d.begin!=null&&d.hasOwnProperty("begin")&&(typeof d.begin=="number"?g.begin=m.longs===String?String(d.begin):d.begin:g.begin=m.longs===String?h.Long.prototype.toString.call(d.begin):m.longs===Number?new h.LongBits(d.begin.low>>>0,d.begin.high>>>0).toNumber():d.begin),d.end!=null&&d.hasOwnProperty("end")&&(typeof d.end=="number"?g.end=m.longs===String?String(d.end):d.end:g.end=m.longs===String?h.Long.prototype.toString.call(d.end):m.longs===Number?new h.LongBits(d.end.low>>>0,d.end.high>>>0).toNumber():d.end),g},o.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},o.getTypeUrl=function(d){return d===void 0&&(d="type.googleapis.com"),d+"/onnx.TensorProto.Segment"},o}(),c.DataLocation=function(){var o={},d=Object.create(o);return d[o[0]="DEFAULT"]=0,d[o[1]="EXTERNAL"]=1,d}(),c}(),a.SparseTensorProto=function(){function c(o){if(this.dims=[],o)for(var d=Object.keys(o),m=0;m<d.length;++m)o[d[m]]!=null&&(this[d[m]]=o[d[m]])}return c.prototype.values=null,c.prototype.indices=null,c.prototype.dims=h.emptyArray,c.create=function(o){return new c(o)},c.encode=function(o,d){if(d||(d=u.create()),o.values!=null&&Object.hasOwnProperty.call(o,"values")&&f.onnx.TensorProto.encode(o.values,d.uint32(10).fork()).ldelim(),o.indices!=null&&Object.hasOwnProperty.call(o,"indices")&&f.onnx.TensorProto.encode(o.indices,d.uint32(18).fork()).ldelim(),o.dims!=null&&o.dims.length){d.uint32(26).fork();for(var m=0;m<o.dims.length;++m)d.int64(o.dims[m]);d.ldelim()}return d},c.encodeDelimited=function(o,d){return this.encode(o,d).ldelim()},c.decode=function(o,d){o instanceof l||(o=l.create(o));for(var m=d===void 0?o.len:o.pos+d,g=new f.onnx.SparseTensorProto;o.pos<m;){var y=o.uint32();switch(y>>>3){case 1:g.values=f.onnx.TensorProto.decode(o,o.uint32());break;case 2:g.indices=f.onnx.TensorProto.decode(o,o.uint32());break;case 3:if(g.dims&&g.dims.length||(g.dims=[]),(7&y)==2)for(var $=o.uint32()+o.pos;o.pos<$;)g.dims.push(o.int64());else g.dims.push(o.int64());break;default:o.skipType(7&y)}}return g},c.decodeDelimited=function(o){return o instanceof l||(o=new l(o)),this.decode(o,o.uint32())},c.verify=function(o){if(typeof o!="object"||o===null)return"object expected";var d;if(o.values!=null&&o.hasOwnProperty("values")&&(d=f.onnx.TensorProto.verify(o.values)))return"values."+d;if(o.indices!=null&&o.hasOwnProperty("indices")&&(d=f.onnx.TensorProto.verify(o.indices)))return"indices."+d;if(o.dims!=null&&o.hasOwnProperty("dims")){if(!Array.isArray(o.dims))return"dims: array expected";for(var m=0;m<o.dims.length;++m)if(!(h.isInteger(o.dims[m])||o.dims[m]&&h.isInteger(o.dims[m].low)&&h.isInteger(o.dims[m].high)))return"dims: integer|Long[] expected"}return null},c.fromObject=function(o){if(o instanceof f.onnx.SparseTensorProto)return o;var d=new f.onnx.SparseTensorProto;if(o.values!=null){if(typeof o.values!="object")throw TypeError(".onnx.SparseTensorProto.values: object expected");d.values=f.onnx.TensorProto.fromObject(o.values)}if(o.indices!=null){if(typeof o.indices!="object")throw TypeError(".onnx.SparseTensorProto.indices: object expected");d.indices=f.onnx.TensorProto.fromObject(o.indices)}if(o.dims){if(!Array.isArray(o.dims))throw TypeError(".onnx.SparseTensorProto.dims: array expected");d.dims=[];for(var m=0;m<o.dims.length;++m)h.Long?(d.dims[m]=h.Long.fromValue(o.dims[m])).unsigned=!1:typeof o.dims[m]=="string"?d.dims[m]=parseInt(o.dims[m],10):typeof o.dims[m]=="number"?d.dims[m]=o.dims[m]:typeof o.dims[m]=="object"&&(d.dims[m]=new h.LongBits(o.dims[m].low>>>0,o.dims[m].high>>>0).toNumber())}return d},c.toObject=function(o,d){d||(d={});var m={};if((d.arrays||d.defaults)&&(m.dims=[]),d.defaults&&(m.values=null,m.indices=null),o.values!=null&&o.hasOwnProperty("values")&&(m.values=f.onnx.TensorProto.toObject(o.values,d)),o.indices!=null&&o.hasOwnProperty("indices")&&(m.indices=f.onnx.TensorProto.toObject(o.indices,d)),o.dims&&o.dims.length){m.dims=[];for(var g=0;g<o.dims.length;++g)typeof o.dims[g]=="number"?m.dims[g]=d.longs===String?String(o.dims[g]):o.dims[g]:m.dims[g]=d.longs===String?h.Long.prototype.toString.call(o.dims[g]):d.longs===Number?new h.LongBits(o.dims[g].low>>>0,o.dims[g].high>>>0).toNumber():o.dims[g]}return m},c.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},c.getTypeUrl=function(o){return o===void 0&&(o="type.googleapis.com"),o+"/onnx.SparseTensorProto"},c}(),a.TensorShapeProto=function(){function c(o){if(this.dim=[],o)for(var d=Object.keys(o),m=0;m<d.length;++m)o[d[m]]!=null&&(this[d[m]]=o[d[m]])}return c.prototype.dim=h.emptyArray,c.create=function(o){return new c(o)},c.encode=function(o,d){if(d||(d=u.create()),o.dim!=null&&o.dim.length)for(var m=0;m<o.dim.length;++m)f.onnx.TensorShapeProto.Dimension.encode(o.dim[m],d.uint32(10).fork()).ldelim();return d},c.encodeDelimited=function(o,d){return this.encode(o,d).ldelim()},c.decode=function(o,d){o instanceof l||(o=l.create(o));for(var m=d===void 0?o.len:o.pos+d,g=new f.onnx.TensorShapeProto;o.pos<m;){var y=o.uint32();y>>>3==1?(g.dim&&g.dim.length||(g.dim=[]),g.dim.push(f.onnx.TensorShapeProto.Dimension.decode(o,o.uint32()))):o.skipType(7&y)}return g},c.decodeDelimited=function(o){return o instanceof l||(o=new l(o)),this.decode(o,o.uint32())},c.verify=function(o){if(typeof o!="object"||o===null)return"object expected";if(o.dim!=null&&o.hasOwnProperty("dim")){if(!Array.isArray(o.dim))return"dim: array expected";for(var d=0;d<o.dim.length;++d){var m=f.onnx.TensorShapeProto.Dimension.verify(o.dim[d]);if(m)return"dim."+m}}return null},c.fromObject=function(o){if(o instanceof f.onnx.TensorShapeProto)return o;var d=new f.onnx.TensorShapeProto;if(o.dim){if(!Array.isArray(o.dim))throw TypeError(".onnx.TensorShapeProto.dim: array expected");d.dim=[];for(var m=0;m<o.dim.length;++m){if(typeof o.dim[m]!="object")throw TypeError(".onnx.TensorShapeProto.dim: object expected");d.dim[m]=f.onnx.TensorShapeProto.Dimension.fromObject(o.dim[m])}}return d},c.toObject=function(o,d){d||(d={});var m={};if((d.arrays||d.defaults)&&(m.dim=[]),o.dim&&o.dim.length){m.dim=[];for(var g=0;g<o.dim.length;++g)m.dim[g]=f.onnx.TensorShapeProto.Dimension.toObject(o.dim[g],d)}return m},c.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},c.getTypeUrl=function(o){return o===void 0&&(o="type.googleapis.com"),o+"/onnx.TensorShapeProto"},c.Dimension=function(){function o(m){if(m)for(var g=Object.keys(m),y=0;y<g.length;++y)m[g[y]]!=null&&(this[g[y]]=m[g[y]])}var d;return o.prototype.dimValue=null,o.prototype.dimParam=null,o.prototype.denotation="",Object.defineProperty(o.prototype,"value",{get:h.oneOfGetter(d=["dimValue","dimParam"]),set:h.oneOfSetter(d)}),o.create=function(m){return new o(m)},o.encode=function(m,g){return g||(g=u.create()),m.dimValue!=null&&Object.hasOwnProperty.call(m,"dimValue")&&g.uint32(8).int64(m.dimValue),m.dimParam!=null&&Object.hasOwnProperty.call(m,"dimParam")&&g.uint32(18).string(m.dimParam),m.denotation!=null&&Object.hasOwnProperty.call(m,"denotation")&&g.uint32(26).string(m.denotation),g},o.encodeDelimited=function(m,g){return this.encode(m,g).ldelim()},o.decode=function(m,g){m instanceof l||(m=l.create(m));for(var y=g===void 0?m.len:m.pos+g,$=new f.onnx.TensorShapeProto.Dimension;m.pos<y;){var b=m.uint32();switch(b>>>3){case 1:$.dimValue=m.int64();break;case 2:$.dimParam=m.string();break;case 3:$.denotation=m.string();break;default:m.skipType(7&b)}}return $},o.decodeDelimited=function(m){return m instanceof l||(m=new l(m)),this.decode(m,m.uint32())},o.verify=function(m){if(typeof m!="object"||m===null)return"object expected";var g={};if(m.dimValue!=null&&m.hasOwnProperty("dimValue")&&(g.value=1,!(h.isInteger(m.dimValue)||m.dimValue&&h.isInteger(m.dimValue.low)&&h.isInteger(m.dimValue.high))))return"dimValue: integer|Long expected";if(m.dimParam!=null&&m.hasOwnProperty("dimParam")){if(g.value===1)return"value: multiple values";if(g.value=1,!h.isString(m.dimParam))return"dimParam: string expected"}return m.denotation!=null&&m.hasOwnProperty("denotation")&&!h.isString(m.denotation)?"denotation: string expected":null},o.fromObject=function(m){if(m instanceof f.onnx.TensorShapeProto.Dimension)return m;var g=new f.onnx.TensorShapeProto.Dimension;return m.dimValue!=null&&(h.Long?(g.dimValue=h.Long.fromValue(m.dimValue)).unsigned=!1:typeof m.dimValue=="string"?g.dimValue=parseInt(m.dimValue,10):typeof m.dimValue=="number"?g.dimValue=m.dimValue:typeof m.dimValue=="object"&&(g.dimValue=new h.LongBits(m.dimValue.low>>>0,m.dimValue.high>>>0).toNumber())),m.dimParam!=null&&(g.dimParam=String(m.dimParam)),m.denotation!=null&&(g.denotation=String(m.denotation)),g},o.toObject=function(m,g){g||(g={});var y={};return g.defaults&&(y.denotation=""),m.dimValue!=null&&m.hasOwnProperty("dimValue")&&(typeof m.dimValue=="number"?y.dimValue=g.longs===String?String(m.dimValue):m.dimValue:y.dimValue=g.longs===String?h.Long.prototype.toString.call(m.dimValue):g.longs===Number?new h.LongBits(m.dimValue.low>>>0,m.dimValue.high>>>0).toNumber():m.dimValue,g.oneofs&&(y.value="dimValue")),m.dimParam!=null&&m.hasOwnProperty("dimParam")&&(y.dimParam=m.dimParam,g.oneofs&&(y.value="dimParam")),m.denotation!=null&&m.hasOwnProperty("denotation")&&(y.denotation=m.denotation),y},o.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},o.getTypeUrl=function(m){return m===void 0&&(m="type.googleapis.com"),m+"/onnx.TensorShapeProto.Dimension"},o}(),c}(),a.TypeProto=function(){function c(d){if(d)for(var m=Object.keys(d),g=0;g<m.length;++g)d[m[g]]!=null&&(this[m[g]]=d[m[g]])}var o;return c.prototype.tensorType=null,c.prototype.sequenceType=null,c.prototype.mapType=null,c.prototype.optionalType=null,c.prototype.sparseTensorType=null,c.prototype.denotation="",Object.defineProperty(c.prototype,"value",{get:h.oneOfGetter(o=["tensorType","sequenceType","mapType","optionalType","sparseTensorType"]),set:h.oneOfSetter(o)}),c.create=function(d){return new c(d)},c.encode=function(d,m){return m||(m=u.create()),d.tensorType!=null&&Object.hasOwnProperty.call(d,"tensorType")&&f.onnx.TypeProto.Tensor.encode(d.tensorType,m.uint32(10).fork()).ldelim(),d.sequenceType!=null&&Object.hasOwnProperty.call(d,"sequenceType")&&f.onnx.TypeProto.Sequence.encode(d.sequenceType,m.uint32(34).fork()).ldelim(),d.mapType!=null&&Object.hasOwnProperty.call(d,"mapType")&&f.onnx.TypeProto.Map.encode(d.mapType,m.uint32(42).fork()).ldelim(),d.denotation!=null&&Object.hasOwnProperty.call(d,"denotation")&&m.uint32(50).string(d.denotation),d.sparseTensorType!=null&&Object.hasOwnProperty.call(d,"sparseTensorType")&&f.onnx.TypeProto.SparseTensor.encode(d.sparseTensorType,m.uint32(66).fork()).ldelim(),d.optionalType!=null&&Object.hasOwnProperty.call(d,"optionalType")&&f.onnx.TypeProto.Optional.encode(d.optionalType,m.uint32(74).fork()).ldelim(),m},c.encodeDelimited=function(d,m){return this.encode(d,m).ldelim()},c.decode=function(d,m){d instanceof l||(d=l.create(d));for(var g=m===void 0?d.len:d.pos+m,y=new f.onnx.TypeProto;d.pos<g;){var $=d.uint32();switch($>>>3){case 1:y.tensorType=f.onnx.TypeProto.Tensor.decode(d,d.uint32());break;case 4:y.sequenceType=f.onnx.TypeProto.Sequence.decode(d,d.uint32());break;case 5:y.mapType=f.onnx.TypeProto.Map.decode(d,d.uint32());break;case 9:y.optionalType=f.onnx.TypeProto.Optional.decode(d,d.uint32());break;case 8:y.sparseTensorType=f.onnx.TypeProto.SparseTensor.decode(d,d.uint32());break;case 6:y.denotation=d.string();break;default:d.skipType(7&$)}}return y},c.decodeDelimited=function(d){return d instanceof l||(d=new l(d)),this.decode(d,d.uint32())},c.verify=function(d){if(typeof d!="object"||d===null)return"object expected";var m={};if(d.tensorType!=null&&d.hasOwnProperty("tensorType")&&(m.value=1,g=f.onnx.TypeProto.Tensor.verify(d.tensorType)))return"tensorType."+g;if(d.sequenceType!=null&&d.hasOwnProperty("sequenceType")){if(m.value===1)return"value: multiple values";if(m.value=1,g=f.onnx.TypeProto.Sequence.verify(d.sequenceType))return"sequenceType."+g}if(d.mapType!=null&&d.hasOwnProperty("mapType")){if(m.value===1)return"value: multiple values";if(m.value=1,g=f.onnx.TypeProto.Map.verify(d.mapType))return"mapType."+g}if(d.optionalType!=null&&d.hasOwnProperty("optionalType")){if(m.value===1)return"value: multiple values";if(m.value=1,g=f.onnx.TypeProto.Optional.verify(d.optionalType))return"optionalType."+g}if(d.sparseTensorType!=null&&d.hasOwnProperty("sparseTensorType")){if(m.value===1)return"value: multiple values";var g;if(m.value=1,g=f.onnx.TypeProto.SparseTensor.verify(d.sparseTensorType))return"sparseTensorType."+g}return d.denotation!=null&&d.hasOwnProperty("denotation")&&!h.isString(d.denotation)?"denotation: string expected":null},c.fromObject=function(d){if(d instanceof f.onnx.TypeProto)return d;var m=new f.onnx.TypeProto;if(d.tensorType!=null){if(typeof d.tensorType!="object")throw TypeError(".onnx.TypeProto.tensorType: object expected");m.tensorType=f.onnx.TypeProto.Tensor.fromObject(d.tensorType)}if(d.sequenceType!=null){if(typeof d.sequenceType!="object")throw TypeError(".onnx.TypeProto.sequenceType: object expected");m.sequenceType=f.onnx.TypeProto.Sequence.fromObject(d.sequenceType)}if(d.mapType!=null){if(typeof d.mapType!="object")throw TypeError(".onnx.TypeProto.mapType: object expected");m.mapType=f.onnx.TypeProto.Map.fromObject(d.mapType)}if(d.optionalType!=null){if(typeof d.optionalType!="object")throw TypeError(".onnx.TypeProto.optionalType: object expected");m.optionalType=f.onnx.TypeProto.Optional.fromObject(d.optionalType)}if(d.sparseTensorType!=null){if(typeof d.sparseTensorType!="object")throw TypeError(".onnx.TypeProto.sparseTensorType: object expected");m.sparseTensorType=f.onnx.TypeProto.SparseTensor.fromObject(d.sparseTensorType)}return d.denotation!=null&&(m.denotation=String(d.denotation)),m},c.toObject=function(d,m){m||(m={});var g={};return m.defaults&&(g.denotation=""),d.tensorType!=null&&d.hasOwnProperty("tensorType")&&(g.tensorType=f.onnx.TypeProto.Tensor.toObject(d.tensorType,m),m.oneofs&&(g.value="tensorType")),d.sequenceType!=null&&d.hasOwnProperty("sequenceType")&&(g.sequenceType=f.onnx.TypeProto.Sequence.toObject(d.sequenceType,m),m.oneofs&&(g.value="sequenceType")),d.mapType!=null&&d.hasOwnProperty("mapType")&&(g.mapType=f.onnx.TypeProto.Map.toObject(d.mapType,m),m.oneofs&&(g.value="mapType")),d.denotation!=null&&d.hasOwnProperty("denotation")&&(g.denotation=d.denotation),d.sparseTensorType!=null&&d.hasOwnProperty("sparseTensorType")&&(g.sparseTensorType=f.onnx.TypeProto.SparseTensor.toObject(d.sparseTensorType,m),m.oneofs&&(g.value="sparseTensorType")),d.optionalType!=null&&d.hasOwnProperty("optionalType")&&(g.optionalType=f.onnx.TypeProto.Optional.toObject(d.optionalType,m),m.oneofs&&(g.value="optionalType")),g},c.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},c.getTypeUrl=function(d){return d===void 0&&(d="type.googleapis.com"),d+"/onnx.TypeProto"},c.Tensor=function(){function d(m){if(m)for(var g=Object.keys(m),y=0;y<g.length;++y)m[g[y]]!=null&&(this[g[y]]=m[g[y]])}return d.prototype.elemType=0,d.prototype.shape=null,d.create=function(m){return new d(m)},d.encode=function(m,g){return g||(g=u.create()),m.elemType!=null&&Object.hasOwnProperty.call(m,"elemType")&&g.uint32(8).int32(m.elemType),m.shape!=null&&Object.hasOwnProperty.call(m,"shape")&&f.onnx.TensorShapeProto.encode(m.shape,g.uint32(18).fork()).ldelim(),g},d.encodeDelimited=function(m,g){return this.encode(m,g).ldelim()},d.decode=function(m,g){m instanceof l||(m=l.create(m));for(var y=g===void 0?m.len:m.pos+g,$=new f.onnx.TypeProto.Tensor;m.pos<y;){var b=m.uint32();switch(b>>>3){case 1:$.elemType=m.int32();break;case 2:$.shape=f.onnx.TensorShapeProto.decode(m,m.uint32());break;default:m.skipType(7&b)}}return $},d.decodeDelimited=function(m){return m instanceof l||(m=new l(m)),this.decode(m,m.uint32())},d.verify=function(m){if(typeof m!="object"||m===null)return"object expected";if(m.elemType!=null&&m.hasOwnProperty("elemType")&&!h.isInteger(m.elemType))return"elemType: integer expected";if(m.shape!=null&&m.hasOwnProperty("shape")){var g=f.onnx.TensorShapeProto.verify(m.shape);if(g)return"shape."+g}return null},d.fromObject=function(m){if(m instanceof f.onnx.TypeProto.Tensor)return m;var g=new f.onnx.TypeProto.Tensor;if(m.elemType!=null&&(g.elemType=0|m.elemType),m.shape!=null){if(typeof m.shape!="object")throw TypeError(".onnx.TypeProto.Tensor.shape: object expected");g.shape=f.onnx.TensorShapeProto.fromObject(m.shape)}return g},d.toObject=function(m,g){g||(g={});var y={};return g.defaults&&(y.elemType=0,y.shape=null),m.elemType!=null&&m.hasOwnProperty("elemType")&&(y.elemType=m.elemType),m.shape!=null&&m.hasOwnProperty("shape")&&(y.shape=f.onnx.TensorShapeProto.toObject(m.shape,g)),y},d.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},d.getTypeUrl=function(m){return m===void 0&&(m="type.googleapis.com"),m+"/onnx.TypeProto.Tensor"},d}(),c.Sequence=function(){function d(m){if(m)for(var g=Object.keys(m),y=0;y<g.length;++y)m[g[y]]!=null&&(this[g[y]]=m[g[y]])}return d.prototype.elemType=null,d.create=function(m){return new d(m)},d.encode=function(m,g){return g||(g=u.create()),m.elemType!=null&&Object.hasOwnProperty.call(m,"elemType")&&f.onnx.TypeProto.encode(m.elemType,g.uint32(10).fork()).ldelim(),g},d.encodeDelimited=function(m,g){return this.encode(m,g).ldelim()},d.decode=function(m,g){m instanceof l||(m=l.create(m));for(var y=g===void 0?m.len:m.pos+g,$=new f.onnx.TypeProto.Sequence;m.pos<y;){var b=m.uint32();b>>>3==1?$.elemType=f.onnx.TypeProto.decode(m,m.uint32()):m.skipType(7&b)}return $},d.decodeDelimited=function(m){return m instanceof l||(m=new l(m)),this.decode(m,m.uint32())},d.verify=function(m){if(typeof m!="object"||m===null)return"object expected";if(m.elemType!=null&&m.hasOwnProperty("elemType")){var g=f.onnx.TypeProto.verify(m.elemType);if(g)return"elemType."+g}return null},d.fromObject=function(m){if(m instanceof f.onnx.TypeProto.Sequence)return m;var g=new f.onnx.TypeProto.Sequence;if(m.elemType!=null){if(typeof m.elemType!="object")throw TypeError(".onnx.TypeProto.Sequence.elemType: object expected");g.elemType=f.onnx.TypeProto.fromObject(m.elemType)}return g},d.toObject=function(m,g){g||(g={});var y={};return g.defaults&&(y.elemType=null),m.elemType!=null&&m.hasOwnProperty("elemType")&&(y.elemType=f.onnx.TypeProto.toObject(m.elemType,g)),y},d.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},d.getTypeUrl=function(m){return m===void 0&&(m="type.googleapis.com"),m+"/onnx.TypeProto.Sequence"},d}(),c.Map=function(){function d(m){if(m)for(var g=Object.keys(m),y=0;y<g.length;++y)m[g[y]]!=null&&(this[g[y]]=m[g[y]])}return d.prototype.keyType=0,d.prototype.valueType=null,d.create=function(m){return new d(m)},d.encode=function(m,g){return g||(g=u.create()),m.keyType!=null&&Object.hasOwnProperty.call(m,"keyType")&&g.uint32(8).int32(m.keyType),m.valueType!=null&&Object.hasOwnProperty.call(m,"valueType")&&f.onnx.TypeProto.encode(m.valueType,g.uint32(18).fork()).ldelim(),g},d.encodeDelimited=function(m,g){return this.encode(m,g).ldelim()},d.decode=function(m,g){m instanceof l||(m=l.create(m));for(var y=g===void 0?m.len:m.pos+g,$=new f.onnx.TypeProto.Map;m.pos<y;){var b=m.uint32();switch(b>>>3){case 1:$.keyType=m.int32();break;case 2:$.valueType=f.onnx.TypeProto.decode(m,m.uint32());break;default:m.skipType(7&b)}}return $},d.decodeDelimited=function(m){return m instanceof l||(m=new l(m)),this.decode(m,m.uint32())},d.verify=function(m){if(typeof m!="object"||m===null)return"object expected";if(m.keyType!=null&&m.hasOwnProperty("keyType")&&!h.isInteger(m.keyType))return"keyType: integer expected";if(m.valueType!=null&&m.hasOwnProperty("valueType")){var g=f.onnx.TypeProto.verify(m.valueType);if(g)return"valueType."+g}return null},d.fromObject=function(m){if(m instanceof f.onnx.TypeProto.Map)return m;var g=new f.onnx.TypeProto.Map;if(m.keyType!=null&&(g.keyType=0|m.keyType),m.valueType!=null){if(typeof m.valueType!="object")throw TypeError(".onnx.TypeProto.Map.valueType: object expected");g.valueType=f.onnx.TypeProto.fromObject(m.valueType)}return g},d.toObject=function(m,g){g||(g={});var y={};return g.defaults&&(y.keyType=0,y.valueType=null),m.keyType!=null&&m.hasOwnProperty("keyType")&&(y.keyType=m.keyType),m.valueType!=null&&m.hasOwnProperty("valueType")&&(y.valueType=f.onnx.TypeProto.toObject(m.valueType,g)),y},d.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},d.getTypeUrl=function(m){return m===void 0&&(m="type.googleapis.com"),m+"/onnx.TypeProto.Map"},d}(),c.Optional=function(){function d(m){if(m)for(var g=Object.keys(m),y=0;y<g.length;++y)m[g[y]]!=null&&(this[g[y]]=m[g[y]])}return d.prototype.elemType=null,d.create=function(m){return new d(m)},d.encode=function(m,g){return g||(g=u.create()),m.elemType!=null&&Object.hasOwnProperty.call(m,"elemType")&&f.onnx.TypeProto.encode(m.elemType,g.uint32(10).fork()).ldelim(),g},d.encodeDelimited=function(m,g){return this.encode(m,g).ldelim()},d.decode=function(m,g){m instanceof l||(m=l.create(m));for(var y=g===void 0?m.len:m.pos+g,$=new f.onnx.TypeProto.Optional;m.pos<y;){var b=m.uint32();b>>>3==1?$.elemType=f.onnx.TypeProto.decode(m,m.uint32()):m.skipType(7&b)}return $},d.decodeDelimited=function(m){return m instanceof l||(m=new l(m)),this.decode(m,m.uint32())},d.verify=function(m){if(typeof m!="object"||m===null)return"object expected";if(m.elemType!=null&&m.hasOwnProperty("elemType")){var g=f.onnx.TypeProto.verify(m.elemType);if(g)return"elemType."+g}return null},d.fromObject=function(m){if(m instanceof f.onnx.TypeProto.Optional)return m;var g=new f.onnx.TypeProto.Optional;if(m.elemType!=null){if(typeof m.elemType!="object")throw TypeError(".onnx.TypeProto.Optional.elemType: object expected");g.elemType=f.onnx.TypeProto.fromObject(m.elemType)}return g},d.toObject=function(m,g){g||(g={});var y={};return g.defaults&&(y.elemType=null),m.elemType!=null&&m.hasOwnProperty("elemType")&&(y.elemType=f.onnx.TypeProto.toObject(m.elemType,g)),y},d.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},d.getTypeUrl=function(m){return m===void 0&&(m="type.googleapis.com"),m+"/onnx.TypeProto.Optional"},d}(),c.SparseTensor=function(){function d(m){if(m)for(var g=Object.keys(m),y=0;y<g.length;++y)m[g[y]]!=null&&(this[g[y]]=m[g[y]])}return d.prototype.elemType=0,d.prototype.shape=null,d.create=function(m){return new d(m)},d.encode=function(m,g){return g||(g=u.create()),m.elemType!=null&&Object.hasOwnProperty.call(m,"elemType")&&g.uint32(8).int32(m.elemType),m.shape!=null&&Object.hasOwnProperty.call(m,"shape")&&f.onnx.TensorShapeProto.encode(m.shape,g.uint32(18).fork()).ldelim(),g},d.encodeDelimited=function(m,g){return this.encode(m,g).ldelim()},d.decode=function(m,g){m instanceof l||(m=l.create(m));for(var y=g===void 0?m.len:m.pos+g,$=new f.onnx.TypeProto.SparseTensor;m.pos<y;){var b=m.uint32();switch(b>>>3){case 1:$.elemType=m.int32();break;case 2:$.shape=f.onnx.TensorShapeProto.decode(m,m.uint32());break;default:m.skipType(7&b)}}return $},d.decodeDelimited=function(m){return m instanceof l||(m=new l(m)),this.decode(m,m.uint32())},d.verify=function(m){if(typeof m!="object"||m===null)return"object expected";if(m.elemType!=null&&m.hasOwnProperty("elemType")&&!h.isInteger(m.elemType))return"elemType: integer expected";if(m.shape!=null&&m.hasOwnProperty("shape")){var g=f.onnx.TensorShapeProto.verify(m.shape);if(g)return"shape."+g}return null},d.fromObject=function(m){if(m instanceof f.onnx.TypeProto.SparseTensor)return m;var g=new f.onnx.TypeProto.SparseTensor;if(m.elemType!=null&&(g.elemType=0|m.elemType),m.shape!=null){if(typeof m.shape!="object")throw TypeError(".onnx.TypeProto.SparseTensor.shape: object expected");g.shape=f.onnx.TensorShapeProto.fromObject(m.shape)}return g},d.toObject=function(m,g){g||(g={});var y={};return g.defaults&&(y.elemType=0,y.shape=null),m.elemType!=null&&m.hasOwnProperty("elemType")&&(y.elemType=m.elemType),m.shape!=null&&m.hasOwnProperty("shape")&&(y.shape=f.onnx.TensorShapeProto.toObject(m.shape,g)),y},d.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},d.getTypeUrl=function(m){return m===void 0&&(m="type.googleapis.com"),m+"/onnx.TypeProto.SparseTensor"},d}(),c}(),a.OperatorSetIdProto=function(){function c(o){if(o)for(var d=Object.keys(o),m=0;m<d.length;++m)o[d[m]]!=null&&(this[d[m]]=o[d[m]])}return c.prototype.domain="",c.prototype.version=h.Long?h.Long.fromBits(0,0,!1):0,c.create=function(o){return new c(o)},c.encode=function(o,d){return d||(d=u.create()),o.domain!=null&&Object.hasOwnProperty.call(o,"domain")&&d.uint32(10).string(o.domain),o.version!=null&&Object.hasOwnProperty.call(o,"version")&&d.uint32(16).int64(o.version),d},c.encodeDelimited=function(o,d){return this.encode(o,d).ldelim()},c.decode=function(o,d){o instanceof l||(o=l.create(o));for(var m=d===void 0?o.len:o.pos+d,g=new f.onnx.OperatorSetIdProto;o.pos<m;){var y=o.uint32();switch(y>>>3){case 1:g.domain=o.string();break;case 2:g.version=o.int64();break;default:o.skipType(7&y)}}return g},c.decodeDelimited=function(o){return o instanceof l||(o=new l(o)),this.decode(o,o.uint32())},c.verify=function(o){return typeof o!="object"||o===null?"object expected":o.domain!=null&&o.hasOwnProperty("domain")&&!h.isString(o.domain)?"domain: string expected":o.version!=null&&o.hasOwnProperty("version")&&!(h.isInteger(o.version)||o.version&&h.isInteger(o.version.low)&&h.isInteger(o.version.high))?"version: integer|Long expected":null},c.fromObject=function(o){if(o instanceof f.onnx.OperatorSetIdProto)return o;var d=new f.onnx.OperatorSetIdProto;return o.domain!=null&&(d.domain=String(o.domain)),o.version!=null&&(h.Long?(d.version=h.Long.fromValue(o.version)).unsigned=!1:typeof o.version=="string"?d.version=parseInt(o.version,10):typeof o.version=="number"?d.version=o.version:typeof o.version=="object"&&(d.version=new h.LongBits(o.version.low>>>0,o.version.high>>>0).toNumber())),d},c.toObject=function(o,d){d||(d={});var m={};if(d.defaults)if(m.domain="",h.Long){var g=new h.Long(0,0,!1);m.version=d.longs===String?g.toString():d.longs===Number?g.toNumber():g}else m.version=d.longs===String?"0":0;return o.domain!=null&&o.hasOwnProperty("domain")&&(m.domain=o.domain),o.version!=null&&o.hasOwnProperty("version")&&(typeof o.version=="number"?m.version=d.longs===String?String(o.version):o.version:m.version=d.longs===String?h.Long.prototype.toString.call(o.version):d.longs===Number?new h.LongBits(o.version.low>>>0,o.version.high>>>0).toNumber():o.version),m},c.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},c.getTypeUrl=function(o){return o===void 0&&(o="type.googleapis.com"),o+"/onnx.OperatorSetIdProto"},c}(),a.OperatorStatus=function(){var c={},o=Object.create(c);return o[c[0]="EXPERIMENTAL"]=0,o[c[1]="STABLE"]=1,o}(),a.FunctionProto=function(){function c(o){if(this.input=[],this.output=[],this.attribute=[],this.attributeProto=[],this.node=[],this.opsetImport=[],o)for(var d=Object.keys(o),m=0;m<d.length;++m)o[d[m]]!=null&&(this[d[m]]=o[d[m]])}return c.prototype.name="",c.prototype.input=h.emptyArray,c.prototype.output=h.emptyArray,c.prototype.attribute=h.emptyArray,c.prototype.attributeProto=h.emptyArray,c.prototype.node=h.emptyArray,c.prototype.docString="",c.prototype.opsetImport=h.emptyArray,c.prototype.domain="",c.create=function(o){return new c(o)},c.encode=function(o,d){if(d||(d=u.create()),o.name!=null&&Object.hasOwnProperty.call(o,"name")&&d.uint32(10).string(o.name),o.input!=null&&o.input.length)for(var m=0;m<o.input.length;++m)d.uint32(34).string(o.input[m]);if(o.output!=null&&o.output.length)for(m=0;m<o.output.length;++m)d.uint32(42).string(o.output[m]);if(o.attribute!=null&&o.attribute.length)for(m=0;m<o.attribute.length;++m)d.uint32(50).string(o.attribute[m]);if(o.node!=null&&o.node.length)for(m=0;m<o.node.length;++m)f.onnx.NodeProto.encode(o.node[m],d.uint32(58).fork()).ldelim();if(o.docString!=null&&Object.hasOwnProperty.call(o,"docString")&&d.uint32(66).string(o.docString),o.opsetImport!=null&&o.opsetImport.length)for(m=0;m<o.opsetImport.length;++m)f.onnx.OperatorSetIdProto.encode(o.opsetImport[m],d.uint32(74).fork()).ldelim();if(o.domain!=null&&Object.hasOwnProperty.call(o,"domain")&&d.uint32(82).string(o.domain),o.attributeProto!=null&&o.attributeProto.length)for(m=0;m<o.attributeProto.length;++m)f.onnx.AttributeProto.encode(o.attributeProto[m],d.uint32(90).fork()).ldelim();return d},c.encodeDelimited=function(o,d){return this.encode(o,d).ldelim()},c.decode=function(o,d){o instanceof l||(o=l.create(o));for(var m=d===void 0?o.len:o.pos+d,g=new f.onnx.FunctionProto;o.pos<m;){var y=o.uint32();switch(y>>>3){case 1:g.name=o.string();break;case 4:g.input&&g.input.length||(g.input=[]),g.input.push(o.string());break;case 5:g.output&&g.output.length||(g.output=[]),g.output.push(o.string());break;case 6:g.attribute&&g.attribute.length||(g.attribute=[]),g.attribute.push(o.string());break;case 11:g.attributeProto&&g.attributeProto.length||(g.attributeProto=[]),g.attributeProto.push(f.onnx.AttributeProto.decode(o,o.uint32()));break;case 7:g.node&&g.node.length||(g.node=[]),g.node.push(f.onnx.NodeProto.decode(o,o.uint32()));break;case 8:g.docString=o.string();break;case 9:g.opsetImport&&g.opsetImport.length||(g.opsetImport=[]),g.opsetImport.push(f.onnx.OperatorSetIdProto.decode(o,o.uint32()));break;case 10:g.domain=o.string();break;default:o.skipType(7&y)}}return g},c.decodeDelimited=function(o){return o instanceof l||(o=new l(o)),this.decode(o,o.uint32())},c.verify=function(o){if(typeof o!="object"||o===null)return"object expected";if(o.name!=null&&o.hasOwnProperty("name")&&!h.isString(o.name))return"name: string expected";if(o.input!=null&&o.hasOwnProperty("input")){if(!Array.isArray(o.input))return"input: array expected";for(var d=0;d<o.input.length;++d)if(!h.isString(o.input[d]))return"input: string[] expected"}if(o.output!=null&&o.hasOwnProperty("output")){if(!Array.isArray(o.output))return"output: array expected";for(d=0;d<o.output.length;++d)if(!h.isString(o.output[d]))return"output: string[] expected"}if(o.attribute!=null&&o.hasOwnProperty("attribute")){if(!Array.isArray(o.attribute))return"attribute: array expected";for(d=0;d<o.attribute.length;++d)if(!h.isString(o.attribute[d]))return"attribute: string[] expected"}if(o.attributeProto!=null&&o.hasOwnProperty("attributeProto")){if(!Array.isArray(o.attributeProto))return"attributeProto: array expected";for(d=0;d<o.attributeProto.length;++d)if(m=f.onnx.AttributeProto.verify(o.attributeProto[d]))return"attributeProto."+m}if(o.node!=null&&o.hasOwnProperty("node")){if(!Array.isArray(o.node))return"node: array expected";for(d=0;d<o.node.length;++d)if(m=f.onnx.NodeProto.verify(o.node[d]))return"node."+m}if(o.docString!=null&&o.hasOwnProperty("docString")&&!h.isString(o.docString))return"docString: string expected";if(o.opsetImport!=null&&o.hasOwnProperty("opsetImport")){if(!Array.isArray(o.opsetImport))return"opsetImport: array expected";for(d=0;d<o.opsetImport.length;++d){var m;if(m=f.onnx.OperatorSetIdProto.verify(o.opsetImport[d]))return"opsetImport."+m}}return o.domain!=null&&o.hasOwnProperty("domain")&&!h.isString(o.domain)?"domain: string expected":null},c.fromObject=function(o){if(o instanceof f.onnx.FunctionProto)return o;var d=new f.onnx.FunctionProto;if(o.name!=null&&(d.name=String(o.name)),o.input){if(!Array.isArray(o.input))throw TypeError(".onnx.FunctionProto.input: array expected");d.input=[];for(var m=0;m<o.input.length;++m)d.input[m]=String(o.input[m])}if(o.output){if(!Array.isArray(o.output))throw TypeError(".onnx.FunctionProto.output: array expected");for(d.output=[],m=0;m<o.output.length;++m)d.output[m]=String(o.output[m])}if(o.attribute){if(!Array.isArray(o.attribute))throw TypeError(".onnx.FunctionProto.attribute: array expected");for(d.attribute=[],m=0;m<o.attribute.length;++m)d.attribute[m]=String(o.attribute[m])}if(o.attributeProto){if(!Array.isArray(o.attributeProto))throw TypeError(".onnx.FunctionProto.attributeProto: array expected");for(d.attributeProto=[],m=0;m<o.attributeProto.length;++m){if(typeof o.attributeProto[m]!="object")throw TypeError(".onnx.FunctionProto.attributeProto: object expected");d.attributeProto[m]=f.onnx.AttributeProto.fromObject(o.attributeProto[m])}}if(o.node){if(!Array.isArray(o.node))throw TypeError(".onnx.FunctionProto.node: array expected");for(d.node=[],m=0;m<o.node.length;++m){if(typeof o.node[m]!="object")throw TypeError(".onnx.FunctionProto.node: object expected");d.node[m]=f.onnx.NodeProto.fromObject(o.node[m])}}if(o.docString!=null&&(d.docString=String(o.docString)),o.opsetImport){if(!Array.isArray(o.opsetImport))throw TypeError(".onnx.FunctionProto.opsetImport: array expected");for(d.opsetImport=[],m=0;m<o.opsetImport.length;++m){if(typeof o.opsetImport[m]!="object")throw TypeError(".onnx.FunctionProto.opsetImport: object expected");d.opsetImport[m]=f.onnx.OperatorSetIdProto.fromObject(o.opsetImport[m])}}return o.domain!=null&&(d.domain=String(o.domain)),d},c.toObject=function(o,d){d||(d={});var m={};if((d.arrays||d.defaults)&&(m.input=[],m.output=[],m.attribute=[],m.node=[],m.opsetImport=[],m.attributeProto=[]),d.defaults&&(m.name="",m.docString="",m.domain=""),o.name!=null&&o.hasOwnProperty("name")&&(m.name=o.name),o.input&&o.input.length){m.input=[];for(var g=0;g<o.input.length;++g)m.input[g]=o.input[g]}if(o.output&&o.output.length)for(m.output=[],g=0;g<o.output.length;++g)m.output[g]=o.output[g];if(o.attribute&&o.attribute.length)for(m.attribute=[],g=0;g<o.attribute.length;++g)m.attribute[g]=o.attribute[g];if(o.node&&o.node.length)for(m.node=[],g=0;g<o.node.length;++g)m.node[g]=f.onnx.NodeProto.toObject(o.node[g],d);if(o.docString!=null&&o.hasOwnProperty("docString")&&(m.docString=o.docString),o.opsetImport&&o.opsetImport.length)for(m.opsetImport=[],g=0;g<o.opsetImport.length;++g)m.opsetImport[g]=f.onnx.OperatorSetIdProto.toObject(o.opsetImport[g],d);if(o.domain!=null&&o.hasOwnProperty("domain")&&(m.domain=o.domain),o.attributeProto&&o.attributeProto.length)for(m.attributeProto=[],g=0;g<o.attributeProto.length;++g)m.attributeProto[g]=f.onnx.AttributeProto.toObject(o.attributeProto[g],d);return m},c.prototype.toJSON=function(){return this.constructor.toObject(this,i.util.toJSONOptions)},c.getTypeUrl=function(o){return o===void 0&&(o="type.googleapis.com"),o+"/onnx.FunctionProto"},c}(),a),n.exports=f},5711:(n,e,t)=>{var r,s=(r=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0,typeof __filename<"u"&&(r=r||__filename),function(a={}){function i(){return M.buffer!=K.buffer&&ue(),K}function l(){return M.buffer!=K.buffer&&ue(),X}function u(){return M.buffer!=K.buffer&&ue(),Y}function h(){return M.buffer!=K.buffer&&ue(),J}function f(){return M.buffer!=K.buffer&&ue(),te}var c,o,d=a;d.ready=new Promise((A,L)=>{c=A,o=L}),d.jsepInit=function(A,L,B,W,H,ne,ae,he){d.Ib=A,d.ob=L,d.qb=B,d.ab=W,d.pb=H,d.xa=ne,d.rb=ae,d.sb=he};var m,g,y,$=Object.assign({},d),b="./this.program",x=(A,L)=>{throw L},w=typeof window=="object",v=typeof importScripts=="function",S=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",T=d.ENVIRONMENT_IS_PTHREAD||!1,C="";function I(A){return d.locateFile?d.locateFile(A,C):C+A}if(S){var N=t(1384),P=t(908);let A;C=v?P.dirname(C)+"/":__dirname+"/",m=(L,B)=>(L=L.startsWith("file://")?new URL(L):P.normalize(L),N.readFileSync(L,B?void 0:"utf8")),y=L=>((L=m(L,!0)).buffer||(L=new Uint8Array(L)),L),g=(L,B,W,H=!0)=>{L=L.startsWith("file://")?new URL(L):P.normalize(L),N.readFile(L,H?void 0:"utf8",(ne,ae)=>{ne?W(ne):B(H?ae.buffer:ae)})},!d.thisProgram&&1<process.argv.length&&(b=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),x=(L,B)=>{throw process.exitCode=L,B},d.inspect=()=>"[Emscripten Module object]";try{A=t(9925)}catch(L){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),L}commonjsGlobal.Worker=A.Worker}else(w||v)&&(v?C=self.location.href:typeof document<"u"&&document.currentScript&&(C=document.currentScript.src),r&&(C=r),C=C.indexOf("blob:")!==0?C.substr(0,C.replace(/[?#].*/,"").lastIndexOf("/")+1):"",S||(m=A=>{var L=new XMLHttpRequest;return L.open("GET",A,!1),L.send(null),L.responseText},v&&(y=A=>{var L=new XMLHttpRequest;return L.open("GET",A,!1),L.responseType="arraybuffer",L.send(null),new Uint8Array(L.response)}),g=(A,L,B)=>{var W=new XMLHttpRequest;W.open("GET",A,!0),W.responseType="arraybuffer",W.onload=()=>{W.status==200||W.status==0&&W.response?L(W.response):B()},W.onerror=B,W.send(null)}));S&&typeof performance>"u"&&(commonjsGlobal.performance=t(6953).performance);var F=console.log.bind(console),_=console.error.bind(console);S&&(F=(...A)=>N.writeSync(1,A.join(" ")+`
`),_=(...A)=>N.writeSync(2,A.join(" ")+`
`));var D,E=d.print||F,k=d.printErr||_;Object.assign(d,$),$=null,d.thisProgram&&(b=d.thisProgram),d.quit&&(x=d.quit),d.wasmBinary&&(D=d.wasmBinary);var O=d.noExitRuntime||!0;typeof WebAssembly!="object"&&ke("no native wasm support detected");var M,z,G,j,K,X,Y,J,te,re=!1;function ue(){var A=M.buffer;d.HEAP8=K=new Int8Array(A),d.HEAP16=new Int16Array(A),d.HEAP32=Y=new Int32Array(A),d.HEAPU8=X=new Uint8Array(A),d.HEAPU16=new Uint16Array(A),d.HEAPU32=J=new Uint32Array(A),d.HEAPF32=new Float32Array(A),d.HEAPF64=te=new Float64Array(A)}var ie=d.INITIAL_MEMORY||16777216;if(5242880<=ie||ke("INITIAL_MEMORY should be larger than STACK_SIZE, was "+ie+"! (STACK_SIZE=5242880)"),T)M=d.wasmMemory;else if(d.wasmMemory)M=d.wasmMemory;else if(!((M=new WebAssembly.Memory({initial:ie/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw k("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),S&&k("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");ue(),ie=M.buffer.byteLength;var ce=[],se=[],xe=[],me=0;function $e(){return O||0<me}var Se,ve=0,Ee=null;function Ae(){ve++,d.monitorRunDependencies&&d.monitorRunDependencies(ve)}function Fe(){if(ve--,d.monitorRunDependencies&&d.monitorRunDependencies(ve),ve==0&&Ee){var A=Ee;Ee=null,A()}}function ke(A){throw d.onAbort&&d.onAbort(A),k(A="Aborted("+A+")"),re=!0,j=1,A=new WebAssembly.RuntimeError(A+". Build with -sASSERTIONS for more info."),o(A),A}function Be(A){return A.startsWith("data:application/octet-stream;base64,")}function Ne(A){if(A==Se&&D)return new Uint8Array(D);if(y)return y(A);throw"both async and sync fetching of the wasm failed"}function Ve(A,L,B){return function(W){if(!D&&(w||v)){if(typeof fetch=="function"&&!W.startsWith("file://"))return fetch(W,{credentials:"same-origin"}).then(H=>{if(!H.ok)throw"failed to load wasm binary file at '"+W+"'";return H.arrayBuffer()}).catch(()=>Ne(W));if(g)return new Promise((H,ne)=>{g(W,ae=>H(new Uint8Array(ae)),ne)})}return Promise.resolve().then(()=>Ne(W))}(A).then(W=>WebAssembly.instantiate(W,L)).then(W=>W).then(B,W=>{k("failed to asynchronously prepare wasm: "+W),ke(W)})}Be(Se="ort-wasm-simd-threaded.wasm")||(Se=I(Se));var Me,Ue={891692:()=>{d.jsepRunPromise=new Promise(function(A){d.tb=A})},891787:A=>{d.tb(A)},891825:A=>d.ob(A),891858:A=>d.qb(A),891890:(A,L,B)=>{d.ab(A,L,B,!0)},891929:(A,L,B)=>{d.ab(A,L,B)},891962:A=>{d.xa("Abs",A,void 0)},892013:A=>{d.xa("Neg",A,void 0)},892064:A=>{d.xa("Floor",A,void 0)},892117:A=>{d.xa("Ceil",A,void 0)},892169:A=>{d.xa("Reciprocal",A,void 0)},892227:A=>{d.xa("Sqrt",A,void 0)},892279:A=>{d.xa("Exp",A,void 0)},892330:A=>{d.xa("Erf",A,void 0)},892381:A=>{d.xa("Sigmoid",A,void 0)},892436:A=>{d.xa("Log",A,void 0)},892487:A=>{d.xa("Sin",A,void 0)},892538:A=>{d.xa("Cos",A,void 0)},892589:A=>{d.xa("Tan",A,void 0)},892640:A=>{d.xa("Asin",A,void 0)},892692:A=>{d.xa("Acos",A,void 0)},892744:A=>{d.xa("Atan",A,void 0)},892796:A=>{d.xa("Sinh",A,void 0)},892848:A=>{d.xa("Cosh",A,void 0)},892900:A=>{d.xa("Asinh",A,void 0)},892953:A=>{d.xa("Acosh",A,void 0)},893006:A=>{d.xa("Atanh",A,void 0)},893059:A=>{d.xa("Tanh",A,void 0)},893111:(A,L,B)=>{d.xa("ClipV10",A,{min:L,max:B})},893183:A=>{d.xa("Clip",A,void 0)},893235:(A,L)=>{d.xa("Elu",A,{alpha:L})},893293:A=>{d.xa("Relu",A,void 0)},893345:(A,L)=>{d.xa("LeakyRelu",A,{alpha:L})},893409:(A,L)=>{d.xa("ThresholdedRelu",A,{alpha:L})},893479:(A,L)=>{d.xa("Cast",A,{to:L})},893537:A=>{d.xa("Add",A,void 0)},893588:A=>{d.xa("Sub",A,void 0)},893639:A=>{d.xa("Mul",A,void 0)},893690:A=>{d.xa("Div",A,void 0)},893741:A=>{d.xa("Pow",A,void 0)},893792:(A,L,B,W,H)=>{d.xa("ReduceMean",A,{keepDims:!!L,noopWithEmptyAxes:!!B,axes:W?Array.from(u().subarray(H>>>0,H+W>>>0)):[]})},893956:(A,L,B,W,H)=>{d.xa("ReduceMax",A,{keepDims:!!L,noopWithEmptyAxes:!!B,axes:W?Array.from(u().subarray(H>>>0,H+W>>>0)):[]})},894119:(A,L,B,W,H)=>{d.xa("ReduceMin",A,{keepDims:!!L,noopWithEmptyAxes:!!B,axes:W?Array.from(u().subarray(H>>>0,H+W>>>0)):[]})},894282:(A,L,B,W,H)=>{d.xa("ReduceProd",A,{keepDims:!!L,noopWithEmptyAxes:!!B,axes:W?Array.from(u().subarray(H>>>0,H+W>>>0)):[]})},894446:(A,L,B,W,H)=>{d.xa("ReduceSum",A,{keepDims:!!L,noopWithEmptyAxes:!!B,axes:W?Array.from(u().subarray(H>>>0,H+W>>>0)):[]})},894609:(A,L,B,W,H)=>{d.xa("ReduceL1",A,{keepDims:!!L,noopWithEmptyAxes:!!B,axes:W?Array.from(u().subarray(H>>>0,H+W>>>0)):[]})},894771:(A,L,B,W,H)=>{d.xa("ReduceL2",A,{keepDims:!!L,noopWithEmptyAxes:!!B,axes:W?Array.from(u().subarray(H>>>0,H+W>>>0)):[]})},894933:(A,L,B,W,H)=>{d.xa("ReduceLogSum",A,{keepDims:!!L,noopWithEmptyAxes:!!B,axes:W?Array.from(u().subarray(H>>>0,H+W>>>0)):[]})},895099:(A,L,B,W,H)=>{d.xa("ReduceSumSquare",A,{keepDims:!!L,noopWithEmptyAxes:!!B,axes:W?Array.from(u().subarray(H>>>0,H+W>>>0)):[]})},895268:(A,L,B,W,H)=>{d.xa("ReduceLogSumExp",A,{keepDims:!!L,noopWithEmptyAxes:!!B,axes:W?Array.from(u().subarray(H>>>0,H+W>>>0)):[]})},895437:(A,L,B)=>{d.xa("Transpose",A,{perm:L?Array.from(u().subarray(B>>>0,B+L>>>0)):[]})},895550:(A,L,B,W,H,ne,ae,he,ge,ye)=>{d.xa("Conv",A,{format:ge?"NHWC":"NCHW",auto_pad:L,dilations:[B],group:W,kernel_shape:[H],pads:[ne,ae],strides:[he],w_is_const:()=>!!i()[ye>>>0]})},895778:(A,L,B,W,H,ne,ae,he,ge,ye,Ce,De,Le,ee,Ie)=>{d.xa("Conv",A,{format:ee?"NHWC":"NCHW",auto_pad:L,dilations:[B,W],group:H,kernel_shape:[ne,ae],pads:[he,ge,ye,Ce],strides:[De,Le],w_is_const:()=>!!i()[Ie>>>0]})},896037:(A,L,B,W,H,ne,ae,he,ge,ye)=>{d.xa("Conv",A,{format:ge?"NHWC":"NCHW",auto_pad:L,dilations:[B],group:W,kernel_shape:[H],pads:[ne,ae],strides:[he],w_is_const:()=>!!i()[ye>>>0]})},896265:(A,L,B,W,H,ne,ae,he,ge,ye,Ce,De,Le,ee,Ie)=>{d.xa("Conv",A,{format:ee?"NHWC":"NCHW",auto_pad:L,dilations:[B,W],group:H,kernel_shape:[ne,ae],pads:[he,ge,ye,Ce],strides:[De,Le],w_is_const:()=>!!i()[Ie>>>0]})},896524:(A,L,B,W,H,ne,ae,he,ge,ye,Ce,De,Le,ee)=>{d.xa("ConvTranspose",A,{format:ge?"NHWC":"NCHW",autoPad:L,dilations:[B],group:W,kernel_shape:[H],pads:[ne,ae],strides:[he],wIsConst:()=>!!i()[ye>>>0],outputPadding:Ce?Array.from(u().subarray(De>>>0,De+Ce>>>0)):[],outputShape:Le?Array.from(u().subarray(ee>>>0,ee+Le>>>0)):[]})},896904:(A,L,B,W,H,ne,ae,he,ge,ye,Ce,De,Le)=>{d.xa("ConvTranspose",A,{format:he?"NHWC":"NCHW",autoPad:L,dilations:Array.from(u().subarray(B>>>0,B+2>>>0)),group:W,kernelShape:Array.from(u().subarray(H>>>0,H+2>>>0)),pads:Array.from(u().subarray(ne>>>0,ne+4>>>0)),strides:Array.from(u().subarray(ae>>>0,ae+2>>>0)),wIsConst:()=>!!i()[ge>>>0],outputPadding:0<ye?Array.from(u().subarray(Ce>>>0,Ce+ye>>>0)):[],outputShape:0<De?Array.from(u().subarray(Le>>>0,Le+De>>>0)):[]})},897427:(A,L,B,W,H,ne,ae,he,ge,ye,Ce,De,Le,ee)=>{d.xa("ConvTranspose",A,{format:ge?"NHWC":"NCHW",autoPad:L,dilations:[B],group:W,kernel_shape:[H],pads:[ne,ae],strides:[he],wIsConst:()=>!!i()[ye>>>0],outputPadding:Ce?Array.from(u().subarray(De>>>0,De+Ce>>>0)):[],outputShape:Le?Array.from(u().subarray(ee>>>0,ee+Le>>>0)):[]})},897807:(A,L,B,W,H,ne,ae,he,ge,ye,Ce,De,Le)=>{d.xa("ConvTranspose",A,{format:he?"NHWC":"NCHW",autoPad:L,dilations:Array.from(u().subarray(B>>>0,B+2>>>0)),group:W,kernelShape:Array.from(u().subarray(H>>>0,H+2>>>0)),pads:Array.from(u().subarray(ne>>>0,ne+4>>>0)),strides:Array.from(u().subarray(ae>>>0,ae+2>>>0)),wIsConst:()=>!!i()[ge>>>0],outputPadding:0<ye?Array.from(u().subarray(Ce>>>0,Ce+ye>>>0)):[],outputShape:0<De?Array.from(u().subarray(Le>>>0,Le+De>>>0)):[]})},898330:(A,L)=>{d.xa("GlobalAveragePool",A,{format:L?"NHWC":"NCHW"})},898421:(A,L,B,W,H,ne,ae,he,ge,ye,Ce,De,Le,ee,Ie,Re)=>{d.xa("AveragePool",A,{format:Re?"NHWC":"NCHW",auto_pad:L,ceil_mode:B,count_include_pad:W,storage_order:H,dilations:[ne,ae],kernel_shape:[he,ge],pads:[ye,Ce,De,Le],strides:[ee,Ie]})},898705:(A,L)=>{d.xa("GlobalAveragePool",A,{format:L?"NHWC":"NCHW"})},898796:(A,L,B,W,H,ne,ae,he,ge,ye,Ce,De,Le,ee,Ie,Re)=>{d.xa("AveragePool",A,{format:Re?"NHWC":"NCHW",auto_pad:L,ceil_mode:B,count_include_pad:W,storage_order:H,dilations:[ne,ae],kernel_shape:[he,ge],pads:[ye,Ce,De,Le],strides:[ee,Ie]})},899080:(A,L)=>{d.xa("GlobalMaxPool",A,{format:L?"NHWC":"NCHW"})},899167:(A,L,B,W,H,ne,ae,he,ge,ye,Ce,De,Le,ee,Ie,Re)=>{d.xa("MaxPool",A,{format:Re?"NHWC":"NCHW",auto_pad:L,ceil_mode:B,count_include_pad:W,storage_order:H,dilations:[ne,ae],kernel_shape:[he,ge],pads:[ye,Ce,De,Le],strides:[ee,Ie]})},899447:(A,L)=>{d.xa("GlobalMaxPool",A,{format:L?"NHWC":"NCHW"})},899534:(A,L,B,W,H,ne,ae,he,ge,ye,Ce,De,Le,ee,Ie,Re)=>{d.xa("MaxPool",A,{format:Re?"NHWC":"NCHW",auto_pad:L,ceil_mode:B,count_include_pad:W,storage_order:H,dilations:[ne,ae],kernel_shape:[he,ge],pads:[ye,Ce,De,Le],strides:[ee,Ie]})},899814:(A,L,B,W,H)=>{d.xa("Gemm",A,{alpha:L,beta:B,transA:W,transB:H})},899918:A=>{d.xa("MatMul",A,void 0)},899972:(A,L,B,W)=>{d.xa("ArgMax",A,{keepDims:!!L,selectLastIndex:!!B,axis:W})},900080:(A,L,B,W)=>{d.xa("ArgMin",A,{keepDims:!!L,selectLastIndex:!!B,axis:W})},900188:(A,L)=>{d.xa("Softmax",A,{axis:L})},900251:(A,L)=>{d.xa("Concat",A,{axis:L})},900311:(A,L,B,W,H)=>{d.xa("Split",A,{axis:L,numOutputs:B,splitSizes:W?Array.from(u().subarray(H>>>0,H+W>>>0)):[]})},900456:A=>{d.xa("Expand",A,void 0)},900510:(A,L)=>{d.xa("Gather",A,{axis:Number(L)})},900581:(A,L,B,W,H,ne,ae,he,ge,ye,Ce)=>{d.xa("Resize",A,{antialias:L,axes:B?Array.from(u().subarray(W>>>0,W+B>>>0)):[],coordinateTransformMode:je(H),cubicCoeffA:ne,excludeOutside:ae,extrapolationValue:he,keepAspectRatioPolicy:je(ge),mode:je(ye),nearestMode:je(Ce)})},900932:(A,L,B,W,H,ne,ae)=>{d.xa("Slice",A,{starts:L?Array.from(u().subarray(B>>>0,B+L>>>0)):[],ends:W?Array.from(u().subarray(H>>>0,H+W>>>0)):[],axes:ne?Array.from(u().subarray(ae>>>0,ae+ne>>>0)):[]})},901163:A=>{d.xa("Tile",A,void 0)},901215:(A,L,B)=>{d.xa("LayerNormalization",A,{axis:Number(L),epsilon:Number(B)})},901322:(A,L,B)=>{d.xa("InstanceNormalization",A,{epsilon:L,format:B?"NHWC":"NCHW"})},901436:(A,L,B)=>{d.xa("InstanceNormalization",A,{epsilon:L,format:B?"NHWC":"NCHW"})},901550:A=>{d.xa("Gelu",A,void 0)},901602:(A,L)=>{d.xa("SkipLayerNormalization",A,{epsilon:L})},901683:A=>{d.rb(A)},901717:(A,L)=>d.sb(A,L)};function ze(A){this.name="ExitStatus",this.message=`Program terminated with exit(${A})`,this.status=A}function Ge(A){A.terminate(),A.onmessage=()=>{}}function We(A){(A=we.Ja[A])||ke(),we.xb(A)}function He(A){var L=we.lb();if(!L)return 6;we.Ra.push(L),we.Ja[A.Qa]=L,L.Qa=A.Qa;var B={cmd:"run",start_routine:A.yb,arg:A.jb,pthread_ptr:A.Qa};return S&&L.unref(),L.postMessage(B,A.Eb),0}var Je=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,et=(A,L,B)=>{var W=(L>>>=0)+B;for(B=L;A[B]&&!(B>=W);)++B;if(16<B-L&&A.buffer&&Je)return Je.decode(A.buffer instanceof SharedArrayBuffer?A.slice(L,B):A.subarray(L,B));for(W="";L<B;){var H=A[L++];if(128&H){var ne=63&A[L++];if((224&H)==192)W+=String.fromCharCode((31&H)<<6|ne);else{var ae=63&A[L++];65536>(H=(240&H)==224?(15&H)<<12|ne<<6|ae:(7&H)<<18|ne<<12|ae<<6|63&A[L++])?W+=String.fromCharCode(H):(H-=65536,W+=String.fromCharCode(55296|H>>10,56320|1023&H))}}else W+=String.fromCharCode(H)}return W},je=(A,L)=>(A>>>=0)?et(l(),A,L):"";function Xe(A){if(T)return de(1,1,A);j=A,$e()||(we.zb(),d.onExit&&d.onExit(A),re=!0),x(A,new ze(A))}var tt=A=>{if(j=A,T)throw qe(A),"unwind";Xe(A)},we={Ua:[],Ra:[],eb:[],Ja:{},Xa:function(){T?we.nb():we.mb()},mb:function(){ce.unshift(()=>{Ae(),we.ub(()=>Fe())})},nb:function(){we.receiveObjectTransfer=we.wb,we.threadInitTLS=we.cb,we.setExitStatus=we.bb,O=!1},bb:function(A){j=A},Kb:["$terminateWorker"],zb:function(){for(var A of we.Ra)Ge(A);for(A of we.Ua)Ge(A);we.Ua=[],we.Ra=[],we.Ja=[]},xb:function(A){var L=A.Qa;delete we.Ja[L],we.Ua.push(A),we.Ra.splice(we.Ra.indexOf(A),1),A.Qa=0,Ot(L)},wb:function(){},cb:function(){we.eb.forEach(A=>A())},vb:A=>new Promise(L=>{A.onmessage=H=>{var ne=(H=H.data).cmd;if(H.targetThread&&H.targetThread!=Nt()){var ae=we.Ja[H.Jb];ae?ae.postMessage(H,H.transferList):k('Internal error! Worker sent a message "'+ne+'" to target pthread '+H.targetThread+", but that thread no longer exists!")}else ne==="checkMailbox"?R():ne==="spawnThread"?He(H):ne==="cleanupThread"?We(H.thread):ne==="killThread"?(H=H.thread,ne=we.Ja[H],delete we.Ja[H],Ge(ne),Ot(H),we.Ra.splice(we.Ra.indexOf(ne),1),ne.Qa=0):ne==="cancelThread"?we.Ja[H.thread].postMessage({cmd:"cancel"}):ne==="loaded"?(A.loaded=!0,L(A)):ne==="alert"?alert("Thread "+H.threadId+": "+H.text):H.target==="setimmediate"?A.postMessage(H):ne==="callHandler"?d[H.handler](...H.args):ne&&k("worker sent an unknown command "+ne)},A.onerror=H=>{throw k("worker sent an error! "+H.filename+":"+H.lineno+": "+H.message),H},S&&(A.on("message",function(H){A.onmessage({data:H})}),A.on("error",function(H){A.onerror(H)}));var B,W=[];for(B of["onExit","onAbort","print","printErr"])d.hasOwnProperty(B)&&W.push(B);A.postMessage({cmd:"load",handlers:W,urlOrBlob:d.mainScriptUrlOrBlob||r,wasmMemory:M,wasmModule:G})}),ub:function(A){A()},ib:function(){var A=I("ort-wasm-simd-threaded.worker.js");A=new Worker(A),we.Ua.push(A)},lb:function(){return we.Ua.length==0&&(we.ib(),we.vb(we.Ua[0])),we.Ua.pop()}};d.PThread=we;var Qe=A=>{for(;0<A.length;)A.shift()(d)};function qe(A){if(T)return de(2,0,A);tt(A)}function Ye(A){this.$a=A-24,this.hb=function(L){h()[this.$a+4>>2>>>0]=L},this.gb=function(L){h()[this.$a+8>>2>>>0]=L},this.Xa=function(L,B){this.fb(),this.hb(L),this.gb(B)},this.fb=function(){h()[this.$a+16>>2>>>0]=0}}function pt(A,L,B,W){return T?de(3,1,A,L,B,W):ot(A,L,B,W)}function ot(A,L,B,W){if(A>>>=0,L>>>=0,B>>>=0,W>>>=0,typeof SharedArrayBuffer>"u")return k("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var H=[];return T&&H.length===0?pt(A,L,B,W):(A={yb:B,Qa:A,jb:W,Eb:H},T?(A.Gb="spawnThread",postMessage(A,H),0):He(A))}function dt(A,L,B){return T?de(4,1,A,L,B):0}function ht(A,L){if(T)return de(5,1,A,L)}d.establishStackSpace=function(){var A=Nt(),L=u()[A+52>>2>>>0];A=u()[A+56>>2>>>0],nn(L,L-A),Pt(L)},d.invokeEntryPoint=function(A,L){A=rn.apply(null,[A,L]),$e()?we.bb(A):Rt(A)};var ft=A=>{for(var L=0,B=0;B<A.length;++B){var W=A.charCodeAt(B);127>=W?L++:2047>=W?L+=2:55296<=W&&57343>=W?(L+=4,++B):L+=3}return L},mt=(A,L,B,W)=>{if(!(0<W))return 0;var H=B>>>=0;W=B+W-1;for(var ne=0;ne<A.length;++ne){var ae=A.charCodeAt(ne);if(55296<=ae&&57343>=ae&&(ae=65536+((1023&ae)<<10)|1023&A.charCodeAt(++ne)),127>=ae){if(B>=W)break;L[B++>>>0]=ae}else{if(2047>=ae){if(B+1>=W)break;L[B++>>>0]=192|ae>>6}else{if(65535>=ae){if(B+2>=W)break;L[B++>>>0]=224|ae>>12}else{if(B+3>=W)break;L[B++>>>0]=240|ae>>18,L[B++>>>0]=128|ae>>12&63}L[B++>>>0]=128|ae>>6&63}L[B++>>>0]=128|63&ae}}return L[B>>>0]=0,B-H},It=(A,L,B)=>mt(A,l(),L,B);function Et(A,L){if(T)return de(6,1,A,L)}function at(A,L,B){if(T)return de(7,1,A,L,B)}function lt(A,L,B){return T?de(8,1,A,L,B):0}function gt(A,L){if(T)return de(9,1,A,L)}function yt(A,L,B){if(T)return de(10,1,A,L,B)}function $t(A,L,B,W){if(T)return de(11,1,A,L,B,W)}function bt(A,L,B,W){if(T)return de(12,1,A,L,B,W)}function xt(A,L,B,W){if(T)return de(13,1,A,L,B,W)}function wt(A){if(T)return de(14,1,A)}function vt(A,L){if(T)return de(15,1,A,L)}function St(A,L,B){if(T)return de(16,1,A,L,B)}var Tt=A=>{if(!re)try{if(A(),!$e())try{T?Rt(j):tt(j)}catch(L){L instanceof ze||L=="unwind"||x(1,L)}}catch(L){L instanceof ze||L=="unwind"||x(1,L)}};function ut(A){A>>>=0,typeof Atomics.Fb=="function"&&(Atomics.Fb(u(),A>>2,A).value.then(R),A+=128,Atomics.store(u(),A>>2,1))}function R(){var A=Nt();A&&(ut(A),Tt(()=>en()))}d.__emscripten_thread_mailbox_await=ut,d.checkMailbox=R;var V=A=>A%4==0&&(A%100!=0||A%400==0),U=[0,31,60,91,121,152,182,213,244,274,305,335],q=[0,31,59,90,120,151,181,212,243,273,304,334];function Z(A,L,B,W,H,ne,ae,he){return T?de(17,1,A,L,B,W,H,ne,ae,he):-52}function oe(A,L,B,W,H,ne,ae){if(T)return de(18,1,A,L,B,W,H,ne,ae)}var le=A=>{var L=ft(A)+1,B=Dt(L);return B&&It(A,B,L),B},pe=[],fe=(A,L)=>{var B;for(pe.length=0,L>>=2;B=l()[A++>>>0];)L+=B!=105&L,pe.push(B==105?u()[L>>>0]:f()[L++>>>1]),++L;return pe},be=A=>{var L=Ft();return A=A(),Pt(L),A};function de(A,L){var B=arguments.length-2,W=arguments;return be(()=>{for(var H=Lt(8*B),ne=H>>3,ae=0;ae<B;ae++){var he=W[2+ae];f()[ne+ae>>>0]=he}return Qt(A,B,H,L)})}var _e,Oe=[],Q={},Te=()=>{if(!_e){var A,L={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:b||"./this.program"};for(A in Q)Q[A]===void 0?delete L[A]:L[A]=Q[A];var B=[];for(A in L)B.push(`${A}=${L[A]}`);_e=B}return _e};function Pe(A,L){if(T)return de(19,1,A,L);A>>>=0,L>>>=0;var B=0;return Te().forEach(function(W,H){var ne=L+B;for(H=h()[A+4*H>>2>>>0]=ne,ne=0;ne<W.length;++ne)i()[H++>>0>>>0]=W.charCodeAt(ne);i()[H>>0>>>0]=0,B+=W.length+1}),0}function Ze(A,L){if(T)return de(20,1,A,L);A>>>=0,L>>>=0;var B=Te();h()[A>>2>>>0]=B.length;var W=0;return B.forEach(function(H){W+=H.length+1}),h()[L>>2>>>0]=W,0}function Ct(A){return T?de(21,1,A):52}function Bt(A,L,B,W){return T?de(22,1,A,L,B,W):52}function Vt(A,L,B,W,H){return T?de(23,1,A,L,B,W,H):70}var fn=[null,[],[]];function Ut(A,L,B,W){if(T)return de(24,1,A,L,B,W);L>>>=0,B>>>=0,W>>>=0;for(var H=0,ne=0;ne<B;ne++){var ae=h()[L>>2>>>0],he=h()[L+4>>2>>>0];L+=8;for(var ge=0;ge<he;ge++){var ye=l()[ae+ge>>>0],Ce=fn[A];ye===0||ye===10?((A===1?E:k)(et(Ce,0)),Ce.length=0):Ce.push(ye)}H+=he}return h()[W>>2>>>0]=H,0}var Gt=A=>(Gt=(()=>{if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return W=>(W.set(crypto.getRandomValues(new Uint8Array(W.byteLength))),W);if(S)try{var L=t(760);if(L.randomFillSync)return W=>L.randomFillSync(W);var B=L.randomBytes;return W=>(W.set(B(W.byteLength)),W)}catch{}ke("initRandomDevice")})())(A),Wt=[31,29,31,30,31,30,31,31,30,31,30,31],jt=[31,28,31,30,31,30,31,31,30,31,30,31],mn=(A,L)=>{i().set(A,L>>>0)};function Ht(A,L,B,W){function H(ee,Ie,Re){for(ee=typeof ee=="number"?ee.toString():ee||"";ee.length<Ie;)ee=Re[0]+ee;return ee}function ne(ee,Ie){return H(ee,Ie,"0")}function ae(ee,Ie){function Re(cn){return 0>cn?-1:0<cn?1:0}var it;return(it=Re(ee.getFullYear()-Ie.getFullYear()))===0&&(it=Re(ee.getMonth()-Ie.getMonth()))===0&&(it=Re(ee.getDate()-Ie.getDate())),it}function he(ee){switch(ee.getDay()){case 0:return new Date(ee.getFullYear()-1,11,29);case 1:return ee;case 2:return new Date(ee.getFullYear(),0,3);case 3:return new Date(ee.getFullYear(),0,2);case 4:return new Date(ee.getFullYear(),0,1);case 5:return new Date(ee.getFullYear()-1,11,31);case 6:return new Date(ee.getFullYear()-1,11,30)}}function ge(ee){var Ie=ee.Sa;for(ee=new Date(new Date(ee.Ta+1900,0,1).getTime());0<Ie;){var Re=ee.getMonth(),it=(V(ee.getFullYear())?Wt:jt)[Re];if(!(Ie>it-ee.getDate())){ee.setDate(ee.getDate()+Ie);break}Ie-=it-ee.getDate()+1,ee.setDate(1),11>Re?ee.setMonth(Re+1):(ee.setMonth(0),ee.setFullYear(ee.getFullYear()+1))}return Re=new Date(ee.getFullYear()+1,0,4),Ie=he(new Date(ee.getFullYear(),0,4)),Re=he(Re),0>=ae(Ie,ee)?0>=ae(Re,ee)?ee.getFullYear()+1:ee.getFullYear():ee.getFullYear()-1}A>>>=0,L>>>=0,B>>>=0,W>>>=0;var ye=u()[W+40>>2>>>0];for(var Ce in W={Cb:u()[W>>2>>>0],Bb:u()[W+4>>2>>>0],Va:u()[W+8>>2>>>0],Za:u()[W+12>>2>>>0],Wa:u()[W+16>>2>>>0],Ta:u()[W+20>>2>>>0],Pa:u()[W+24>>2>>>0],Sa:u()[W+28>>2>>>0],Lb:u()[W+32>>2>>>0],Ab:u()[W+36>>2>>>0],Db:ye?je(ye):""},B=je(B),ye={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})B=B.replace(new RegExp(Ce,"g"),ye[Ce]);var De="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Le="January February March April May June July August September October November December".split(" ");for(Ce in ye={"%a":ee=>De[ee.Pa].substring(0,3),"%A":ee=>De[ee.Pa],"%b":ee=>Le[ee.Wa].substring(0,3),"%B":ee=>Le[ee.Wa],"%C":ee=>ne((ee.Ta+1900)/100|0,2),"%d":ee=>ne(ee.Za,2),"%e":ee=>H(ee.Za,2," "),"%g":ee=>ge(ee).toString().substring(2),"%G":ee=>ge(ee),"%H":ee=>ne(ee.Va,2),"%I":ee=>((ee=ee.Va)==0?ee=12:12<ee&&(ee-=12),ne(ee,2)),"%j":ee=>{for(var Ie=0,Re=0;Re<=ee.Wa-1;Ie+=(V(ee.Ta+1900)?Wt:jt)[Re++]);return ne(ee.Za+Ie,3)},"%m":ee=>ne(ee.Wa+1,2),"%M":ee=>ne(ee.Bb,2),"%n":()=>`
`,"%p":ee=>0<=ee.Va&&12>ee.Va?"AM":"PM","%S":ee=>ne(ee.Cb,2),"%t":()=>"	","%u":ee=>ee.Pa||7,"%U":ee=>ne(Math.floor((ee.Sa+7-ee.Pa)/7),2),"%V":ee=>{var Ie=Math.floor((ee.Sa+7-(ee.Pa+6)%7)/7);if(2>=(ee.Pa+371-ee.Sa-2)%7&&Ie++,Ie)Ie==53&&((Re=(ee.Pa+371-ee.Sa)%7)==4||Re==3&&V(ee.Ta)||(Ie=1));else{Ie=52;var Re=(ee.Pa+7-ee.Sa-1)%7;(Re==4||Re==5&&V(ee.Ta%400-1))&&Ie++}return ne(Ie,2)},"%w":ee=>ee.Pa,"%W":ee=>ne(Math.floor((ee.Sa+7-(ee.Pa+6)%7)/7),2),"%y":ee=>(ee.Ta+1900).toString().substring(2),"%Y":ee=>ee.Ta+1900,"%z":ee=>{var Ie=0<=(ee=ee.Ab);return ee=Math.abs(ee)/60,(Ie?"+":"-")+("0000"+(ee/60*100+ee%60)).slice(-4)},"%Z":ee=>ee.Db,"%%":()=>"%"},B=B.replace(/%%/g,"\0\0"),ye)B.includes(Ce)&&(B=B.replace(new RegExp(Ce,"g"),ye[Ce](W)));return Ce=function(ee){var Ie=Array(ft(ee)+1);return mt(ee,Ie,0,Ie.length),Ie}(B=B.replace(/\0\0/g,"%")),Ce.length>L?0:(mn(Ce,A),Ce.length-1)}function kt(A){try{A()}catch(L){ke(L)}}var nt=0,rt=null,qt=0,At=[],Kt={},Xt={},gn=0,Yt=null,yn=[];we.Xa();var $n=[null,Xe,qe,pt,dt,ht,Et,at,lt,gt,yt,$t,bt,xt,wt,vt,St,Z,oe,Pe,Ze,Ct,Bt,Vt,Ut],bn={r:function(A,L,B){return function(W){return function(H){if(!re){if(nt===0){var ne=!1,ae=!1;H((he=0)=>{if(!re&&(qt=he,ne=!0,ae)){nt=2,kt(()=>an(rt)),typeof Browser<"u"&&Browser.Ya.kb&&Browser.Ya.resume(),he=!1;try{var ge=function(){var De=u()[rt+8>>2>>>0];return De=z[Xt[De]],--me,De()}()}catch(De){ge=De,he=!0}var ye=!1;if(!rt){var Ce=Yt;Ce&&(Yt=null,(he?Ce.reject:Ce.resolve)(ge),ye=!0)}if(he&&!ye)throw ge}}),ae=!0,ne||(nt=1,rt=function(){var he=Dt(65548),ge=he+12;h()[he>>2>>>0]=ge,h()[he+4>>2>>>0]=ge+65536,ge=At[0];var ye=Kt[ge];return ye===void 0&&(ye=gn++,Kt[ge]=ye,Xt[ye]=ge),ge=ye,u()[he+8>>2>>>0]=ge,he}(),typeof Browser<"u"&&Browser.Ya.kb&&Browser.Ya.pause(),kt(()=>sn(rt)))}else nt===2?(nt=0,kt(ln),Zt(rt),rt=null,yn.forEach(he=>Tt(he))):ke(`invalid state: ${nt}`);return qt}}(H=>{W().then(H)})}(async()=>{await d.pb(A,L,B)})},b:function(A,L,B){throw new Ye(A>>>=0).Xa(L>>>0,B>>>0),A},O:function(A){Jt(A>>>0,!v,1,!w,131072,!1),we.cb()},m:function(A){A>>>=0,T?postMessage({cmd:"cleanupThread",thread:A}):We(A)},J:ot,i:dt,U:ht,G:Et,I:at,V:lt,S:gt,K:yt,R:$t,q:bt,H:xt,E:wt,T:vt,F:St,Y:()=>!0,C:function(A,L){(A>>>=0)==L>>>0?setTimeout(()=>R()):T?postMessage({targetThread:A,cmd:"checkMailbox"}):(A=we.Ja[A])&&A.postMessage({cmd:"checkMailbox"})},M:function(){return-1},N:ut,X:function(A){S&&we.Ja[A>>>0].ref()},u:function(A,L,B){A=L+2097152>>>0<4194305-!!A?(A>>>0)+4294967296*L:NaN,B>>>=0,A=new Date(1e3*A),u()[B>>2>>>0]=A.getUTCSeconds(),u()[B+4>>2>>>0]=A.getUTCMinutes(),u()[B+8>>2>>>0]=A.getUTCHours(),u()[B+12>>2>>>0]=A.getUTCDate(),u()[B+16>>2>>>0]=A.getUTCMonth(),u()[B+20>>2>>>0]=A.getUTCFullYear()-1900,u()[B+24>>2>>>0]=A.getUTCDay(),A=(A.getTime()-Date.UTC(A.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,u()[B+28>>2>>>0]=A},v:function(A,L,B){A=L+2097152>>>0<4194305-!!A?(A>>>0)+4294967296*L:NaN,B>>>=0,A=new Date(1e3*A),u()[B>>2>>>0]=A.getSeconds(),u()[B+4>>2>>>0]=A.getMinutes(),u()[B+8>>2>>>0]=A.getHours(),u()[B+12>>2>>>0]=A.getDate(),u()[B+16>>2>>>0]=A.getMonth(),u()[B+20>>2>>>0]=A.getFullYear()-1900,u()[B+24>>2>>>0]=A.getDay(),L=(V(A.getFullYear())?U:q)[A.getMonth()]+A.getDate()-1|0,u()[B+28>>2>>>0]=L,u()[B+36>>2>>>0]=-60*A.getTimezoneOffset(),L=new Date(A.getFullYear(),6,1).getTimezoneOffset();var W=new Date(A.getFullYear(),0,1).getTimezoneOffset();A=0|(L!=W&&A.getTimezoneOffset()==Math.min(W,L)),u()[B+32>>2>>>0]=A},w:function(A){A>>>=0;var L=new Date(u()[A+20>>2>>>0]+1900,u()[A+16>>2>>>0],u()[A+12>>2>>>0],u()[A+8>>2>>>0],u()[A+4>>2>>>0],u()[A>>2>>>0],0),B=u()[A+32>>2>>>0],W=L.getTimezoneOffset(),H=new Date(L.getFullYear(),6,1).getTimezoneOffset(),ne=new Date(L.getFullYear(),0,1).getTimezoneOffset(),ae=Math.min(ne,H);return 0>B?u()[A+32>>2>>>0]=+(H!=ne&&ae==W):0<B!=(ae==W)&&(H=Math.max(ne,H),L.setTime(L.getTime()+6e4*((0<B?ae:H)-W))),u()[A+24>>2>>>0]=L.getDay(),B=(V(L.getFullYear())?U:q)[L.getMonth()]+L.getDate()-1|0,u()[A+28>>2>>>0]=B,u()[A>>2>>>0]=L.getSeconds(),u()[A+4>>2>>>0]=L.getMinutes(),u()[A+8>>2>>>0]=L.getHours(),u()[A+12>>2>>>0]=L.getDate(),u()[A+16>>2>>>0]=L.getMonth(),u()[A+20>>2>>>0]=L.getYear(),A=L.getTime()/1e3,tn((Me=A,1<=+Math.abs(Me)?0<Me?+Math.floor(Me/4294967296)>>>0:~~+Math.ceil((Me-+(~~Me>>>0))/4294967296)>>>0:0)),A>>>0},s:Z,t:oe,A:function(A,L,B){function W(ye){return(ye=ye.toTimeString().match(/\(([A-Za-z ]+)\)$/))?ye[1]:"GMT"}A>>>=0,L>>>=0,B>>>=0;var H=new Date().getFullYear(),ne=new Date(H,0,1),ae=new Date(H,6,1);H=ne.getTimezoneOffset();var he=ae.getTimezoneOffset(),ge=Math.max(H,he);h()[A>>2>>>0]=60*ge,u()[L>>2>>>0]=+(H!=he),A=W(ne),L=W(ae),A=le(A),L=le(L),he<H?(h()[B>>2>>>0]=A,h()[B+4>>2>>>0]=L):(h()[B>>2>>>0]=L,h()[B+4>>2>>>0]=A)},d:()=>{ke("")},c:function(A,L,B){return A>>>=0,L=fe(L>>>0,B>>>0),Ue[A].apply(null,L)},l:function(A,L,B){return A>>>=0,L=fe(L>>>0,B>>>0),Ue[A].apply(null,L)},n:function(){},j:function(){return Date.now()},W:()=>{throw me+=1,"unwind"},D:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:function(){return S?t(3993).cpus().length:navigator.hardwareConcurrency},L:function(A,L,B,W){for(we.Hb=L>>>0,Oe.length=B,L=W>>>0>>3,W=0;W<B;W++)Oe[W]=f()[L+W>>>0];return(0>A?Ue[-A-1]:$n[A]).apply(null,Oe)},z:function(A){A>>>=0;var L=l().length;if(A<=L||4294901760<A)return!1;for(var B=1;4>=B;B*=2){var W=L*(1+.2/B);W=Math.min(W,A+100663296);var H=Math;W=Math.max(A,W);e:{H=H.min.call(H,4294901760,W+(65536-W%65536)%65536)-M.buffer.byteLength+65535>>>16;try{M.grow(H),ue();var ne=1;break e}catch{}ne=void 0}if(ne)return!0}return!1},P:Pe,Q:Ze,k:tt,h:Ct,p:Bt,x:Vt,o:Ut,y:function(A,L){return A>>>=0,L>>>=0,Gt(l().subarray(A>>>0,A+L>>>0)),0},a:M||d.wasmMemory,B:Ht,e:function(A,L,B,W){return Ht(A>>>0,L>>>0,B>>>0,W>>>0)}};(function(){function A(B,W){return B=function(H){var ne,ae={};for(ne in H)(function(he){var ge=H[he];ae[he]=typeof ge=="function"?function(){At.push(he);try{return ge.apply(null,arguments)}finally{re||(At.pop()===he||ke(),rt&&nt===1&&At.length===0&&(nt=0,me+=1,kt(on),typeof Fibers<"u"&&Fibers.Mb()))}}:ge})(ne);return ae}(B=B.exports),z=B=function(H){var ne=he=>()=>he()>>>0,ae=he=>ge=>he(ge)>>>0;return(H=Object.assign({},H)).__errno_location=ne(H.__errno_location),H.pthread_self=ne(H.pthread_self),H.malloc=ae(H.malloc),H.stackSave=ne(H.stackSave),H.stackAlloc=ae(H.stackAlloc),H}(B),we.eb.push(z.wa),se.unshift(z.Z),G=W,Fe(),B}var L={a:bn};if(Ae(),d.instantiateWasm)try{return d.instantiateWasm(L,A)}catch(B){k("Module.instantiateWasm callback failed with error: "+B),o(B)}(function(B,W){var H=Se;return D||typeof WebAssembly.instantiateStreaming!="function"||Be(H)||H.startsWith("file://")||S||typeof fetch!="function"?Ve(H,B,W):fetch(H,{credentials:"same-origin"}).then(ne=>WebAssembly.instantiateStreaming(ne,B).then(W,function(ae){return k("wasm streaming compile failed: "+ae),k("falling back to ArrayBuffer instantiation"),Ve(H,B,W)}))})(L,function(B){A(B.instance,B.module)}).catch(o)})(),d._OrtInit=(A,L)=>(d._OrtInit=z._)(A,L),d._OrtGetLastError=(A,L)=>(d._OrtGetLastError=z.$)(A,L),d._OrtCreateSessionOptions=(A,L,B,W,H,ne,ae,he,ge,ye)=>(d._OrtCreateSessionOptions=z.aa)(A,L,B,W,H,ne,ae,he,ge,ye),d._OrtAppendExecutionProvider=(A,L)=>(d._OrtAppendExecutionProvider=z.ba)(A,L),d._OrtAddSessionConfigEntry=(A,L,B)=>(d._OrtAddSessionConfigEntry=z.ca)(A,L,B),d._OrtReleaseSessionOptions=A=>(d._OrtReleaseSessionOptions=z.da)(A),d._OrtCreateSession=(A,L,B)=>(d._OrtCreateSession=z.ea)(A,L,B),d._OrtReleaseSession=A=>(d._OrtReleaseSession=z.fa)(A),d._OrtGetInputOutputCount=(A,L,B)=>(d._OrtGetInputOutputCount=z.ga)(A,L,B),d._OrtGetInputName=(A,L)=>(d._OrtGetInputName=z.ha)(A,L),d._OrtGetOutputName=(A,L)=>(d._OrtGetOutputName=z.ia)(A,L),d._OrtFree=A=>(d._OrtFree=z.ja)(A),d._OrtCreateTensor=(A,L,B,W,H)=>(d._OrtCreateTensor=z.ka)(A,L,B,W,H),d._OrtGetTensorData=(A,L,B,W,H)=>(d._OrtGetTensorData=z.la)(A,L,B,W,H),d._OrtReleaseTensor=A=>(d._OrtReleaseTensor=z.ma)(A),d._OrtCreateRunOptions=(A,L,B,W)=>(d._OrtCreateRunOptions=z.na)(A,L,B,W),d._OrtAddRunConfigEntry=(A,L,B)=>(d._OrtAddRunConfigEntry=z.oa)(A,L,B),d._OrtReleaseRunOptions=A=>(d._OrtReleaseRunOptions=z.pa)(A),d._OrtRun=(A,L,B,W,H,ne,ae,he)=>(d._OrtRun=z.qa)(A,L,B,W,H,ne,ae,he),d._OrtEndProfiling=A=>(d._OrtEndProfiling=z.ra)(A),d._JsepOutput=(A,L,B)=>(d._JsepOutput=z.sa)(A,L,B);var Nt=d._pthread_self=()=>(Nt=d._pthread_self=z.ta)(),Dt=d._malloc=A=>(Dt=d._malloc=z.ua)(A),Zt=d._free=A=>(Zt=d._free=z.va)(A);d.__emscripten_tls_init=()=>(d.__emscripten_tls_init=z.wa)();var Jt=d.__emscripten_thread_init=(A,L,B,W,H,ne)=>(Jt=d.__emscripten_thread_init=z.ya)(A,L,B,W,H,ne);d.__emscripten_thread_crashed=()=>(d.__emscripten_thread_crashed=z.za)();var _t,Qt=(A,L,B,W)=>(Qt=z.Aa)(A,L,B,W),Ot=A=>(Ot=z.Ba)(A),Rt=d.__emscripten_thread_exit=A=>(Rt=d.__emscripten_thread_exit=z.Ca)(A),en=d.__emscripten_check_mailbox=()=>(en=d.__emscripten_check_mailbox=z.Da)(),tn=A=>(tn=z.Ea)(A),nn=(A,L)=>(nn=z.Fa)(A,L),Ft=()=>(Ft=z.Ga)(),Pt=A=>(Pt=z.Ha)(A),Lt=A=>(Lt=z.Ia)(A),rn=d.dynCall_ii=(A,L)=>(rn=d.dynCall_ii=z.Ka)(A,L),sn=A=>(sn=z.La)(A),on=()=>(on=z.Ma)(),an=A=>(an=z.Na)(A),ln=()=>(ln=z.Oa)();function un(){function A(){if(!_t&&(_t=!0,d.calledRun=!0,!re)&&(T||Qe(se),c(d),d.onRuntimeInitialized&&d.onRuntimeInitialized(),!T)){if(d.postRun)for(typeof d.postRun=="function"&&(d.postRun=[d.postRun]);d.postRun.length;){var L=d.postRun.shift();xe.unshift(L)}Qe(xe)}}if(!(0<ve))if(T)c(d),T||Qe(se),startWorker(d);else{if(d.preRun)for(typeof d.preRun=="function"&&(d.preRun=[d.preRun]);d.preRun.length;)ce.unshift(d.preRun.shift());Qe(ce),0<ve||(d.setStatus?(d.setStatus("Running..."),setTimeout(function(){setTimeout(function(){d.setStatus("")},1),A()},1)):A())}}if(d.___start_em_js=901752,d.___stop_em_js=901913,d.keepRuntimeAlive=$e,d.wasmMemory=M,d.stackAlloc=Lt,d.stackSave=Ft,d.stackRestore=Pt,d.UTF8ToString=je,d.stringToUTF8=It,d.lengthBytesUTF8=ft,d.ExitStatus=ze,d.PThread=we,Ee=function A(){_t||un(),_t||(Ee=A)},d.preInit)for(typeof d.preInit=="function"&&(d.preInit=[d.preInit]);0<d.preInit.length;)d.preInit.pop()();return un(),a.ready});n.exports=s},9377:(n,e,t)=>{var r,s=(r=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0,typeof __filename<"u"&&(r=r||__filename),function(a={}){var i,l,u=a;u.ready=new Promise((R,V)=>{i=R,l=V}),u.jsepInit=function(R,V,U,q,Z,oe,le,pe){u.Sa=R,u.Ea=V,u.Ga=U,u.Ca=q,u.Fa=Z,u.la=oe,u.Ha=le,u.Ia=pe};var h,f,c,o=Object.assign({},u),d="./this.program",m=(R,V)=>{throw V},g=typeof window=="object",y=typeof importScripts=="function",$=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",b="";if($){var x=t(1384),w=t(908);b=y?w.dirname(b)+"/":__dirname+"/",h=(R,V)=>(R=R.startsWith("file://")?new URL(R):w.normalize(R),x.readFileSync(R,V?void 0:"utf8")),c=R=>((R=h(R,!0)).buffer||(R=new Uint8Array(R)),R),f=(R,V,U,q=!0)=>{R=R.startsWith("file://")?new URL(R):w.normalize(R),x.readFile(R,q?void 0:"utf8",(Z,oe)=>{Z?U(Z):V(q?oe.buffer:oe)})},!u.thisProgram&&1<process.argv.length&&(d=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),m=(R,V)=>{throw process.exitCode=R,V},u.inspect=()=>"[Emscripten Module object]"}else(g||y)&&(y?b=self.location.href:typeof document<"u"&&document.currentScript&&(b=document.currentScript.src),r&&(b=r),b=b.indexOf("blob:")!==0?b.substr(0,b.replace(/[?#].*/,"").lastIndexOf("/")+1):"",h=R=>{var V=new XMLHttpRequest;return V.open("GET",R,!1),V.send(null),V.responseText},y&&(c=R=>{var V=new XMLHttpRequest;return V.open("GET",R,!1),V.responseType="arraybuffer",V.send(null),new Uint8Array(V.response)}),f=(R,V,U)=>{var q=new XMLHttpRequest;q.open("GET",R,!0),q.responseType="arraybuffer",q.onload=()=>{q.status==200||q.status==0&&q.response?V(q.response):U()},q.onerror=U,q.send(null)});var v,S=u.print||console.log.bind(console),T=u.printErr||console.error.bind(console);Object.assign(u,o),o=null,u.thisProgram&&(d=u.thisProgram),u.quit&&(m=u.quit),u.wasmBinary&&(v=u.wasmBinary);var C=u.noExitRuntime||!0;typeof WebAssembly!="object"&&te("no native wasm support detected");var I,N,P,F,_,D,E,k,O=!1;function M(){var R=I.buffer;u.HEAP8=F=new Int8Array(R),u.HEAP16=new Int16Array(R),u.HEAP32=D=new Int32Array(R),u.HEAPU8=_=new Uint8Array(R),u.HEAPU16=new Uint16Array(R),u.HEAPU32=E=new Uint32Array(R),u.HEAPF32=new Float32Array(R),u.HEAPF64=k=new Float64Array(R)}var z=[],G=[],j=[];function K(){var R=u.preRun.shift();z.unshift(R)}var X,Y=0,J=null;function te(R){throw u.onAbort&&u.onAbort(R),T(R="Aborted("+R+")"),O=!0,P=1,R=new WebAssembly.RuntimeError(R+". Build with -sASSERTIONS for more info."),l(R),R}function re(R){return R.startsWith("data:application/octet-stream;base64,")}if(!re(X="ort-wasm-simd.wasm")){var ue=X;X=u.locateFile?u.locateFile(ue,b):b+ue}function ie(R){if(R==X&&v)return new Uint8Array(v);if(c)return c(R);throw"both async and sync fetching of the wasm failed"}function ce(R,V,U){return function(q){if(!v&&(g||y)){if(typeof fetch=="function"&&!q.startsWith("file://"))return fetch(q,{credentials:"same-origin"}).then(Z=>{if(!Z.ok)throw"failed to load wasm binary file at '"+q+"'";return Z.arrayBuffer()}).catch(()=>ie(q));if(f)return new Promise((Z,oe)=>{f(q,le=>Z(new Uint8Array(le)),oe)})}return Promise.resolve().then(()=>ie(q))}(R).then(q=>WebAssembly.instantiate(q,V)).then(q=>q).then(U,q=>{T("failed to asynchronously prepare wasm: "+q),te(q)})}var se,xe={887872:()=>{u.jsepRunPromise=new Promise(function(R){u.Ja=R})},887967:R=>{u.Ja(R)},888005:R=>u.Ea(R),888038:R=>u.Ga(R),888070:(R,V,U)=>{u.Ca(R,V,U,!0)},888109:(R,V,U)=>{u.Ca(R,V,U)},888142:R=>{u.la("Abs",R,void 0)},888193:R=>{u.la("Neg",R,void 0)},888244:R=>{u.la("Floor",R,void 0)},888297:R=>{u.la("Ceil",R,void 0)},888349:R=>{u.la("Reciprocal",R,void 0)},888407:R=>{u.la("Sqrt",R,void 0)},888459:R=>{u.la("Exp",R,void 0)},888510:R=>{u.la("Erf",R,void 0)},888561:R=>{u.la("Sigmoid",R,void 0)},888616:R=>{u.la("Log",R,void 0)},888667:R=>{u.la("Sin",R,void 0)},888718:R=>{u.la("Cos",R,void 0)},888769:R=>{u.la("Tan",R,void 0)},888820:R=>{u.la("Asin",R,void 0)},888872:R=>{u.la("Acos",R,void 0)},888924:R=>{u.la("Atan",R,void 0)},888976:R=>{u.la("Sinh",R,void 0)},889028:R=>{u.la("Cosh",R,void 0)},889080:R=>{u.la("Asinh",R,void 0)},889133:R=>{u.la("Acosh",R,void 0)},889186:R=>{u.la("Atanh",R,void 0)},889239:R=>{u.la("Tanh",R,void 0)},889291:(R,V,U)=>{u.la("ClipV10",R,{min:V,max:U})},889363:R=>{u.la("Clip",R,void 0)},889415:(R,V)=>{u.la("Elu",R,{alpha:V})},889473:R=>{u.la("Relu",R,void 0)},889525:(R,V)=>{u.la("LeakyRelu",R,{alpha:V})},889589:(R,V)=>{u.la("ThresholdedRelu",R,{alpha:V})},889659:(R,V)=>{u.la("Cast",R,{to:V})},889717:R=>{u.la("Add",R,void 0)},889768:R=>{u.la("Sub",R,void 0)},889819:R=>{u.la("Mul",R,void 0)},889870:R=>{u.la("Div",R,void 0)},889921:R=>{u.la("Pow",R,void 0)},889972:(R,V,U,q,Z)=>{u.la("ReduceMean",R,{keepDims:!!V,noopWithEmptyAxes:!!U,axes:q?Array.from(D.subarray(Z>>>0,Z+q>>>0)):[]})},890136:(R,V,U,q,Z)=>{u.la("ReduceMax",R,{keepDims:!!V,noopWithEmptyAxes:!!U,axes:q?Array.from(D.subarray(Z>>>0,Z+q>>>0)):[]})},890299:(R,V,U,q,Z)=>{u.la("ReduceMin",R,{keepDims:!!V,noopWithEmptyAxes:!!U,axes:q?Array.from(D.subarray(Z>>>0,Z+q>>>0)):[]})},890462:(R,V,U,q,Z)=>{u.la("ReduceProd",R,{keepDims:!!V,noopWithEmptyAxes:!!U,axes:q?Array.from(D.subarray(Z>>>0,Z+q>>>0)):[]})},890626:(R,V,U,q,Z)=>{u.la("ReduceSum",R,{keepDims:!!V,noopWithEmptyAxes:!!U,axes:q?Array.from(D.subarray(Z>>>0,Z+q>>>0)):[]})},890789:(R,V,U,q,Z)=>{u.la("ReduceL1",R,{keepDims:!!V,noopWithEmptyAxes:!!U,axes:q?Array.from(D.subarray(Z>>>0,Z+q>>>0)):[]})},890951:(R,V,U,q,Z)=>{u.la("ReduceL2",R,{keepDims:!!V,noopWithEmptyAxes:!!U,axes:q?Array.from(D.subarray(Z>>>0,Z+q>>>0)):[]})},891113:(R,V,U,q,Z)=>{u.la("ReduceLogSum",R,{keepDims:!!V,noopWithEmptyAxes:!!U,axes:q?Array.from(D.subarray(Z>>>0,Z+q>>>0)):[]})},891279:(R,V,U,q,Z)=>{u.la("ReduceSumSquare",R,{keepDims:!!V,noopWithEmptyAxes:!!U,axes:q?Array.from(D.subarray(Z>>>0,Z+q>>>0)):[]})},891448:(R,V,U,q,Z)=>{u.la("ReduceLogSumExp",R,{keepDims:!!V,noopWithEmptyAxes:!!U,axes:q?Array.from(D.subarray(Z>>>0,Z+q>>>0)):[]})},891617:(R,V,U)=>{u.la("Transpose",R,{perm:V?Array.from(D.subarray(U>>>0,U+V>>>0)):[]})},891730:(R,V,U,q,Z,oe,le,pe,fe,be)=>{u.la("Conv",R,{format:fe?"NHWC":"NCHW",auto_pad:V,dilations:[U],group:q,kernel_shape:[Z],pads:[oe,le],strides:[pe],w_is_const:()=>!!F[be>>>0]})},891958:(R,V,U,q,Z,oe,le,pe,fe,be,de,_e,Oe,Q,Te)=>{u.la("Conv",R,{format:Q?"NHWC":"NCHW",auto_pad:V,dilations:[U,q],group:Z,kernel_shape:[oe,le],pads:[pe,fe,be,de],strides:[_e,Oe],w_is_const:()=>!!F[Te>>>0]})},892217:(R,V,U,q,Z,oe,le,pe,fe,be)=>{u.la("Conv",R,{format:fe?"NHWC":"NCHW",auto_pad:V,dilations:[U],group:q,kernel_shape:[Z],pads:[oe,le],strides:[pe],w_is_const:()=>!!F[be>>>0]})},892445:(R,V,U,q,Z,oe,le,pe,fe,be,de,_e,Oe,Q,Te)=>{u.la("Conv",R,{format:Q?"NHWC":"NCHW",auto_pad:V,dilations:[U,q],group:Z,kernel_shape:[oe,le],pads:[pe,fe,be,de],strides:[_e,Oe],w_is_const:()=>!!F[Te>>>0]})},892704:(R,V,U,q,Z,oe,le,pe,fe,be,de,_e,Oe,Q)=>{u.la("ConvTranspose",R,{format:fe?"NHWC":"NCHW",autoPad:V,dilations:[U],group:q,kernel_shape:[Z],pads:[oe,le],strides:[pe],wIsConst:()=>!!F[be>>>0],outputPadding:de?Array.from(D.subarray(_e>>>0,_e+de>>>0)):[],outputShape:Oe?Array.from(D.subarray(Q>>>0,Q+Oe>>>0)):[]})},893084:(R,V,U,q,Z,oe,le,pe,fe,be,de,_e,Oe)=>{u.la("ConvTranspose",R,{format:pe?"NHWC":"NCHW",autoPad:V,dilations:Array.from(D.subarray(U>>>0,U+2>>>0)),group:q,kernelShape:Array.from(D.subarray(Z>>>0,Z+2>>>0)),pads:Array.from(D.subarray(oe>>>0,oe+4>>>0)),strides:Array.from(D.subarray(le>>>0,le+2>>>0)),wIsConst:()=>!!F[fe>>>0],outputPadding:0<be?Array.from(D.subarray(de>>>0,de+be>>>0)):[],outputShape:0<_e?Array.from(D.subarray(Oe>>>0,Oe+_e>>>0)):[]})},893607:(R,V,U,q,Z,oe,le,pe,fe,be,de,_e,Oe,Q)=>{u.la("ConvTranspose",R,{format:fe?"NHWC":"NCHW",autoPad:V,dilations:[U],group:q,kernel_shape:[Z],pads:[oe,le],strides:[pe],wIsConst:()=>!!F[be>>>0],outputPadding:de?Array.from(D.subarray(_e>>>0,_e+de>>>0)):[],outputShape:Oe?Array.from(D.subarray(Q>>>0,Q+Oe>>>0)):[]})},893987:(R,V,U,q,Z,oe,le,pe,fe,be,de,_e,Oe)=>{u.la("ConvTranspose",R,{format:pe?"NHWC":"NCHW",autoPad:V,dilations:Array.from(D.subarray(U>>>0,U+2>>>0)),group:q,kernelShape:Array.from(D.subarray(Z>>>0,Z+2>>>0)),pads:Array.from(D.subarray(oe>>>0,oe+4>>>0)),strides:Array.from(D.subarray(le>>>0,le+2>>>0)),wIsConst:()=>!!F[fe>>>0],outputPadding:0<be?Array.from(D.subarray(de>>>0,de+be>>>0)):[],outputShape:0<_e?Array.from(D.subarray(Oe>>>0,Oe+_e>>>0)):[]})},894510:(R,V)=>{u.la("GlobalAveragePool",R,{format:V?"NHWC":"NCHW"})},894601:(R,V,U,q,Z,oe,le,pe,fe,be,de,_e,Oe,Q,Te,Pe)=>{u.la("AveragePool",R,{format:Pe?"NHWC":"NCHW",auto_pad:V,ceil_mode:U,count_include_pad:q,storage_order:Z,dilations:[oe,le],kernel_shape:[pe,fe],pads:[be,de,_e,Oe],strides:[Q,Te]})},894885:(R,V)=>{u.la("GlobalAveragePool",R,{format:V?"NHWC":"NCHW"})},894976:(R,V,U,q,Z,oe,le,pe,fe,be,de,_e,Oe,Q,Te,Pe)=>{u.la("AveragePool",R,{format:Pe?"NHWC":"NCHW",auto_pad:V,ceil_mode:U,count_include_pad:q,storage_order:Z,dilations:[oe,le],kernel_shape:[pe,fe],pads:[be,de,_e,Oe],strides:[Q,Te]})},895260:(R,V)=>{u.la("GlobalMaxPool",R,{format:V?"NHWC":"NCHW"})},895347:(R,V,U,q,Z,oe,le,pe,fe,be,de,_e,Oe,Q,Te,Pe)=>{u.la("MaxPool",R,{format:Pe?"NHWC":"NCHW",auto_pad:V,ceil_mode:U,count_include_pad:q,storage_order:Z,dilations:[oe,le],kernel_shape:[pe,fe],pads:[be,de,_e,Oe],strides:[Q,Te]})},895627:(R,V)=>{u.la("GlobalMaxPool",R,{format:V?"NHWC":"NCHW"})},895714:(R,V,U,q,Z,oe,le,pe,fe,be,de,_e,Oe,Q,Te,Pe)=>{u.la("MaxPool",R,{format:Pe?"NHWC":"NCHW",auto_pad:V,ceil_mode:U,count_include_pad:q,storage_order:Z,dilations:[oe,le],kernel_shape:[pe,fe],pads:[be,de,_e,Oe],strides:[Q,Te]})},895994:(R,V,U,q,Z)=>{u.la("Gemm",R,{alpha:V,beta:U,transA:q,transB:Z})},896098:R=>{u.la("MatMul",R,void 0)},896152:(R,V,U,q)=>{u.la("ArgMax",R,{keepDims:!!V,selectLastIndex:!!U,axis:q})},896260:(R,V,U,q)=>{u.la("ArgMin",R,{keepDims:!!V,selectLastIndex:!!U,axis:q})},896368:(R,V)=>{u.la("Softmax",R,{axis:V})},896431:(R,V)=>{u.la("Concat",R,{axis:V})},896491:(R,V,U,q,Z)=>{u.la("Split",R,{axis:V,numOutputs:U,splitSizes:q?Array.from(D.subarray(Z>>>0,Z+q>>>0)):[]})},896636:R=>{u.la("Expand",R,void 0)},896690:(R,V)=>{u.la("Gather",R,{axis:Number(V)})},896761:(R,V,U,q,Z,oe,le,pe,fe,be,de)=>{u.la("Resize",R,{antialias:V,axes:U?Array.from(D.subarray(q>>>0,q+U>>>0)):[],coordinateTransformMode:Fe(Z),cubicCoeffA:oe,excludeOutside:le,extrapolationValue:pe,keepAspectRatioPolicy:Fe(fe),mode:Fe(be),nearestMode:Fe(de)})},897112:(R,V,U,q,Z,oe,le)=>{u.la("Slice",R,{starts:V?Array.from(D.subarray(U>>>0,U+V>>>0)):[],ends:q?Array.from(D.subarray(Z>>>0,Z+q>>>0)):[],axes:oe?Array.from(D.subarray(le>>>0,le+oe>>>0)):[]})},897343:R=>{u.la("Tile",R,void 0)},897395:(R,V,U)=>{u.la("LayerNormalization",R,{axis:Number(V),epsilon:Number(U)})},897502:(R,V,U)=>{u.la("InstanceNormalization",R,{epsilon:V,format:U?"NHWC":"NCHW"})},897616:(R,V,U)=>{u.la("InstanceNormalization",R,{epsilon:V,format:U?"NHWC":"NCHW"})},897730:R=>{u.la("Gelu",R,void 0)},897782:(R,V)=>{u.la("SkipLayerNormalization",R,{epsilon:V})},897863:R=>{u.Ha(R)},897897:(R,V)=>u.Ia(R,V)};function me(R){this.name="ExitStatus",this.message=`Program terminated with exit(${R})`,this.status=R}var $e=R=>{for(;0<R.length;)R.shift()(u)};function Se(R){this.za=R-24,this.Ra=function(V){E[this.za+4>>2>>>0]=V},this.Qa=function(V){E[this.za+8>>2>>>0]=V},this.Ka=function(V,U){this.Pa(),this.Ra(V),this.Qa(U)},this.Pa=function(){E[this.za+16>>2>>>0]=0}}var ve,Ee=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Ae=(R,V,U)=>{var q=(V>>>=0)+U;for(U=V;R[U]&&!(U>=q);)++U;if(16<U-V&&R.buffer&&Ee)return Ee.decode(R.subarray(V,U));for(q="";V<U;){var Z=R[V++];if(128&Z){var oe=63&R[V++];if((224&Z)==192)q+=String.fromCharCode((31&Z)<<6|oe);else{var le=63&R[V++];65536>(Z=(240&Z)==224?(15&Z)<<12|oe<<6|le:(7&Z)<<18|oe<<12|le<<6|63&R[V++])?q+=String.fromCharCode(Z):(Z-=65536,q+=String.fromCharCode(55296|Z>>10,56320|1023&Z))}}else q+=String.fromCharCode(Z)}return q},Fe=(R,V)=>(R>>>=0)?Ae(_,R,V):"",ke=R=>{for(var V=0,U=0;U<R.length;++U){var q=R.charCodeAt(U);127>=q?V++:2047>=q?V+=2:55296<=q&&57343>=q?(V+=4,++U):V+=3}return V},Be=(R,V,U,q)=>{if(!(0<q))return 0;var Z=U>>>=0;q=U+q-1;for(var oe=0;oe<R.length;++oe){var le=R.charCodeAt(oe);if(55296<=le&&57343>=le&&(le=65536+((1023&le)<<10)|1023&R.charCodeAt(++oe)),127>=le){if(U>=q)break;V[U++>>>0]=le}else{if(2047>=le){if(U+1>=q)break;V[U++>>>0]=192|le>>6}else{if(65535>=le){if(U+2>=q)break;V[U++>>>0]=224|le>>12}else{if(U+3>=q)break;V[U++>>>0]=240|le>>18,V[U++>>>0]=128|le>>12&63}V[U++>>>0]=128|le>>6&63}V[U++>>>0]=128|63&le}}return V[U>>>0]=0,U-Z},Ne=R=>R%4==0&&(R%100!=0||R%400==0),Ve=[0,31,60,91,121,152,182,213,244,274,305,335],Me=[0,31,59,90,120,151,181,212,243,273,304,334],Ue=R=>{var V=ke(R)+1,U=lt(V);return U&&Be(R,_,U,V),U},ze=[],Ge=(R,V)=>{var U;for(ze.length=0,V>>=2;U=_[R++>>>0];)V+=U!=105&V,ze.push(U==105?D[V>>>0]:k[V++>>>1]),++V;return ze},We={},He=()=>{if(!ve){var R,V={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:d||"./this.program"};for(R in We)We[R]===void 0?delete V[R]:V[R]=We[R];var U=[];for(R in V)U.push(`${R}=${V[R]}`);ve=U}return ve},Je=R=>{P=R,C||(u.onExit&&u.onExit(R),O=!0),m(R,new me(R))},et=[null,[],[]],je=R=>(je=(()=>{if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return q=>crypto.getRandomValues(q);if($)try{var V=t(760);if(V.randomFillSync)return q=>V.randomFillSync(q);var U=V.randomBytes;return q=>(q.set(U(q.byteLength)),q)}catch{}te("initRandomDevice")})())(R),Xe=[31,29,31,30,31,30,31,31,30,31,30,31],tt=[31,28,31,30,31,30,31,31,30,31,30,31];function we(R,V,U,q){function Z(Q,Te,Pe){for(Q=typeof Q=="number"?Q.toString():Q||"";Q.length<Te;)Q=Pe[0]+Q;return Q}function oe(Q,Te){return Z(Q,Te,"0")}function le(Q,Te){function Pe(Ct){return 0>Ct?-1:0<Ct?1:0}var Ze;return(Ze=Pe(Q.getFullYear()-Te.getFullYear()))===0&&(Ze=Pe(Q.getMonth()-Te.getMonth()))===0&&(Ze=Pe(Q.getDate()-Te.getDate())),Ze}function pe(Q){switch(Q.getDay()){case 0:return new Date(Q.getFullYear()-1,11,29);case 1:return Q;case 2:return new Date(Q.getFullYear(),0,3);case 3:return new Date(Q.getFullYear(),0,2);case 4:return new Date(Q.getFullYear(),0,1);case 5:return new Date(Q.getFullYear()-1,11,31);case 6:return new Date(Q.getFullYear()-1,11,30)}}function fe(Q){var Te=Q.va;for(Q=new Date(new Date(Q.wa+1900,0,1).getTime());0<Te;){var Pe=Q.getMonth(),Ze=(Ne(Q.getFullYear())?Xe:tt)[Pe];if(!(Te>Ze-Q.getDate())){Q.setDate(Q.getDate()+Te);break}Te-=Ze-Q.getDate()+1,Q.setDate(1),11>Pe?Q.setMonth(Pe+1):(Q.setMonth(0),Q.setFullYear(Q.getFullYear()+1))}return Pe=new Date(Q.getFullYear()+1,0,4),Te=pe(new Date(Q.getFullYear(),0,4)),Pe=pe(Pe),0>=le(Te,Q)?0>=le(Pe,Q)?Q.getFullYear()+1:Q.getFullYear():Q.getFullYear()-1}R>>>=0,V>>>=0,U>>>=0;var be=D[40+(q>>>=0)>>2>>>0];for(var de in q={Na:D[q>>2>>>0],Ma:D[q+4>>2>>>0],xa:D[q+8>>2>>>0],Ba:D[q+12>>2>>>0],ya:D[q+16>>2>>>0],wa:D[q+20>>2>>>0],qa:D[q+24>>2>>>0],va:D[q+28>>2>>>0],Ta:D[q+32>>2>>>0],La:D[q+36>>2>>>0],Oa:be?Fe(be):""},U=Fe(U),be={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})U=U.replace(new RegExp(de,"g"),be[de]);var _e="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Oe="January February March April May June July August September October November December".split(" ");for(de in be={"%a":Q=>_e[Q.qa].substring(0,3),"%A":Q=>_e[Q.qa],"%b":Q=>Oe[Q.ya].substring(0,3),"%B":Q=>Oe[Q.ya],"%C":Q=>oe((Q.wa+1900)/100|0,2),"%d":Q=>oe(Q.Ba,2),"%e":Q=>Z(Q.Ba,2," "),"%g":Q=>fe(Q).toString().substring(2),"%G":Q=>fe(Q),"%H":Q=>oe(Q.xa,2),"%I":Q=>((Q=Q.xa)==0?Q=12:12<Q&&(Q-=12),oe(Q,2)),"%j":Q=>{for(var Te=0,Pe=0;Pe<=Q.ya-1;Te+=(Ne(Q.wa+1900)?Xe:tt)[Pe++]);return oe(Q.Ba+Te,3)},"%m":Q=>oe(Q.ya+1,2),"%M":Q=>oe(Q.Ma,2),"%n":()=>`
`,"%p":Q=>0<=Q.xa&&12>Q.xa?"AM":"PM","%S":Q=>oe(Q.Na,2),"%t":()=>"	","%u":Q=>Q.qa||7,"%U":Q=>oe(Math.floor((Q.va+7-Q.qa)/7),2),"%V":Q=>{var Te=Math.floor((Q.va+7-(Q.qa+6)%7)/7);if(2>=(Q.qa+371-Q.va-2)%7&&Te++,Te)Te==53&&((Pe=(Q.qa+371-Q.va)%7)==4||Pe==3&&Ne(Q.wa)||(Te=1));else{Te=52;var Pe=(Q.qa+7-Q.va-1)%7;(Pe==4||Pe==5&&Ne(Q.wa%400-1))&&Te++}return oe(Te,2)},"%w":Q=>Q.qa,"%W":Q=>oe(Math.floor((Q.va+7-(Q.qa+6)%7)/7),2),"%y":Q=>(Q.wa+1900).toString().substring(2),"%Y":Q=>Q.wa+1900,"%z":Q=>{var Te=0<=(Q=Q.La);return Q=Math.abs(Q)/60,(Te?"+":"-")+("0000"+(Q/60*100+Q%60)).slice(-4)},"%Z":Q=>Q.Oa,"%%":()=>"%"},U=U.replace(/%%/g,"\0\0"),be)U.includes(de)&&(U=U.replace(new RegExp(de,"g"),be[de](q)));return de=function(Q){var Te=Array(ke(Q)+1);return Be(Q,Te,0,Te.length),Te}(U=U.replace(/\0\0/g,"%")),de.length>V?0:(F.set(de,R>>>0),de.length-1)}function Qe(R){try{R()}catch(V){te(V)}}var qe=0,Ye=null,pt=0,ot=[],dt={},ht={},ft=0,mt=null,It=[],Et={o:function(R,V,U){return function(q){return function(Z){if(!O){if(qe===0){var oe=!1,le=!1;Z((pe=0)=>{if(!O&&(pt=pe,oe=!0,le)){qe=2,Qe(()=>St(Ye)),typeof Browser<"u"&&Browser.Aa.Da&&Browser.Aa.resume(),pe=!1;try{var fe=(0,N[ht[D[Ye+8>>2>>>0]]])()}catch(_e){fe=_e,pe=!0}var be=!1;if(!Ye){var de=mt;de&&(mt=null,(pe?de.reject:de.resolve)(fe),be=!0)}if(pe&&!be)throw fe}}),le=!0,oe||(qe=1,Ye=function(){var pe=lt(65548),fe=pe+12;E[pe>>2>>>0]=fe,E[pe+4>>2>>>0]=fe+65536,fe=ot[0];var be=dt[fe];return be===void 0&&(be=ft++,dt[fe]=be,ht[be]=fe),D[pe+8>>2>>>0]=be,pe}(),typeof Browser<"u"&&Browser.Aa.Da&&Browser.Aa.pause(),Qe(()=>wt(Ye)))}else qe===2?(qe=0,Qe(Tt),gt(Ye),Ye=null,It.forEach(pe=>{if(!O)try{if(pe(),!C)try{P=pe=P,Je(pe)}catch(fe){fe instanceof me||fe=="unwind"||m(1,fe)}}catch(fe){fe instanceof me||fe=="unwind"||m(1,fe)}})):te(`invalid state: ${qe}`);return pt}}(Z=>{q().then(Z)})}(async()=>{await u.Fa(R,V,U)})},a:function(R,V,U){throw new Se(R>>>=0).Ka(V>>>0,U>>>0),R},g:function(){return 0},L:function(){},C:function(){},E:function(){},N:function(){return 0},J:function(){},F:function(){},I:function(){},l:function(){},D:function(){},A:function(){},K:function(){},B:function(){},m:()=>!0,r:function(R,V,U){R=V+2097152>>>0<4194305-!!R?(R>>>0)+4294967296*V:NaN,U>>>=0,R=new Date(1e3*R),D[U>>2>>>0]=R.getUTCSeconds(),D[U+4>>2>>>0]=R.getUTCMinutes(),D[U+8>>2>>>0]=R.getUTCHours(),D[U+12>>2>>>0]=R.getUTCDate(),D[U+16>>2>>>0]=R.getUTCMonth(),D[U+20>>2>>>0]=R.getUTCFullYear()-1900,D[U+24>>2>>>0]=R.getUTCDay(),D[U+28>>2>>>0]=(R.getTime()-Date.UTC(R.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},s:function(R,V,U){R=V+2097152>>>0<4194305-!!R?(R>>>0)+4294967296*V:NaN,U>>>=0,R=new Date(1e3*R),D[U>>2>>>0]=R.getSeconds(),D[U+4>>2>>>0]=R.getMinutes(),D[U+8>>2>>>0]=R.getHours(),D[U+12>>2>>>0]=R.getDate(),D[U+16>>2>>>0]=R.getMonth(),D[U+20>>2>>>0]=R.getFullYear()-1900,D[U+24>>2>>>0]=R.getDay(),D[U+28>>2>>>0]=(Ne(R.getFullYear())?Ve:Me)[R.getMonth()]+R.getDate()-1|0,D[U+36>>2>>>0]=-60*R.getTimezoneOffset(),V=new Date(R.getFullYear(),6,1).getTimezoneOffset();var q=new Date(R.getFullYear(),0,1).getTimezoneOffset();D[U+32>>2>>>0]=0|(V!=q&&R.getTimezoneOffset()==Math.min(q,V))},t:function(R){R>>>=0;var V=new Date(D[R+20>>2>>>0]+1900,D[R+16>>2>>>0],D[R+12>>2>>>0],D[R+8>>2>>>0],D[R+4>>2>>>0],D[R>>2>>>0],0),U=D[R+32>>2>>>0],q=V.getTimezoneOffset(),Z=new Date(V.getFullYear(),6,1).getTimezoneOffset(),oe=new Date(V.getFullYear(),0,1).getTimezoneOffset(),le=Math.min(oe,Z);return 0>U?D[R+32>>2>>>0]=+(Z!=oe&&le==q):0<U!=(le==q)&&(Z=Math.max(oe,Z),V.setTime(V.getTime()+6e4*((0<U?le:Z)-q))),D[R+24>>2>>>0]=V.getDay(),D[R+28>>2>>>0]=(Ne(V.getFullYear())?Ve:Me)[V.getMonth()]+V.getDate()-1|0,D[R>>2>>>0]=V.getSeconds(),D[R+4>>2>>>0]=V.getMinutes(),D[R+8>>2>>>0]=V.getHours(),D[R+12>>2>>>0]=V.getDate(),D[R+16>>2>>>0]=V.getMonth(),D[R+20>>2>>>0]=V.getYear(),R=V.getTime()/1e3,yt((se=R,1<=+Math.abs(se)?0<se?+Math.floor(se/4294967296)>>>0:~~+Math.ceil((se-+(~~se>>>0))/4294967296)>>>0:0)),R>>>0},p:function(){return-52},q:function(){},x:function(R,V,U){function q(fe){return(fe=fe.toTimeString().match(/\(([A-Za-z ]+)\)$/))?fe[1]:"GMT"}U>>>=0;var Z=new Date().getFullYear(),oe=new Date(Z,0,1),le=new Date(Z,6,1);Z=oe.getTimezoneOffset();var pe=le.getTimezoneOffset();E[R>>>0>>2>>>0]=60*Math.max(Z,pe),D[V>>>0>>2>>>0]=+(Z!=pe),R=q(oe),V=q(le),R=Ue(R),V=Ue(V),pe<Z?(E[U>>2>>>0]=R,E[U+4>>2>>>0]=V):(E[U>>2>>>0]=V,E[U+4>>2>>>0]=R)},e:()=>{te("")},b:function(R,V,U){return R>>>=0,V=Ge(V>>>0,U>>>0),xe[R].apply(null,V)},i:function(R,V,U){return R>>>=0,V=Ge(V>>>0,U>>>0),xe[R].apply(null,V)},h:function(){return Date.now()},z:function(){return 4294901760},d:()=>performance.now(),M:function(R,V,U){return V>>>=0,_.copyWithin(R>>>0>>>0,V>>>0,V+(U>>>0)>>>0)},w:function(R){R>>>=0;var V=_.length;if(4294901760<R)return!1;for(var U=1;4>=U;U*=2){var q=V*(1+.2/U);q=Math.min(q,R+100663296);var Z=Math;q=Math.max(R,q);e:{Z=Z.min.call(Z,4294901760,q+(65536-q%65536)%65536)-I.buffer.byteLength+65535>>>16;try{I.grow(Z),M();var oe=1;break e}catch{}oe=void 0}if(oe)return!0}return!1},G:function(R,V){R>>>=0,V>>>=0;var U=0;return He().forEach(function(q,Z){var oe=V+U;for(Z=E[R+4*Z>>2>>>0]=oe,oe=0;oe<q.length;++oe)F[Z++>>0>>>0]=q.charCodeAt(oe);F[Z>>0>>>0]=0,U+=q.length+1}),0},H:function(R,V){R>>>=0,V>>>=0;var U=He();E[R>>2>>>0]=U.length;var q=0;return U.forEach(function(Z){q+=Z.length+1}),E[V>>2>>>0]=q,0},n:R=>{P=R,Je(R)},f:()=>52,k:function(){return 52},u:function(){return 70},j:function(R,V,U,q){V>>>=0,U>>>=0,q>>>=0;for(var Z=0,oe=0;oe<U;oe++){var le=E[V>>2>>>0],pe=E[V+4>>2>>>0];V+=8;for(var fe=0;fe<pe;fe++){var be=_[le+fe>>>0],de=et[R];be===0||be===10?((R===1?S:T)(Ae(de,0)),de.length=0):de.push(be)}Z+=pe}return E[q>>2>>>0]=Z,0},v:function(R,V){return R>>>=0,je(_.subarray(R>>>0,R+(V>>>0)>>>0)),0},y:we,c:function(R,V,U,q){return we(R>>>0,V>>>0,U>>>0,q>>>0)}};(function(){function R(U){if(U=function(Z){var oe,le={};for(oe in Z)(function(pe){var fe=Z[pe];le[pe]=typeof fe=="function"?function(){ot.push(pe);try{return fe.apply(null,arguments)}finally{O||(ot.pop()===pe||te(),Ye&&qe===1&&ot.length===0&&(qe=0,Qe(vt),typeof Fibers<"u"&&Fibers.Ua()))}}:fe})(oe);return le}(U=U.exports),N=U=function(Z){var oe=pe=>()=>pe()>>>0,le=pe=>fe=>pe(fe)>>>0;return(Z=Object.assign({},Z)).__errno_location=oe(Z.__errno_location),Z.malloc=le(Z.malloc),Z.stackSave=oe(Z.stackSave),Z.stackAlloc=le(Z.stackAlloc),Z}(U),I=N.O,M(),G.unshift(N.P),Y--,u.monitorRunDependencies&&u.monitorRunDependencies(Y),Y==0&&J){var q=J;J=null,q()}return U}var V={a:Et};if(Y++,u.monitorRunDependencies&&u.monitorRunDependencies(Y),u.instantiateWasm)try{return u.instantiateWasm(V,R)}catch(U){T("Module.instantiateWasm callback failed with error: "+U),l(U)}(function(U,q){var Z=X;return v||typeof WebAssembly.instantiateStreaming!="function"||re(Z)||Z.startsWith("file://")||$||typeof fetch!="function"?ce(Z,U,q):fetch(Z,{credentials:"same-origin"}).then(oe=>WebAssembly.instantiateStreaming(oe,U).then(q,function(le){return T("wasm streaming compile failed: "+le),T("falling back to ArrayBuffer instantiation"),ce(Z,U,q)}))})(V,function(U){R(U.instance)}).catch(l)})(),u._OrtInit=(R,V)=>(u._OrtInit=N.Q)(R,V),u._OrtGetLastError=(R,V)=>(u._OrtGetLastError=N.R)(R,V),u._OrtCreateSessionOptions=(R,V,U,q,Z,oe,le,pe,fe,be)=>(u._OrtCreateSessionOptions=N.S)(R,V,U,q,Z,oe,le,pe,fe,be),u._OrtAppendExecutionProvider=(R,V)=>(u._OrtAppendExecutionProvider=N.T)(R,V),u._OrtAddSessionConfigEntry=(R,V,U)=>(u._OrtAddSessionConfigEntry=N.U)(R,V,U),u._OrtReleaseSessionOptions=R=>(u._OrtReleaseSessionOptions=N.V)(R),u._OrtCreateSession=(R,V,U)=>(u._OrtCreateSession=N.W)(R,V,U),u._OrtReleaseSession=R=>(u._OrtReleaseSession=N.X)(R),u._OrtGetInputOutputCount=(R,V,U)=>(u._OrtGetInputOutputCount=N.Y)(R,V,U),u._OrtGetInputName=(R,V)=>(u._OrtGetInputName=N.Z)(R,V),u._OrtGetOutputName=(R,V)=>(u._OrtGetOutputName=N._)(R,V),u._OrtFree=R=>(u._OrtFree=N.$)(R),u._OrtCreateTensor=(R,V,U,q,Z)=>(u._OrtCreateTensor=N.aa)(R,V,U,q,Z),u._OrtGetTensorData=(R,V,U,q,Z)=>(u._OrtGetTensorData=N.ba)(R,V,U,q,Z),u._OrtReleaseTensor=R=>(u._OrtReleaseTensor=N.ca)(R),u._OrtCreateRunOptions=(R,V,U,q)=>(u._OrtCreateRunOptions=N.da)(R,V,U,q),u._OrtAddRunConfigEntry=(R,V,U)=>(u._OrtAddRunConfigEntry=N.ea)(R,V,U),u._OrtReleaseRunOptions=R=>(u._OrtReleaseRunOptions=N.fa)(R),u._OrtRun=(R,V,U,q,Z,oe,le,pe)=>(u._OrtRun=N.ga)(R,V,U,q,Z,oe,le,pe),u._OrtEndProfiling=R=>(u._OrtEndProfiling=N.ha)(R),u._JsepOutput=(R,V,U)=>(u._JsepOutput=N.ia)(R,V,U);var at,lt=u._malloc=R=>(lt=u._malloc=N.ja)(R),gt=u._free=R=>(gt=u._free=N.ka)(R),yt=R=>(yt=N.ma)(R),$t=()=>($t=N.na)(),bt=R=>(bt=N.oa)(R),xt=R=>(xt=N.pa)(R),wt=R=>(wt=N.ra)(R),vt=()=>(vt=N.sa)(),St=R=>(St=N.ta)(R),Tt=()=>(Tt=N.ua)();function ut(){function R(){if(!at&&(at=!0,u.calledRun=!0,!O)){if($e(G),i(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),u.postRun)for(typeof u.postRun=="function"&&(u.postRun=[u.postRun]);u.postRun.length;){var V=u.postRun.shift();j.unshift(V)}$e(j)}}if(!(0<Y)){if(u.preRun)for(typeof u.preRun=="function"&&(u.preRun=[u.preRun]);u.preRun.length;)K();$e(z),0<Y||(u.setStatus?(u.setStatus("Running..."),setTimeout(function(){setTimeout(function(){u.setStatus("")},1),R()},1)):R())}}if(u.___start_em_js=897932,u.___stop_em_js=898093,u.stackAlloc=xt,u.stackSave=$t,u.stackRestore=bt,u.UTF8ToString=Fe,u.stringToUTF8=(R,V,U)=>Be(R,_,V,U),u.lengthBytesUTF8=ke,J=function R(){at||ut(),at||(J=R)},u.preInit)for(typeof u.preInit=="function"&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return ut(),a.ready});n.exports=s},4537:n=>{n.exports=function(e,t){for(var r=new Array(arguments.length-1),s=0,a=2,i=!0;a<arguments.length;)r[s++]=arguments[a++];return new Promise(function(l,u){r[s]=function(h){if(i)if(i=!1,h)u(h);else{for(var f=new Array(arguments.length-1),c=0;c<f.length;)f[c++]=arguments[c];l.apply(null,f)}};try{e.apply(t||null,r)}catch(h){i&&(i=!1,u(h))}})}},7419:(n,e)=>{var t=e;t.length=function(l){var u=l.length;if(!u)return 0;for(var h=0;--u%4>1&&l.charAt(u)==="=";)++h;return Math.ceil(3*l.length)/4-h};for(var r=new Array(64),s=new Array(123),a=0;a<64;)s[r[a]=a<26?a+65:a<52?a+71:a<62?a-4:a-59|43]=a++;t.encode=function(l,u,h){for(var f,c=null,o=[],d=0,m=0;u<h;){var g=l[u++];switch(m){case 0:o[d++]=r[g>>2],f=(3&g)<<4,m=1;break;case 1:o[d++]=r[f|g>>4],f=(15&g)<<2,m=2;break;case 2:o[d++]=r[f|g>>6],o[d++]=r[63&g],m=0}d>8191&&((c||(c=[])).push(String.fromCharCode.apply(String,o)),d=0)}return m&&(o[d++]=r[f],o[d++]=61,m===1&&(o[d++]=61)),c?(d&&c.push(String.fromCharCode.apply(String,o.slice(0,d))),c.join("")):String.fromCharCode.apply(String,o.slice(0,d))};var i="invalid encoding";t.decode=function(l,u,h){for(var f,c=h,o=0,d=0;d<l.length;){var m=l.charCodeAt(d++);if(m===61&&o>1)break;if((m=s[m])===void 0)throw Error(i);switch(o){case 0:f=m,o=1;break;case 1:u[h++]=f<<2|(48&m)>>4,f=m,o=2;break;case 2:u[h++]=(15&f)<<4|(60&m)>>2,f=m,o=3;break;case 3:u[h++]=(3&f)<<6|m,o=0}}if(o===1)throw Error(i);return h-c},t.test=function(l){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(l)}},9211:n=>{function e(){this._listeners={}}n.exports=e,e.prototype.on=function(t,r,s){return(this._listeners[t]||(this._listeners[t]=[])).push({fn:r,ctx:s||this}),this},e.prototype.off=function(t,r){if(t===void 0)this._listeners={};else if(r===void 0)this._listeners[t]=[];else for(var s=this._listeners[t],a=0;a<s.length;)s[a].fn===r?s.splice(a,1):++a;return this},e.prototype.emit=function(t){var r=this._listeners[t];if(r){for(var s=[],a=1;a<arguments.length;)s.push(arguments[a++]);for(a=0;a<r.length;)r[a].fn.apply(r[a++].ctx,s)}return this}},945:n=>{function e(i){return typeof Float32Array<"u"?function(){var l=new Float32Array([-0]),u=new Uint8Array(l.buffer),h=u[3]===128;function f(m,g,y){l[0]=m,g[y]=u[0],g[y+1]=u[1],g[y+2]=u[2],g[y+3]=u[3]}function c(m,g,y){l[0]=m,g[y]=u[3],g[y+1]=u[2],g[y+2]=u[1],g[y+3]=u[0]}function o(m,g){return u[0]=m[g],u[1]=m[g+1],u[2]=m[g+2],u[3]=m[g+3],l[0]}function d(m,g){return u[3]=m[g],u[2]=m[g+1],u[1]=m[g+2],u[0]=m[g+3],l[0]}i.writeFloatLE=h?f:c,i.writeFloatBE=h?c:f,i.readFloatLE=h?o:d,i.readFloatBE=h?d:o}():function(){function l(h,f,c,o){var d=f<0?1:0;if(d&&(f=-f),f===0)h(1/f>0?0:2147483648,c,o);else if(isNaN(f))h(2143289344,c,o);else if(f>34028234663852886e22)h((d<<31|2139095040)>>>0,c,o);else if(f<11754943508222875e-54)h((d<<31|Math.round(f/1401298464324817e-60))>>>0,c,o);else{var m=Math.floor(Math.log(f)/Math.LN2);h((d<<31|m+127<<23|8388607&Math.round(f*Math.pow(2,-m)*8388608))>>>0,c,o)}}function u(h,f,c){var o=h(f,c),d=2*(o>>31)+1,m=o>>>23&255,g=8388607&o;return m===255?g?NaN:d*(1/0):m===0?1401298464324817e-60*d*g:d*Math.pow(2,m-150)*(g+8388608)}i.writeFloatLE=l.bind(null,t),i.writeFloatBE=l.bind(null,r),i.readFloatLE=u.bind(null,s),i.readFloatBE=u.bind(null,a)}(),typeof Float64Array<"u"?function(){var l=new Float64Array([-0]),u=new Uint8Array(l.buffer),h=u[7]===128;function f(m,g,y){l[0]=m,g[y]=u[0],g[y+1]=u[1],g[y+2]=u[2],g[y+3]=u[3],g[y+4]=u[4],g[y+5]=u[5],g[y+6]=u[6],g[y+7]=u[7]}function c(m,g,y){l[0]=m,g[y]=u[7],g[y+1]=u[6],g[y+2]=u[5],g[y+3]=u[4],g[y+4]=u[3],g[y+5]=u[2],g[y+6]=u[1],g[y+7]=u[0]}function o(m,g){return u[0]=m[g],u[1]=m[g+1],u[2]=m[g+2],u[3]=m[g+3],u[4]=m[g+4],u[5]=m[g+5],u[6]=m[g+6],u[7]=m[g+7],l[0]}function d(m,g){return u[7]=m[g],u[6]=m[g+1],u[5]=m[g+2],u[4]=m[g+3],u[3]=m[g+4],u[2]=m[g+5],u[1]=m[g+6],u[0]=m[g+7],l[0]}i.writeDoubleLE=h?f:c,i.writeDoubleBE=h?c:f,i.readDoubleLE=h?o:d,i.readDoubleBE=h?d:o}():function(){function l(h,f,c,o,d,m){var g=o<0?1:0;if(g&&(o=-o),o===0)h(0,d,m+f),h(1/o>0?0:2147483648,d,m+c);else if(isNaN(o))h(0,d,m+f),h(2146959360,d,m+c);else if(o>17976931348623157e292)h(0,d,m+f),h((g<<31|2146435072)>>>0,d,m+c);else{var y;if(o<22250738585072014e-324)h((y=o/5e-324)>>>0,d,m+f),h((g<<31|y/4294967296)>>>0,d,m+c);else{var $=Math.floor(Math.log(o)/Math.LN2);$===1024&&($=1023),h(4503599627370496*(y=o*Math.pow(2,-$))>>>0,d,m+f),h((g<<31|$+1023<<20|1048576*y&1048575)>>>0,d,m+c)}}}function u(h,f,c,o,d){var m=h(o,d+f),g=h(o,d+c),y=2*(g>>31)+1,$=g>>>20&2047,b=4294967296*(1048575&g)+m;return $===2047?b?NaN:y*(1/0):$===0?5e-324*y*b:y*Math.pow(2,$-1075)*(b+4503599627370496)}i.writeDoubleLE=l.bind(null,t,0,4),i.writeDoubleBE=l.bind(null,r,4,0),i.readDoubleLE=u.bind(null,s,0,4),i.readDoubleBE=u.bind(null,a,4,0)}(),i}function t(i,l,u){l[u]=255&i,l[u+1]=i>>>8&255,l[u+2]=i>>>16&255,l[u+3]=i>>>24}function r(i,l,u){l[u]=i>>>24,l[u+1]=i>>>16&255,l[u+2]=i>>>8&255,l[u+3]=255&i}function s(i,l){return(i[l]|i[l+1]<<8|i[l+2]<<16|i[l+3]<<24)>>>0}function a(i,l){return(i[l]<<24|i[l+1]<<16|i[l+2]<<8|i[l+3])>>>0}n.exports=e(e)},7199:module=>{function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(n){}return null}module.exports=inquire},6662:n=>{n.exports=function(e,t,r){var s=r||8192,a=s>>>1,i=null,l=s;return function(u){if(u<1||u>a)return e(u);l+u>s&&(i=e(s),l=0);var h=t.call(i,l,l+=u);return 7&l&&(l=1+(7|l)),h}}},4997:(n,e)=>{var t=e;t.length=function(r){for(var s=0,a=0,i=0;i<r.length;++i)(a=r.charCodeAt(i))<128?s+=1:a<2048?s+=2:(64512&a)==55296&&(64512&r.charCodeAt(i+1))==56320?(++i,s+=4):s+=3;return s},t.read=function(r,s,a){if(a-s<1)return"";for(var i,l=null,u=[],h=0;s<a;)(i=r[s++])<128?u[h++]=i:i>191&&i<224?u[h++]=(31&i)<<6|63&r[s++]:i>239&&i<365?(i=((7&i)<<18|(63&r[s++])<<12|(63&r[s++])<<6|63&r[s++])-65536,u[h++]=55296+(i>>10),u[h++]=56320+(1023&i)):u[h++]=(15&i)<<12|(63&r[s++])<<6|63&r[s++],h>8191&&((l||(l=[])).push(String.fromCharCode.apply(String,u)),h=0);return l?(h&&l.push(String.fromCharCode.apply(String,u.slice(0,h))),l.join("")):String.fromCharCode.apply(String,u.slice(0,h))},t.write=function(r,s,a){for(var i,l,u=a,h=0;h<r.length;++h)(i=r.charCodeAt(h))<128?s[a++]=i:i<2048?(s[a++]=i>>6|192,s[a++]=63&i|128):(64512&i)==55296&&(64512&(l=r.charCodeAt(h+1)))==56320?(i=65536+((1023&i)<<10)+(1023&l),++h,s[a++]=i>>18|240,s[a++]=i>>12&63|128,s[a++]=i>>6&63|128,s[a++]=63&i|128):(s[a++]=i>>12|224,s[a++]=i>>6&63|128,s[a++]=63&i|128);return a-u}},3442:(n,e)=>{e.__esModule=!0;var t=function(){function r(s){if(!s)throw new TypeError("Invalid argument; `value` has no value.");this.value=r.EMPTY,s&&r.isGuid(s)&&(this.value=s)}return r.isGuid=function(s){var a=s.toString();return s&&(s instanceof r||r.validator.test(a))},r.create=function(){return new r([r.gen(2),r.gen(1),r.gen(1),r.gen(1),r.gen(3)].join("-"))},r.createEmpty=function(){return new r("emptyguid")},r.parse=function(s){return new r(s)},r.raw=function(){return[r.gen(2),r.gen(1),r.gen(1),r.gen(1),r.gen(3)].join("-")},r.gen=function(s){for(var a="",i=0;i<s;i++)a+=(65536*(1+Math.random())|0).toString(16).substring(1);return a},r.prototype.equals=function(s){return r.isGuid(s)&&this.value===s.toString()},r.prototype.isEmpty=function(){return this.value===r.EMPTY},r.prototype.toString=function(){return this.value},r.prototype.toJSON=function(){return{value:this.value}},r.validator=new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$","i"),r.EMPTY="00000000-0000-0000-0000-000000000000",r}();e.Guid=t},2100:(n,e,t)=>{n.exports=t(9482)},9482:(n,e,t)=>{var r=e;function s(){r.util._configure(),r.Writer._configure(r.BufferWriter),r.Reader._configure(r.BufferReader)}r.build="minimal",r.Writer=t(1173),r.BufferWriter=t(3155),r.Reader=t(1408),r.BufferReader=t(593),r.util=t(9693),r.rpc=t(5994),r.roots=t(5054),r.configure=s,s()},1408:(n,e,t)=>{n.exports=u;var r,s=t(9693),a=s.LongBits,i=s.utf8;function l(g,y){return RangeError("index out of range: "+g.pos+" + "+(y||1)+" > "+g.len)}function u(g){this.buf=g,this.pos=0,this.len=g.length}var h,f=typeof Uint8Array<"u"?function(g){if(g instanceof Uint8Array||Array.isArray(g))return new u(g);throw Error("illegal buffer")}:function(g){if(Array.isArray(g))return new u(g);throw Error("illegal buffer")},c=function(){return s.Buffer?function(g){return(u.create=function(y){return s.Buffer.isBuffer(y)?new r(y):f(y)})(g)}:f};function o(){var g=new a(0,0),y=0;if(!(this.len-this.pos>4)){for(;y<3;++y){if(this.pos>=this.len)throw l(this);if(g.lo=(g.lo|(127&this.buf[this.pos])<<7*y)>>>0,this.buf[this.pos++]<128)return g}return g.lo=(g.lo|(127&this.buf[this.pos++])<<7*y)>>>0,g}for(;y<4;++y)if(g.lo=(g.lo|(127&this.buf[this.pos])<<7*y)>>>0,this.buf[this.pos++]<128)return g;if(g.lo=(g.lo|(127&this.buf[this.pos])<<28)>>>0,g.hi=(g.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return g;if(y=0,this.len-this.pos>4){for(;y<5;++y)if(g.hi=(g.hi|(127&this.buf[this.pos])<<7*y+3)>>>0,this.buf[this.pos++]<128)return g}else for(;y<5;++y){if(this.pos>=this.len)throw l(this);if(g.hi=(g.hi|(127&this.buf[this.pos])<<7*y+3)>>>0,this.buf[this.pos++]<128)return g}throw Error("invalid varint encoding")}function d(g,y){return(g[y-4]|g[y-3]<<8|g[y-2]<<16|g[y-1]<<24)>>>0}function m(){if(this.pos+8>this.len)throw l(this,8);return new a(d(this.buf,this.pos+=4),d(this.buf,this.pos+=4))}u.create=c(),u.prototype._slice=s.Array.prototype.subarray||s.Array.prototype.slice,u.prototype.uint32=(h=4294967295,function(){if(h=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128||(h=(h|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)||(h=(h|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)||(h=(h|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)||(h=(h|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128))return h;if((this.pos+=5)>this.len)throw this.pos=this.len,l(this,10);return h}),u.prototype.int32=function(){return 0|this.uint32()},u.prototype.sint32=function(){var g=this.uint32();return g>>>1^-(1&g)|0},u.prototype.bool=function(){return this.uint32()!==0},u.prototype.fixed32=function(){if(this.pos+4>this.len)throw l(this,4);return d(this.buf,this.pos+=4)},u.prototype.sfixed32=function(){if(this.pos+4>this.len)throw l(this,4);return 0|d(this.buf,this.pos+=4)},u.prototype.float=function(){if(this.pos+4>this.len)throw l(this,4);var g=s.float.readFloatLE(this.buf,this.pos);return this.pos+=4,g},u.prototype.double=function(){if(this.pos+8>this.len)throw l(this,4);var g=s.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,g},u.prototype.bytes=function(){var g=this.uint32(),y=this.pos,$=this.pos+g;if($>this.len)throw l(this,g);return this.pos+=g,Array.isArray(this.buf)?this.buf.slice(y,$):y===$?new this.buf.constructor(0):this._slice.call(this.buf,y,$)},u.prototype.string=function(){var g=this.bytes();return i.read(g,0,g.length)},u.prototype.skip=function(g){if(typeof g=="number"){if(this.pos+g>this.len)throw l(this,g);this.pos+=g}else do if(this.pos>=this.len)throw l(this);while(128&this.buf[this.pos++]);return this},u.prototype.skipType=function(g){switch(g){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;(g=7&this.uint32())!=4;)this.skipType(g);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+g+" at offset "+this.pos)}return this},u._configure=function(g){r=g,u.create=c(),r._configure();var y=s.Long?"toLong":"toNumber";s.merge(u.prototype,{int64:function(){return o.call(this)[y](!1)},uint64:function(){return o.call(this)[y](!0)},sint64:function(){return o.call(this).zzDecode()[y](!1)},fixed64:function(){return m.call(this)[y](!0)},sfixed64:function(){return m.call(this)[y](!1)}})}},593:(n,e,t)=>{n.exports=a;var r=t(1408);(a.prototype=Object.create(r.prototype)).constructor=a;var s=t(9693);function a(i){r.call(this,i)}a._configure=function(){s.Buffer&&(a.prototype._slice=s.Buffer.prototype.slice)},a.prototype.string=function(){var i=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+i,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+i,this.len))},a._configure()},5054:n=>{n.exports={}},5994:(n,e,t)=>{e.Service=t(7948)},7948:(n,e,t)=>{n.exports=s;var r=t(9693);function s(a,i,l){if(typeof a!="function")throw TypeError("rpcImpl must be a function");r.EventEmitter.call(this),this.rpcImpl=a,this.requestDelimited=!!i,this.responseDelimited=!!l}(s.prototype=Object.create(r.EventEmitter.prototype)).constructor=s,s.prototype.rpcCall=function a(i,l,u,h,f){if(!h)throw TypeError("request must be specified");var c=this;if(!f)return r.asPromise(a,c,i,l,u,h);if(c.rpcImpl)try{return c.rpcImpl(i,l[c.requestDelimited?"encodeDelimited":"encode"](h).finish(),function(o,d){if(o)return c.emit("error",o,i),f(o);if(d!==null){if(!(d instanceof u))try{d=u[c.responseDelimited?"decodeDelimited":"decode"](d)}catch(m){return c.emit("error",m,i),f(m)}return c.emit("data",d,i),f(null,d)}c.end(!0)})}catch(o){return c.emit("error",o,i),void setTimeout(function(){f(o)},0)}else setTimeout(function(){f(Error("already ended"))},0)},s.prototype.end=function(a){return this.rpcImpl&&(a||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this}},1945:(n,e,t)=>{n.exports=s;var r=t(9693);function s(u,h){this.lo=u>>>0,this.hi=h>>>0}var a=s.zero=new s(0,0);a.toNumber=function(){return 0},a.zzEncode=a.zzDecode=function(){return this},a.length=function(){return 1};var i=s.zeroHash="\0\0\0\0\0\0\0\0";s.fromNumber=function(u){if(u===0)return a;var h=u<0;h&&(u=-u);var f=u>>>0,c=(u-f)/4294967296>>>0;return h&&(c=~c>>>0,f=~f>>>0,++f>4294967295&&(f=0,++c>4294967295&&(c=0))),new s(f,c)},s.from=function(u){if(typeof u=="number")return s.fromNumber(u);if(r.isString(u)){if(!r.Long)return s.fromNumber(parseInt(u,10));u=r.Long.fromString(u)}return u.low||u.high?new s(u.low>>>0,u.high>>>0):a},s.prototype.toNumber=function(u){if(!u&&this.hi>>>31){var h=1+~this.lo>>>0,f=~this.hi>>>0;return h||(f=f+1>>>0),-(h+4294967296*f)}return this.lo+4294967296*this.hi},s.prototype.toLong=function(u){return r.Long?new r.Long(0|this.lo,0|this.hi,!!u):{low:0|this.lo,high:0|this.hi,unsigned:!!u}};var l=String.prototype.charCodeAt;s.fromHash=function(u){return u===i?a:new s((l.call(u,0)|l.call(u,1)<<8|l.call(u,2)<<16|l.call(u,3)<<24)>>>0,(l.call(u,4)|l.call(u,5)<<8|l.call(u,6)<<16|l.call(u,7)<<24)>>>0)},s.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},s.prototype.zzEncode=function(){var u=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^u)>>>0,this.lo=(this.lo<<1^u)>>>0,this},s.prototype.zzDecode=function(){var u=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^u)>>>0,this.hi=(this.hi>>>1^u)>>>0,this},s.prototype.length=function(){var u=this.lo,h=(this.lo>>>28|this.hi<<4)>>>0,f=this.hi>>>24;return f===0?h===0?u<16384?u<128?1:2:u<2097152?3:4:h<16384?h<128?5:6:h<2097152?7:8:f<128?9:10}},9693:function(n,e,t){var r=e;function s(i,l,u){for(var h=Object.keys(l),f=0;f<h.length;++f)i[h[f]]!==void 0&&u||(i[h[f]]=l[h[f]]);return i}function a(i){function l(u,h){if(!(this instanceof l))return new l(u,h);Object.defineProperty(this,"message",{get:function(){return u}}),Error.captureStackTrace?Error.captureStackTrace(this,l):Object.defineProperty(this,"stack",{value:new Error().stack||""}),h&&s(this,h)}return l.prototype=Object.create(Error.prototype,{constructor:{value:l,writable:!0,enumerable:!1,configurable:!0},name:{get:function(){return i},set:void 0,enumerable:!1,configurable:!0},toString:{value:function(){return this.name+": "+this.message},writable:!0,enumerable:!1,configurable:!0}}),l}r.asPromise=t(4537),r.base64=t(7419),r.EventEmitter=t(9211),r.float=t(945),r.inquire=t(7199),r.utf8=t(4997),r.pool=t(6662),r.LongBits=t(1945),r.isNode=!!(typeof commonjsGlobal<"u"&&commonjsGlobal&&commonjsGlobal.process&&commonjsGlobal.process.versions&&commonjsGlobal.process.versions.node),r.global=r.isNode&&commonjsGlobal||typeof window<"u"&&window||typeof self<"u"&&self||this,r.emptyArray=Object.freeze?Object.freeze([]):[],r.emptyObject=Object.freeze?Object.freeze({}):{},r.isInteger=Number.isInteger||function(i){return typeof i=="number"&&isFinite(i)&&Math.floor(i)===i},r.isString=function(i){return typeof i=="string"||i instanceof String},r.isObject=function(i){return i&&typeof i=="object"},r.isset=r.isSet=function(i,l){var u=i[l];return!(u==null||!i.hasOwnProperty(l))&&(typeof u!="object"||(Array.isArray(u)?u.length:Object.keys(u).length)>0)},r.Buffer=function(){try{var i=r.inquire("buffer").Buffer;return i.prototype.utf8Write?i:null}catch{return null}}(),r._Buffer_from=null,r._Buffer_allocUnsafe=null,r.newBuffer=function(i){return typeof i=="number"?r.Buffer?r._Buffer_allocUnsafe(i):new r.Array(i):r.Buffer?r._Buffer_from(i):typeof Uint8Array>"u"?i:new Uint8Array(i)},r.Array=typeof Uint8Array<"u"?Uint8Array:Array,r.Long=r.global.dcodeIO&&r.global.dcodeIO.Long||r.global.Long||r.inquire("long"),r.key2Re=/^true|false|0|1$/,r.key32Re=/^-?(?:0|[1-9][0-9]*)$/,r.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,r.longToHash=function(i){return i?r.LongBits.from(i).toHash():r.LongBits.zeroHash},r.longFromHash=function(i,l){var u=r.LongBits.fromHash(i);return r.Long?r.Long.fromBits(u.lo,u.hi,l):u.toNumber(!!l)},r.merge=s,r.lcFirst=function(i){return i.charAt(0).toLowerCase()+i.substring(1)},r.newError=a,r.ProtocolError=a("ProtocolError"),r.oneOfGetter=function(i){for(var l={},u=0;u<i.length;++u)l[i[u]]=1;return function(){for(var h=Object.keys(this),f=h.length-1;f>-1;--f)if(l[h[f]]===1&&this[h[f]]!==void 0&&this[h[f]]!==null)return h[f]}},r.oneOfSetter=function(i){return function(l){for(var u=0;u<i.length;++u)i[u]!==l&&delete this[i[u]]}},r.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},r._configure=function(){var i=r.Buffer;i?(r._Buffer_from=i.from!==Uint8Array.from&&i.from||function(l,u){return new i(l,u)},r._Buffer_allocUnsafe=i.allocUnsafe||function(l){return new i(l)}):r._Buffer_from=r._Buffer_allocUnsafe=null}},1173:(n,e,t)=>{n.exports=c;var r,s=t(9693),a=s.LongBits,i=s.base64,l=s.utf8;function u(b,x,w){this.fn=b,this.len=x,this.next=void 0,this.val=w}function h(){}function f(b){this.head=b.head,this.tail=b.tail,this.len=b.len,this.next=b.states}function c(){this.len=0,this.head=new u(h,0,0),this.tail=this.head,this.states=null}var o=function(){return s.Buffer?function(){return(c.create=function(){return new r})()}:function(){return new c}};function d(b,x,w){x[w]=255&b}function m(b,x){this.len=b,this.next=void 0,this.val=x}function g(b,x,w){for(;b.hi;)x[w++]=127&b.lo|128,b.lo=(b.lo>>>7|b.hi<<25)>>>0,b.hi>>>=7;for(;b.lo>127;)x[w++]=127&b.lo|128,b.lo=b.lo>>>7;x[w++]=b.lo}function y(b,x,w){x[w]=255&b,x[w+1]=b>>>8&255,x[w+2]=b>>>16&255,x[w+3]=b>>>24}c.create=o(),c.alloc=function(b){return new s.Array(b)},s.Array!==Array&&(c.alloc=s.pool(c.alloc,s.Array.prototype.subarray)),c.prototype._push=function(b,x,w){return this.tail=this.tail.next=new u(b,x,w),this.len+=x,this},m.prototype=Object.create(u.prototype),m.prototype.fn=function(b,x,w){for(;b>127;)x[w++]=127&b|128,b>>>=7;x[w]=b},c.prototype.uint32=function(b){return this.len+=(this.tail=this.tail.next=new m((b>>>=0)<128?1:b<16384?2:b<2097152?3:b<268435456?4:5,b)).len,this},c.prototype.int32=function(b){return b<0?this._push(g,10,a.fromNumber(b)):this.uint32(b)},c.prototype.sint32=function(b){return this.uint32((b<<1^b>>31)>>>0)},c.prototype.uint64=function(b){var x=a.from(b);return this._push(g,x.length(),x)},c.prototype.int64=c.prototype.uint64,c.prototype.sint64=function(b){var x=a.from(b).zzEncode();return this._push(g,x.length(),x)},c.prototype.bool=function(b){return this._push(d,1,b?1:0)},c.prototype.fixed32=function(b){return this._push(y,4,b>>>0)},c.prototype.sfixed32=c.prototype.fixed32,c.prototype.fixed64=function(b){var x=a.from(b);return this._push(y,4,x.lo)._push(y,4,x.hi)},c.prototype.sfixed64=c.prototype.fixed64,c.prototype.float=function(b){return this._push(s.float.writeFloatLE,4,b)},c.prototype.double=function(b){return this._push(s.float.writeDoubleLE,8,b)};var $=s.Array.prototype.set?function(b,x,w){x.set(b,w)}:function(b,x,w){for(var v=0;v<b.length;++v)x[w+v]=b[v]};c.prototype.bytes=function(b){var x=b.length>>>0;if(!x)return this._push(d,1,0);if(s.isString(b)){var w=c.alloc(x=i.length(b));i.decode(b,w,0),b=w}return this.uint32(x)._push($,x,b)},c.prototype.string=function(b){var x=l.length(b);return x?this.uint32(x)._push(l.write,x,b):this._push(d,1,0)},c.prototype.fork=function(){return this.states=new f(this),this.head=this.tail=new u(h,0,0),this.len=0,this},c.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new u(h,0,0),this.len=0),this},c.prototype.ldelim=function(){var b=this.head,x=this.tail,w=this.len;return this.reset().uint32(w),w&&(this.tail.next=b.next,this.tail=x,this.len+=w),this},c.prototype.finish=function(){for(var b=this.head.next,x=this.constructor.alloc(this.len),w=0;b;)b.fn(b.val,x,w),w+=b.len,b=b.next;return x},c._configure=function(b){r=b,c.create=o(),r._configure()}},3155:(n,e,t)=>{n.exports=a;var r=t(1173);(a.prototype=Object.create(r.prototype)).constructor=a;var s=t(9693);function a(){r.call(this)}function i(l,u,h){l.length<40?s.utf8.write(l,u,h):u.utf8Write?u.utf8Write(l,h):u.write(l,h)}a._configure=function(){a.alloc=s._Buffer_allocUnsafe,a.writeBytesBuffer=s.Buffer&&s.Buffer.prototype instanceof Uint8Array&&s.Buffer.prototype.set.name==="set"?function(l,u,h){u.set(l,h)}:function(l,u,h){if(l.copy)l.copy(u,h,0,l.length);else for(var f=0;f<l.length;)u[h++]=l[f++]}},a.prototype.bytes=function(l){s.isString(l)&&(l=s._Buffer_from(l,"base64"));var u=l.length>>>0;return this.uint32(u),u&&this._push(a.writeBytesBuffer,u,l),this},a.prototype.string=function(l){var u=s.Buffer.byteLength(l);return this.uint32(u),u&&this._push(i,u,l),this},a._configure()},4154:n=>{n.exports=`"use strict";var e={},a="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node;if(a){var r=require("worker_threads"),t=r.parentPort;t.on("message",(e=>onmessage({data:e})));var s=require("fs");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:e=>(0,eval)(s.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>t.postMessage(e),performance:global.performance||{now:Date.now}})}var o=!1,d=function(){var e=Array.prototype.slice.call(arguments).join(" ");a?s.writeSync(2,e+"\\n"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if("load"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:"loaded"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=(...e)=>{postMessage({cmd:"callHandler",handler:a,args:e})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,"string"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if("run"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if("unwind"!=e)throw e}}else"cancel"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):"setimmediate"===r.data.target||("checkMailbox"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(d("worker.js received unknown command "+r.data.cmd),d(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};
`},7067:()=>{},1296:()=>{},760:()=>{},1384:()=>{},3993:()=>{},908:()=>{},6953:()=>{},9925:()=>{},2806:()=>{},6449:()=>{},2850:()=>{},5381:()=>{},685:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.resolveBackend=e.registerBackend=void 0;const t={},r=[];e.registerBackend=(s,a,i)=>{if(!a||typeof a.init!="function"||typeof a.createSessionHandler!="function")throw new TypeError("not a valid backend");{const l=t[s];if(l===void 0)t[s]={backend:a,priority:i};else{if(l.priority>i)return;if(l.priority===i&&l.backend!==a)throw new Error(`cannot register backend "${s}" using priority ${i}`)}if(i>=0){const u=r.indexOf(s);u!==-1&&r.splice(u,1);for(let h=0;h<r.length;h++)if(t[r[h]].priority<=i)return void r.splice(h,0,s);r.push(s)}}},e.resolveBackend=async s=>{const a=s.length===0?r:s,i=[];for(const l of a){const u=t[l];if(u){if(u.initialized)return u.backend;if(u.aborted)continue;const h=!!u.initPromise;try{return h||(u.initPromise=u.backend.init()),await u.initPromise,u.initialized=!0,u.backend}catch(f){h||i.push({name:l,err:f}),u.aborted=!0}finally{delete u.initPromise}}}throw new Error(`no available backend found. ERR: ${i.map(l=>`[${l.name}] ${l.err}`).join(", ")}`)}},4798:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.registerBackend=void 0;var r=t(685);Object.defineProperty(e,"registerBackend",{enumerable:!0,get:function(){return r.registerBackend}})},3121:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.env=void 0;const r=t(9104);let s="warning";e.env={wasm:{},webgl:{},webgpu:{},versions:{common:r.version},set logLevel(a){if(a!==void 0){if(typeof a!="string"||["verbose","info","warning","error","fatal"].indexOf(a)===-1)throw new Error(`Unsupported logging level: ${a}`);s=a}},get logLevel(){return s}},Object.defineProperty(e.env,"logLevel",{enumerable:!0})},2457:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.env=void 0;const r=t(3121);e.env=r.env},2235:function(n,e,t){var r=this&&this.__createBinding||(Object.create?function(a,i,l,u){u===void 0&&(u=l);var h=Object.getOwnPropertyDescriptor(i,l);h&&!("get"in h?!i.__esModule:h.writable||h.configurable)||(h={enumerable:!0,get:function(){return i[l]}}),Object.defineProperty(a,u,h)}:function(a,i,l,u){u===void 0&&(u=l),a[u]=i[l]}),s=this&&this.__exportStar||function(a,i){for(var l in a)l==="default"||Object.prototype.hasOwnProperty.call(i,l)||r(i,a,l)};Object.defineProperty(e,"__esModule",{value:!0}),s(t(4798),e),s(t(2457),e),s(t(3974),e),s(t(963),e),s(t(7852),e)},8036:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.InferenceSession=void 0;const r=t(685),s=t(963);class a{constructor(l){this.handler=l}async run(l,u,h){const f={};let c={};if(typeof l!="object"||l===null||l instanceof s.Tensor||Array.isArray(l))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let o=!0;if(typeof u=="object"){if(u===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(u instanceof s.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(u)){if(u.length===0)throw new TypeError("'fetches' cannot be an empty array.");o=!1;for(const g of u){if(typeof g!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(g)===-1)throw new RangeError(`'fetches' contains invalid output name: ${g}.`);f[g]=null}if(typeof h=="object"&&h!==null)c=h;else if(h!==void 0)throw new TypeError("'options' must be an object.")}else{let g=!1;const y=Object.getOwnPropertyNames(u);for(const $ of this.outputNames)if(y.indexOf($)!==-1){const b=u[$];(b===null||b instanceof s.Tensor)&&(g=!0,o=!1,f[$]=b)}if(g){if(typeof h=="object"&&h!==null)c=h;else if(h!==void 0)throw new TypeError("'options' must be an object.")}else c=u}}else if(u!==void 0)throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const g of this.inputNames)if(l[g]===void 0)throw new Error(`input '${g}' is missing in 'feeds'.`);if(o)for(const g of this.outputNames)f[g]=null;const d=await this.handler.run(l,f,c),m={};for(const g in d)Object.hasOwnProperty.call(d,g)&&(m[g]=new s.Tensor(d[g].type,d[g].data,d[g].dims));return m}async release(){return this.handler.dispose()}static async create(l,u,h,f){let c,o={};if(typeof l=="string"){if(c=l,typeof u=="object"&&u!==null)o=u;else if(u!==void 0)throw new TypeError("'options' must be an object.")}else if(l instanceof Uint8Array){if(c=l,typeof u=="object"&&u!==null)o=u;else if(u!==void 0)throw new TypeError("'options' must be an object.")}else{if(!(l instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&l instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{const y=l;let $=0,b=l.byteLength;if(typeof u=="object"&&u!==null)o=u;else if(typeof u=="number"){if($=u,!Number.isSafeInteger($))throw new RangeError("'byteOffset' must be an integer.");if($<0||$>=y.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${y.byteLength}).`);if(b=l.byteLength-$,typeof h=="number"){if(b=h,!Number.isSafeInteger(b))throw new RangeError("'byteLength' must be an integer.");if(b<=0||$+b>y.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${y.byteLength-$}].`);if(typeof f=="object"&&f!==null)o=f;else if(f!==void 0)throw new TypeError("'options' must be an object.")}else if(h!==void 0)throw new TypeError("'byteLength' must be a number.")}else if(u!==void 0)throw new TypeError("'options' must be an object.");c=new Uint8Array(y,$,b)}}const d=(o.executionProviders||[]).map(y=>typeof y=="string"?y:y.name),m=await(0,r.resolveBackend)(d),g=await m.createSessionHandler(c,o);return new a(g)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}e.InferenceSession=a},3974:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.InferenceSession=void 0;const r=t(8036);e.InferenceSession=r.InferenceSession},7852:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},2350:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.tensorToImageData=e.tensorToDataURL=void 0,e.tensorToDataURL=(t,r)=>{const s=document.createElement("canvas");s.width=t.dims[3],s.height=t.dims[2];const a=s.getContext("2d");if(a!=null){let i,l;r?.tensorLayout!==void 0&&r.tensorLayout==="NHWC"?(i=t.dims[2],l=t.dims[3]):(i=t.dims[3],l=t.dims[2]);const u=r?.format!==void 0?r.format:"RGB",h=r?.norm;let f,c;h===void 0||h.mean===void 0?f=[255,255,255,255]:typeof h.mean=="number"?f=[h.mean,h.mean,h.mean,h.mean]:(f=[h.mean[0],h.mean[1],h.mean[2],0],h.mean[3]!==void 0&&(f[3]=h.mean[3])),h===void 0||h.bias===void 0?c=[0,0,0,0]:typeof h.bias=="number"?c=[h.bias,h.bias,h.bias,h.bias]:(c=[h.bias[0],h.bias[1],h.bias[2],0],h.bias[3]!==void 0&&(c[3]=h.bias[3]));const o=l*i;let d=0,m=o,g=2*o,y=-1;u==="RGBA"?(d=0,m=o,g=2*o,y=3*o):u==="RGB"?(d=0,m=o,g=2*o):u==="RBG"&&(d=0,g=o,m=2*o);for(let $=0;$<l;$++)for(let b=0;b<i;b++){const x=(t.data[d++]-c[0])*f[0],w=(t.data[m++]-c[1])*f[1],v=(t.data[g++]-c[2])*f[2],S=y===-1?255:(t.data[y++]-c[3])*f[3];a.fillStyle="rgba("+x+","+w+","+v+","+S+")",a.fillRect(b,$,1,1)}return s.toDataURL()}throw new Error("Can not access image data")},e.tensorToImageData=(t,r)=>{const s=document.createElement("canvas").getContext("2d");let a;if(s==null)throw new Error("Can not access image data");{let i,l,u;r?.tensorLayout!==void 0&&r.tensorLayout==="NHWC"?(i=t.dims[2],l=t.dims[1],u=t.dims[3]):(i=t.dims[3],l=t.dims[2],u=t.dims[1]);const h=r!==void 0&&r.format!==void 0?r.format:"RGB",f=r?.norm;let c,o;f===void 0||f.mean===void 0?c=[255,255,255,255]:typeof f.mean=="number"?c=[f.mean,f.mean,f.mean,f.mean]:(c=[f.mean[0],f.mean[1],f.mean[2],255],f.mean[3]!==void 0&&(c[3]=f.mean[3])),f===void 0||f.bias===void 0?o=[0,0,0,0]:typeof f.bias=="number"?o=[f.bias,f.bias,f.bias,f.bias]:(o=[f.bias[0],f.bias[1],f.bias[2],0],f.bias[3]!==void 0&&(o[3]=f.bias[3]));const d=l*i;if(r!==void 0&&(r.format!==void 0&&u===4&&r.format!=="RGBA"||u===3&&r.format!=="RGB"&&r.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const m=4;let g=0,y=1,$=2,b=3,x=0,w=d,v=2*d,S=-1;h==="RGBA"?(x=0,w=d,v=2*d,S=3*d):h==="RGB"?(x=0,w=d,v=2*d):h==="RBG"&&(x=0,v=d,w=2*d),a=s.createImageData(i,l);for(let T=0;T<l*i;g+=m,y+=m,$+=m,b+=m,T++)a.data[g]=(t.data[x++]-o[0])*c[0],a.data[y]=(t.data[w++]-o[1])*c[1],a.data[$]=(t.data[v++]-o[2])*c[2],a.data[b]=S===-1?255:(t.data[S++]-o[3])*c[3]}return a}},4866:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.tensorFromImage=e.bufferToTensor=void 0;const r=t(963);e.bufferToTensor=(s,a)=>{if(s===void 0)throw new Error("Image buffer must be defined");if(a.height===void 0||a.width===void 0)throw new Error("Image height and width must be defined");if(a.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:i,width:l}=a,u=a.norm??{mean:255,bias:0};let h,f;h=typeof u.mean=="number"?[u.mean,u.mean,u.mean,u.mean]:[u.mean[0],u.mean[1],u.mean[2],u.mean[3]??255],f=typeof u.bias=="number"?[u.bias,u.bias,u.bias,u.bias]:[u.bias[0],u.bias[1],u.bias[2],u.bias[3]??0];const c=a.format!==void 0?a.format:"RGBA",o=a.tensorFormat!==void 0&&a.tensorFormat!==void 0?a.tensorFormat:"RGB",d=i*l,m=o==="RGBA"?new Float32Array(4*d):new Float32Array(3*d);let g=4,y=0,$=1,b=2,x=3,w=0,v=d,S=2*d,T=-1;c==="RGB"&&(g=3,y=0,$=1,b=2,x=-1),o==="RGBA"?T=3*d:o==="RBG"?(w=0,S=d,v=2*d):o==="BGR"&&(S=0,v=d,w=2*d);for(let C=0;C<d;C++,y+=g,b+=g,$+=g,x+=g)m[w++]=(s[y]+f[0])/h[0],m[v++]=(s[$]+f[1])/h[1],m[S++]=(s[b]+f[2])/h[2],T!==-1&&x!==-1&&(m[T++]=(s[x]+f[3])/h[3]);return o==="RGBA"?new r.Tensor("float32",m,[1,4,i,l]):new r.Tensor("float32",m,[1,3,i,l])},e.tensorFromImage=async(s,a)=>{const i=typeof HTMLImageElement<"u"&&s instanceof HTMLImageElement,l=typeof ImageData<"u"&&s instanceof ImageData,u=typeof ImageBitmap<"u"&&s instanceof ImageBitmap,h=typeof s=="string";let f,c=a??{};if(i){const o=document.createElement("canvas");o.width=s.width,o.height=s.height;const d=o.getContext("2d");if(d==null)throw new Error("Can not access image data");{let m=s.height,g=s.width;if(a!==void 0&&a.resizedHeight!==void 0&&a.resizedWidth!==void 0&&(m=a.resizedHeight,g=a.resizedWidth),a!==void 0){if(c=a,a.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");c.tensorFormat="RGBA",c.height=m,c.width=g}else c.tensorFormat="RGBA",c.height=m,c.width=g;d.drawImage(s,0,0),f=d.getImageData(0,0,g,m).data}}else{if(!l){if(u){if(a===void 0)throw new Error("Please provide image config with format for Imagebitmap");const o=document.createElement("canvas");o.width=s.width,o.height=s.height;const d=o.getContext("2d");if(d!=null){const m=s.height,g=s.width;return d.drawImage(s,0,0,g,m),f=d.getImageData(0,0,g,m).data,c.height=m,c.width=g,(0,e.bufferToTensor)(f,c)}throw new Error("Can not access image data")}if(h)return new Promise((o,d)=>{const m=document.createElement("canvas"),g=m.getContext("2d");if(!s||!g)return d();const y=new Image;y.crossOrigin="Anonymous",y.src=s,y.onload=()=>{m.width=y.width,m.height=y.height,g.drawImage(y,0,0,m.width,m.height);const $=g.getImageData(0,0,m.width,m.height);c.height=m.height,c.width=m.width,o((0,e.bufferToTensor)($.data,c))}});throw new Error("Input data provided is not supported - aborted tensor creation")}{let o,d;if(a!==void 0&&a.resizedWidth!==void 0&&a.resizedHeight!==void 0?(o=a.resizedHeight,d=a.resizedWidth):(o=s.height,d=s.width),a!==void 0&&(c=a),c.format="RGBA",c.height=o,c.width=d,a!==void 0){const m=document.createElement("canvas");m.width=d,m.height=o;const g=m.getContext("2d");if(g==null)throw new Error("Can not access image data");g.putImageData(s,0,0),f=g.getImageData(0,0,d,o).data}else f=s.data}}if(f!==void 0)return(0,e.bufferToTensor)(f,c);throw new Error("Input data provided is not supported - aborted tensor creation")}},5957:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Tensor=void 0;const r=t(2350),s=t(4866),a=t(106),i=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),l=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let u=!1;e.Tensor=class{constructor(h,f,c){let o,d,m;if((()=>{if(!u){u=!0;const y=typeof BigInt64Array<"u"&&typeof BigInt64Array.from=="function",$=typeof BigUint64Array<"u"&&typeof BigUint64Array.from=="function";y&&(i.set("int64",BigInt64Array),l.set(BigInt64Array,"int64")),$&&(i.set("uint64",BigUint64Array),l.set(BigUint64Array,"uint64"))}})(),typeof h=="string")if(o=h,m=c,h==="string"){if(!Array.isArray(f))throw new TypeError("A string tensor's data must be a string array.");d=f}else{const y=i.get(h);if(y===void 0)throw new TypeError(`Unsupported tensor type: ${h}.`);if(Array.isArray(f)){if(h==="float16")throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");d=h==="uint64"||h==="int64"?y.from(f,BigInt):y.from(f)}else{if(!(f instanceof y))throw new TypeError(`A ${o} tensor's data must be type of ${y}`);d=f}}else if(m=f,Array.isArray(h)){if(h.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const y=typeof h[0];if(y==="string")o="string",d=h;else{if(y!=="boolean")throw new TypeError(`Invalid element type of data array: ${y}.`);o="bool",d=Uint8Array.from(h)}}else{const y=l.get(h.constructor);if(y===void 0)throw new TypeError(`Unsupported type for tensor data: ${h.constructor}.`);o=y,d=h}if(m===void 0)m=[d.length];else if(!Array.isArray(m))throw new TypeError("A tensor's dims must be a number array");const g=(0,a.calculateSize)(m);if(g!==d.length)throw new Error(`Tensor's size(${g}) does not match data length(${d.length}).`);this.dims=m,this.type=o,this.data=d,this.size=g}static async fromImage(h,f){return(0,s.tensorFromImage)(h,f)}toDataURL(h){return(0,r.tensorToDataURL)(this,h)}toImageData(h){return(0,r.tensorToImageData)(this,h)}reshape(h){return(0,a.tensorReshape)(this,h)}}},106:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.tensorReshape=e.calculateSize=void 0;const r=t(963);e.calculateSize=s=>{let a=1;for(let i=0;i<s.length;i++){const l=s[i];if(typeof l!="number"||!Number.isSafeInteger(l))throw new TypeError(`dims[${i}] must be an integer, got: ${l}`);if(l<0)throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${l}`);a*=l}return a},e.tensorReshape=(s,a)=>new r.Tensor(s.type,s.data,a)},963:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Tensor=void 0;const r=t(5957);e.Tensor=r.Tensor},9104:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.version=void 0,e.version="1.16.0"},1583:(n,e)=>{var t,r=function(s){Object.defineProperty(s,"__esModule",{value:!0}),s.default=void 0;var a=null;try{a=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function i(E,k,O){this.low=0|E,this.high=0|k,this.unsigned=!!O}function l(E){return(E&&E.__isLong__)===!0}function u(E){var k=Math.clz32(E&-E);return E?31-k:k}i.prototype.__isLong__,Object.defineProperty(i.prototype,"__isLong__",{value:!0}),i.isLong=l;var h={},f={};function c(E,k){var O,M,z;return k?(z=0<=(E>>>=0)&&E<256)&&(M=f[E])?M:(O=d(E,0,!0),z&&(f[E]=O),O):(z=-128<=(E|=0)&&E<128)&&(M=h[E])?M:(O=d(E,E<0?-1:0,!1),z&&(h[E]=O),O)}function o(E,k){if(isNaN(E))return k?S:v;if(k){if(E<0)return S;if(E>=b)return P}else{if(E<=-x)return F;if(E+1>=x)return N}return E<0?o(-E,k).neg():d(E%$|0,E/$|0,k)}function d(E,k,O){return new i(E,k,O)}i.fromInt=c,i.fromNumber=o,i.fromBits=d;var m=Math.pow;function g(E,k,O){if(E.length===0)throw Error("empty string");if(typeof k=="number"?(O=k,k=!1):k=!!k,E==="NaN"||E==="Infinity"||E==="+Infinity"||E==="-Infinity")return k?S:v;if((O=O||10)<2||36<O)throw RangeError("radix");var M;if((M=E.indexOf("-"))>0)throw Error("interior hyphen");if(M===0)return g(E.substring(1),k,O).neg();for(var z=o(m(O,8)),G=v,j=0;j<E.length;j+=8){var K=Math.min(8,E.length-j),X=parseInt(E.substring(j,j+K),O);if(K<8){var Y=o(m(O,K));G=G.mul(Y).add(o(X))}else G=(G=G.mul(z)).add(o(X))}return G.unsigned=k,G}function y(E,k){return typeof E=="number"?o(E,k):typeof E=="string"?g(E,k):d(E.low,E.high,typeof k=="boolean"?k:E.unsigned)}i.fromString=g,i.fromValue=y;var $=4294967296,b=$*$,x=b/2,w=c(1<<24),v=c(0);i.ZERO=v;var S=c(0,!0);i.UZERO=S;var T=c(1);i.ONE=T;var C=c(1,!0);i.UONE=C;var I=c(-1);i.NEG_ONE=I;var N=d(-1,2147483647,!1);i.MAX_VALUE=N;var P=d(-1,-1,!0);i.MAX_UNSIGNED_VALUE=P;var F=d(0,-2147483648,!1);i.MIN_VALUE=F;var _=i.prototype;_.toInt=function(){return this.unsigned?this.low>>>0:this.low},_.toNumber=function(){return this.unsigned?(this.high>>>0)*$+(this.low>>>0):this.high*$+(this.low>>>0)},_.toString=function(E){if((E=E||10)<2||36<E)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(F)){var k=o(E),O=this.div(k),M=O.mul(k).sub(this);return O.toString(E)+M.toInt().toString(E)}return"-"+this.neg().toString(E)}for(var z=o(m(E,6),this.unsigned),G=this,j="";;){var K=G.div(z),X=(G.sub(K.mul(z)).toInt()>>>0).toString(E);if((G=K).isZero())return X+j;for(;X.length<6;)X="0"+X;j=""+X+j}},_.getHighBits=function(){return this.high},_.getHighBitsUnsigned=function(){return this.high>>>0},_.getLowBits=function(){return this.low},_.getLowBitsUnsigned=function(){return this.low>>>0},_.getNumBitsAbs=function(){if(this.isNegative())return this.eq(F)?64:this.neg().getNumBitsAbs();for(var E=this.high!=0?this.high:this.low,k=31;k>0&&!(E&1<<k);k--);return this.high!=0?k+33:k+1},_.isZero=function(){return this.high===0&&this.low===0},_.eqz=_.isZero,_.isNegative=function(){return!this.unsigned&&this.high<0},_.isPositive=function(){return this.unsigned||this.high>=0},_.isOdd=function(){return(1&this.low)==1},_.isEven=function(){return(1&this.low)==0},_.equals=function(E){return l(E)||(E=y(E)),(this.unsigned===E.unsigned||this.high>>>31!=1||E.high>>>31!=1)&&this.high===E.high&&this.low===E.low},_.eq=_.equals,_.notEquals=function(E){return!this.eq(E)},_.neq=_.notEquals,_.ne=_.notEquals,_.lessThan=function(E){return this.comp(E)<0},_.lt=_.lessThan,_.lessThanOrEqual=function(E){return this.comp(E)<=0},_.lte=_.lessThanOrEqual,_.le=_.lessThanOrEqual,_.greaterThan=function(E){return this.comp(E)>0},_.gt=_.greaterThan,_.greaterThanOrEqual=function(E){return this.comp(E)>=0},_.gte=_.greaterThanOrEqual,_.ge=_.greaterThanOrEqual,_.compare=function(E){if(l(E)||(E=y(E)),this.eq(E))return 0;var k=this.isNegative(),O=E.isNegative();return k&&!O?-1:!k&&O?1:this.unsigned?E.high>>>0>this.high>>>0||E.high===this.high&&E.low>>>0>this.low>>>0?-1:1:this.sub(E).isNegative()?-1:1},_.comp=_.compare,_.negate=function(){return!this.unsigned&&this.eq(F)?F:this.not().add(T)},_.neg=_.negate,_.add=function(E){l(E)||(E=y(E));var k=this.high>>>16,O=65535&this.high,M=this.low>>>16,z=65535&this.low,G=E.high>>>16,j=65535&E.high,K=E.low>>>16,X=0,Y=0,J=0,te=0;return J+=(te+=z+(65535&E.low))>>>16,Y+=(J+=M+K)>>>16,X+=(Y+=O+j)>>>16,X+=k+G,d((J&=65535)<<16|(te&=65535),(X&=65535)<<16|(Y&=65535),this.unsigned)},_.subtract=function(E){return l(E)||(E=y(E)),this.add(E.neg())},_.sub=_.subtract,_.multiply=function(E){if(this.isZero())return this;if(l(E)||(E=y(E)),a)return d(a.mul(this.low,this.high,E.low,E.high),a.get_high(),this.unsigned);if(E.isZero())return this.unsigned?S:v;if(this.eq(F))return E.isOdd()?F:v;if(E.eq(F))return this.isOdd()?F:v;if(this.isNegative())return E.isNegative()?this.neg().mul(E.neg()):this.neg().mul(E).neg();if(E.isNegative())return this.mul(E.neg()).neg();if(this.lt(w)&&E.lt(w))return o(this.toNumber()*E.toNumber(),this.unsigned);var k=this.high>>>16,O=65535&this.high,M=this.low>>>16,z=65535&this.low,G=E.high>>>16,j=65535&E.high,K=E.low>>>16,X=65535&E.low,Y=0,J=0,te=0,re=0;return te+=(re+=z*X)>>>16,J+=(te+=M*X)>>>16,te&=65535,J+=(te+=z*K)>>>16,Y+=(J+=O*X)>>>16,J&=65535,Y+=(J+=M*K)>>>16,J&=65535,Y+=(J+=z*j)>>>16,Y+=k*X+O*K+M*j+z*G,d((te&=65535)<<16|(re&=65535),(Y&=65535)<<16|(J&=65535),this.unsigned)},_.mul=_.multiply,_.divide=function(E){if(l(E)||(E=y(E)),E.isZero())throw Error("division by zero");var k,O,M;if(a)return this.unsigned||this.high!==-2147483648||E.low!==-1||E.high!==-1?d((this.unsigned?a.div_u:a.div_s)(this.low,this.high,E.low,E.high),a.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?S:v;if(this.unsigned){if(E.unsigned||(E=E.toUnsigned()),E.gt(this))return S;if(E.gt(this.shru(1)))return C;M=S}else{if(this.eq(F))return E.eq(T)||E.eq(I)?F:E.eq(F)?T:(k=this.shr(1).div(E).shl(1)).eq(v)?E.isNegative()?T:I:(O=this.sub(E.mul(k)),M=k.add(O.div(E)));if(E.eq(F))return this.unsigned?S:v;if(this.isNegative())return E.isNegative()?this.neg().div(E.neg()):this.neg().div(E).neg();if(E.isNegative())return this.div(E.neg()).neg();M=v}for(O=this;O.gte(E);){k=Math.max(1,Math.floor(O.toNumber()/E.toNumber()));for(var z=Math.ceil(Math.log(k)/Math.LN2),G=z<=48?1:m(2,z-48),j=o(k),K=j.mul(E);K.isNegative()||K.gt(O);)K=(j=o(k-=G,this.unsigned)).mul(E);j.isZero()&&(j=T),M=M.add(j),O=O.sub(K)}return M},_.div=_.divide,_.modulo=function(E){return l(E)||(E=y(E)),a?d((this.unsigned?a.rem_u:a.rem_s)(this.low,this.high,E.low,E.high),a.get_high(),this.unsigned):this.sub(this.div(E).mul(E))},_.mod=_.modulo,_.rem=_.modulo,_.not=function(){return d(~this.low,~this.high,this.unsigned)},_.countLeadingZeros=function(){return this.high?Math.clz32(this.high):Math.clz32(this.low)+32},_.clz=_.countLeadingZeros,_.countTrailingZeros=function(){return this.low?u(this.low):u(this.high)+32},_.ctz=_.countTrailingZeros,_.and=function(E){return l(E)||(E=y(E)),d(this.low&E.low,this.high&E.high,this.unsigned)},_.or=function(E){return l(E)||(E=y(E)),d(this.low|E.low,this.high|E.high,this.unsigned)},_.xor=function(E){return l(E)||(E=y(E)),d(this.low^E.low,this.high^E.high,this.unsigned)},_.shiftLeft=function(E){return l(E)&&(E=E.toInt()),(E&=63)==0?this:E<32?d(this.low<<E,this.high<<E|this.low>>>32-E,this.unsigned):d(0,this.low<<E-32,this.unsigned)},_.shl=_.shiftLeft,_.shiftRight=function(E){return l(E)&&(E=E.toInt()),(E&=63)==0?this:E<32?d(this.low>>>E|this.high<<32-E,this.high>>E,this.unsigned):d(this.high>>E-32,this.high>=0?0:-1,this.unsigned)},_.shr=_.shiftRight,_.shiftRightUnsigned=function(E){return l(E)&&(E=E.toInt()),(E&=63)==0?this:E<32?d(this.low>>>E|this.high<<32-E,this.high>>>E,this.unsigned):d(E===32?this.high:this.high>>>E-32,0,this.unsigned)},_.shru=_.shiftRightUnsigned,_.shr_u=_.shiftRightUnsigned,_.rotateLeft=function(E){var k;return l(E)&&(E=E.toInt()),(E&=63)==0?this:E===32?d(this.high,this.low,this.unsigned):E<32?(k=32-E,d(this.low<<E|this.high>>>k,this.high<<E|this.low>>>k,this.unsigned)):(k=32-(E-=32),d(this.high<<E|this.low>>>k,this.low<<E|this.high>>>k,this.unsigned))},_.rotl=_.rotateLeft,_.rotateRight=function(E){var k;return l(E)&&(E=E.toInt()),(E&=63)==0?this:E===32?d(this.high,this.low,this.unsigned):E<32?(k=32-E,d(this.high<<k|this.low>>>E,this.low<<k|this.high>>>E,this.unsigned)):(k=32-(E-=32),d(this.low<<k|this.high>>>E,this.high<<k|this.low>>>E,this.unsigned))},_.rotr=_.rotateRight,_.toSigned=function(){return this.unsigned?d(this.low,this.high,!1):this},_.toUnsigned=function(){return this.unsigned?this:d(this.low,this.high,!0)},_.toBytes=function(E){return E?this.toBytesLE():this.toBytesBE()},_.toBytesLE=function(){var E=this.high,k=this.low;return[255&k,k>>>8&255,k>>>16&255,k>>>24,255&E,E>>>8&255,E>>>16&255,E>>>24]},_.toBytesBE=function(){var E=this.high,k=this.low;return[E>>>24,E>>>16&255,E>>>8&255,255&E,k>>>24,k>>>16&255,k>>>8&255,255&k]},i.fromBytes=function(E,k,O){return O?i.fromBytesLE(E,k):i.fromBytesBE(E,k)},i.fromBytesLE=function(E,k){return new i(E[0]|E[1]<<8|E[2]<<16|E[3]<<24,E[4]|E[5]<<8|E[6]<<16|E[7]<<24,k)},i.fromBytesBE=function(E,k){return new i(E[4]<<24|E[5]<<16|E[6]<<8|E[7],E[0]<<24|E[1]<<16|E[2]<<8|E[3],k)};var D=i;return s.default=D,"default"in s?s.default:s}({});(t=function(){return r}.apply(e,[]))===void 0||(n.exports=t)},5686:(n,e,t)=>{t.r(e),t.d(e,{flatbuffers:()=>r});var r={};r.Offset,r.Table,r.SIZEOF_SHORT=2,r.SIZEOF_INT=4,r.FILE_IDENTIFIER_LENGTH=4,r.SIZE_PREFIX_LENGTH=4,r.Encoding={UTF8_BYTES:1,UTF16_STRING:2},r.int32=new Int32Array(2),r.float32=new Float32Array(r.int32.buffer),r.float64=new Float64Array(r.int32.buffer),r.isLittleEndian=new Uint16Array(new Uint8Array([1,0]).buffer)[0]===1,r.Long=function(s,a){this.low=0|s,this.high=0|a},r.Long.create=function(s,a){return s==0&&a==0?r.Long.ZERO:new r.Long(s,a)},r.Long.prototype.toFloat64=function(){return(this.low>>>0)+4294967296*this.high},r.Long.prototype.equals=function(s){return this.low==s.low&&this.high==s.high},r.Long.ZERO=new r.Long(0,0),r.Builder=function(s){if(s)a=s;else var a=1024;this.bb=r.ByteBuffer.allocate(a),this.space=a,this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1},r.Builder.prototype.clear=function(){this.bb.clear(),this.space=this.bb.capacity(),this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1},r.Builder.prototype.forceDefaults=function(s){this.force_defaults=s},r.Builder.prototype.dataBuffer=function(){return this.bb},r.Builder.prototype.asUint8Array=function(){return this.bb.bytes().subarray(this.bb.position(),this.bb.position()+this.offset())},r.Builder.prototype.prep=function(s,a){s>this.minalign&&(this.minalign=s);for(var i=1+~(this.bb.capacity()-this.space+a)&s-1;this.space<i+s+a;){var l=this.bb.capacity();this.bb=r.Builder.growByteBuffer(this.bb),this.space+=this.bb.capacity()-l}this.pad(i)},r.Builder.prototype.pad=function(s){for(var a=0;a<s;a++)this.bb.writeInt8(--this.space,0)},r.Builder.prototype.writeInt8=function(s){this.bb.writeInt8(this.space-=1,s)},r.Builder.prototype.writeInt16=function(s){this.bb.writeInt16(this.space-=2,s)},r.Builder.prototype.writeInt32=function(s){this.bb.writeInt32(this.space-=4,s)},r.Builder.prototype.writeInt64=function(s){this.bb.writeInt64(this.space-=8,s)},r.Builder.prototype.writeFloat32=function(s){this.bb.writeFloat32(this.space-=4,s)},r.Builder.prototype.writeFloat64=function(s){this.bb.writeFloat64(this.space-=8,s)},r.Builder.prototype.addInt8=function(s){this.prep(1,0),this.writeInt8(s)},r.Builder.prototype.addInt16=function(s){this.prep(2,0),this.writeInt16(s)},r.Builder.prototype.addInt32=function(s){this.prep(4,0),this.writeInt32(s)},r.Builder.prototype.addInt64=function(s){this.prep(8,0),this.writeInt64(s)},r.Builder.prototype.addFloat32=function(s){this.prep(4,0),this.writeFloat32(s)},r.Builder.prototype.addFloat64=function(s){this.prep(8,0),this.writeFloat64(s)},r.Builder.prototype.addFieldInt8=function(s,a,i){(this.force_defaults||a!=i)&&(this.addInt8(a),this.slot(s))},r.Builder.prototype.addFieldInt16=function(s,a,i){(this.force_defaults||a!=i)&&(this.addInt16(a),this.slot(s))},r.Builder.prototype.addFieldInt32=function(s,a,i){(this.force_defaults||a!=i)&&(this.addInt32(a),this.slot(s))},r.Builder.prototype.addFieldInt64=function(s,a,i){!this.force_defaults&&a.equals(i)||(this.addInt64(a),this.slot(s))},r.Builder.prototype.addFieldFloat32=function(s,a,i){(this.force_defaults||a!=i)&&(this.addFloat32(a),this.slot(s))},r.Builder.prototype.addFieldFloat64=function(s,a,i){(this.force_defaults||a!=i)&&(this.addFloat64(a),this.slot(s))},r.Builder.prototype.addFieldOffset=function(s,a,i){(this.force_defaults||a!=i)&&(this.addOffset(a),this.slot(s))},r.Builder.prototype.addFieldStruct=function(s,a,i){a!=i&&(this.nested(a),this.slot(s))},r.Builder.prototype.nested=function(s){if(s!=this.offset())throw new Error("FlatBuffers: struct must be serialized inline.")},r.Builder.prototype.notNested=function(){if(this.isNested)throw new Error("FlatBuffers: object serialization must not be nested.")},r.Builder.prototype.slot=function(s){this.vtable[s]=this.offset()},r.Builder.prototype.offset=function(){return this.bb.capacity()-this.space},r.Builder.growByteBuffer=function(s){var a=s.capacity();if(3221225472&a)throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");var i=a<<1,l=r.ByteBuffer.allocate(i);return l.setPosition(i-a),l.bytes().set(s.bytes(),i-a),l},r.Builder.prototype.addOffset=function(s){this.prep(r.SIZEOF_INT,0),this.writeInt32(this.offset()-s+r.SIZEOF_INT)},r.Builder.prototype.startObject=function(s){this.notNested(),this.vtable==null&&(this.vtable=[]),this.vtable_in_use=s;for(var a=0;a<s;a++)this.vtable[a]=0;this.isNested=!0,this.object_start=this.offset()},r.Builder.prototype.endObject=function(){if(this.vtable==null||!this.isNested)throw new Error("FlatBuffers: endObject called without startObject");this.addInt32(0);for(var s=this.offset(),a=this.vtable_in_use-1;a>=0&&this.vtable[a]==0;a--);for(var i=a+1;a>=0;a--)this.addInt16(this.vtable[a]!=0?s-this.vtable[a]:0);this.addInt16(s-this.object_start);var l=(i+2)*r.SIZEOF_SHORT;this.addInt16(l);var u=0,h=this.space;e:for(a=0;a<this.vtables.length;a++){var f=this.bb.capacity()-this.vtables[a];if(l==this.bb.readInt16(f)){for(var c=r.SIZEOF_SHORT;c<l;c+=r.SIZEOF_SHORT)if(this.bb.readInt16(h+c)!=this.bb.readInt16(f+c))continue e;u=this.vtables[a];break}}return u?(this.space=this.bb.capacity()-s,this.bb.writeInt32(this.space,u-s)):(this.vtables.push(this.offset()),this.bb.writeInt32(this.bb.capacity()-s,this.offset()-s)),this.isNested=!1,s},r.Builder.prototype.finish=function(s,a,i){var l=i?r.SIZE_PREFIX_LENGTH:0;if(a){var u=a;if(this.prep(this.minalign,r.SIZEOF_INT+r.FILE_IDENTIFIER_LENGTH+l),u.length!=r.FILE_IDENTIFIER_LENGTH)throw new Error("FlatBuffers: file identifier must be length "+r.FILE_IDENTIFIER_LENGTH);for(var h=r.FILE_IDENTIFIER_LENGTH-1;h>=0;h--)this.writeInt8(u.charCodeAt(h))}this.prep(this.minalign,r.SIZEOF_INT+l),this.addOffset(s),l&&this.addInt32(this.bb.capacity()-this.space),this.bb.setPosition(this.space)},r.Builder.prototype.finishSizePrefixed=function(s,a){this.finish(s,a,!0)},r.Builder.prototype.requiredField=function(s,a){var i=this.bb.capacity()-s,l=i-this.bb.readInt32(i);if(this.bb.readInt16(l+a)==0)throw new Error("FlatBuffers: field "+a+" must be set")},r.Builder.prototype.startVector=function(s,a,i){this.notNested(),this.vector_num_elems=a,this.prep(r.SIZEOF_INT,s*a),this.prep(i,s*a)},r.Builder.prototype.endVector=function(){return this.writeInt32(this.vector_num_elems),this.offset()},r.Builder.prototype.createString=function(s){if(s instanceof Uint8Array)var a=s;else{a=[];for(var i=0;i<s.length;){var l,u=s.charCodeAt(i++);(l=u<55296||u>=56320?u:(u<<10)+s.charCodeAt(i++)+-56613888)<128?a.push(l):(l<2048?a.push(l>>6&31|192):(l<65536?a.push(l>>12&15|224):a.push(l>>18&7|240,l>>12&63|128),a.push(l>>6&63|128)),a.push(63&l|128))}}this.addInt8(0),this.startVector(1,a.length,1),this.bb.setPosition(this.space-=a.length),i=0;for(var h=this.space,f=this.bb.bytes();i<a.length;i++)f[h++]=a[i];return this.endVector()},r.Builder.prototype.createLong=function(s,a){return r.Long.create(s,a)},r.ByteBuffer=function(s){this.bytes_=s,this.position_=0},r.ByteBuffer.allocate=function(s){return new r.ByteBuffer(new Uint8Array(s))},r.ByteBuffer.prototype.clear=function(){this.position_=0},r.ByteBuffer.prototype.bytes=function(){return this.bytes_},r.ByteBuffer.prototype.position=function(){return this.position_},r.ByteBuffer.prototype.setPosition=function(s){this.position_=s},r.ByteBuffer.prototype.capacity=function(){return this.bytes_.length},r.ByteBuffer.prototype.readInt8=function(s){return this.readUint8(s)<<24>>24},r.ByteBuffer.prototype.readUint8=function(s){return this.bytes_[s]},r.ByteBuffer.prototype.readInt16=function(s){return this.readUint16(s)<<16>>16},r.ByteBuffer.prototype.readUint16=function(s){return this.bytes_[s]|this.bytes_[s+1]<<8},r.ByteBuffer.prototype.readInt32=function(s){return this.bytes_[s]|this.bytes_[s+1]<<8|this.bytes_[s+2]<<16|this.bytes_[s+3]<<24},r.ByteBuffer.prototype.readUint32=function(s){return this.readInt32(s)>>>0},r.ByteBuffer.prototype.readInt64=function(s){return new r.Long(this.readInt32(s),this.readInt32(s+4))},r.ByteBuffer.prototype.readUint64=function(s){return new r.Long(this.readUint32(s),this.readUint32(s+4))},r.ByteBuffer.prototype.readFloat32=function(s){return r.int32[0]=this.readInt32(s),r.float32[0]},r.ByteBuffer.prototype.readFloat64=function(s){return r.int32[r.isLittleEndian?0:1]=this.readInt32(s),r.int32[r.isLittleEndian?1:0]=this.readInt32(s+4),r.float64[0]},r.ByteBuffer.prototype.writeInt8=function(s,a){this.bytes_[s]=a},r.ByteBuffer.prototype.writeUint8=function(s,a){this.bytes_[s]=a},r.ByteBuffer.prototype.writeInt16=function(s,a){this.bytes_[s]=a,this.bytes_[s+1]=a>>8},r.ByteBuffer.prototype.writeUint16=function(s,a){this.bytes_[s]=a,this.bytes_[s+1]=a>>8},r.ByteBuffer.prototype.writeInt32=function(s,a){this.bytes_[s]=a,this.bytes_[s+1]=a>>8,this.bytes_[s+2]=a>>16,this.bytes_[s+3]=a>>24},r.ByteBuffer.prototype.writeUint32=function(s,a){this.bytes_[s]=a,this.bytes_[s+1]=a>>8,this.bytes_[s+2]=a>>16,this.bytes_[s+3]=a>>24},r.ByteBuffer.prototype.writeInt64=function(s,a){this.writeInt32(s,a.low),this.writeInt32(s+4,a.high)},r.ByteBuffer.prototype.writeUint64=function(s,a){this.writeUint32(s,a.low),this.writeUint32(s+4,a.high)},r.ByteBuffer.prototype.writeFloat32=function(s,a){r.float32[0]=a,this.writeInt32(s,r.int32[0])},r.ByteBuffer.prototype.writeFloat64=function(s,a){r.float64[0]=a,this.writeInt32(s,r.int32[r.isLittleEndian?0:1]),this.writeInt32(s+4,r.int32[r.isLittleEndian?1:0])},r.ByteBuffer.prototype.getBufferIdentifier=function(){if(this.bytes_.length<this.position_+r.SIZEOF_INT+r.FILE_IDENTIFIER_LENGTH)throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");for(var s="",a=0;a<r.FILE_IDENTIFIER_LENGTH;a++)s+=String.fromCharCode(this.readInt8(this.position_+r.SIZEOF_INT+a));return s},r.ByteBuffer.prototype.__offset=function(s,a){var i=s-this.readInt32(s);return a<this.readInt16(i)?this.readInt16(i+a):0},r.ByteBuffer.prototype.__union=function(s,a){return s.bb_pos=a+this.readInt32(a),s.bb=this,s},r.ByteBuffer.prototype.__string=function(s,a){s+=this.readInt32(s);var i=this.readInt32(s),l="",u=0;if(s+=r.SIZEOF_INT,a===r.Encoding.UTF8_BYTES)return this.bytes_.subarray(s,s+i);for(;u<i;){var h,f=this.readUint8(s+u++);if(f<192)h=f;else{var c=this.readUint8(s+u++);if(f<224)h=(31&f)<<6|63&c;else{var o=this.readUint8(s+u++);h=f<240?(15&f)<<12|(63&c)<<6|63&o:(7&f)<<18|(63&c)<<12|(63&o)<<6|63&this.readUint8(s+u++)}}h<65536?l+=String.fromCharCode(h):(h-=65536,l+=String.fromCharCode(55296+(h>>10),56320+(1023&h)))}return l},r.ByteBuffer.prototype.__indirect=function(s){return s+this.readInt32(s)},r.ByteBuffer.prototype.__vector=function(s){return s+this.readInt32(s)+r.SIZEOF_INT},r.ByteBuffer.prototype.__vector_len=function(s){return this.readInt32(s+this.readInt32(s))},r.ByteBuffer.prototype.__has_identifier=function(s){if(s.length!=r.FILE_IDENTIFIER_LENGTH)throw new Error("FlatBuffers: file identifier must be length "+r.FILE_IDENTIFIER_LENGTH);for(var a=0;a<r.FILE_IDENTIFIER_LENGTH;a++)if(s.charCodeAt(a)!=this.readInt8(this.position_+r.SIZEOF_INT+a))return!1;return!0},r.ByteBuffer.prototype.createLong=function(s,a){return r.Long.create(s,a)}}},__webpack_module_cache__={};function __webpack_require__(n){var e=__webpack_module_cache__[n];if(e!==void 0)return e.exports;var t=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n].call(t.exports,t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(n,e)=>{for(var t in e)__webpack_require__.o(e,t)&&!__webpack_require__.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},__webpack_require__.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),__webpack_require__.r=n=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(1057);return __webpack_exports__})())})(ort_webgpu_min);var ort_webgpu_minExports=ort_webgpu_min.exports;class ONNXService{session;gridSize;batchSize;channelSize;outputChannelSize;mass;fpsLimit;tensorShape;tensorSize;outputSize;outputCallback;matrixArray;isPaused;curFrameCountbyLastSecond;constructor(){this.session=null,this.matrixArray=new Float32Array,this.gridSize=[0,0],this.batchSize=0,this.tensorShape=[0,0,0,0],this.tensorSize=0,this.outputSize=0,this.isPaused=!0,this.channelSize=0,this.outputChannelSize=0,this.mass=0,this.fpsLimit=30,this.curFrameCountbyLastSecond=0}static async createService(e,t=[64,64],r=1,s=5,a=3,i=15,l="wasm"){console.log("createModelService called");const u=new ONNXService;return await u.init(e,t,r,s,a,l),u.fpsLimit=i,console.log("createModelService finished"),u}bindOutput(e){this.outputCallback=e}startSimulation(){this.isPaused=!1,this.curFrameCountbyLastSecond=0,this.fpsHeartbeat(),this.iterate()}fpsHeartbeat(){setTimeout(()=>{this.curFrameCountbyLastSecond=0,this.curFrameCountbyLastSecond>=this.fpsLimit?this.startSimulation():this.fpsHeartbeat()},1e3)}pauseSimulation(){this.isPaused=!0}async init(e,t,r,s,a,i){console.log("init called");const l=new URL(self.location.href);console.log("metaUrl",l),ort_webgpu_minExports.env.wasm.wasmPaths=l.protocol+"//"+l.host+"/",this.session=await ort_webgpu_minExports.InferenceSession.create(e,{executionProviders:[i],graphOptimizationLevel:"all"}),console.log("init session created"),this.channelSize=s,this.outputChannelSize=a,this.gridSize=t,this.batchSize=r,this.tensorShape=[r,t[0],t[1],s],this.tensorSize=r*t[0]*t[1]*s,this.outputSize=r*t[0]*t[1]*a}loadDataArray(e){if(console.log("🚀 ~ file: modelService.ts:132 ~ ModelService ~  initMatrixFromJSON ~ data:",e),this.matrixArray=new Float32Array(e.flat(3)),this.normalizeMatrix(this.matrixArray),this.matrixArray.length!==this.tensorSize)throw new Error(`matrixArray length ${this.matrixArray.length} does not match tensorSize ${this.tensorSize}`);this.matrixArray=this.matrixMap(this.matrixArray,[0,1],t=>Math.max(t,0)),this.mass=this.matrixSum(this.matrixArray,[0,1])}iterate(){if(this.session==null)throw new Error("session is null, createModelServices() must be called at first");console.log("iterate called"),console.log("this.matrixArray",this.matrixArray);const e=this.matrixSum(this.matrixArray,[1,5],s=>s**2),t=new ort_webgpu_minExports.Tensor("float32",this.matrixArray,this.tensorShape),r={};r[this.session.inputNames[0]]=t,this.session.run(r).then(s=>{if(s.Output.data instanceof Float32Array){const a=this.constrainOutput(s.Output.data,e);this.outputCallback(a),this.curFrameCountbyLastSecond++,console.log("curFrameCountbyLastSecond",this.curFrameCountbyLastSecond),this.copyOutputToMatrix(a),setTimeout(()=>{this.isPaused||(this.curFrameCountbyLastSecond>this.fpsLimit?(this.isPaused=!0,console.log("fps limit reached, pause simulation, fpsLimit:",this.fpsLimit,"curFrameCountbyLastSecond:",this.curFrameCountbyLastSecond)):this.iterate())})}}).catch(s=>{console.error("error in session.run",s),this.isPaused=!0})}normalizeMatrix(e){console.log("normalizeMatrix called");for(let t=0;t<this.channelSize;t++)e=this.normalizeMatrixChannel(e,t)}normalizeMatrixChannel(e,t){const r=this.matrixSum(e,[t,t+1],i=>i),s=this.roundFloat(r/(this.gridSize[0]*this.gridSize[1]*this.batchSize),4),a=this.roundFloat(Math.sqrt(this.matrixSum(e,[t,t+1],i=>Math.pow(i-s,2))/(this.gridSize[0]*this.gridSize[1]*this.batchSize)),4);return console.log("normalizeMatrixChannel",t,s,a),this.matrixMap(e,[t,t+1],i=>(i-s)/a)}constrainOutput(e,t){let r=this.constrainDensity(e);return r=this.constrainVelocity(r,t),r}constrainDensity(e){e=this.matrixMap(e,[0,1],s=>Math.max(s,0),!0);const t=this.matrixSum(e,[0,1],s=>s,!0),r=this.mass/t;return console.log("Scaling density, cur mass:",t,"target mass:",this.mass,"scale:",r),this.matrixMap(e,[0,1],s=>s*r,!0)}constrainVelocity(e,t){const r=this.matrixSum(e,[1,3],a=>a**2,!0),s=this.roundFloat(Math.sqrt(t/r),4);return console.log("Scaling velocity, cur energy:",r,"target energy:",t,"scale:",s),s>=1?e:this.matrixMap(e,[1,3],a=>a*s,!0)}copyOutputToMatrix(e){if(this.matrixArray.length===0)throw new Error("matrixArray is empty");let t=0,r=0,s=0;for(;t<e.length;){if(s>=3&&(s=0,r+=2,r>=this.matrixArray.length))throw new Error(`toIndex ${r} exceeds matrixArray length ${this.matrixArray.length}`);this.matrixArray[r]=e[t],t++,r++,s++}if(t!==e.length)throw new Error(`fromIndex ${t} does not match outputs length ${e.length}`);if(r+2!==this.matrixArray.length)throw new Error(`toIndex ${r} does not match matrixArray length ${this.matrixArray.length}`)}updateForce(e,t){const r=this.getIndex(e);this.matrixArray[r+3]+=t.x,this.matrixArray[r+4]+=t.y}getIndex(e,t=0){return t*this.gridSize[0]*this.gridSize[1]*this.channelSize+e.y*this.gridSize[1]*this.channelSize+e.x*this.channelSize}matrixSum(e,t,r=a=>a,s=!1){const a=s?this.outputSize:this.tensorSize,i=s?this.outputChannelSize:this.channelSize;let l=0,u=0;for(;u<a;){for(let h=t[0];h<t[1];h++)l+=r(e[u+h]);u+=i}return l}matrixMap(e,t,r,s=!1){const a=s?this.outputSize:this.tensorSize,i=s?this.outputChannelSize:this.channelSize;let l=0;for(;l<a;){for(let u=t[0];u<t[1];u++)e[l+u]=r(e[l+u]);l+=i}return e}roundFloat(e,t=4){return Math.round(e*10**t)/10**t}getInputTensor(){return this.matrixArray}getMass(){return this.mass}getInputShape(){return this.tensorShape}setMass(e){this.mass=e}getType(){return"onnx"}}class MockModelService{inputTensor;mass;shape;static createService(e,t=[64,64],r=1,s=5,a=3,i=15){return new MockModelService}constructor(e=new Float32Array,t=8,r=[5,3,4,2]){this.inputTensor=e,this.mass=t,this.shape=r}setShape(e){this.shape=e}updateForce(e,t){}startSimulation(){}pauseSimulation(){}bindOutput(e){}getInputTensor(){return this.inputTensor}loadDataArray(e){this.inputTensor=new Float32Array(e.flat(3))}getMass(){return this.mass}getInputShape(){return this.shape}setMass(e){this.mass=e}getType(){return"mock"}}async function createModelService(n,e=[64,64],t=1,r=5,s=3,a=15){console.log(n),n.startsWith("/model/")&&(n=new URL(n,self.location.href).href),console.log(n);const i=n.split(".").pop();switch(console.log(i),i){case"json":return await TfjsService.createService(n,e,t,r,s,a,await isWebGPUAvailable()?"webgpu":"webgl");case"onnx":return await ONNXService.createService(n,e,t,r,s,a);case"mock":return MockModelService.createService(n,e,t,r,s,a);default:throw new Error("Invalid model type")}}function modelSerialize(n,e){if(e==null)throw new Error("model is null, cannot serialise, check model is initialised or not");return{inputTensor:reshape(e.getInputTensor(),e.getInputShape()),mass:e.getMass(),modelType:e.getType(),modelUrl:n,time:new Date().toISOString()}}function reshape(n,e){const[t,r,s,a]=e,i=new Array(t);let l=0;for(let u=0;u<t;u++){i[u]=new Array(r);for(let h=0;h<r;h++){i[u][h]=new Array(s);for(let f=0;f<s;f++){i[u][h][f]=new Array(a);for(let c=0;c<a;c++)i[u][h][f][c]=n[l++]}}}return i}async function isWebGPUAvailable(){return"gpu"in navigator&&await navigator.gpu.requestAdapter()!==null}class AutoSaveService{saveInterval;intervalObj;maxAutoSaves;getModelSerialized;db;ready=!1;constructor(e,t=1e4,r=5){this.saveInterval=t,this.maxAutoSaves=r,this.getModelSerialized=e,this.intervalObj=void 0;const s=indexedDB.open("modelAutoSave",1);s.onupgradeneeded=()=>{const a=s.result;this.db=a;const i=this.db.createObjectStore("modelSave",{autoIncrement:!0});i.transaction.oncomplete=()=>{console.log("Successfully created object store")}},s.onsuccess=()=>{console.log("Successfully opened IndexedDB"),this.db=s.result,this.ready=!0},s.onerror=()=>{throw new Error("Failed to open IndexedDB")}}startAutoSave(){if(this.intervalObj!==null&&this.intervalObj!==void 0)throw new Error("Auto save already started");if(!this.ready)throw new Error("IndexedDB not ready");this.intervalObj=setInterval(()=>{const e=this.getModelSerialized(),t=JSON.stringify(e);console.log("saving model");const r=this.db.transaction(["modelSave"],"readwrite");r.onerror=()=>{throw new Error("Failed to open transaction")};const s=r.objectStore("modelSave"),a=s.add(t);a.onsuccess=()=>{console.log("successfully saved model")},a.onerror=()=>{throw new Error("Failed to save model")};const i=s.count();i.onsuccess=()=>{const l=i.result;if(console.log("count",l),l>this.maxAutoSaves){console.log("deleting old model");const u=s.getAllKeys();u.onsuccess=()=>{const h=u.result;console.log("keys",h);const f=h.slice(0,l-this.maxAutoSaves);console.log("keysToDelete",f),f.forEach(c=>{const o=s.delete(c);o.onsuccess=()=>{console.log("successfully deleted model")},o.onerror=()=>{throw new Error("Failed to delete model")}})}}},i.onerror=()=>{throw new Error("Failed to count models")},r.oncomplete=()=>{console.log("Successfully saved model and possibly deleted old models")}},this.saveInterval)}pauseAutoSave(){setTimeout(()=>{console.log("pausing auto save"),clearInterval(this.intervalObj),this.intervalObj=void 0},0)}close(){this.db.close()}}let modelService=null,autoSaveService=null,modelUrl="";function onmessage(n){const e=n.data;if(e==null)throw new Error("data is null");if(e.func==null)throw new Error("data.type is null");switch(console.log("worker received message",e),e.func){case"init":if(modelService==null){const[t,r]=e.args;modelUrl=r,getServiceFromInitCond(this,t,r).then(s=>{modelService=s,autoSaveService=new AutoSaveService(()=>modelSerialize(r,modelService)),this.postMessage({type:"init",success:!0})}).catch(s=>{console.error("error in createNewModelService",s)})}break;case"start":if(modelService==null)throw new Error("modelService is null");if(modelService.startSimulation(),autoSaveService!=null)try{autoSaveService.startAutoSave()}catch(t){if(t.message==="IndexedDB not ready")setTimeout(()=>{autoSaveService?.startAutoSave()},500);else throw t}break;case"pause":if(modelService==null)throw new Error("modelService is null");modelService.pauseSimulation(),autoSaveService?.pauseAutoSave();break;case"updateForce":updateForce(e.args);break;case"getInputTensor":if(modelService==null)throw new Error("modelService is null");this.postMessage({type:"inputTensor",tensor:modelService.getInputTensor()});break;case"serialize":this.postMessage({type:"modelSave",save:workerSerialize()});break;case"deserialize":{const t=JSON.parse(e.args);getServiceFromSave(this,t).then(r=>{modelService=r,console.log("successfully restored model service with",r),this.postMessage({type:"deserialize",success:!0})}).catch(r=>{throw new Error(`something went wrong with deserialisation ${r}`)});break}default:throw new Error(`unknown func ${e.func}`)}}function updateForce(n){if(modelService==null)throw new Error("modelService is null");modelService.updateForce(n.loc,n.forceDelta)}self.onmessage=onmessage;function workerSerialize(){if(modelService==null)throw new Error("modelService is null, cannot serialise");const e=modelSerialize(modelUrl,modelService);if(e==null)throw new Error("something went wrong during model serialisation");return e}async function getServiceFromSave(n,e){console.log("restoring model service from",e);const t=await createModelService(e.modelUrl,[64,64],1);return modelUrl=e.modelUrl,bindCallback(n,t),t.loadDataArray(e.inputTensor),t.setMass(e.mass),t}async function getServiceFromInitCond(n,e,t){const r=await createModelService(t,[64,64],1);if(bindCallback(n,r),!e.startsWith("/initData/")||!e.endsWith(".json"))throw new Error(`invalid data path ${e}`);const s=await fetch(e);if(!s.ok)throw new Error(`failed to fetch data from ${e}`);const a=s.headers.get("content-type");if(a!=null&&!a.startsWith("application/json"))throw new Error(`invalid content type ${a}`);const i=await s.json();return r.loadDataArray(i),r}function bindCallback(n,e){const t=r=>{const s=new Float32Array(r.length/3);for(let a=0;a<s.length;a++)s[a]=r[a*3];n.postMessage({type:"output",density:s})};e.bindOutput(t)}})();
